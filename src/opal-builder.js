Opal.modules["opal/regexp_anchors"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $const_set = Opal.const_set;

  Opal.add_stubs('new');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set(self, 'REGEXP_START', "^");
    $const_set(self, 'REGEXP_END', "$");
    $const_set(self, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    $const_set(self, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    $const_set(self, 'INLINE_IDENTIFIER_REGEXP', $$('Regexp').$new("[^" + ($$$(self, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($$$(self, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));
    $const_set(self, 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    return $const_set(self, 'CONST_NAME_REGEXP', $$('Regexp').$new("" + ($$$(self, 'REGEXP_START')) + "(::)?[A-Z][^" + ($$$(self, 'FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($$$(self, 'REGEXP_END'))));
  })($nesting[0], $nesting)
};

Opal.modules["corelib/comparable"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var nil = Opal.nil, $$$ = Opal.$$$, $truthy = Opal.truthy, $module = Opal.module, $rb_gt = Opal.rb_gt, $rb_lt = Opal.rb_lt, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $def = Opal.def;

  Opal.add_stubs('>,<,===,raise,class,<=>,equal?');
  return (function($base) {
    var self = $module($base, 'Comparable');

    var $ret_or_1 = nil;

    
    
    function normalize(what) {
      if (Opal.is_a(what, Opal.Integer)) { return what; }

      if ($rb_gt(what, 0)) { return 1; }
      if ($rb_lt(what, 0)) { return -1; }
      return 0;
    }

    function fail_comparison(lhs, rhs) {
      var class_name;
      (($eqeqeq(nil, ($ret_or_1 = rhs)) || (($eqeqeq(true, $ret_or_1) || (($eqeqeq(false, $ret_or_1) || (($eqeqeq($$$('Integer'), $ret_or_1) || ($eqeqeq($$$('Float'), $ret_or_1))))))))) ? (class_name = rhs.$inspect()) : (class_name = rhs.$$class))
      $Kernel.$raise($$$('ArgumentError'), "comparison of " + ((lhs).$class()) + " with " + (class_name) + " failed")
    }

    function cmp_or_fail(lhs, rhs) {
      var cmp = (lhs)['$<=>'](rhs);
      if (!$truthy(cmp)) fail_comparison(lhs, rhs);
      return normalize(cmp);
    }
  ;
    
    $def(self, '$==', function $Comparable_$eq_eq$1(other) {
      var self = this, cmp = nil;

      
      if ($truthy(self['$equal?'](other))) {
        return true
      };
      
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
      if (!$truthy((cmp = self['$<=>'](other)))) {
        return false
      };
      return normalize(cmp) == 0;;
    }, 1);
    
    $def(self, '$>', function $Comparable_$gt$2(other) {
      var self = this;

      return cmp_or_fail(self, other) > 0;
    }, 1);
    
    $def(self, '$>=', function $Comparable_$gt_eq$3(other) {
      var self = this;

      return cmp_or_fail(self, other) >= 0;
    }, 1);
    
    $def(self, '$<', function $Comparable_$lt$4(other) {
      var self = this;

      return cmp_or_fail(self, other) < 0;
    }, 1);
    
    $def(self, '$<=', function $Comparable_$lt_eq$5(other) {
      var self = this;

      return cmp_or_fail(self, other) <= 0;
    }, 1);
    
    $def(self, '$between?', function $Comparable_between$ques$6(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false
      };
      if ($rb_gt(self, max)) {
        return false
      };
      return true;
    }, 2);
    return $def(self, '$clamp', function $$clamp(min, max) {
      var self = this;

      
      
      if (max == null) max = nil;;
      
      var c, excl;

      if (max === nil) {
        // We are dealing with a new Ruby 2.7 behaviour that we are able to
        // provide a single Range argument instead of 2 Comparables.

        if (!Opal.is_a(min, Opal.Range)) {
          $Kernel.$raise($$$('TypeError'), "wrong argument type " + (min.$class()) + " (expected Range)")
        }

        excl = min.excl;
        max = min.end;
        min = min.begin;

        if (max !== nil && excl) {
          $Kernel.$raise($$$('ArgumentError'), "cannot clamp with an exclusive range")
        }
      }

      if (min !== nil && max !== nil && cmp_or_fail(min, max) > 0) {
        $Kernel.$raise($$$('ArgumentError'), "min argument must be smaller than max argument")
      }

      if (min !== nil) {
        c = cmp_or_fail(self, min);

        if (c == 0) return self;
        if (c < 0) return min;
      }

      if (max !== nil) {
        c = cmp_or_fail(self, max);

        if (c > 0) return max;
      }

      return self;
    ;
    }, -2);
  })('::')
};

Opal.modules["pathname"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $const_set = Opal.const_set, $regexp = Opal.regexp, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $def = Opal.def, $defs = Opal.defs, $to_ary = Opal.to_ary, $send = Opal.send, $to_a = Opal.to_a, $neqeq = Opal.neqeq, $rb_plus = Opal.rb_plus, $not = Opal.not, $alias = Opal.alias, $module = Opal.module;

  Opal.add_stubs('require,include,quote,===,to_s,path,respond_to?,to_path,is_a?,nil?,raise,class,==,new,pwd,attr_reader,!,relative?,chop_basename,basename,=~,source,[],rindex,sub,absolute?,expand_path,plus,unshift,length,!=,empty?,first,shift,+,join,dirname,pop,reverse_each,directory?,extname,<=>,nonzero?,proc,casecmp,cleanpath,inspect,include?,fill,map,entries');
  
  self.$require("corelib/comparable");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Pathname');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.path = nil;
    
    self.$include($$('Comparable'));
    $const_set($nesting[0], 'SEPARATOR_PAT', $regexp([$$('Regexp').$quote($$$($$('File'), 'SEPARATOR'))]));
    
    $def(self, '$initialize', function $$initialize(path) {
      var self = this;

      
      if ($eqeqeq($$('Pathname'), path)) {
        self.path = path.$path().$to_s()
      } else if ($truthy(path['$respond_to?']("to_path"))) {
        self.path = path.$to_path()
      } else if ($truthy(path['$is_a?']($$('String')))) {
        self.path = path
      } else if ($truthy(path['$nil?']())) {
        self.$raise($$('TypeError'), "no implicit conversion of nil into String")
      } else {
        self.$raise($$('TypeError'), "no implicit conversion of " + (path.$class()) + " into String")
      };
      if ($eqeq(self.path, "\u0000")) {
        return self.$raise($$('ArgumentError'))
      } else {
        return nil
      };
    }, 1);
    $defs(self, '$pwd', function $$pwd() {
      var self = this;

      return self.$new($$('Dir').$pwd())
    }, 0);
    self.$attr_reader("path");
    
    $def(self, '$==', function $Pathname_$eq_eq$1(other) {
      var self = this;

      return other.$path()['$=='](self.path)
    }, 1);
    
    $def(self, '$absolute?', function $Pathname_absolute$ques$2() {
      var self = this;

      return self['$relative?']()['$!']()
    }, 0);
    
    $def(self, '$relative?', function $Pathname_relative$ques$3() {
      var $a, $b, $c, self = this, path = nil, r = nil;

      
      path = self.path;
      while ($truthy((r = self.$chop_basename(path)))) {
        $c = r, $b = $to_ary($c), (path = ($b[0] == null ? nil : $b[0])), $c
      };
      return path['$==']("");
    }, 0);
    
    $def(self, '$chop_basename', function $$chop_basename(path) {
      var base = nil;

      
      base = $$('File').$basename(path);
      if ($truthy($$('Regexp').$new("^" + ($$$($$('Pathname'), 'SEPARATOR_PAT').$source()) + "?$")['$=~'](base))) {
        return nil
      } else {
        return [path['$[]'](0, path.$rindex(base)), base]
      };
    }, 1);
    
    $def(self, '$root?', function $Pathname_root$ques$4() {
      var self = this;

      return self.path['$==']("/")
    }, 0);
    
    $def(self, '$parent', function $$parent() {
      var self = this, new_path = nil;

      
      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if ($eqeq(new_path, "")) {
        new_path = ($truthy(self['$absolute?']()) ? ("/") : ("."))
      };
      return $$('Pathname').$new(new_path);
    }, 0);
    
    $def(self, '$sub', function $$sub($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments);
      
      args = $post_args;;
      return $$('Pathname').$new($send(self.path, 'sub', $to_a(args)));
    }, -1);
    
    $def(self, '$cleanpath', function $$cleanpath() {
      var self = this;

      return Opal.normalize(self.path)
    }, 0);
    
    $def(self, '$to_path', function $$to_path() {
      var self = this;

      return self.path
    }, 0);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return self.path
    }, 0);
    
    $def(self, '$expand_path', function $$expand_path() {
      var self = this;

      return $$('Pathname').$new($$('File').$expand_path(self.path))
    }, 0);
    
    $def(self, '$+', function $Pathname_$plus$5(other) {
      var self = this;

      
      if (!$eqeqeq($$('Pathname'), other)) {
        other = $$('Pathname').$new(other)
      };
      return $$('Pathname').$new(self.$plus(self.path, other.$to_s()));
    }, 1);
    
    $def(self, '$plus', function $$plus(path1, path2) {
      var $a, $b, $c, self = this, prefix2 = nil, index_list2 = nil, basename_list2 = nil, r2 = nil, basename2 = nil, prefix1 = nil, $ret_or_1 = nil, r1 = nil, basename1 = nil, suffix2 = nil;

      
      prefix2 = path2;
      index_list2 = [];
      basename_list2 = [];
      while ($truthy((r2 = self.$chop_basename(prefix2)))) {
        
        $c = r2, $b = $to_ary($c), (prefix2 = ($b[0] == null ? nil : $b[0])), (basename2 = ($b[1] == null ? nil : $b[1])), $c;
        index_list2.$unshift(prefix2.$length());
        basename_list2.$unshift(basename2);
      };
      if ($neqeq(prefix2, "")) {
        return path2
      };
      prefix1 = path1;
      while ($truthy(true)) {
        
        while ($truthy(($truthy(($ret_or_1 = basename_list2['$empty?']()['$!']())) ? (basename_list2.$first()['$=='](".")) : ($ret_or_1)))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        };
        if (!$truthy((r1 = self.$chop_basename(prefix1)))) {
          break;
        };
        $c = r1, $b = $to_ary($c), (prefix1 = ($b[0] == null ? nil : $b[0])), (basename1 = ($b[1] == null ? nil : $b[1])), $c;
        if ($eqeq(basename1, ".")) {
          continue;
        };
        if ((($eqeq(basename1, "..") || ($truthy(basename_list2['$empty?']()))) || ($neqeq(basename_list2.$first(), "..")))) {
          
          prefix1 = $rb_plus(prefix1, basename1);
          break;;
        };
        index_list2.$shift();
        basename_list2.$shift();
      };
      r1 = self.$chop_basename(prefix1);
      if (($not(r1) && ($truthy($regexp([$$('SEPARATOR_PAT')])['$=~']($$('File').$basename(prefix1)))))) {
        while ($truthy(($truthy(($ret_or_1 = basename_list2['$empty?']()['$!']())) ? (basename_list2.$first()['$==']("..")) : ($ret_or_1)))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        }
      };
      if ($not(basename_list2['$empty?']())) {
        
        suffix2 = path2['$[]'](Opal.Range.$new(index_list2.$first(), -1, false));
        if ($truthy(r1)) {
          return $$('File').$join(prefix1, suffix2)
        } else {
          return $rb_plus(prefix1, suffix2)
        };
      } else if ($truthy(r1)) {
        return prefix1
      } else {
        return $$('File').$dirname(prefix1)
      };
    }, 2);
    
    $def(self, '$join', function $$join($a) {try {

      var $post_args, args, self = this, result = nil;

      
      
      $post_args = Opal.slice.call(arguments);
      
      args = $post_args;;
      if ($truthy(args['$empty?']())) {
        return self
      };
      result = args.$pop();
      if (!$eqeqeq($$('Pathname'), result)) {
        result = $$('Pathname').$new(result)
      };
      if ($truthy(result['$absolute?']())) {
        return result
      };
      $send(args, 'reverse_each', [], function $$6(arg){
        
        
        if (arg == null) arg = nil;;
        if (!$eqeqeq($$('Pathname'), arg)) {
          arg = $$('Pathname').$new(arg)
        };
        result = $rb_plus(arg, result);
        if ($truthy(result['$absolute?']())) {
          Opal.ret(result)
        } else {
          return nil
        };}, 1);
      return $rb_plus(self, result);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, -1);
    
    $def(self, '$split', function $$split() {
      var self = this;

      return [self.$dirname(), self.$basename()]
    }, 0);
    
    $def(self, '$dirname', function $$dirname() {
      var self = this;

      return $$('Pathname').$new($$('File').$dirname(self.path))
    }, 0);
    
    $def(self, '$basename', function $$basename() {
      var self = this;

      return $$('Pathname').$new($$('File').$basename(self.path))
    }, 0);
    
    $def(self, '$directory?', function $Pathname_directory$ques$7() {
      var self = this;

      return $$('File')['$directory?'](self.path)
    }, 0);
    
    $def(self, '$extname', function $$extname() {
      var self = this;

      return $$('File').$extname(self.path)
    }, 0);
    
    $def(self, '$<=>', function $Pathname_$lt_eq_gt$8(other) {
      var self = this;

      return self.$path()['$<=>'](other.$path())
    }, 1);
    $const_set($nesting[0], 'SAME_PATHS', ($truthy($$$($$('File'), 'FNM_SYSCASE')['$nonzero?']()) ? ($send(self, 'proc', [], function $Pathname$9(a, b){
      
      
      if (a == null) a = nil;;
      
      if (b == null) b = nil;;
      return a.$casecmp(b)['$=='](0);}, 2)) : ($send(self, 'proc', [], function $Pathname$10(a, b){
      
      
      if (a == null) a = nil;;
      
      if (b == null) b = nil;;
      return a['$=='](b);}, 2))));
    
    $def(self, '$relative_path_from', function $$relative_path_from(base_directory) {
      var $a, $b, $c, self = this, dest_directory = nil, dest_prefix = nil, dest_names = nil, r = nil, basename = nil, base_prefix = nil, base_names = nil, $ret_or_1 = nil, $ret_or_2 = nil, relpath_names = nil;

      
      dest_directory = self.$cleanpath().$to_s();
      base_directory = base_directory.$cleanpath().$to_s();
      dest_prefix = dest_directory;
      dest_names = [];
      while ($truthy((r = self.$chop_basename(dest_prefix)))) {
        
        $c = r, $b = $to_ary($c), (dest_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($neqeq(basename, ".")) {
          dest_names.$unshift(basename)
        };
      };
      base_prefix = base_directory;
      base_names = [];
      while ($truthy((r = self.$chop_basename(base_prefix)))) {
        
        $c = r, $b = $to_ary($c), (base_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($neqeq(basename, ".")) {
          base_names.$unshift(basename)
        };
      };
      if (!$truthy($$('SAME_PATHS')['$[]'](dest_prefix, base_prefix))) {
        self.$raise($$('ArgumentError'), "different prefix: " + (dest_prefix.$inspect()) + " and " + (base_directory.$inspect()))
      };
      while ($truthy(($truthy(($ret_or_1 = ($truthy(($ret_or_2 = dest_names['$empty?']()['$!']())) ? (base_names['$empty?']()['$!']()) : ($ret_or_2)))) ? ($$('SAME_PATHS')['$[]'](dest_names.$first(), base_names.$first())) : ($ret_or_1)))) {
        
        dest_names.$shift();
        base_names.$shift();
      };
      if ($truthy(base_names['$include?'](".."))) {
        self.$raise($$('ArgumentError'), "base_directory has ..: " + (base_directory.$inspect()))
      };
      base_names.$fill("..");
      relpath_names = $rb_plus(base_names, dest_names);
      if ($truthy(relpath_names['$empty?']())) {
        return $$('Pathname').$new(".")
      } else {
        return $$('Pathname').$new($send($$('File'), 'join', $to_a(relpath_names)))
      };
    }, 1);
    
    $def(self, '$entries', function $$entries() {
      var self = this;

      return $send($$('Dir').$entries(self.path), 'map', [], function $$11(f){var self = $$11.$$s == null ? this : $$11.$$s;

        
        
        if (f == null) f = nil;;
        return self.$class().$new(f);}, {$$arity: 1, $$s: self})
    }, 0);
    $alias(self, "===", "==");
    $alias(self, "eql?", "==");
    $alias(self, "to_s", "to_path");
    return $alias(self, "to_str", "to_path");
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$Pathname', function $$Pathname(path) {
      
      return $$('Pathname').$new(path)
    }, 1)
  })($nesting[0], $nesting);
};

Opal.modules["opal/hike"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $def = Opal.def, $truthy = Opal.truthy, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $to_ary = Opal.to_ary, $regexp = Opal.regexp, $rb_plus = Opal.rb_plus;

  Opal.add_stubs('require,attr_reader,freeze,dup,map,new,to_s,sub,=~,find_in_base_path,find_in_paths,[],directory?,sort,reject,entries,[]=,-,key?,exist?,stat,protected,is_a?,last,pop,split,each,match,join,to_proc,paths_contain?,pattern_for,select,sort_matches,file?,any?,paths,==,length,build_pattern_for,extensions,escape,sort_by,scan,inject,index,+,expand_path,concat,normalize_path,normalize_extension,find,root,private,start_with?,relative?');
  
  self.$require("pathname");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Hike');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Index');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.root = $proto.entries = $proto.stats = $proto.pathnames = $proto.patterns = nil;
        
        self.$attr_reader("paths");
        self.$attr_reader("extensions");
        
        $def(self, '$initialize', function $$initialize(root, paths, extensions) {
          var self = this;

          
          self.root = root;
          self.paths = paths.$dup().$freeze();
          self.extensions = extensions.$dup().$freeze();
          self.pathnames = $send(paths, 'map', [], function $$1(path){
            
            
            if (path == null) path = nil;;
            return $$('Pathname').$new(path);}, 1);
          self.stats = $hash2([], {});
          self.entries = $hash2([], {});
          return (self.patterns = $hash2([], {}));
        }, 3);
        
        $def(self, '$root', function $$root() {
          var self = this;

          return self.root.$to_s()
        }, 0);
        
        $def(self, '$index', function $$index() {
          var self = this;

          return self
        }, 0);
        
        $def(self, '$find', function $$find(logical_path) {try {

          var self = this, base_path = nil;

          
          base_path = $$('Pathname').$new(self.root);
          logical_path = $$('Pathname').$new(logical_path.$sub(/^\//, ""));
          if ($truthy(logical_path.$to_s()['$=~'](/^\.\.?\//))) {
            $send(self, 'find_in_base_path', [logical_path, base_path], function $$2(path){
              
              
              if (path == null) path = nil;;
              Opal.ret(path);}, 1)
          } else {
            $send(self, 'find_in_paths', [logical_path], function $$3(path){
              
              
              if (path == null) path = nil;;
              Opal.ret(path);}, 1)
          };
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, 1);
        
        $def(self, '$entries', function $$entries(path) {
          var self = this, $ret_or_1 = nil, $writer = nil, pathname = nil;

          if ($truthy(($ret_or_1 = self.entries['$[]'](path.$to_s())))) {
            return $ret_or_1
          } else {
            
            $writer = [path.$to_s(), ((pathname = $$('Pathname').$new(path)), ($truthy(pathname['$directory?']()) ? ($send(pathname.$entries(), 'reject', [], function $$4(entry){
              
              
              if (entry == null) entry = nil;;
              return entry.$to_s()['$=~'](/^\.|~$|^\#.*\#$/);}, 1).$sort()) : ([])))];
            $send(self.entries, '[]=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }
        }, 1);
        
        $def(self, '$stat', function $$stat(path) {
          var self = this, key = nil, $writer = nil;

          
          key = path.$to_s();
          if ($truthy(self.stats['$key?'](key))) {
            return self.stats['$[]'](key)
          } else if ($truthy($$('File')['$exist?'](path))) {
            
            $writer = [key, $$('File').$stat(path)];
            $send(self.stats, '[]=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            
            $writer = [key, nil];
            $send(self.stats, '[]=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          };
        }, 1);
        self.$protected();
        
        $def(self, '$extract_options!', function $Index_extract_options$excl$5(arguments$) {
          
          if ($truthy(arguments$.$last()['$is_a?']($$('Hash')))) {
            return arguments$.$pop().$dup()
          } else {
            return $hash2([], {})
          }
        }, 1);
        
        $def(self, '$find_in_paths', function $$find_in_paths(logical_path) {
          var block = $$find_in_paths.$$p || nil, $a, $b, self = this, dirname = nil, basename = nil;

          delete $$find_in_paths.$$p;
          
          ;
          $b = logical_path.$split(), $a = $to_ary($b), (dirname = ($a[0] == null ? nil : $a[0])), (basename = ($a[1] == null ? nil : $a[1])), $b;
          return $send(self.pathnames, 'each', [], function $$6(base_path){var self = $$6.$$s == null ? this : $$6.$$s;

            
            
            if (base_path == null) base_path = nil;;
            return $send(self, 'match', [base_path.$join(dirname), basename], block.$to_proc());}, {$$arity: 1, $$s: self});
        }, 1);
        
        $def(self, '$find_in_base_path', function $$find_in_base_path(logical_path, base_path) {
          var block = $$find_in_base_path.$$p || nil, $a, $b, self = this, candidate = nil, dirname = nil, basename = nil;

          delete $$find_in_base_path.$$p;
          
          ;
          candidate = base_path.$join(logical_path);
          $b = candidate.$split(), $a = $to_ary($b), (dirname = ($a[0] == null ? nil : $a[0])), (basename = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(self['$paths_contain?'](dirname))) {
            return $send(self, 'match', [dirname, basename], block.$to_proc())
          } else {
            return nil
          };
        }, 2);
        
        $def(self, '$match', function $$match(dirname, basename) {
          var $yield = $$match.$$p || nil, self = this, matches = nil, pattern = nil;

          delete $$match.$$p;
          
          matches = self.$entries(dirname);
          pattern = self.$pattern_for(basename);
          matches = $send(matches, 'select', [], function $$7(m){
            
            
            if (m == null) m = nil;;
            return m.$to_s()['$=~'](pattern);}, 1);
          return $send(self.$sort_matches(matches, basename), 'each', [], function $$8(path){var self = $$8.$$s == null ? this : $$8.$$s, pathname = nil, stat = nil;

            
            
            if (path == null) path = nil;;
            pathname = dirname.$join(path);
            stat = self.$stat(pathname);
            if (($truthy(stat) && ($truthy(stat['$file?']())))) {
              return Opal.yield1($yield, pathname.$to_s());
            } else {
              return nil
            };}, {$$arity: 1, $$s: self});
        }, 2);
        
        $def(self, '$paths_contain?', function $Index_paths_contain$ques$9(dirname) {
          var self = this;

          return $send(self.$paths(), 'any?', [], function $$10(path){
            
            
            if (path == null) path = nil;;
            return dirname.$to_s()['$[]'](0, path.$length())['$=='](path);}, 1)
        }, 1);
        
        $def(self, '$pattern_for', function $$pattern_for(basename) {
          var self = this, $ret_or_1 = nil, $writer = nil;

          if ($truthy(($ret_or_1 = self.patterns['$[]'](basename)))) {
            return $ret_or_1
          } else {
            
            $writer = [basename, self.$build_pattern_for(basename)];
            $send(self.patterns, '[]=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }
        }, 1);
        
        $def(self, '$build_pattern_for', function $$build_pattern_for(basename) {
          var self = this, extension_pattern = nil;

          
          extension_pattern = $send(self.$extensions(), 'map', [], function $$11(e){
            
            
            if (e == null) e = nil;;
            return $$('Regexp').$escape(e);}, 1).$join("|");
          return $regexp(["^", basename, "(?:", extension_pattern, ")*$"]);
        }, 1);
        return $def(self, '$sort_matches', function $$sort_matches(matches, basename) {
          var self = this;

          return $send(matches, 'sort_by', [], function $$12(match){var self = $$12.$$s == null ? this : $$12.$$s, extnames = nil;

            
            
            if (match == null) match = nil;;
            extnames = match.$sub(basename.$to_s(), "").$to_s().$scan(/\.[^.]+/);
            return $send(extnames, 'inject', [0], function $$13(sum, ext){var self = $$13.$$s == null ? this : $$13.$$s, index = nil;

              
              
              if (sum == null) sum = nil;;
              
              if (ext == null) ext = nil;;
              index = self.$extensions().$index(ext);
              if ($truthy(index)) {
                return $rb_plus($rb_plus(sum, index), 1)
              } else {
                return sum
              };}, {$$arity: 2, $$s: self});}, {$$arity: 1, $$s: self})
        }, 2);
      })($nesting[0], null, $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Trail');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.root = $proto.paths = $proto.extensions = nil;
        
        self.$attr_reader("paths");
        self.$attr_reader("extensions");
        
        $def(self, '$initialize', function $$initialize(root) {
          var self = this;

          
          
          if (root == null) root = ".";;
          self.root = $$('Pathname').$new(root).$expand_path();
          self.paths = [];
          return (self.extensions = []);
        }, -1);
        
        $def(self, '$root', function $$root() {
          var self = this;

          return self.root.$to_s()
        }, 0);
        
        $def(self, '$append_paths', function $$append_paths($a) {
          var $post_args, paths, self = this;

          
          
          $post_args = Opal.slice.call(arguments);
          
          paths = $post_args;;
          return self.paths.$concat($send(paths, 'map', [], function $$14(p){var self = $$14.$$s == null ? this : $$14.$$s;

            
            
            if (p == null) p = nil;;
            return self.$normalize_path(p);}, {$$arity: 1, $$s: self}));
        }, -1);
        
        $def(self, '$append_extensions', function $$append_extensions($a) {
          var $post_args, extensions, self = this;

          
          
          $post_args = Opal.slice.call(arguments);
          
          extensions = $post_args;;
          return self.extensions.$concat($send(extensions, 'map', [], function $$15(e){var self = $$15.$$s == null ? this : $$15.$$s;

            
            
            if (e == null) e = nil;;
            return self.$normalize_extension(e);}, {$$arity: 1, $$s: self}));
        }, -1);
        
        $def(self, '$find', function $$find($a) {
          var block = $$find.$$p || nil, $post_args, args, self = this;

          delete $$find.$$p;
          
          ;
          
          $post_args = Opal.slice.call(arguments);
          
          args = $post_args;;
          return $send(self.$index(), 'find', $to_a(args), block.$to_proc());
        }, -1);
        
        $def(self, '$index', function $$index() {
          var self = this;

          return $$('Index').$new(self.$root(), self.$paths(), self.$extensions())
        }, 0);
        
        $def(self, '$entries', function $$entries(path) {
          var pathname = nil;

          
          pathname = $$('Pathname').$new(path);
          if ($truthy(pathname['$directory?']())) {
            return $send(pathname.$entries(), 'reject', [], function $$16(entry){
              
              
              if (entry == null) entry = nil;;
              return entry.$to_s()['$=~'](/^\.|~$|^\#.*\#$/);}, 1).$sort()
          } else {
            return []
          };
        }, 1);
        
        $def(self, '$stat', function $$stat(path) {
          
          if ($truthy($$('File')['$exist?'](path))) {
            return $$('File').$stat(path.$to_s())
          } else {
            return nil
          }
        }, 1);
        self.$private();
        
        $def(self, '$normalize_extension', function $$normalize_extension(ext) {
          
          if ($truthy(ext['$start_with?']("."))) {
            return ext
          } else {
            return "." + (ext)
          }
        }, 1);
        return $def(self, '$normalize_path', function $$normalize_path(path) {
          var self = this;

          
          path = $$('Pathname').$new(path);
          if ($truthy(path['$relative?']())) {
            path = self.root.$join(path)
          };
          return path.$expand_path().$to_s();
        }, 1);
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/path_reader"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $regexp = Opal.regexp, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, $truthy = Opal.truthy;

  Opal.add_stubs('require,freeze,quote,paths,new,append_paths,append_extensions,expand,nil?,exist?,open,to_proc,=~,absolute?,find_path,file_finder,extensions,private,Pathname,find,attr_reader');
  
  self.$require("opal/regexp_anchors");
  self.$require("opal/hike");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'PathReader');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.file_finder = nil;
      
      $const_set($nesting[0], 'RELATIVE_PATH_REGEXP', $regexp([$$$($$('Opal'), 'REGEXP_START'), "\\.?\\.", $$('Regexp').$quote($$$($$('File'), 'SEPARATOR'))]).$freeze());
      $const_set($nesting[0], 'DEFAULT_EXTENSIONS', [".js", ".js.rb", ".rb", ".opalerb"].$freeze());
      
      $def(self, '$initialize', function $$initialize(paths, extensions) {
        var self = this;

        
        
        if (paths == null) paths = $$('Opal').$paths();;
        
        if (extensions == null) extensions = $$('DEFAULT_EXTENSIONS');;
        self.file_finder = $$$($$('Hike'), 'Trail').$new();
        $send(self.file_finder, 'append_paths', $to_a(paths));
        return $send(self.file_finder, 'append_extensions', $to_a(extensions));
      }, -1);
      
      $def(self, '$read', function $$read(path) {
        var self = this, full_path = nil;

        
        full_path = self.$expand(path);
        if ($truthy(full_path['$nil?']())) {
          return nil
        };
        if ($truthy($$('File')['$exist?'](full_path))) {
          return $send($$('File'), 'open', [full_path, "rb:UTF-8"], "read".$to_proc())
        } else {
          return nil
        };
      }, 1);
      
      $def(self, '$expand', function $$expand(path) {
        var self = this;

        if (($truthy($$('Pathname').$new(path)['$absolute?']()) || ($truthy(path['$=~']($$('RELATIVE_PATH_REGEXP')))))) {
          return path
        } else {
          return self.$find_path(path)
        }
      }, 1);
      
      $def(self, '$paths', function $$paths() {
        var self = this;

        return self.$file_finder().$paths()
      }, 0);
      
      $def(self, '$extensions', function $$extensions() {
        var self = this;

        return self.$file_finder().$extensions()
      }, 0);
      
      $def(self, '$append_paths', function $$append_paths($a) {
        var $post_args, paths, self = this;

        
        
        $post_args = Opal.slice.call(arguments);
        
        paths = $post_args;;
        return $send(self.$file_finder(), 'append_paths', $to_a(paths));
      }, -1);
      self.$private();
      
      $def(self, '$find_path', function $$find_path(path) {
        var self = this, pathname = nil;

        
        pathname = self.$Pathname(path);
        if (($truthy(pathname['$absolute?']()) && ($truthy(pathname['$exist?']())))) {
          return path
        };
        return self.$file_finder().$find(path);
      }, 1);
      return self.$attr_reader("file_finder");
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/paths"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $defs = Opal.defs, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus;

  Opal.add_stubs('expand_path,append_paths,concat,require_paths_for_gem,private,find_by_name,raise,each,runtime_dependencies,+,name,gem_dir,map,require_paths,<<,join,extend,freeze,core_dir,std_dir,reset_paths!');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$gem_dir', function $$gem_dir() {
      
      return $$('File').$expand_path("../..", "opal/paths.rb")
    }, 0);
    $defs(self, '$core_dir', function $$core_dir() {
      
      return $$('File').$expand_path("../../../opal", "opal/paths.rb")
    }, 0);
    $defs(self, '$std_dir', function $$std_dir() {
      
      return $$('File').$expand_path("../../../stdlib", "opal/paths.rb")
    }, 0);
    $defs(self, '$append_path', function $$append_path(path) {
      var self = this;

      return self.$append_paths(path)
    }, 1);
    $defs(self, '$append_paths', function $$append_paths($a) {
      var $post_args, paths, self = this;
      if (self.paths == null) self.paths = nil;

      
      
      $post_args = Opal.slice.call(arguments);
      
      paths = $post_args;;
      self.paths.$concat(paths);
      return nil;
    }, -1);
    (function($base, $parent_nesting) {
      var self = $module($base, 'UseGem');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$use_gem', function $$use_gem(gem_name, include_dependencies) {
        var self = this;

        
        
        if (include_dependencies == null) include_dependencies = true;;
        return $send(self, 'append_paths', $to_a(self.$require_paths_for_gem(gem_name, include_dependencies)));
      }, -2);
      self.$private();
      return $def(self, '$require_paths_for_gem', function $$require_paths_for_gem(gem_name, include_dependencies) {
        var self = this, paths = nil, spec = nil, gem_dir = nil;

        
        paths = [];
        spec = $$$($$('Gem'), 'Specification').$find_by_name(gem_name);
        if (!$truthy(spec)) {
          self.$raise($$('GemNotFound'), gem_name)
        };
        if ($truthy(include_dependencies)) {
          $send(spec.$runtime_dependencies(), 'each', [], function $$1(dependency){var self = $$1.$$s == null ? this : $$1.$$s;

            
            
            if (dependency == null) dependency = nil;;
            return (paths = $rb_plus(paths, self.$require_paths_for_gem(dependency.$name(), include_dependencies)));}, {$$arity: 1, $$s: self})
        };
        gem_dir = spec.$gem_dir();
        $send(spec.$require_paths(), 'map', [], function $$2(path){
          
          
          if (path == null) path = nil;;
          return paths['$<<']($$('File').$join(gem_dir, path));}, 1);
        return paths;
      }, 2);
    })($nesting[0], $nesting);
    self.$extend($$('UseGem'));
    $defs(self, '$paths', function $$paths() {
      var self = this;
      if (self.paths == null) self.paths = nil;

      return self.paths.$freeze()
    }, 0);
    $defs(self, '$reset_paths!', function $Opal_reset_paths$excl$3() {
      var self = this;

      
      self.paths = [self.$core_dir(), self.$std_dir(), self.$gem_dir()];
      nil;
      return nil;
    }, 0);
    return self['$reset_paths!']();
  })($nesting[0], $nesting)
};

Opal.modules["set"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $defs = Opal.defs, $hash2 = Opal.hash2, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $send = Opal.send, $def = Opal.def, $eqeq = Opal.eqeq, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $rb_lt = Opal.rb_lt, $rb_le = Opal.rb_le, $alias = Opal.alias, $module = Opal.module;

  Opal.add_stubs('include,new,nil?,===,raise,each,add,merge,class,respond_to?,subtract,dup,join,to_a,equal?,instance_of?,==,instance_variable_get,size,is_a?,all?,include?,[]=,-,enum_for,[],<<,replace,delete,select,reject,delete_if,to_proc,keep_if,each_key,empty?,eql?,instance_eval,clear,<,<=,any?,!,intersect?,keys');
  
  (function($base, $super) {
    var self = $klass($base, $super, 'Set');

    var $ret_or_1 = nil, $proto = self.$$prototype;

    $proto.hash = nil;
    
    self.$include($$$('Enumerable'));
    $defs(self, '$[]', function $Set_$$$1($a) {
      var $post_args, ary, self = this;

      
      
      $post_args = Opal.slice.call(arguments);
      
      ary = $post_args;;
      return self.$new(ary);
    }, -1);
    
    $def(self, '$initialize', function $$initialize(enum$) {
      var block = $$initialize.$$p || nil, self = this;

      delete $$initialize.$$p;
      
      ;
      
      if (enum$ == null) enum$ = nil;;
      self.hash = $hash2([], {});
      if ($truthy(enum$['$nil?']())) {
        return nil
      };
      if (!$eqeqeq($$$('Enumerable'), enum$)) {
        $Kernel.$raise($$$('ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], function $$2(item){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (item == null) item = nil;;
          return self.$add(Opal.yield1(block, item));}, {$$arity: 1, $$s: self})
      } else {
        return self.$merge(enum$)
      };
    }, -1);
    
    $def(self, '$dup', function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, 0);
    
    $def(self, '$-', function $Set_$minus$3(enum$) {
      var self = this;

      
      if (!$truthy(enum$['$respond_to?']("each"))) {
        $Kernel.$raise($$$('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, 1);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, 0);
    
    $def(self, '$==', function $Set_$eq_eq$4(other) {
      var self = this;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if (($truthy(other['$is_a?']($$$('Set'))) && ($eqeq(self.$size(), other.$size())))) {
        return $send(other, 'all?', [], function $$5(o){var self = $$5.$$s == null ? this : $$5.$$s;
          if (self.hash == null) self.hash = nil;

          
          
          if (o == null) o = nil;;
          return self.hash['$include?'](o);}, {$$arity: 1, $$s: self})
      } else {
        return false
      }
    }, 1);
    
    $def(self, '$add', function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', $to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, 1);
    
    $def(self, '$classify', function $$classify() {
      var block = $$classify.$$p || nil, self = this, result = nil;

      delete $$classify.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("classify")
      };
      result = $send($$$('Hash'), 'new', [], function $$6(h, k){var self = $$6.$$s == null ? this : $$6.$$s, $writer = nil;

        
        
        if (h == null) h = nil;;
        
        if (k == null) k = nil;;
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', $to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, {$$arity: 2, $$s: self});
      $send(self, 'each', [], function $$7(item){
        
        
        if (item == null) item = nil;;
        return result['$[]'](Opal.yield1(block, item)).$add(item);}, 1);
      return result;
    }, 0);
    
    $def(self, '$collect!', function $Set_collect$excl$8() {
      var block = $Set_collect$excl$8.$$p || nil, self = this, result = nil;

      delete $Set_collect$excl$8.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], function $$9(item){
        
        
        if (item == null) item = nil;;
        return result['$<<'](Opal.yield1(block, item));}, 1);
      return self.$replace(result);
    }, 0);
    
    $def(self, '$delete', function $Set_delete$10(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, 1);
    
    $def(self, '$delete?', function $Set_delete$ques$11(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
      } else {
        return nil
      }
    }, 1);
    
    $def(self, '$delete_if', function $$delete_if() {
      var $yield = $$delete_if.$$p || nil, self = this;

      delete $$delete_if.$$p;
      
      if (!($yield !== nil)) {
        return self.$enum_for("delete_if")
      };
      $send($send(self, 'select', [], function $$12(o){
        
        
        if (o == null) o = nil;;
        return Opal.yield1($yield, o);;}, 1), 'each', [], function $$13(o){var self = $$13.$$s == null ? this : $$13.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) o = nil;;
        return self.hash.$delete(o);}, {$$arity: 1, $$s: self});
      return self;
    }, 0);
    
    $def(self, '$keep_if', function $$keep_if() {
      var $yield = $$keep_if.$$p || nil, self = this;

      delete $$keep_if.$$p;
      
      if (!($yield !== nil)) {
        return self.$enum_for("keep_if")
      };
      $send($send(self, 'reject', [], function $$14(o){
        
        
        if (o == null) o = nil;;
        return Opal.yield1($yield, o);;}, 1), 'each', [], function $$15(o){var self = $$15.$$s == null ? this : $$15.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) o = nil;;
        return self.hash.$delete(o);}, {$$arity: 1, $$s: self});
      return self;
    }, 0);
    
    $def(self, '$reject!', function $Set_reject$excl$16() {
      var block = $Set_reject$excl$16.$$p || nil, self = this, before = nil;

      delete $Set_reject$excl$16.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("reject!")
      };
      before = self.$size();
      $send(self, 'delete_if', [], block.$to_proc());
      if ($eqeq(self.$size(), before)) {
        return nil
      } else {
        return self
      };
    }, 0);
    
    $def(self, '$select!', function $Set_select$excl$17() {
      var block = $Set_select$excl$17.$$p || nil, self = this, before = nil;

      delete $Set_select$excl$17.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("select!")
      };
      before = self.$size();
      $send(self, 'keep_if', [], block.$to_proc());
      if ($eqeq(self.$size(), before)) {
        return nil
      } else {
        return self
      };
    }, 0);
    
    $def(self, '$add?', function $Set_add$ques$18(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
      } else {
        return self.$add(o)
      }
    }, 1);
    
    $def(self, '$each', function $$each() {
      var block = $$each.$$p || nil, self = this;

      delete $$each.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, 0);
    
    $def(self, '$empty?', function $Set_empty$ques$19() {
      var self = this;

      return self.hash['$empty?']()
    }, 0);
    
    $def(self, '$eql?', function $Set_eql$ques$20(other) {
      var self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], function $$21(){var self = $$21.$$s == null ? this : $$21.$$s;
        if (self.hash == null) self.hash = nil;

        return self.hash}, {$$arity: 0, $$s: self}))
    }, 1);
    
    $def(self, '$clear', function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, 0);
    
    $def(self, '$include?', function $Set_include$ques$22(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, 1);
    
    $def(self, '$merge', function $$merge(enum$) {
      var self = this;

      
      $send(enum$, 'each', [], function $$23(item){var self = $$23.$$s == null ? this : $$23.$$s;

        
        
        if (item == null) item = nil;;
        return self.$add(item);}, {$$arity: 1, $$s: self});
      return self;
    }, 1);
    
    $def(self, '$replace', function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, 1);
    
    $def(self, '$size', function $$size() {
      var self = this;

      return self.hash.$size()
    }, 0);
    
    $def(self, '$subtract', function $$subtract(enum$) {
      var self = this;

      
      $send(enum$, 'each', [], function $$24(item){var self = $$24.$$s == null ? this : $$24.$$s;

        
        
        if (item == null) item = nil;;
        return self.$delete(item);}, {$$arity: 1, $$s: self});
      return self;
    }, 1);
    
    $def(self, '$|', function $Set_$$25(enum$) {
      var self = this;

      
      if (!$truthy(enum$['$respond_to?']("each"))) {
        $Kernel.$raise($$$('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, 1);
    
    function is_set(set) {
      ($truthy(($ret_or_1 = (set)['$is_a?']($$$('Set')))) ? ($ret_or_1) : ($Kernel.$raise($$$('ArgumentError'), "value must be a set")))
    }
  ;
    
    $def(self, '$superset?', function $Set_superset$ques$26(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false
      };
      return $send(set, 'all?', [], function $$27(o){var self = $$27.$$s == null ? this : $$27.$$s;

        
        
        if (o == null) o = nil;;
        return self['$include?'](o);}, {$$arity: 1, $$s: self});
    }, 1);
    
    $def(self, '$proper_superset?', function $Set_proper_superset$ques$28(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false
      };
      return $send(set, 'all?', [], function $$29(o){var self = $$29.$$s == null ? this : $$29.$$s;

        
        
        if (o == null) o = nil;;
        return self['$include?'](o);}, {$$arity: 1, $$s: self});
    }, 1);
    
    $def(self, '$subset?', function $Set_subset$ques$30(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false
      };
      return $send(self, 'all?', [], function $$31(o){
        
        
        if (o == null) o = nil;;
        return set['$include?'](o);}, 1);
    }, 1);
    
    $def(self, '$proper_subset?', function $Set_proper_subset$ques$32(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false
      };
      return $send(self, 'all?', [], function $$33(o){
        
        
        if (o == null) o = nil;;
        return set['$include?'](o);}, 1);
    }, 1);
    
    $def(self, '$intersect?', function $Set_intersect$ques$34(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return $send(self, 'any?', [], function $$35(o){
          
          
          if (o == null) o = nil;;
          return set['$include?'](o);}, 1)
      } else {
        return $send(set, 'any?', [], function $$36(o){var self = $$36.$$s == null ? this : $$36.$$s;

          
          
          if (o == null) o = nil;;
          return self['$include?'](o);}, {$$arity: 1, $$s: self})
      };
    }, 1);
    
    $def(self, '$disjoint?', function $Set_disjoint$ques$37(set) {
      var self = this;

      return self['$intersect?'](set)['$!']()
    }, 1);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, 0);
    $alias(self, "+", "|");
    $alias(self, "<", "proper_subset?");
    $alias(self, "<<", "add");
    $alias(self, "<=", "subset?");
    $alias(self, ">", "proper_superset?");
    $alias(self, ">=", "superset?");
    $alias(self, "difference", "-");
    $alias(self, "filter!", "select!");
    $alias(self, "length", "size");
    $alias(self, "map!", "collect!");
    $alias(self, "member?", "include?");
    return $alias(self, "union", "|");
  })('::', null);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$to_set', function $$to_set($a, $b) {
      var block = $$to_set.$$p || nil, $post_args, klass, args, self = this;

      delete $$to_set.$$p;
      
      ;
      
      $post_args = Opal.slice.call(arguments);
      
      if ($post_args.length > 0) klass = $post_args.shift();
      if (klass == null) klass = $$('Set');;
      
      args = $post_args;;
      return $send(klass, 'new', [self].concat($to_a(args)), block.$to_proc());
    }, -1)
  })('::', $nesting);
};

Opal.modules["opal/config"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $truthy = Opal.truthy, $hash2 = Opal.hash2, $def = Opal.def, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $eqeqeq = Opal.eqeqeq, $lambda = Opal.lambda;

  Opal.add_stubs('require,extend,private,fetch,[]=,config_options,-,define_singleton_method,config,any?,===,raise,inspect,public,each,call,default_config,config_option,new');
  
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Config');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$extend(self);
      self.$private();
      
      $def(self, '$config_options', function $$config_options() {
        var self = this, $ret_or_1 = nil;
        if (self.config_options == null) self.config_options = nil;

        return (self.config_options = ($truthy(($ret_or_1 = self.config_options)) ? ($ret_or_1) : ($hash2([], {}))))
      }, 0);
      
      $def(self, '$config_option', function $$config_option(name, default_value, options) {
        var self = this, compiler = nil, valid_values = nil, $writer = nil;

        
        
        if (options == null) options = $hash2([], {});;
        compiler = options.$fetch("compiler_option", nil);
        valid_values = options.$fetch("valid_values", [true, false]);
        
        $writer = [name, $hash2(["default", "compiler"], {"default": default_value, "compiler": compiler})];
        $send(self.$config_options(), '[]=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        $send(self, 'define_singleton_method', [name], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

          return self.$config().$fetch(name, default_value)}, {$$arity: 0, $$s: self});
        return $send(self, 'define_singleton_method', ["" + (name) + "="], function $$2(value){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (value == null) value = nil;;
          if (!$truthy($send(valid_values, 'any?', [], function $$3(valid_value){
            
            
            if (valid_value == null) valid_value = nil;;
            return valid_value['$==='](value);}, 1))) {
            self.$raise($$('ArgumentError'), "" + ("Not a valid value for option " + (self) + "." + (name) + ", provided " + (value.$inspect()) + ". ") + ("Must be " + (valid_values.$inspect()) + " === " + (value.$inspect())))
          };
          
          $writer = [name, value];
          $send(self.$config(), '[]=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, {$$arity: 1, $$s: self});
      }, -3);
      self.$public();
      
      $def(self, '$default_config', function $$default_config() {
        var self = this, default_config = nil;

        
        default_config = $hash2([], {});
        $send(self.$config_options(), 'each', [], function $$4(name, options){var default_value = nil, $writer = nil;

          
          
          if (name == null) name = nil;;
          
          if (options == null) options = nil;;
          default_value = options.$fetch("default");
          default_value = ($eqeqeq($$('Proc'), default_value) ? (default_value.$call()) : (default_value));
          
          $writer = [name, default_value];
          $send(default_config, '[]=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, 2);
        return default_config;
      }, 0);
      
      $def(self, '$compiler_options', function $$compiler_options() {
        var self = this, compiler_options = nil;

        
        compiler_options = $hash2([], {});
        $send(self.$config_options(), 'each', [], function $$5(name, options){var self = $$5.$$s == null ? this : $$5.$$s, compiler_option_name = nil, $writer = nil;

          
          
          if (name == null) name = nil;;
          
          if (options == null) options = nil;;
          compiler_option_name = options.$fetch("compiler");
          
          $writer = [compiler_option_name, self.$config().$fetch(name)];
          $send(compiler_options, '[]=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, {$$arity: 2, $$s: self});
        return compiler_options;
      }, 0);
      
      $def(self, '$config', function $$config() {
        var self = this, $ret_or_1 = nil;
        if (self.config == null) self.config = nil;

        return (self.config = ($truthy(($ret_or_1 = self.config)) ? ($ret_or_1) : (self.$default_config())))
      }, 0);
      
      $def(self, '$reset!', function $Config_reset$excl$6() {
        var self = this;

        return (self.config = nil)
      }, 0);
      self.$config_option("method_missing_enabled", true, $hash2(["compiler_option"], {"compiler_option": "method_missing"}));
      self.$config_option("const_missing_enabled", true, $hash2(["compiler_option"], {"compiler_option": "const_missing"}));
      self.$config_option("arity_check_enabled", false, $hash2(["compiler_option"], {"compiler_option": "arity_check"}));
      self.$config_option("freezing_stubs_enabled", true, $hash2(["compiler_option"], {"compiler_option": "freezing"}));
      self.$config_option("esm", false, $hash2(["compiler_option"], {"compiler_option": "esm"}));
      self.$config_option("dynamic_require_severity", "warning", $hash2(["compiler_option", "valid_values"], {"compiler_option": "dynamic_require_severity", "valid_values": ["error", "warning", "ignore"]}));
      self.$config_option("missing_require_severity", "error", $hash2(["valid_values"], {"valid_values": ["error", "warning", "ignore"]}));
      self.$config_option("irb_enabled", false, $hash2(["compiler_option"], {"compiler_option": "irb"}));
      self.$config_option("inline_operators_enabled", true, $hash2(["compiler_option"], {"compiler_option": "inline_operators"}));
      self.$config_option("source_map_enabled", true);
      return self.$config_option("stubbed_files", $lambda(function $Config$7(){
        return $$('Set').$new()}, 0), $hash2(["valid_values"], {"valid_values": [$$('Set')]}));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/cache"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $truthy = Opal.truthy, $not = Opal.not, $eqeq = Opal.eqeq, $defs = Opal.defs, $klass = Opal.klass, $def = Opal.def, $send = Opal.send, $rb_plus = Opal.rb_plus, $gvars = Opal.gvars, $range = Opal.range;

  Opal.add_stubs('require,attr_writer,singleton_class,!,find_dir,[],==,new,module_function,respond_to?,fetch,to_proc,+,digest,join,runtime_key,get,set,expand_path,gem_dir,grep,map,sort,size,to_f,mtime,to_s,to_i,hexdigest');
  
  self.$require("opal/paths");
  nil;
  nil;
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$singleton_class().$attr_writer("cache");
    $defs(self, '$cache', function $$cache() {
      var self = this, $ret_or_1 = nil;
      if (self.cache == null) self.cache = nil;

      return (self.cache = ($truthy(($ret_or_1 = self.cache)) ? ($ret_or_1) : ((($eqeq($$('RUBY_ENGINE'), "opal") || ($truthy($$('ENV')['$[]']("OPAL_CACHE_DISABLE")))) || ($not($$$($$('Cache'), 'FileCache').$find_dir()))) ? ($$$($$('Cache'), 'NullCache').$new()) : ($$$($$('Cache'), 'FileCache').$new()))))
    }, 0);
    return (function($base, $parent_nesting) {
      var self = $module($base, 'Cache');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'NullCache');

        
        return $def(self, '$fetch', function $$fetch($a) {
          var $post_args, $rest_arg, $yield = $$fetch.$$p || nil;

          delete $$fetch.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          return Opal.yieldX($yield, []);;
        }, -1)
      })($nesting[0], null);
      self.$module_function();
      
      $def(self, '$fetch', function $$fetch(cache, key) {
        var block = $$fetch.$$p || nil, self = this, data = nil, $ret_or_1 = nil, compiler = nil;

        delete $$fetch.$$p;
        
        ;
        if ($truthy(cache['$respond_to?']("fetch"))) {
          return $send(cache, 'fetch', [key], block.$to_proc())
        };
        key = $rb_plus($rb_plus(self.$digest(key.$join("/")), "-"), self.$runtime_key());
        data = cache.$get(key);
        if ($truthy(($ret_or_1 = data))) {
          return $ret_or_1
        } else {
          
          compiler = Opal.yieldX(block, []);
          cache.$set(key, compiler);
          return compiler;
        };
      }, 2);
      
      $def(self, '$runtime_key', function $$runtime_key() {
        var self = this, $ret_or_1 = nil, opal_path = nil, files = nil;
        if (self.runtime_key == null) self.runtime_key = nil;
        if ($gvars.LOADED_FEATURES == null) $gvars.LOADED_FEATURES = nil;

        return (self.runtime_key = ($truthy(($ret_or_1 = self.runtime_key)) ? ($ret_or_1) : (((opal_path = $$('File').$expand_path("..", $$('Opal').$gem_dir())), (files = $$('Dir')['$[]']("" + (opal_path) + "/{Gemfile*,*.gemspec,lib/**/*}")), (files = $rb_plus(files, $gvars.LOADED_FEATURES.$grep(/lib\/(parser|ast)/))), self.$digest([$send(files.$sort(), 'map', [], function $$1(f){
          
          
          if (f == null) f = nil;;
          return "" + (f) + ":" + ($$('File').$size(f)) + ":" + ($$('File').$mtime(f).$to_f());}, 1), $$('RUBY_VERSION'), $$('RUBY_PATCHLEVEL')].$join("/"))))))
      }, 0);
      return $def(self, '$digest', function $$digest(string) {
        
        return $$$($$$('Digest'), 'SHA256').$hexdigest(string)['$[]']($range(-32, -1, false)).$to_i(16).$to_s(36)
      }, 1);
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
};

Opal.modules["opal/builder"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $defs = Opal.defs, $send = Opal.send, $hash2 = Opal.hash2, $Opal = Opal.Opal, $def = Opal.def, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $send2 = Opal.send2, $find_super = Opal.find_super, $not = Opal.not, $lambda = Opal.lambda, $eqeqeq = Opal.eqeqeq;

  Opal.add_stubs('require,include?,processors,<<,each,extensions,each_pair,public_send,new,paths,flatten,map,compiler_options,missing_require_severity,cache,build,to_proc,build_str,source_for,read,nil?,expand_path,expand_ext,processor_for,+,preload,requires,tree_requires,process_require,autoloads,processed,raise,inspect,message,backtrace,dup,stubs,path_reader,prerequired,to_sym,join,append_paths,include,attr_reader,attr_accessor,private,empty?,to_s,pwd,dirname,Pathname,flat_map,required_trees,find,start_with?,glob,relative_path_from,match?,!,merge,[],===,warn,already_processed,stub?,process_requires,expand,basename');
  
  self.$require("opal/path_reader");
  self.$require("opal/paths");
  self.$require("opal/config");
  self.$require("opal/cache");
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Builder');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.stubs = $proto.preload = $proto.processors = $proto.path_reader = $proto.prerequired = $proto.compiler_options = $proto.missing_require_severity = $proto.cache = $proto.already_processed = nil;
      
      $defs(self, '$processors', function $$processors() {
        var self = this, $ret_or_1 = nil;
        if (self.processors == null) self.processors = nil;

        return (self.processors = ($truthy(($ret_or_1 = self.processors)) ? ($ret_or_1) : ([])))
      }, 0);
      $defs(self, '$extensions', function $$extensions() {
        var self = this, $ret_or_1 = nil;
        if (self.extensions == null) self.extensions = nil;

        return (self.extensions = ($truthy(($ret_or_1 = self.extensions)) ? ($ret_or_1) : ([])))
      }, 0);
      $defs(self, '$register_processor', function $$register_processor(processor, processor_extensions) {
        var self = this;

        
        if ($truthy(self.$processors()['$include?'](processor))) {
          return nil
        };
        self.$processors()['$<<'](processor);
        return $send(processor_extensions, 'each', [], function $$1(ext){var self = $$1.$$s == null ? this : $$1.$$s;

          
          
          if (ext == null) ext = nil;;
          return self.$extensions()['$<<'](ext);}, {$$arity: 1, $$s: self});
      }, 2);
      $klass($nesting[0], $$('LoadError'), 'MissingRequire');
      $klass($nesting[0], $$('LoadError'), 'ProcessorNotFound');
      
      $def(self, '$initialize', function $$initialize(options) {
        var self = this, $ret_or_1 = nil;

        
        
        if (options == null) options = nil;;
        $send(($truthy(($ret_or_1 = options)) ? ($ret_or_1) : ($hash2([], {}))), 'each_pair', [], function $$2(k, v){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (k == null) k = nil;;
          
          if (v == null) v = nil;;
          return self.$public_send("" + (k) + "=", v);}, {$$arity: 2, $$s: self});
        self.stubs = ($truthy(($ret_or_1 = self.stubs)) ? ($ret_or_1) : ([]));
        self.preload = ($truthy(($ret_or_1 = self.preload)) ? ($ret_or_1) : ([]));
        self.processors = ($truthy(($ret_or_1 = self.processors)) ? ($ret_or_1) : ($$$($Opal, 'Builder').$processors()));
        self.path_reader = ($truthy(($ret_or_1 = self.path_reader)) ? ($ret_or_1) : ($$('PathReader').$new($$('Opal').$paths(), $send(self.$extensions(), 'map', [], function $$3(e){
          
          
          if (e == null) e = nil;;
          return ["." + (e), ".js." + (e)];}, 1).$flatten())));
        self.prerequired = ($truthy(($ret_or_1 = self.prerequired)) ? ($ret_or_1) : ([]));
        self.compiler_options = ($truthy(($ret_or_1 = self.compiler_options)) ? ($ret_or_1) : ($$$($$('Opal'), 'Config').$compiler_options()));
        self.missing_require_severity = ($truthy(($ret_or_1 = self.missing_require_severity)) ? ($ret_or_1) : ($$$($$('Opal'), 'Config').$missing_require_severity()));
        self.cache = ($truthy(($ret_or_1 = self.cache)) ? ($ret_or_1) : ($$('Opal').$cache()));
        return (self.processed = []);
      }, -1);
      $defs(self, '$build', function $$build($a) {
        var block = $$build.$$p || nil, $post_args, args, self = this;

        delete $$build.$$p;
        
        ;
        
        $post_args = Opal.slice.call(arguments);
        
        args = $post_args;;
        return $send(self.$new(), 'build', $to_a(args), block.$to_proc());
      }, -1);
      
      $def(self, '$build', function $$build(path, options) {
        var self = this;

        
        
        if (options == null) options = $hash2([], {});;
        return self.$build_str(self.$source_for(path), path, options);
      }, -2);
      
      $def(self, '$source_for', function $$source_for(path) {
        var self = this;

        return self.$read(path, false)
      }, 1);
      
      $def(self, '$build_str', function $$build_str(source, rel_path, options) {
        var self = this, abs_path = nil, asset = nil, requires = nil, error = nil;

        
        
        if (options == null) options = $hash2([], {});;
        try {
          
          if ($truthy(source['$nil?']())) {
            return nil
          };
          abs_path = self.$expand_path(rel_path);
          rel_path = self.$expand_ext(rel_path);
          asset = self.$processor_for(source, rel_path, abs_path, false, options);
          requires = $rb_plus($rb_plus(self.$preload(), asset.$requires()), self.$tree_requires(asset, abs_path));
          $send(requires, 'map', [], function $$4(r){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (r == null) r = nil;;
            return self.$process_require(r, asset.$autoloads(), options);}, {$$arity: 1, $$s: self});
          self.$processed()['$<<'](asset);
          return self;
        } catch ($err) {
          if (Opal.rescue($err, [$$('MissingRequire')])) {(error = $err)
            try {
              return self.$raise(error, "A file required by " + (rel_path.$inspect()) + " wasn't found.\n" + (error.$message()), error.$backtrace())
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };
      }, -3);
      
      $def(self, '$build_require', function $$build_require(path, options) {
        var self = this;

        
        
        if (options == null) options = $hash2([], {});;
        return self.$process_require(path, [], options);
      }, -2);
      
      $def(self, '$initialize_copy', function $$initialize_copy(other) {
        var $yield = $$initialize_copy.$$p || nil, self = this;

        delete $$initialize_copy.$$p;
        
        $send2(self, $find_super(self, 'initialize_copy', $$initialize_copy, false, true), 'initialize_copy', [other], $yield);
        self.stubs = other.$stubs().$dup();
        self.preload = other.$preload().$dup();
        self.processors = other.$processors().$dup();
        self.path_reader = other.$path_reader().$dup();
        self.prerequired = other.$prerequired().$dup();
        self.compiler_options = other.$compiler_options().$dup();
        self.missing_require_severity = other.$missing_require_severity().$to_sym();
        return (self.processed = other.$processed().$dup());
      }, 1);
      
      $def(self, '$to_s', function $$to_s() {
        var self = this;

        return $send(self.$processed(), 'map', [], "to_s".$to_proc()).$join("\n")
      }, 0);
      
      $def(self, '$source_map', function $$source_map() {
        var self = this;

        return $$$($$$($Opal, 'SourceMap'), 'Index').$new($send(self.$processed(), 'map', [], "source_map".$to_proc()), $hash2(["join"], {"join": "\n"}))
      }, 0);
      
      $def(self, '$append_paths', function $$append_paths($a) {
        var $post_args, paths, self = this;

        
        
        $post_args = Opal.slice.call(arguments);
        
        paths = $post_args;;
        return $send(self.$path_reader(), 'append_paths', $to_a(paths));
      }, -1);
      self.$include($$('UseGem'));
      self.$attr_reader("processed");
      self.$attr_accessor("processors", "path_reader", "stubs", "prerequired", "preload", "compiler_options", "missing_require_severity", "cache");
      self.$private();
      
      $def(self, '$tree_requires', function $$tree_requires(asset, asset_path) {
        var self = this, dirname = nil, abs_base_paths = nil;

        
        dirname = ($truthy(asset_path.$to_s()['$empty?']()) ? ($$('Pathname').$pwd()) : (self.$Pathname(asset_path).$expand_path().$dirname()));
        abs_base_paths = $send(self.$path_reader().$paths(), 'map', [], function $$5(p){
          
          
          if (p == null) p = nil;;
          return $$('File').$expand_path(p);}, 1);
        return $send(asset.$required_trees(), 'flat_map', [], function $$6(tree){var self = $$6.$$s == null ? this : $$6.$$s, abs_tree_path = nil, abs_base_path = nil, entries_glob = nil;

          
          
          if (tree == null) tree = nil;;
          abs_tree_path = dirname.$join(tree).$expand_path().$to_s();
          abs_base_path = $send(abs_base_paths, 'find', [], function $$7(p){
            
            
            if (p == null) p = nil;;
            return abs_tree_path['$start_with?'](p);}, 1);
          if ($truthy(abs_base_path)) {
            
            abs_base_path = self.$Pathname(abs_base_path);
            entries_glob = self.$Pathname(abs_tree_path).$join("**", "*{.js,}.{" + (self.$extensions().$join(",")) + "}");
            return $send($$('Pathname').$glob(entries_glob), 'map', [], function $$8(file){
              
              
              if (file == null) file = nil;;
              return file.$relative_path_from(abs_base_path).$to_s();}, 1);
          } else {
            return []
          };}, {$$arity: 1, $$s: self});
      }, 2);
      
      $def(self, '$processor_for', function $$processor_for(source, rel_path, abs_path, autoload, options) {
        var self = this, processor = nil;

        
        processor = $send(self.$processors(), 'find', [], function $$9(p){
          
          
          if (p == null) p = nil;;
          return p['$match?'](abs_path);}, 1);
        if (($not(processor) && ($not(autoload)))) {
          self.$raise($$('ProcessorNotFound'), "can't find processor for rel_path: " + ("" + (rel_path.$inspect()) + ", ") + ("abs_path: " + (abs_path.$inspect()) + ", ") + ("source: " + (source.$inspect()) + ", ") + ("processors: " + (self.$processors().$inspect())))
        };
        options = options.$merge($hash2(["cache"], {"cache": self.$cache()}));
        return processor.$new(source, rel_path, self.compiler_options.$merge(options));
      }, 5);
      
      $def(self, '$read', function $$read(path, autoload) {
        var self = this, $ret_or_1 = nil, print_list = nil, message = nil, $ret_or_2 = nil;

        if ($truthy(($ret_or_1 = self.$path_reader().$read(path)))) {
          return $ret_or_1
        } else {
          
          print_list = $lambda(function $$10(list){
            
            
            if (list == null) list = nil;;
            return "- " + (list.$join("\n- ")) + "\n";}, 1);
          message = $rb_plus($rb_plus($rb_plus($rb_plus($rb_plus("can't find file: " + (path.$inspect()) + " in:\n", print_list['$[]'](self.$path_reader().$paths())), "\nWith the following extensions:\n"), print_list['$[]'](self.$path_reader().$extensions())), "\nAnd the following processors:\n"), print_list['$[]'](self.$processors()));
          if (!$truthy(autoload)) {
            if ($eqeqeq("error", ($ret_or_2 = self.$missing_require_severity()))) {
              self.$raise($$('MissingRequire'), message)
            } else if ($eqeqeq("warning", $ret_or_2)) {
              self.$warn(message)
            } else if (!$eqeqeq("ignore", $ret_or_2)) {
              nil
            }
          };
          return nil;
        }
      }, 2);
      
      $def(self, '$process_require', function $$process_require(rel_path, autoloads, options) {
        var self = this, autoload = nil, source = nil, abs_path = nil, asset = nil;

        
        if ($truthy(self.$prerequired()['$include?'](rel_path))) {
          return nil
        };
        if ($truthy(self.$already_processed()['$include?'](rel_path))) {
          return nil
        };
        self.$already_processed()['$<<'](rel_path);
        autoload = autoloads['$include?'](rel_path);
        source = ($truthy(self['$stub?'](rel_path)) ? ("") : (self.$read(rel_path, autoload)));
        if ($truthy(source['$nil?']())) {
          return nil
        };
        abs_path = self.$expand_path(rel_path);
        rel_path = self.$expand_ext(rel_path);
        asset = self.$processor_for(source, rel_path, abs_path, autoload, options.$merge($hash2(["requirable"], {"requirable": true})));
        self.$process_requires(rel_path, $rb_plus(asset.$requires(), self.$tree_requires(asset, abs_path)), asset.$autoloads(), options);
        return self.$processed()['$<<'](asset);
      }, 3);
      
      $def(self, '$expand_ext', function $$expand_ext(path) {
        var self = this, abs_path = nil;

        
        abs_path = self.$path_reader().$expand(path);
        if ($truthy(abs_path)) {
          return $$('File').$join($$('File').$dirname(path), $$('File').$basename(abs_path))
        } else {
          return path
        };
      }, 1);
      
      $def(self, '$expand_path', function $$expand_path(path) {
        var self = this, $ret_or_1 = nil;

        
        if ($truthy(self['$stub?'](path))) {
          return nil
        };
        return ($truthy(($ret_or_1 = self.$path_reader().$expand(path))) ? ($ret_or_1) : ($$('File').$expand_path(path))).$to_s();
      }, 1);
      
      $def(self, '$process_requires', function $$process_requires(rel_path, requires, autoloads, options) {
        var self = this, error = nil;

        try {
          return $send(requires, 'map', [], function $$11(r){var self = $$11.$$s == null ? this : $$11.$$s;

            
            
            if (r == null) r = nil;;
            return self.$process_require(r, autoloads, options);}, {$$arity: 1, $$s: self})
        } catch ($err) {
          if (Opal.rescue($err, [$$('MissingRequire')])) {(error = $err)
            try {
              return self.$raise(error, "A file required by " + (rel_path.$inspect()) + " wasn't found.\n" + (error.$message()), error.$backtrace())
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, 4);
      
      $def(self, '$already_processed', function $$already_processed() {
        var self = this, $ret_or_1 = nil;

        return (self.already_processed = ($truthy(($ret_or_1 = self.already_processed)) ? ($ret_or_1) : ($$('Set').$new())))
      }, 0);
      
      $def(self, '$stub?', function $Builder_stub$ques$12(path) {
        var self = this;

        return self.$stubs()['$include?'](path)
      }, 1);
      return $def(self, '$extensions', function $$extensions() {
        
        return $$$($Opal, 'Builder').$extensions()
      }, 0);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["ast/node"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $alias = Opal.alias, $hash2 = Opal.hash2, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $to_a = Opal.to_a;

  Opal.add_stubs('attr_reader,to_sym,freeze,to_a,assign_properties,hash,class,eql?,type,children,each,instance_variable_set,protected,private,nil?,==,original_dup,send,equal?,respond_to?,to_ast,updated,+,*,fancy_type,is_a?,to_sexp,inspect,map,to_sexp_array,gsub,to_s');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Node');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.type = $proto.children = nil;
      
      self.$attr_reader("type");
      self.$attr_reader("children");
      $alias(self, "to_a", "children");
      self.$attr_reader("hash");
      
      $def(self, '$initialize', function $$initialize(type, children, properties) {
        var $a, self = this;

        
        
        if (children == null) children = [];;
        
        if (properties == null) properties = $hash2([], {});;
        $a = [type.$to_sym(), children.$to_a().$freeze()], (self.type = $a[0]), (self.children = $a[1]), $a;
        self.$assign_properties(properties);
        self.hash = [self.type, self.children, self.$class()].$hash();
        return self.$freeze();
      }, -2);
      
      $def(self, '$eql?', function $Node_eql$ques$1(other) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$class()['$eql?'](other.$class()))) ? (self.type['$eql?'](other.$type())) : ($ret_or_2))))) {
          return self.children['$eql?'](other.$children())
        } else {
          return $ret_or_1
        }
      }, 1);
      
      $def(self, '$assign_properties', function $$assign_properties(properties) {
        var self = this;

        
        $send(properties, 'each', [], function $$2(name, value){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (name == null) name = nil;;
          
          if (value == null) value = nil;;
          return self.$instance_variable_set("@" + (name), value);}, {$$arity: 2, $$s: self});
        return nil;
      }, 1);
      self.$protected("assign_properties");
      $alias(self, "original_dup", "dup");
      self.$private("original_dup");
      
      $def(self, '$dup', function $$dup() {
        var self = this;

        return self
      }, 0);
      $alias(self, "clone", "dup");
      
      $def(self, '$updated', function $$updated(type, children, properties) {
        var self = this, new_type = nil, $ret_or_1 = nil, new_children = nil, new_properties = nil, copy = nil;

        
        
        if (type == null) type = nil;;
        
        if (children == null) children = nil;;
        
        if (properties == null) properties = nil;;
        new_type = ($truthy(($ret_or_1 = type)) ? ($ret_or_1) : (self.type));
        new_children = ($truthy(($ret_or_1 = children)) ? ($ret_or_1) : (self.children));
        new_properties = ($truthy(($ret_or_1 = properties)) ? ($ret_or_1) : ($hash2([], {})));
        if ((($eqeq(self.type, new_type) && ($eqeq(self.children, new_children))) && ($truthy(properties['$nil?']())))) {
          return self
        } else {
          
          copy = self.$original_dup();
          copy.$send("initialize", new_type, new_children, new_properties);
          return copy;
        };
      }, -1);
      
      $def(self, '$==', function $Node_$eq_eq$3(other) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(self['$equal?'](other))) {
          return true
        } else if ($truthy(other['$respond_to?']("to_ast"))) {
          
          other = other.$to_ast();
          if ($truthy(($ret_or_1 = other.$type()['$=='](self.$type())))) {
            return other.$children()['$=='](self.$children())
          } else {
            return $ret_or_1
          };
        } else {
          return false
        }
      }, 1);
      
      $def(self, '$concat', function $$concat(array) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, array.$to_a()))
      }, 1);
      $alias(self, "+", "concat");
      
      $def(self, '$append', function $$append(element) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, [element]))
      }, 1);
      $alias(self, "<<", "append");
      
      $def(self, '$to_sexp', function $$to_sexp(indent) {
        var self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) indent = 0;;
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "(" + (self.$fancy_type());
        $send(self.$children(), 'each', [], function $$4(child){
          
          
          if (child == null) child = nil;;
          if ($truthy(child['$is_a?']($$('Node')))) {
            return (sexp = $rb_plus(sexp, "\n" + (child.$to_sexp($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, " " + (child.$inspect())))
          };}, 1);
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, -1);
      $alias(self, "to_s", "to_sexp");
      
      $def(self, '$inspect', function $$inspect(indent) {
        var self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) indent = 0;;
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "s(:" + (self.type);
        $send(self.$children(), 'each', [], function $$5(child){
          
          
          if (child == null) child = nil;;
          if ($truthy(child['$is_a?']($$('Node')))) {
            return (sexp = $rb_plus(sexp, ",\n" + (child.$inspect($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, ", " + (child.$inspect())))
          };}, 1);
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, -1);
      
      $def(self, '$to_ast', function $$to_ast() {
        var self = this;

        return self
      }, 0);
      
      $def(self, '$to_sexp_array', function $$to_sexp_array() {
        var self = this, children_sexp_arrs = nil;

        
        children_sexp_arrs = $send(self.$children(), 'map', [], function $$6(child){
          
          
          if (child == null) child = nil;;
          if ($truthy(child['$is_a?']($$('Node')))) {
            return child.$to_sexp_array()
          } else {
            return child
          };}, 1);
        return [self.$type()].concat($to_a(children_sexp_arrs));
      }, 0);
      
      $def(self, '$deconstruct', function $$deconstruct() {
        var self = this;

        return [self.$type()].concat($to_a(self.$children()))
      }, 0);
      self.$protected();
      return $def(self, '$fancy_type', function $$fancy_type() {
        var self = this;

        return self.type.$to_s().$gsub("_", "-")
      }, 0);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["ast/processor/mixin"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('nil?,to_ast,type,respond_to?,send,handler_missing,map,to_a,process');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting);

      return (function($base) {
        var self = $module($base, 'Mixin');

        
        
        
        $def(self, '$process', function $$process(node) {
          var self = this, on_handler = nil, new_node = nil;

          
          if ($truthy(node['$nil?']())) {
            return nil
          };
          node = node.$to_ast();
          on_handler = "on_" + (node.$type());
          if ($truthy(self['$respond_to?'](on_handler))) {
            new_node = self.$send(on_handler, node)
          } else {
            new_node = self.$handler_missing(node)
          };
          if ($truthy(new_node)) {
            node = new_node
          };
          return node;
        }, 1);
        
        $def(self, '$process_all', function $$process_all(nodes) {
          var self = this;

          return $send(nodes.$to_a(), 'map', [], function $$1(node){var self = $$1.$$s == null ? this : $$1.$$s;

            
            
            if (node == null) node = nil;;
            return self.$process(node);}, {$$arity: 1, $$s: self})
        }, 1);
        return $def(self, '$handler_missing', function $$handler_missing(node) {
          
          return nil
        }, 1);
      })($nesting[0])
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["ast/processor"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs('require,include');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$require("ast/processor/mixin");
      return self.$include($$('Mixin'));
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["ast/sexp"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $def = Opal.def;

  Opal.add_stubs('new');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Sexp');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return $def(self, '$s', function $$s(type, $a) {
        var $post_args, children;

        
        
        $post_args = Opal.slice.call(arguments, 1);
        
        children = $post_args;;
        return $$('Node').$new(type, children);
      }, -2)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["ast"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module;

  Opal.add_stubs('require');
  return (function($base) {
    var self = $module($base, 'AST');

    
    
    self.$require("ast/node");
    self.$require("ast/processor");
    return self.$require("ast/sexp");
  })($nesting[0])
};

Opal.modules["parser/ast/node"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $alias = Opal.alias, $truthy = Opal.truthy, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def;

  Opal.add_stubs('attr_reader,[],frozen?,dup,node=,-');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Node');

        
        
        self.$attr_reader("location");
        $alias(self, "loc", "location");
        return $def(self, '$assign_properties', function $$assign_properties(properties) {
          var self = this, location = nil, $writer = nil;

          if ($truthy((location = properties['$[]']("location")))) {
            
            if ($truthy(location['$frozen?']())) {
              location = location.$dup()
            };
            
            $writer = [self];
            $send(location, 'node=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (self.location = location);
          } else {
            return nil
          }
        }, 1);
      })($nesting[0], $$$($$$('AST'), 'Node'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["opal/ast/node"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('require,attr_reader,[],frozen?,dup,merge!,loc,line,column');
  
  self.$require("ast");
  self.$require("parser/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Node');

        var $proto = self.$$prototype;

        $proto.meta = nil;
        
        self.$attr_reader("meta");
        
        $def(self, '$assign_properties', function $$assign_properties(properties) {
          var $yield = $$assign_properties.$$p || nil, self = this, meta = nil, $ret_or_1 = nil;

          delete $$assign_properties.$$p;
          
          if ($truthy((meta = properties['$[]']("meta")))) {
            
            if ($truthy(meta['$frozen?']())) {
              meta = meta.$dup()
            };
            self.meta['$merge!'](meta);
          } else {
            self.meta = ($truthy(($ret_or_1 = self.meta)) ? ($ret_or_1) : ($hash2([], {})))
          };
          return $send2(self, $find_super(self, 'assign_properties', $$assign_properties, false, true), 'assign_properties', [properties], $yield);
        }, 1);
        
        $def(self, '$line', function $$line() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$line()
          } else {
            return nil
          }
        }, 0);
        return $def(self, '$column', function $$column() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$column()
          } else {
            return nil
          }
        }, 0);
      })($nesting[0], $$$($$$($$$('Parser'), 'AST'), 'Node'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["racc/parser"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $a, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $const_set = Opal.const_set, $defs = Opal.defs, $gvars = Opal.gvars, $rb_lt = Opal.rb_lt, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def, $to_ary = Opal.to_ary, $neqeq = Opal.neqeq, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $rb_ge = Opal.rb_ge, $rb_gt = Opal.rb_gt, $eqeqeq = Opal.eqeqeq, $rb_le = Opal.rb_le, $rb_times = Opal.rb_times;

  Opal.add_stubs('[],class,<,size,[]=,-,__send__,_racc_setup,raise,_racc_init_sysvars,catch,!=,next_token,racc_read_token,+,==,>=,_racc_evalact,!,>,push,racc_shift,-@,_racc_do_reduce,===,racc_accept,throw,on_error,<=,pop,racc_e_pop,inspect,racc_next_state,*,racc_reduce,sprintf,token_to_str,print,racc_token2str,puts,racc_print_stacks,empty?,each,racc_print_states,each_index');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return ($klass($nesting[0], $$('StandardError'), 'ParseError'), nil)
  })($nesting[0], $nesting);
  if (!$truthy((($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil))) {
    $const_set($nesting[0], 'ParseError', $$$($$('Racc'), 'ParseError'))
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $a, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    if (!$truthy((($a = $$('Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil))) {
      $const_set($nesting[0], 'Racc_No_Extensions', false)
    };
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.yydebug = $proto.racc_debug_out = $proto.racc_error_status = $proto.racc_t = $proto.racc_vstack = $proto.racc_val = $proto.racc_state = $proto.racc_tstack = nil;
      
      $const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      $const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      $const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      $const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      $const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      $const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      $const_set($nesting[0], 'Racc_Runtime_Core_Version', $$('Racc_Runtime_Core_Version_R'));
      $const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$('Racc_Runtime_Core_Revision_R'));
      $const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      $defs($$('Parser'), '$racc_runtime_type', function $$racc_runtime_type() {
        
        return $$('Racc_Runtime_Type')
      }, 0);
      
      $def(self, '$_racc_setup', function $$_racc_setup() {
        var $a, $b, self = this, $ret_or_1 = nil, arg = nil, $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        
        if (!$truthy($$$(self.$class(), 'Racc_debug_parser'))) {
          self.yydebug = false
        };
        if (!$truthy((($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
          self.yydebug = false
        };
        if ($truthy(self.yydebug)) {
          
          if (!$truthy((($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
            self.racc_debug_out = $gvars.stderr
          };
          self.racc_debug_out = ($truthy(($ret_or_1 = self.racc_debug_out)) ? ($ret_or_1) : ($gvars.stderr));
        };
        arg = $$$(self.$class(), 'Racc_arg');
        if ($truthy($rb_lt(arg.$size(), 14))) {
          
          $writer = [13, true];
          $send(arg, '[]=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return arg;
      }, 0);
      
      $def(self, '$_racc_init_sysvars', function $$_racc_init_sysvars() {
        var self = this;

        
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return (self.racc_error_status = 0);
      }, 0);
      
      $def(self, '$do_parse', function $$do_parse() {
        var self = this;

        return self.$__send__($$('Racc_Main_Parsing_Routine'), self.$_racc_setup(), false)
      }, 0);
      
      $def(self, '$next_token', function $$next_token() {
        var self = this;

        return self.$raise($$('NotImplementedError'), "" + (self.$class()) + "#next_token is not defined")
      }, 0);
      
      $def(self, '$_racc_do_parse_rb', function $$_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        
        $b = arg, $a = $to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        tok = (act = (i = nil));
        return $send(self, 'catch', ["racc_end_parse"], function $$1(){var $c, $d, $e, self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              if ($truthy(self.racc_read_next)) {
                if ($neqeq(self.racc_t, 0)) {
                  
                  $e = self.$next_token(), $d = $to_ary($e), (tok = ($d[0] == null ? nil : $d[0])), (self.racc_val = ($d[1] == null ? nil : $d[1])), $e;
                  if ($truthy(tok)) {
                    self.racc_t = ($truthy(($ret_or_1 = token_table['$[]'](tok))) ? ($ret_or_1) : (1))
                  } else {
                    self.racc_t = 0
                  };
                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val)
                  };
                  self.racc_read_next = false;
                }
              };
              i = $rb_plus(i, self.racc_t);
              if (!(($truthy($rb_ge(i, 0)) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
          }}, {$$arity: 0, $$s: self});
      }, 2);
      
      $def(self, '$yyparse', function $$yyparse(recv, mid) {
        var self = this;

        return self.$__send__($$('Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true)
      }, 2);
      
      $def(self, '$_racc_yyparse_rb', function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        
        $b = arg, $a = $to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], function $$2(){var $c, $d, self = $$2.$$s == null ? this : $$2.$$s;
          if (self.racc_state == null) self.racc_state = nil;

          
          while (!($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1)))))) {
            while ($truthy((act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)))) {
              
            }
          };
          return $send(recv, '__send__', [mid], function $$3(tok, val){var $e, $f, self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil, $ret_or_2 = nil;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

            
            
            if (tok == null) tok = nil;;
            
            if (val == null) val = nil;;
            if ($truthy(tok)) {
              self.racc_t = ($truthy(($ret_or_1 = token_table['$[]'](tok))) ? ($ret_or_1) : (1))
            } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if (!(($truthy($rb_ge(i, 0)) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
            while ($truthy(($truthy(($ret_or_1 = ($truthy(($ret_or_2 = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']())) ? ($ret_or_2) : (self.racc_read_next['$!']())))) ? ($ret_or_1) : (self.racc_t['$=='](0))))) {
              
              if (!(((($truthy(i) && ($truthy((i = $rb_plus(i, self.racc_t))))) && ($truthy($rb_ge(i, 0)))) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
              while ($truthy((act = self.$_racc_evalact(act, arg)))) {
                
              };
            };}, {$$arity: 2, $$s: self});}, {$$arity: 0, $$s: self});
      }, 4);
      
      $def(self, '$_racc_evalact', function $$_racc_evalact(act, arg) {
        var $a, $b, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, code = nil, $ret_or_1 = nil, i = nil;

        
        $b = arg, $a = $to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (shift_n = ($a[11] == null ? nil : $a[11])), (reduce_n = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), (_ = ($a[14] == null ? nil : $a[14])), $b;
        if (($truthy($rb_gt(act, 0)) && ($truthy($rb_lt(act, shift_n))))) {
          
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (!$eqeq(self.racc_t, 1)) {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }
          };
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ($truthy(self.yydebug)) {
            
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);
          };
        } else if (($truthy($rb_lt(act, 0)) && ($truthy($rb_gt(act, reduce_n['$-@']()))))) {
          
          code = $send(self, 'catch', ["racc_jump"], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;
            if (self.racc_state == null) self.racc_state = nil;

            
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, {$$arity: 0, $$s: self});
          if ($truthy(code)) {
            if ($eqeqeq(1, ($ret_or_1 = code))) {
              
              self.racc_user_yyerror = true;
              return reduce_n['$-@']();
            } else if ($eqeqeq(2, $ret_or_1)) {
              return shift_n
            } else {
              self.$raise("[Racc Bug] unknown jump code")
            }
          };
        } else if ($eqeq(act, shift_n)) {
          
          if ($truthy(self.yydebug)) {
            self.$racc_accept()
          };
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if ($eqeq(act, reduce_n['$-@']())) {
          
          if ($eqeqeq(0, ($ret_or_1 = self.racc_error_status))) {
            if (!$truthy(arg['$[]'](21))) {
              self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
            }
          } else if ($eqeqeq(3, $ret_or_1)) {
            
            if ($eqeq(self.racc_t, 0)) {
              self.$throw("racc_end_parse", nil)
            };
            self.racc_read_next = true;
          } else {
            nil
          };
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              i = $rb_plus(i, 1);
              if ((($truthy($rb_ge(i, 0)) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
                break;
              };
            };
            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil)
            };
            self.racc_state.$pop();
            self.racc_vstack.$pop();
            if ($truthy(self.yydebug)) {
              
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);
            };
          };
          return act;
        } else {
          self.$raise("[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)
        };
        return nil;
      }, 2);
      
      $def(self, '$_racc_do_reduce', function $$_racc_do_reduce(arg, act) {
        var $a, $b, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, $writer = nil, k1 = nil, curstate = nil;

        
        $b = arg, $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (goto_table = ($a[4] == null ? nil : $a[4])), (goto_check = ($a[5] == null ? nil : $a[5])), (goto_default = ($a[6] == null ? nil : $a[6])), (goto_pointer = ($a[7] == null ? nil : $a[7])), (nt_base = ($a[8] == null ? nil : $a[8])), (reduce_table = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (use_result = ($a[13] == null ? nil : $a[13])), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len)
        };
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ($truthy(self.yydebug)) {
          
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)
        };
        k1 = $rb_minus(reduce_to, nt_base);
        if ($truthy((i = goto_pointer['$[]'](k1)))) {
          
          i = $rb_plus(i, state['$[]'](-1));
          if ((($truthy($rb_ge(i, 0)) && ($truthy((curstate = goto_table['$[]'](i))))) && ($eqeq(goto_check['$[]'](i), k1)))) {
            return curstate
          };
        };
        return goto_default['$[]'](k1);
      }, 2);
      
      $def(self, '$on_error', function $$on_error(t, val, vstack) {
        var self = this, $ret_or_1 = nil;

        return self.$raise($$('ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), ($truthy(($ret_or_1 = self.$token_to_str(t))) ? ($ret_or_1) : ("?"))))
      }, 3);
      
      $def(self, '$yyerror', function $$yyerror() {
        var self = this;

        return self.$throw("racc_jump", 1)
      }, 0);
      
      $def(self, '$yyaccept', function $$yyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2)
      }, 0);
      
      $def(self, '$yyerrok', function $$yyerrok() {
        var self = this;

        return (self.racc_error_status = 0)
      }, 0);
      
      $def(self, '$racc_read_token', function $$racc_read_token(t, tok, val) {
        var self = this;

        
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, 3);
      
      $def(self, '$racc_shift', function $$racc_shift(tok, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, 3);
      
      $def(self, '$racc_reduce', function $$racc_reduce(toks, sim, tstack, vstack) {
        var self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("reduce ");
        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>")
        } else {
          $send(toks, 'each', [], function $$5(t){var self = $$5.$$s == null ? this : $$5.$$s;

            
            
            if (t == null) t = nil;;
            return out.$print(" ", self.$racc_token2str(t));}, {$$arity: 1, $$s: self})
        };
        out.$puts(" --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, 4);
      
      $def(self, '$racc_accept', function $$racc_accept() {
        var self = this;

        
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, 0);
      
      $def(self, '$racc_e_pop', function $$racc_e_pop(state, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, 3);
      
      $def(self, '$racc_next_state', function $$racc_next_state(curstate, state) {
        var self = this;

        
        self.racc_debug_out.$puts("goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, 2);
      
      $def(self, '$racc_print_stacks', function $$racc_print_stacks(t, v) {
        var self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], function $$6(i){var self = $$6.$$s == null ? this : $$6.$$s;

          
          
          if (i == null) i = nil;;
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");}, {$$arity: 1, $$s: self});
        return out.$puts(" ]");
      }, 2);
      
      $def(self, '$racc_print_states', function $$racc_print_states(s) {
        var self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], function $$7(st){
          
          
          if (st == null) st = nil;;
          return out.$print(" ", st);}, 1);
        return out.$puts(" ]");
      }, 1);
      
      $def(self, '$racc_token2str', function $$racc_token2str(tok) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok)))) {
          return $ret_or_1
        } else {
          return self.$raise("[Racc Bug] can't convert token " + (tok) + " to string")
        }
      }, 1);
      return $def(self, '$token_to_str', function $$token_to_str(t) {
        var self = this;

        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t)
      }, 1);
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

Opal.modules["parser/version"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $const_set = Opal.const_set;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return $const_set($nesting[0], 'VERSION', "3.0.3.2")
  })($nesting[0], $nesting)
};

Opal.modules["racc/parser"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $a, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $const_set = Opal.const_set, $defs = Opal.defs, $gvars = Opal.gvars, $rb_lt = Opal.rb_lt, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def, $to_ary = Opal.to_ary, $neqeq = Opal.neqeq, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $rb_ge = Opal.rb_ge, $rb_gt = Opal.rb_gt, $eqeqeq = Opal.eqeqeq, $rb_le = Opal.rb_le, $rb_times = Opal.rb_times;

  Opal.add_stubs('[],class,<,size,[]=,-,__send__,_racc_setup,raise,_racc_init_sysvars,catch,!=,next_token,racc_read_token,+,==,>=,_racc_evalact,!,>,push,racc_shift,-@,_racc_do_reduce,===,racc_accept,throw,on_error,<=,pop,racc_e_pop,inspect,racc_next_state,*,racc_reduce,sprintf,token_to_str,print,racc_token2str,puts,racc_print_stacks,empty?,each,racc_print_states,each_index');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return ($klass($nesting[0], $$('StandardError'), 'ParseError'), nil)
  })($nesting[0], $nesting);
  if (!$truthy((($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil))) {
    $const_set($nesting[0], 'ParseError', $$$($$('Racc'), 'ParseError'))
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $a, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    if (!$truthy((($a = $$('Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil))) {
      $const_set($nesting[0], 'Racc_No_Extensions', false)
    };
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.yydebug = $proto.racc_debug_out = $proto.racc_error_status = $proto.racc_t = $proto.racc_vstack = $proto.racc_val = $proto.racc_state = $proto.racc_tstack = nil;
      
      $const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      $const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      $const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      $const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      $const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      $const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      $const_set($nesting[0], 'Racc_Runtime_Core_Version', $$('Racc_Runtime_Core_Version_R'));
      $const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$('Racc_Runtime_Core_Revision_R'));
      $const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      $defs($$('Parser'), '$racc_runtime_type', function $$racc_runtime_type() {
        
        return $$('Racc_Runtime_Type')
      }, 0);
      
      $def(self, '$_racc_setup', function $$_racc_setup() {
        var $a, $b, self = this, $ret_or_1 = nil, arg = nil, $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        
        if (!$truthy($$$(self.$class(), 'Racc_debug_parser'))) {
          self.yydebug = false
        };
        if (!$truthy((($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
          self.yydebug = false
        };
        if ($truthy(self.yydebug)) {
          
          if (!$truthy((($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
            self.racc_debug_out = $gvars.stderr
          };
          self.racc_debug_out = ($truthy(($ret_or_1 = self.racc_debug_out)) ? ($ret_or_1) : ($gvars.stderr));
        };
        arg = $$$(self.$class(), 'Racc_arg');
        if ($truthy($rb_lt(arg.$size(), 14))) {
          
          $writer = [13, true];
          $send(arg, '[]=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return arg;
      }, 0);
      
      $def(self, '$_racc_init_sysvars', function $$_racc_init_sysvars() {
        var self = this;

        
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return (self.racc_error_status = 0);
      }, 0);
      
      $def(self, '$do_parse', function $$do_parse() {
        var self = this;

        return self.$__send__($$('Racc_Main_Parsing_Routine'), self.$_racc_setup(), false)
      }, 0);
      
      $def(self, '$next_token', function $$next_token() {
        var self = this;

        return self.$raise($$('NotImplementedError'), "" + (self.$class()) + "#next_token is not defined")
      }, 0);
      
      $def(self, '$_racc_do_parse_rb', function $$_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        
        $b = arg, $a = $to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        tok = (act = (i = nil));
        return $send(self, 'catch', ["racc_end_parse"], function $$1(){var $c, $d, $e, self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              if ($truthy(self.racc_read_next)) {
                if ($neqeq(self.racc_t, 0)) {
                  
                  $e = self.$next_token(), $d = $to_ary($e), (tok = ($d[0] == null ? nil : $d[0])), (self.racc_val = ($d[1] == null ? nil : $d[1])), $e;
                  if ($truthy(tok)) {
                    self.racc_t = ($truthy(($ret_or_1 = token_table['$[]'](tok))) ? ($ret_or_1) : (1))
                  } else {
                    self.racc_t = 0
                  };
                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val)
                  };
                  self.racc_read_next = false;
                }
              };
              i = $rb_plus(i, self.racc_t);
              if (!(($truthy($rb_ge(i, 0)) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
          }}, {$$arity: 0, $$s: self});
      }, 2);
      
      $def(self, '$yyparse', function $$yyparse(recv, mid) {
        var self = this;

        return self.$__send__($$('Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true)
      }, 2);
      
      $def(self, '$_racc_yyparse_rb', function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        
        $b = arg, $a = $to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], function $$2(){var $c, $d, self = $$2.$$s == null ? this : $$2.$$s;
          if (self.racc_state == null) self.racc_state = nil;

          
          while (!($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1)))))) {
            while ($truthy((act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)))) {
              
            }
          };
          return $send(recv, '__send__', [mid], function $$3(tok, val){var $e, $f, self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil, $ret_or_2 = nil;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

            
            
            if (tok == null) tok = nil;;
            
            if (val == null) val = nil;;
            if ($truthy(tok)) {
              self.racc_t = ($truthy(($ret_or_1 = token_table['$[]'](tok))) ? ($ret_or_1) : (1))
            } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if (!(($truthy($rb_ge(i, 0)) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
            while ($truthy(($truthy(($ret_or_1 = ($truthy(($ret_or_2 = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']())) ? ($ret_or_2) : (self.racc_read_next['$!']())))) ? ($ret_or_1) : (self.racc_t['$=='](0))))) {
              
              if (!(((($truthy(i) && ($truthy((i = $rb_plus(i, self.racc_t))))) && ($truthy($rb_ge(i, 0)))) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
              while ($truthy((act = self.$_racc_evalact(act, arg)))) {
                
              };
            };}, {$$arity: 2, $$s: self});}, {$$arity: 0, $$s: self});
      }, 4);
      
      $def(self, '$_racc_evalact', function $$_racc_evalact(act, arg) {
        var $a, $b, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, code = nil, $ret_or_1 = nil, i = nil;

        
        $b = arg, $a = $to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (shift_n = ($a[11] == null ? nil : $a[11])), (reduce_n = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), (_ = ($a[14] == null ? nil : $a[14])), $b;
        if (($truthy($rb_gt(act, 0)) && ($truthy($rb_lt(act, shift_n))))) {
          
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (!$eqeq(self.racc_t, 1)) {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }
          };
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ($truthy(self.yydebug)) {
            
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);
          };
        } else if (($truthy($rb_lt(act, 0)) && ($truthy($rb_gt(act, reduce_n['$-@']()))))) {
          
          code = $send(self, 'catch', ["racc_jump"], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;
            if (self.racc_state == null) self.racc_state = nil;

            
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, {$$arity: 0, $$s: self});
          if ($truthy(code)) {
            if ($eqeqeq(1, ($ret_or_1 = code))) {
              
              self.racc_user_yyerror = true;
              return reduce_n['$-@']();
            } else if ($eqeqeq(2, $ret_or_1)) {
              return shift_n
            } else {
              self.$raise("[Racc Bug] unknown jump code")
            }
          };
        } else if ($eqeq(act, shift_n)) {
          
          if ($truthy(self.yydebug)) {
            self.$racc_accept()
          };
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if ($eqeq(act, reduce_n['$-@']())) {
          
          if ($eqeqeq(0, ($ret_or_1 = self.racc_error_status))) {
            if (!$truthy(arg['$[]'](21))) {
              self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
            }
          } else if ($eqeqeq(3, $ret_or_1)) {
            
            if ($eqeq(self.racc_t, 0)) {
              self.$throw("racc_end_parse", nil)
            };
            self.racc_read_next = true;
          } else {
            nil
          };
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              i = $rb_plus(i, 1);
              if ((($truthy($rb_ge(i, 0)) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
                break;
              };
            };
            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil)
            };
            self.racc_state.$pop();
            self.racc_vstack.$pop();
            if ($truthy(self.yydebug)) {
              
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);
            };
          };
          return act;
        } else {
          self.$raise("[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)
        };
        return nil;
      }, 2);
      
      $def(self, '$_racc_do_reduce', function $$_racc_do_reduce(arg, act) {
        var $a, $b, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, $writer = nil, k1 = nil, curstate = nil;

        
        $b = arg, $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (goto_table = ($a[4] == null ? nil : $a[4])), (goto_check = ($a[5] == null ? nil : $a[5])), (goto_default = ($a[6] == null ? nil : $a[6])), (goto_pointer = ($a[7] == null ? nil : $a[7])), (nt_base = ($a[8] == null ? nil : $a[8])), (reduce_table = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (use_result = ($a[13] == null ? nil : $a[13])), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len)
        };
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ($truthy(self.yydebug)) {
          
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)
        };
        k1 = $rb_minus(reduce_to, nt_base);
        if ($truthy((i = goto_pointer['$[]'](k1)))) {
          
          i = $rb_plus(i, state['$[]'](-1));
          if ((($truthy($rb_ge(i, 0)) && ($truthy((curstate = goto_table['$[]'](i))))) && ($eqeq(goto_check['$[]'](i), k1)))) {
            return curstate
          };
        };
        return goto_default['$[]'](k1);
      }, 2);
      
      $def(self, '$on_error', function $$on_error(t, val, vstack) {
        var self = this, $ret_or_1 = nil;

        return self.$raise($$('ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), ($truthy(($ret_or_1 = self.$token_to_str(t))) ? ($ret_or_1) : ("?"))))
      }, 3);
      
      $def(self, '$yyerror', function $$yyerror() {
        var self = this;

        return self.$throw("racc_jump", 1)
      }, 0);
      
      $def(self, '$yyaccept', function $$yyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2)
      }, 0);
      
      $def(self, '$yyerrok', function $$yyerrok() {
        var self = this;

        return (self.racc_error_status = 0)
      }, 0);
      
      $def(self, '$racc_read_token', function $$racc_read_token(t, tok, val) {
        var self = this;

        
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, 3);
      
      $def(self, '$racc_shift', function $$racc_shift(tok, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, 3);
      
      $def(self, '$racc_reduce', function $$racc_reduce(toks, sim, tstack, vstack) {
        var self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("reduce ");
        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>")
        } else {
          $send(toks, 'each', [], function $$5(t){var self = $$5.$$s == null ? this : $$5.$$s;

            
            
            if (t == null) t = nil;;
            return out.$print(" ", self.$racc_token2str(t));}, {$$arity: 1, $$s: self})
        };
        out.$puts(" --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, 4);
      
      $def(self, '$racc_accept', function $$racc_accept() {
        var self = this;

        
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, 0);
      
      $def(self, '$racc_e_pop', function $$racc_e_pop(state, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, 3);
      
      $def(self, '$racc_next_state', function $$racc_next_state(curstate, state) {
        var self = this;

        
        self.racc_debug_out.$puts("goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, 2);
      
      $def(self, '$racc_print_stacks', function $$racc_print_stacks(t, v) {
        var self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], function $$6(i){var self = $$6.$$s == null ? this : $$6.$$s;

          
          
          if (i == null) i = nil;;
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");}, {$$arity: 1, $$s: self});
        return out.$puts(" ]");
      }, 2);
      
      $def(self, '$racc_print_states', function $$racc_print_states(s) {
        var self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], function $$7(st){
          
          
          if (st == null) st = nil;;
          return out.$print(" ", st);}, 1);
        return out.$puts(" ]");
      }, 1);
      
      $def(self, '$racc_token2str', function $$racc_token2str(tok) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok)))) {
          return $ret_or_1
        } else {
          return self.$raise("[Racc Bug] can't convert token " + (tok) + " to string")
        }
      }, 1);
      return $def(self, '$token_to_str', function $$token_to_str(t) {
        var self = this;

        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t)
      }, 1);
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

Opal.modules["parser/messages"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $const_set = Opal.const_set, $hash2 = Opal.hash2, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $defs = Opal.defs;

  Opal.add_stubs('freeze,[],empty?,===,format');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    
    $const_set($nesting[0], 'MESSAGES', $hash2(["unicode_point_too_large", "invalid_escape", "incomplete_escape", "invalid_hex_escape", "invalid_unicode_escape", "unterminated_unicode", "escape_eof", "string_eof", "regexp_options", "cvar_name", "ivar_name", "trailing_in_number", "empty_numeric", "invalid_octal", "no_dot_digit_literal", "bare_backslash", "unexpected", "embedded_document", "heredoc_id_has_newline", "heredoc_id_ends_with_nl", "unterminated_heredoc_id", "invalid_escape_use", "ambiguous_literal", "ambiguous_regexp", "ambiguous_prefix", "triple_dot_at_eol", "nth_ref_alias", "begin_in_method", "backref_assignment", "invalid_assignment", "module_name_const", "unexpected_token", "argument_const", "argument_ivar", "argument_gvar", "argument_cvar", "duplicate_argument", "empty_symbol", "odd_hash", "singleton_literal", "dynamic_const", "const_reassignment", "module_in_def", "class_in_def", "unexpected_percent_str", "block_and_blockarg", "masgn_as_condition", "block_given_to_yield", "invalid_regexp", "invalid_return", "csend_in_lhs_of_masgn", "cant_assign_to_numparam", "reserved_for_numparam", "ordinary_param_defined", "numparam_used_in_outer_scope", "circular_argument_reference", "pm_interp_in_var_name", "lvar_name", "undefined_lvar", "duplicate_variable_name", "duplicate_pattern_key", "endless_setter", "invalid_id_to_get", "forward_arg_after_restarg", "no_anonymous_blockarg", "useless_else", "duplicate_hash_key", "invalid_encoding", "invalid_action", "clobbered", "different_replacements", "swallowed_insertions", "swallowed_insertions_conflict", "crossing_deletions", "crossing_deletions_conflict", "crossing_insertions", "crossing_insertions_conflict"], {"unicode_point_too_large": "invalid Unicode codepoint (too large)", "invalid_escape": "invalid escape character syntax", "incomplete_escape": "incomplete character syntax", "invalid_hex_escape": "invalid hex escape", "invalid_unicode_escape": "invalid Unicode escape", "unterminated_unicode": "unterminated Unicode escape", "escape_eof": "escape sequence meets end of file", "string_eof": "unterminated string meets end of file", "regexp_options": "unknown regexp options: %{options}", "cvar_name": "`%{name}' is not allowed as a class variable name", "ivar_name": "`%{name}' is not allowed as an instance variable name", "trailing_in_number": "trailing `%{character}' in number", "empty_numeric": "numeric literal without digits", "invalid_octal": "invalid octal digit", "no_dot_digit_literal": "no .<digit> floating literal anymore; put 0 before dot", "bare_backslash": "bare backslash only allowed before newline", "unexpected": "unexpected `%{character}'", "embedded_document": "embedded document meets end of file (and they embark on a romantic journey)", "heredoc_id_has_newline": "here document identifier across newlines, never match", "heredoc_id_ends_with_nl": "here document identifier ends with a newline", "unterminated_heredoc_id": "unterminated heredoc id", "invalid_escape_use": "invalid character syntax; use ?%{escape}", "ambiguous_literal": "ambiguous first argument; put parentheses or a space even after the operator", "ambiguous_regexp": "ambiguity between regexp and two divisions: wrap regexp in parentheses or add a space after `/' operator", "ambiguous_prefix": "`%{prefix}' interpreted as argument prefix", "triple_dot_at_eol": "... at EOL, should be parenthesized", "nth_ref_alias": "cannot define an alias for a back-reference variable", "begin_in_method": "BEGIN in method", "backref_assignment": "cannot assign to a back-reference variable", "invalid_assignment": "cannot assign to a keyword", "module_name_const": "class or module name must be a constant literal", "unexpected_token": "unexpected token %{token}", "argument_const": "formal argument cannot be a constant", "argument_ivar": "formal argument cannot be an instance variable", "argument_gvar": "formal argument cannot be a global variable", "argument_cvar": "formal argument cannot be a class variable", "duplicate_argument": "duplicate argument name", "empty_symbol": "empty symbol literal", "odd_hash": "odd number of entries for a hash", "singleton_literal": "cannot define a singleton method for a literal", "dynamic_const": "dynamic constant assignment", "const_reassignment": "constant re-assignment", "module_in_def": "module definition in method body", "class_in_def": "class definition in method body", "unexpected_percent_str": "%{type}: unknown type of percent-literal", "block_and_blockarg": "both block argument and literal block are passed", "masgn_as_condition": "multiple assignment in conditional context", "block_given_to_yield": "block given to yield", "invalid_regexp": "%{message}", "invalid_return": "Invalid return in class/module body", "csend_in_lhs_of_masgn": "&. inside multiple assignment destination", "cant_assign_to_numparam": "cannot assign to numbered parameter %{name}", "reserved_for_numparam": "%{name} is reserved for numbered parameter", "ordinary_param_defined": "ordinary parameter is defined", "numparam_used_in_outer_scope": "numbered parameter is already used in an outer scope", "circular_argument_reference": "circular argument reference %{var_name}", "pm_interp_in_var_name": "symbol literal with interpolation is not allowed", "lvar_name": "`%{name}' is not allowed as a local variable name", "undefined_lvar": "no such local variable: `%{name}'", "duplicate_variable_name": "duplicate variable name %{name}", "duplicate_pattern_key": "duplicate hash pattern key %{name}", "endless_setter": "setter method cannot be defined in an endless method definition", "invalid_id_to_get": "identifier %{identifier} is not valid to get", "forward_arg_after_restarg": "... after rest argument", "no_anonymous_blockarg": "no anonymous block parameter", "useless_else": "else without rescue is useless", "duplicate_hash_key": "key is duplicated and overwritten", "invalid_encoding": "literal contains escape sequences incompatible with UTF-8", "invalid_action": "cannot %{action}", "clobbered": "clobbered by: %{action}", "different_replacements": "different replacements: %{replacement} vs %{other_replacement}", "swallowed_insertions": "this replacement:", "swallowed_insertions_conflict": "swallows some inner rewriting actions:", "crossing_deletions": "the deletion of:", "crossing_deletions_conflict": "is crossing:", "crossing_insertions": "the rewriting action on:", "crossing_insertions_conflict": "is crossing that on:"}).$freeze());
    return (function($base, $parent_nesting) {
      var self = $module($base, 'Messages');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return $defs(self, '$compile', function $$compile(reason, arguments$) {
        var self = this, template = nil;

        
        template = $$('MESSAGES')['$[]'](reason);
        if (($eqeqeq($$('Hash'), arguments$) && ($truthy(arguments$['$empty?']())))) {
          return template
        };
        return self.$format(template, arguments$);
      }, 2)
    })($nesting[0], $nesting);
  })($nesting[0], $nesting)
};

Opal.modules["parser/deprecation"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $truthy = Opal.truthy, $def = Opal.def;

  Opal.add_stubs('attr_writer,warn');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base) {
      var self = $module($base, 'Deprecation');

      
      
      self.$attr_writer("warned_of_deprecation");
      return $def(self, '$warn_of_deprecation', function $$warn_of_deprecation() {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;
        if (self.warned_of_deprecation == null) self.warned_of_deprecation = nil;

        return (self.warned_of_deprecation = ($truthy(($ret_or_1 = self.warned_of_deprecation)) ? ($ret_or_1) : ($truthy(($ret_or_2 = self.$warn($$$(self, 'DEPRECATION_WARNING')))) ? ($ret_or_2) : (true))))
      }, 0);
    })($nesting[0])
  })($nesting[0], $nesting)
};

Opal.modules["parser/ast/processor"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $alias = Opal.alias, $to_a = Opal.to_a, $not = Opal.not, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs('updated,process_all,on_var,!,nil?,process,on_vasgn,on_argument,is_a?,[],children,process_regular_node,warn');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Processor');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        
        $def(self, '$process_regular_node', function $$process_regular_node(node) {
          var self = this;

          return node.$updated(nil, self.$process_all(node))
        }, 1);
        $alias(self, "on_dstr", "process_regular_node");
        $alias(self, "on_dsym", "process_regular_node");
        $alias(self, "on_regexp", "process_regular_node");
        $alias(self, "on_xstr", "process_regular_node");
        $alias(self, "on_splat", "process_regular_node");
        $alias(self, "on_kwsplat", "process_regular_node");
        $alias(self, "on_array", "process_regular_node");
        $alias(self, "on_pair", "process_regular_node");
        $alias(self, "on_hash", "process_regular_node");
        $alias(self, "on_kwargs", "process_regular_node");
        $alias(self, "on_irange", "process_regular_node");
        $alias(self, "on_erange", "process_regular_node");
        
        $def(self, '$on_var', function $$on_var(node) {
          
          return node
        }, 1);
        
        $def(self, '$process_variable_node', function $$process_variable_node(node) {
          var self = this;

          return self.$on_var(node)
        }, 1);
        $alias(self, "on_lvar", "process_variable_node");
        $alias(self, "on_ivar", "process_variable_node");
        $alias(self, "on_gvar", "process_variable_node");
        $alias(self, "on_cvar", "process_variable_node");
        $alias(self, "on_back_ref", "process_variable_node");
        $alias(self, "on_nth_ref", "process_variable_node");
        
        $def(self, '$on_vasgn', function $$on_vasgn(node) {
          var $a, self = this, name = nil, value_node = nil;

          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($not(value_node['$nil?']())) {
            return node.$updated(nil, [name, self.$process(value_node)])
          } else {
            return node
          };
        }, 1);
        
        $def(self, '$process_var_asgn_node', function $$process_var_asgn_node(node) {
          var self = this;

          return self.$on_vasgn(node)
        }, 1);
        $alias(self, "on_lvasgn", "process_var_asgn_node");
        $alias(self, "on_ivasgn", "process_var_asgn_node");
        $alias(self, "on_gvasgn", "process_var_asgn_node");
        $alias(self, "on_cvasgn", "process_var_asgn_node");
        $alias(self, "on_and_asgn", "process_regular_node");
        $alias(self, "on_or_asgn", "process_regular_node");
        
        $def(self, '$on_op_asgn', function $$on_op_asgn(node) {
          var $a, self = this, var_node = nil, method_name = nil, value_node = nil;

          
          $a = [].concat($to_a(node)), (var_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [self.$process(var_node), method_name, self.$process(value_node)]);
        }, 1);
        $alias(self, "on_mlhs", "process_regular_node");
        $alias(self, "on_masgn", "process_regular_node");
        
        $def(self, '$on_const', function $$on_const(node) {
          var $a, self = this, scope_node = nil, name = nil;

          
          $a = [].concat($to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, [self.$process(scope_node), name]);
        }, 1);
        
        $def(self, '$on_casgn', function $$on_casgn(node) {
          var $a, self = this, scope_node = nil, name = nil, value_node = nil;

          
          $a = [].concat($to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          if ($not(value_node['$nil?']())) {
            return node.$updated(nil, [self.$process(scope_node), name, self.$process(value_node)])
          } else {
            return node.$updated(nil, [self.$process(scope_node), name])
          };
        }, 1);
        $alias(self, "on_args", "process_regular_node");
        
        $def(self, '$on_argument', function $$on_argument(node) {
          var $a, self = this, arg_name = nil, value_node = nil;

          
          $a = [].concat($to_a(node)), (arg_name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($not(value_node['$nil?']())) {
            return node.$updated(nil, [arg_name, self.$process(value_node)])
          } else {
            return node
          };
        }, 1);
        
        $def(self, '$process_argument_node', function $$process_argument_node(node) {
          var self = this;

          return self.$on_argument(node)
        }, 1);
        $alias(self, "on_arg", "process_argument_node");
        $alias(self, "on_optarg", "process_argument_node");
        $alias(self, "on_restarg", "process_argument_node");
        $alias(self, "on_blockarg", "process_argument_node");
        $alias(self, "on_shadowarg", "process_argument_node");
        $alias(self, "on_kwarg", "process_argument_node");
        $alias(self, "on_kwoptarg", "process_argument_node");
        $alias(self, "on_kwrestarg", "process_argument_node");
        $alias(self, "on_forward_arg", "process_argument_node");
        
        $def(self, '$on_procarg0', function $$on_procarg0(node) {
          var self = this;

          if ($truthy(node.$children()['$[]'](0)['$is_a?']($$('Symbol')))) {
            return self.$on_argument(node)
          } else {
            return self.$process_regular_node(node)
          }
        }, 1);
        $alias(self, "on_arg_expr", "process_regular_node");
        $alias(self, "on_restarg_expr", "process_regular_node");
        $alias(self, "on_blockarg_expr", "process_regular_node");
        $alias(self, "on_block_pass", "process_regular_node");
        $alias(self, "on_module", "process_regular_node");
        $alias(self, "on_class", "process_regular_node");
        $alias(self, "on_sclass", "process_regular_node");
        
        $def(self, '$on_def', function $$on_def(node) {
          var $a, self = this, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (args_node = ($a[1] == null ? nil : $a[1])), (body_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [name, self.$process(args_node), self.$process(body_node)]);
        }, 1);
        
        $def(self, '$on_defs', function $$on_defs(node) {
          var $a, self = this, definee_node = nil, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat($to_a(node)), (definee_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (args_node = ($a[2] == null ? nil : $a[2])), (body_node = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, [self.$process(definee_node), name, self.$process(args_node), self.$process(body_node)]);
        }, 1);
        $alias(self, "on_undef", "process_regular_node");
        $alias(self, "on_alias", "process_regular_node");
        
        $def(self, '$on_send', function $$on_send(node) {
          var $a, self = this, receiver_node = nil, method_name = nil, arg_nodes = nil;

          
          $a = [].concat($to_a(node)), (receiver_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (arg_nodes = $slice.call($a, 2)), $a;
          if ($truthy(receiver_node)) {
            receiver_node = self.$process(receiver_node)
          };
          return node.$updated(nil, [receiver_node, method_name].concat($to_a(self.$process_all(arg_nodes))));
        }, 1);
        $alias(self, "on_csend", "on_send");
        $alias(self, "on_index", "process_regular_node");
        $alias(self, "on_indexasgn", "process_regular_node");
        $alias(self, "on_block", "process_regular_node");
        $alias(self, "on_lambda", "process_regular_node");
        
        $def(self, '$on_numblock', function $$on_numblock(node) {
          var $a, self = this, method_call = nil, max_numparam = nil, body = nil;

          
          $a = [].concat($to_a(node)), (method_call = ($a[0] == null ? nil : $a[0])), (max_numparam = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [self.$process(method_call), max_numparam, self.$process(body)]);
        }, 1);
        $alias(self, "on_while", "process_regular_node");
        $alias(self, "on_while_post", "process_regular_node");
        $alias(self, "on_until", "process_regular_node");
        $alias(self, "on_until_post", "process_regular_node");
        $alias(self, "on_for", "process_regular_node");
        $alias(self, "on_return", "process_regular_node");
        $alias(self, "on_break", "process_regular_node");
        $alias(self, "on_next", "process_regular_node");
        $alias(self, "on_redo", "process_regular_node");
        $alias(self, "on_retry", "process_regular_node");
        $alias(self, "on_super", "process_regular_node");
        $alias(self, "on_yield", "process_regular_node");
        $alias(self, "on_defined?", "process_regular_node");
        $alias(self, "on_not", "process_regular_node");
        $alias(self, "on_and", "process_regular_node");
        $alias(self, "on_or", "process_regular_node");
        $alias(self, "on_if", "process_regular_node");
        $alias(self, "on_when", "process_regular_node");
        $alias(self, "on_case", "process_regular_node");
        $alias(self, "on_iflipflop", "process_regular_node");
        $alias(self, "on_eflipflop", "process_regular_node");
        $alias(self, "on_match_current_line", "process_regular_node");
        $alias(self, "on_match_with_lvasgn", "process_regular_node");
        $alias(self, "on_resbody", "process_regular_node");
        $alias(self, "on_rescue", "process_regular_node");
        $alias(self, "on_ensure", "process_regular_node");
        $alias(self, "on_begin", "process_regular_node");
        $alias(self, "on_kwbegin", "process_regular_node");
        $alias(self, "on_preexe", "process_regular_node");
        $alias(self, "on_postexe", "process_regular_node");
        $alias(self, "on_case_match", "process_regular_node");
        $alias(self, "on_in_match", "process_regular_node");
        $alias(self, "on_match_pattern", "process_regular_node");
        $alias(self, "on_match_pattern_p", "process_regular_node");
        $alias(self, "on_in_pattern", "process_regular_node");
        $alias(self, "on_if_guard", "process_regular_node");
        $alias(self, "on_unless_guard", "process_regular_node");
        $alias(self, "on_match_var", "process_variable_node");
        $alias(self, "on_match_rest", "process_regular_node");
        $alias(self, "on_pin", "process_regular_node");
        $alias(self, "on_match_alt", "process_regular_node");
        $alias(self, "on_match_as", "process_regular_node");
        $alias(self, "on_array_pattern", "process_regular_node");
        $alias(self, "on_array_pattern_with_tail", "process_regular_node");
        $alias(self, "on_hash_pattern", "process_regular_node");
        $alias(self, "on_const_pattern", "process_regular_node");
        $alias(self, "on_find_pattern", "process_regular_node");
        
        $def(self, '$process_variable_node', function $$process_variable_node(node) {
          var self = this;

          
          self.$warn("Parser::AST::Processor#process_variable_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_var instead.");
          return self.$on_var(node);
        }, 1);
        
        $def(self, '$process_var_asgn_node', function $$process_var_asgn_node(node) {
          var self = this;

          
          self.$warn("Parser::AST::Processor#process_var_asgn_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_vasgn instead.");
          return self.$on_vasgn(node);
        }, 1);
        
        $def(self, '$process_argument_node', function $$process_argument_node(node) {
          var self = this;

          
          self.$warn("Parser::AST::Processor#process_argument_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_argument instead.");
          return self.$on_argument(node);
        }, 1);
        return $def(self, '$on_empty_else', function $$on_empty_else(node) {
          
          return node
        }, 1);
      })($nesting[0], $$$($$$('AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/meta"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $const_set = Opal.const_set;

  Opal.add_stubs('freeze,to_set');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Meta');

      var $nesting = [self].concat($parent_nesting);

      return $const_set($nesting[0], 'NODE_TYPES', ["true", "false", "nil", "int", "float", "str", "dstr", "sym", "dsym", "xstr", "regopt", "regexp", "array", "splat", "pair", "kwsplat", "hash", "irange", "erange", "self", "lvar", "ivar", "cvar", "gvar", "const", "defined?", "lvasgn", "ivasgn", "cvasgn", "gvasgn", "casgn", "mlhs", "masgn", "op_asgn", "and_asgn", "ensure", "rescue", "arg_expr", "or_asgn", "back_ref", "nth_ref", "match_with_lvasgn", "match_current_line", "module", "class", "sclass", "def", "defs", "undef", "alias", "args", "cbase", "arg", "optarg", "restarg", "blockarg", "block_pass", "kwarg", "kwoptarg", "kwrestarg", "kwnilarg", "send", "csend", "super", "zsuper", "yield", "block", "and", "not", "or", "if", "when", "case", "while", "until", "while_post", "until_post", "for", "break", "next", "redo", "return", "resbody", "kwbegin", "begin", "retry", "preexe", "postexe", "iflipflop", "eflipflop", "shadowarg", "complex", "rational", "__FILE__", "__LINE__", "__ENCODING__", "ident", "lambda", "indexasgn", "index", "procarg0", "restarg_expr", "blockarg_expr", "objc_kwarg", "objc_restarg", "objc_varargs", "numargs", "numblock", "forward_args", "forwarded_args", "forward_arg", "case_match", "in_match", "in_pattern", "match_var", "pin", "match_alt", "match_as", "match_rest", "array_pattern", "match_with_trailing_comma", "array_pattern_with_tail", "hash_pattern", "const_pattern", "if_guard", "unless_guard", "match_nil_pattern", "empty_else", "find_pattern", "kwargs", "match_pattern_p", "match_pattern"].$to_set().$freeze())
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/buffer"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $regexp = Opal.regexp, $enc = Opal.enc, $truthy = Opal.truthy, $gvars = Opal.gvars, $eqeq = Opal.eqeq, $neqeq = Opal.neqeq, $defs = Opal.defs, $hash2 = Opal.hash2, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def, $not = Opal.not, $rb_plus = Opal.rb_plus, $rb_ge = Opal.rb_ge, $rb_lt = Opal.rb_lt, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs('attr_reader,empty?,=~,start_with?,freeze,==,[],!=,nil?,match,find,encoding,recognize_encoding,force_encoding,encode,to_s,source=,-,open,read,raise,frozen?,dup,reencode_string,class,valid_encoding?,name,raw_source=,gsub,!,ascii_only?,line_index_for_position,line_begins,+,to_a,lines,end_with?,<<,each,chomp!,fetch,source_lines,>=,size,<,new,source,source_range,private,index,bsearch,[]=,method_defined?,bsearch_index');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Buffer');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.name = $proto.source = $proto.slice_source = $proto.first_line = $proto.lines = $proto.source_range = $proto.line_begins = $proto.line_index_for_position = $proto.line_range = nil;
        
        self.$attr_reader("name", "first_line");
        $const_set($nesting[0], 'ENCODING_RE', $regexp([$enc("[\\s#](en)?coding\\s*[:=]\\s*", "ASCII-8BIT"), $enc("(", "ASCII-8BIT"), $enc("", "ASCII-8BIT"), $enc("(utf8-mac)", "ASCII-8BIT"), $enc("|", "ASCII-8BIT"), $enc("", "ASCII-8BIT"), $enc("([A-Za-z0-9_-]+?)(-unix|-dos|-mac)", "ASCII-8BIT"), $enc("|", "ASCII-8BIT"), $enc("([A-Za-z0-9_-]+)", "ASCII-8BIT"), $enc(")", "ASCII-8BIT"), $enc("", "ASCII-8BIT")]));
        $defs(self, '$recognize_encoding', function $$recognize_encoding(string) {
          var $a, $b, first_line = nil, second_line = nil, encoding_line = nil, result = nil, $ret_or_1 = nil, $ret_or_2 = nil;

          
          if ($truthy(string['$empty?']())) {
            return nil
          };
          string['$=~'](/^(.*)\n?(.*\n)?/);
          $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))], (first_line = $a[0]), (second_line = $a[1]), $a;
          if ($truthy(first_line['$start_with?']($enc("\xEF\xBB\xBF", "ASCII-8BIT").$freeze()))) {
            return $$$($$('Encoding'), 'UTF_8')
          } else if ($eqeq(first_line['$[]'](0, 2), $enc("#!", "ASCII-8BIT").$freeze())) {
            encoding_line = second_line
          } else {
            encoding_line = first_line
          };
          if (($truthy(encoding_line['$nil?']()) || ($neqeq(encoding_line['$[]'](0), $enc("#", "ASCII-8BIT"))))) {
            return nil
          };
          if ($truthy((result = $$('ENCODING_RE').$match(encoding_line)))) {
            return $$('Encoding').$find(($truthy(($ret_or_1 = ($truthy(($ret_or_2 = result['$[]'](3))) ? ($ret_or_2) : (result['$[]'](4))))) ? ($ret_or_1) : (result['$[]'](6))))
          } else {
            return nil
          };
        }, 1);
        $defs(self, '$reencode_string', function $$reencode_string(input) {
          var self = this, original_encoding = nil, detected_encoding = nil;

          
          original_encoding = input.$encoding();
          detected_encoding = self.$recognize_encoding(input.$force_encoding($$$($$('Encoding'), 'BINARY')));
          if ($truthy(detected_encoding['$nil?']())) {
            return input.$force_encoding(original_encoding)
          } else if ($eqeq(detected_encoding, $$$($$('Encoding'), 'BINARY'))) {
            return input
          } else {
            return input.$force_encoding(detected_encoding).$encode($$$($$('Encoding'), 'UTF_8'))
          };
        }, 1);
        
        $def(self, '$initialize', function $$initialize(name, $a, $b) {
          var $post_args, $kwargs, first_line, source, self = this, $writer = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1);
          
          $kwargs = Opal.extract_kwargs($post_args);
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          if ($post_args.length > 0) first_line = $post_args.shift();
          if (first_line == null) first_line = 1;;
          
          source = $kwargs.$$smap["source"];
          if (source == null) source = nil;
          self.name = name.$to_s();
          self.source = nil;
          self.first_line = first_line;
          self.lines = nil;
          self.line_begins = nil;
          self.slice_source = nil;
          self.line_index_for_position = $hash2([], {});
          if ($truthy(source)) {
            
            $writer = [source];
            $send(self, 'source=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };
        }, -2);
        
        $def(self, '$read', function $$read() {
          var self = this;

          
          $send($$('File'), 'open', [self.name, $enc("rb", "ASCII-8BIT")], function $$1(io){var self = $$1.$$s == null ? this : $$1.$$s, $writer = nil;

            
            
            if (io == null) io = nil;;
            $writer = [io.$read()];
            $send(self, 'source=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, {$$arity: 1, $$s: self});
          return self;
        }, 0);
        
        $def(self, '$source', function $$source() {
          var self = this;

          
          if ($truthy(self.source['$nil?']())) {
            self.$raise($$('RuntimeError'), $enc("Cannot extract source from uninitialized Source::Buffer", "ASCII-8BIT"))
          };
          return self.source;
        }, 0);
        
        $def(self, '$source=', function $Buffer_source$eq$2(input) {
          var self = this, $writer = nil;

          
          if ($truthy(input['$frozen?']())) {
            input = input.$dup()
          };
          input = self.$class().$reencode_string(input);
          if (!$truthy(input['$valid_encoding?']())) {
            self.$raise($$('EncodingError'), $enc("invalid byte sequence in ", "ASCII-8BIT") + (input.$encoding().$name()))
          };
          
          $writer = [input];
          $send(self, 'raw_source=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, 1);
        
        $def(self, '$raw_source=', function $Buffer_raw_source$eq$3(input) {
          var self = this;

          
          if ($truthy(self.source)) {
            self.$raise($$('ArgumentError'), $enc("Source::Buffer is immutable", "ASCII-8BIT"))
          };
          self.source = input.$gsub($enc("\r\n", "ASCII-8BIT").$freeze(), $enc("\n", "ASCII-8BIT").$freeze()).$freeze();
          if ((($not(self.source['$ascii_only?']()) && ($neqeq(self.source.$encoding(), $$$($$('Encoding'), 'UTF_32LE')))) && ($neqeq(self.source.$encoding(), $$$($$('Encoding'), 'BINARY'))))) {
            return (self.slice_source = self.source.$encode($$$($$('Encoding'), 'UTF_32LE')))
          } else {
            return nil
          };
        }, 1);
        
        $def(self, '$slice', function $$slice(range) {
          var self = this;

          if ($truthy(self.slice_source['$nil?']())) {
            return self.source['$[]'](range)
          } else {
            return self.slice_source['$[]'](range).$encode(self.source.$encoding())
          }
        }, 1);
        
        $def(self, '$decompose_position', function $$decompose_position(position) {
          var self = this, line_index = nil, line_begin = nil;

          
          line_index = self.$line_index_for_position(position);
          line_begin = self.$line_begins()['$[]'](line_index);
          return [$rb_plus(self.first_line, line_index), $rb_minus(position, line_begin)];
        }, 1);
        
        $def(self, '$line_for_position', function $$line_for_position(position) {
          var self = this;

          return $rb_plus(self.$line_index_for_position(position), self.first_line)
        }, 1);
        
        $def(self, '$column_for_position', function $$column_for_position(position) {
          var self = this, line_index = nil;

          
          line_index = self.$line_index_for_position(position);
          return $rb_minus(position, self.$line_begins()['$[]'](line_index));
        }, 1);
        
        $def(self, '$source_lines', function $$source_lines() {
          var self = this, $ret_or_1 = nil, lines = nil;

          return (self.lines = ($truthy(($ret_or_1 = self.lines)) ? ($ret_or_1) : (((lines = self.source.$lines().$to_a()), ($truthy(self.source['$end_with?']($enc("\n", "ASCII-8BIT").$freeze())) ? (lines['$<<']($enc("", "ASCII-8BIT").$dup())) : nil), $send(lines, 'each', [], function $$4(line){
            
            
            if (line == null) line = nil;;
            line['$chomp!']($enc("\n", "ASCII-8BIT").$freeze());
            return line.$freeze();}, 1), lines.$freeze()))))
        }, 0);
        
        $def(self, '$source_line', function $$source_line(lineno) {
          var self = this;

          return self.$source_lines().$fetch($rb_minus(lineno, self.first_line)).$dup()
        }, 1);
        
        $def(self, '$line_range', function $$line_range(lineno) {
          var self = this, index = nil;

          
          index = $rb_minus(lineno, self.first_line);
          if (($truthy($rb_lt(index, 0)) || ($truthy($rb_ge($rb_plus(index, 1), self.$line_begins().$size()))))) {
            return self.$raise($$('IndexError'), $enc("Parser::Source::Buffer: range for line ", "ASCII-8BIT") + ("" + (lineno) + $enc(" requested, valid line numbers are ", "ASCII-8BIT") + (self.first_line) + $enc("..", "ASCII-8BIT")) + ("" + ($rb_minus($rb_plus(self.first_line, self.$line_begins().$size()), 2))))
          } else {
            return $$('Range').$new(self, self.$line_begins()['$[]'](index), $rb_minus(self.$line_begins()['$[]']($rb_plus(index, 1)), 1))
          };
        }, 1);
        
        $def(self, '$source_range', function $$source_range() {
          var self = this, $ret_or_1 = nil;

          return (self.source_range = ($truthy(($ret_or_1 = self.source_range)) ? ($ret_or_1) : ($$('Range').$new(self, 0, self.$source().$size()))))
        }, 0);
        
        $def(self, '$last_line', function $$last_line() {
          var self = this;

          return $rb_minus($rb_plus(self.$line_begins().$size(), self.first_line), 2)
        }, 0);
        
        $def(self, '$freeze', function $$freeze() {
          var $yield = $$freeze.$$p || nil, self = this;

          delete $$freeze.$$p;
          
          self.$source_lines();
          self.$line_begins();
          self.$source_range();
          return $send2(self, $find_super(self, 'freeze', $$freeze, false, true), 'freeze', [], $yield);
        }, 0);
        
        $def(self, '$inspect', function $$inspect() {
          var self = this;

          return $enc("#<", "ASCII-8BIT") + (self.$class()) + $enc(" ", "ASCII-8BIT") + (self.$name()) + $enc(">", "ASCII-8BIT")
        }, 0);
        self.$private();
        
        $def(self, '$line_begins', function $$line_begins() {
          var $a, self = this, $ret_or_1 = nil, begins = nil, index = nil;

          return (self.line_begins = ($truthy(($ret_or_1 = self.line_begins)) ? ($ret_or_1) : ((function() {
          (begins = [0]);
          (index = 0);
          (function() {while ($truthy((index = self.source.$index($enc("\n", "ASCII-8BIT").$freeze(), index)))) {
            
            index = $rb_plus(index, 1);
            begins['$<<'](index);
          }; return nil; })();
          begins['$<<']($rb_plus(self.source.$size(), 1));
          return begins;})())))
        }, 0);
        
        $def(self, '$line_index_for_position', function $$line_index_for_position(position) {
          var self = this, $ret_or_1 = nil, index = nil, $writer = nil;

          if ($truthy(($ret_or_1 = self.line_index_for_position['$[]'](position)))) {
            return $ret_or_1
          } else {
            
            index = $rb_minus(self.$bsearch(self.$line_begins(), position), 1);
            if (!$truthy(self.line_index_for_position['$frozen?']())) {
              
              $writer = [position, index];
              $send(self.line_index_for_position, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            return index;
          }
        }, 1);
        if ($truthy($$('Array')['$method_defined?']("bsearch_index"))) {
          return $def(self, '$bsearch', function $$bsearch(line_begins, position) {
            var $ret_or_1 = nil;

            if ($truthy(($ret_or_1 = $send(line_begins, 'bsearch_index', [], function $$5(line_begin){
              
              
              if (line_begin == null) line_begin = nil;;
              return $rb_lt(position, line_begin);}, 1)))) {
              return $ret_or_1
            } else {
              return $rb_minus(line_begins.$size(), 1)
            }
          }, 2)
        } else {
          return $def(self, '$bsearch', function $$bsearch(line_begins, position) {
            var self = this, $ret_or_1 = nil;

            
            self.line_range = ($truthy(($ret_or_1 = self.line_range)) ? ($ret_or_1) : (Opal.Range.$new(0,line_begins.$size(), true)));
            if ($truthy(($ret_or_1 = $send(self.line_range, 'bsearch', [], function $$6(i){
              
              
              if (i == null) i = nil;;
              return $rb_lt(position, line_begins['$[]'](i));}, 1)))) {
              return $ret_or_1
            } else {
              return $rb_minus(line_begins.$size(), 1)
            };
          }, 2)
        };
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/range"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $def = Opal.def, $hash2 = Opal.hash2, $rb_minus = Opal.rb_minus, $alias = Opal.alias, $neqeq = Opal.neqeq, $to_ary = Opal.to_ary, $rb_plus = Opal.rb_plus, $rb_ge = Opal.rb_ge, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq;

  Opal.add_stubs('include,attr_reader,<,raise,nil?,freeze,with,-,line_for_position,alias_method,column_for_position,!=,line,last_line,inspect,column,last_column,source_line,slice,begin_pos,end_pos,include?,source,to_a,decompose_position,join,name,+,new,min,max,disjoint?,empty?,>=,!,<=>,contains?,overlaps?,==,*,source_buffer,is_a?,nonzero?,hash');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Range');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.begin_pos = $proto.end_pos = $proto.source_buffer = nil;
        
        self.$include($$('Comparable'));
        self.$attr_reader("source_buffer");
        self.$attr_reader("begin_pos", "end_pos");
        
        $def(self, '$initialize', function $$initialize(source_buffer, begin_pos, end_pos) {
          var $a, self = this;

          
          if ($truthy($rb_lt(end_pos, begin_pos))) {
            self.$raise($$('ArgumentError'), "Parser::Source::Range: end_pos must not be less than begin_pos")
          };
          if ($truthy(source_buffer['$nil?']())) {
            self.$raise($$('ArgumentError'), "Parser::Source::Range: source_buffer must not be nil")
          };
          self.source_buffer = source_buffer;
          $a = [begin_pos, end_pos], (self.begin_pos = $a[0]), (self.end_pos = $a[1]), $a;
          return self.$freeze();
        }, 3);
        
        $def(self, '$begin', function $$begin() {
          var self = this;

          return self.$with($hash2(["end_pos"], {"end_pos": self.begin_pos}))
        }, 0);
        
        $def(self, '$end', function $$end() {
          var self = this;

          return self.$with($hash2(["begin_pos"], {"begin_pos": self.end_pos}))
        }, 0);
        
        $def(self, '$size', function $$size() {
          var self = this;

          return $rb_minus(self.end_pos, self.begin_pos)
        }, 0);
        $alias(self, "length", "size");
        
        $def(self, '$line', function $$line() {
          var self = this;

          return self.source_buffer.$line_for_position(self.begin_pos)
        }, 0);
        self.$alias_method("first_line", "line");
        
        $def(self, '$column', function $$column() {
          var self = this;

          return self.source_buffer.$column_for_position(self.begin_pos)
        }, 0);
        
        $def(self, '$last_line', function $$last_line() {
          var self = this;

          return self.source_buffer.$line_for_position(self.end_pos)
        }, 0);
        
        $def(self, '$last_column', function $$last_column() {
          var self = this;

          return self.source_buffer.$column_for_position(self.end_pos)
        }, 0);
        
        $def(self, '$column_range', function $$column_range() {
          var self = this;

          
          if ($neqeq(self.$line(), self.$last_line())) {
            self.$raise($$('RangeError'), "" + (self.$inspect()) + " spans more than one line")
          };
          return Opal.Range.$new(self.$column(),self.$last_column(), true);
        }, 0);
        
        $def(self, '$source_line', function $$source_line() {
          var self = this;

          return self.source_buffer.$source_line(self.$line())
        }, 0);
        
        $def(self, '$source', function $$source() {
          var self = this;

          return self.source_buffer.$slice(Opal.Range.$new(self.$begin_pos(),self.$end_pos(), true))
        }, 0);
        
        $def(self, '$is?', function $Range_is$ques$1($a) {
          var $post_args, what, self = this;

          
          
          $post_args = Opal.slice.call(arguments);
          
          what = $post_args;;
          return what['$include?'](self.$source());
        }, -1);
        
        $def(self, '$to_a', function $$to_a() {
          var self = this;

          return Opal.Range.$new(self.begin_pos,self.end_pos, true).$to_a()
        }, 0);
        
        $def(self, '$to_range', function $$to_range() {
          var self = this;

          return Opal.Range.$new(self.$begin_pos(),self.$end_pos(), true)
        }, 0);
        
        $def(self, '$to_s', function $$to_s() {
          var $a, $b, self = this, line = nil, column = nil;

          
          $b = self.source_buffer.$decompose_position(self.begin_pos), $a = $to_ary($b), (line = ($a[0] == null ? nil : $a[0])), (column = ($a[1] == null ? nil : $a[1])), $b;
          return [self.source_buffer.$name(), line, $rb_plus(column, 1)].$join(":");
        }, 0);
        
        $def(self, '$with', function $Range_with$2($kwargs) {
          var begin_pos, end_pos, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          begin_pos = $kwargs.$$smap["begin_pos"];
          if (begin_pos == null) begin_pos = self.begin_pos;
          
          end_pos = $kwargs.$$smap["end_pos"];
          if (end_pos == null) end_pos = self.end_pos;
          return $$('Range').$new(self.source_buffer, begin_pos, end_pos);
        }, -1);
        
        $def(self, '$adjust', function $$adjust($kwargs) {
          var begin_pos, end_pos, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          begin_pos = $kwargs.$$smap["begin_pos"];
          if (begin_pos == null) begin_pos = 0;
          
          end_pos = $kwargs.$$smap["end_pos"];
          if (end_pos == null) end_pos = 0;
          return $$('Range').$new(self.source_buffer, $rb_plus(self.begin_pos, begin_pos), $rb_plus(self.end_pos, end_pos));
        }, -1);
        
        $def(self, '$resize', function $$resize(new_size) {
          var self = this;

          return self.$with($hash2(["end_pos"], {"end_pos": $rb_plus(self.begin_pos, new_size)}))
        }, 1);
        
        $def(self, '$join', function $$join(other) {
          var self = this;

          return $$('Range').$new(self.source_buffer, [self.begin_pos, other.$begin_pos()].$min(), [self.end_pos, other.$end_pos()].$max())
        }, 1);
        
        $def(self, '$intersect', function $$intersect(other) {
          var self = this;

          if ($truthy(self['$disjoint?'](other))) {
            return nil
          } else {
            return $$('Range').$new(self.source_buffer, [self.begin_pos, other.$begin_pos()].$max(), [self.end_pos, other.$end_pos()].$min())
          }
        }, 1);
        
        $def(self, '$disjoint?', function $Range_disjoint$ques$3(other) {
          var self = this, $ret_or_1 = nil;

          if (($truthy(self['$empty?']()) && ($truthy(other['$empty?']())))) {
            return self.begin_pos['$!='](other.$begin_pos())
          } else if ($truthy(($ret_or_1 = $rb_ge(self.begin_pos, other.$end_pos())))) {
            return $ret_or_1
          } else {
            return $rb_ge(other.$begin_pos(), self.end_pos)
          }
        }, 1);
        
        $def(self, '$overlaps?', function $Range_overlaps$ques$4(other) {
          var self = this;

          return self['$disjoint?'](other)['$!']()
        }, 1);
        
        $def(self, '$contains?', function $Range_contains$ques$5(other) {
          var self = this;

          return $rb_ge($rb_plus(other.$begin_pos()['$<=>'](self.begin_pos), self.end_pos['$<=>'](other.$end_pos())), ($truthy(other['$empty?']()) ? (2) : (1)))
        }, 1);
        
        $def(self, '$contained?', function $Range_contained$ques$6(other) {
          var self = this;

          return other['$contains?'](self)
        }, 1);
        
        $def(self, '$crossing?', function $Range_crossing$ques$7(other) {
          var self = this;

          
          if (!$truthy(self['$overlaps?'](other))) {
            return false
          };
          return $rb_times(self.begin_pos['$<=>'](other.$begin_pos()), self.end_pos['$<=>'](other.$end_pos()))['$=='](1);
        }, 1);
        
        $def(self, '$empty?', function $Range_empty$ques$8() {
          var self = this;

          return self.begin_pos['$=='](self.end_pos)
        }, 0);
        
        $def(self, '$<=>', function $Range_$lt_eq_gt$9(other) {
          var self = this, $ret_or_1 = nil;

          
          if (!($truthy(other['$is_a?']($$$($$$($$$('Parser'), 'Source'), 'Range'))) && ($eqeq(self.source_buffer, other.$source_buffer())))) {
            return nil
          };
          if ($truthy(($ret_or_1 = self.begin_pos['$<=>'](other.$begin_pos())['$nonzero?']()))) {
            return $ret_or_1
          } else {
            
            return self.end_pos['$<=>'](other.$end_pos());
          };
        }, 1);
        self.$alias_method("eql?", "==");
        
        $def(self, '$hash', function $$hash() {
          var self = this;

          return [self.source_buffer, self.begin_pos, self.end_pos].$hash()
        }, 0);
        return $def(self, '$inspect', function $$inspect() {
          var self = this;

          return "#<Parser::Source::Range " + (self.source_buffer.$name()) + " " + (self.begin_pos) + "..." + (self.end_pos) + ">"
        }, 0);
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/comment"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $defs = Opal.defs, $def = Opal.def, $truthy = Opal.truthy;

  Opal.add_stubs('attr_reader,alias_method,new,associate,associate_locations,associate_by_identity,freeze,source,start_with?,text,==,type,is_a?,location,to_s,expression,inspect');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Comment');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.location = nil;
        
        self.$attr_reader("text");
        self.$attr_reader("location");
        self.$alias_method("loc", "location");
        $defs(self, '$associate', function $$associate(ast, comments) {
          var associator = nil;

          
          associator = $$('Associator').$new(ast, comments);
          return associator.$associate();
        }, 2);
        $defs(self, '$associate_locations', function $$associate_locations(ast, comments) {
          var associator = nil;

          
          associator = $$('Associator').$new(ast, comments);
          return associator.$associate_locations();
        }, 2);
        $defs(self, '$associate_by_identity', function $$associate_by_identity(ast, comments) {
          var associator = nil;

          
          associator = $$('Associator').$new(ast, comments);
          return associator.$associate_by_identity();
        }, 2);
        
        $def(self, '$initialize', function $$initialize(range) {
          var self = this;

          
          self.location = $$$($$$($$('Parser'), 'Source'), 'Map').$new(range);
          self.text = range.$source().$freeze();
          return self.$freeze();
        }, 1);
        
        $def(self, '$type', function $$type() {
          var self = this;

          if ($truthy(self.$text()['$start_with?']("#".$freeze()))) {
            return "inline"
          } else if ($truthy(self.$text()['$start_with?']("=begin".$freeze()))) {
            return "document"
          } else {
            return nil
          }
        }, 0);
        
        $def(self, '$inline?', function $Comment_inline$ques$1() {
          var self = this;

          return self.$type()['$==']("inline")
        }, 0);
        
        $def(self, '$document?', function $Comment_document$ques$2() {
          var self = this;

          return self.$type()['$==']("document")
        }, 0);
        
        $def(self, '$==', function $Comment_$eq_eq$3(other) {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = other['$is_a?']($$$($$('Source'), 'Comment'))))) {
            return self.location['$=='](other.$location())
          } else {
            return $ret_or_1
          }
        }, 1);
        return $def(self, '$inspect', function $$inspect() {
          var self = this;

          return "#<Parser::Source::Comment " + (self.location.$expression().$to_s()) + " " + (self.$text().$inspect()) + ">"
        }, 0);
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/comment/associator"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $const_set = Opal.const_set, $truthy = Opal.truthy, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $eqeq = Opal.eqeq, $rb_le = Opal.rb_le, $rb_plus = Opal.rb_plus, $not = Opal.not;

  Opal.add_stubs('attr_accessor,do_associate,private,freeze,[],include?,type,sort_by,compact,children,begin_pos,expression,loc,select,is_a?,new,[]=,-,==,compare_by_identity,advance_comment,advance_through_directives,visit,process_leading_comments,location,<=,line,last_line,each,children_in_source_order,process_trailing_comments,current_comment_before?,associate_and_advance_comment,current_comment_before_end?,current_comment_decorates?,+,!,end_pos,<<,start_with?,text,=~');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Associator');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.map_using = $proto.mapping = $proto.skip_directives = $proto.ast = $proto.current_comment = $proto.comment_num = $proto.comments = nil;
        
        self.$attr_accessor("skip_directives");
        
        $def(self, '$initialize', function $$initialize(ast, comments) {
          var self = this;

          
          self.ast = ast;
          self.comments = comments;
          return (self.skip_directives = true);
        }, 2);
        
        $def(self, '$associate', function $$associate() {
          var self = this;

          
          self.map_using = "eql";
          return self.$do_associate();
        }, 0);
        
        $def(self, '$associate_locations', function $$associate_locations() {
          var self = this;

          
          self.map_using = "location";
          return self.$do_associate();
        }, 0);
        
        $def(self, '$associate_by_identity', function $$associate_by_identity() {
          var self = this;

          
          self.map_using = "identity";
          return self.$do_associate();
        }, 0);
        self.$private();
        $const_set($nesting[0], 'POSTFIX_TYPES', $$('Set')['$[]']("if", "while", "while_post", "until", "until_post", "masgn").$freeze());
        
        $def(self, '$children_in_source_order', function $$children_in_source_order(node) {
          
          if ($truthy($$('POSTFIX_TYPES')['$include?'](node.$type()))) {
            return $send(node.$children().$compact(), 'sort_by', [], function $$1(child){
              
              
              if (child == null) child = nil;;
              return child.$loc().$expression().$begin_pos();}, 1)
          } else {
            return $send(node.$children(), 'select', [], function $$2(child){var $ret_or_1 = nil, $ret_or_2 = nil;

              
              
              if (child == null) child = nil;;
              if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = child['$is_a?']($$$($$('AST'), 'Node')))) ? (child.$loc()) : ($ret_or_2))))) {
                return child.$loc().$expression()
              } else {
                return $ret_or_1
              };}, 1)
          }
        }, 1);
        
        $def(self, '$do_associate', function $$do_associate() {
          var self = this;

          
          self.mapping = $send($$('Hash'), 'new', [], function $$3(h, k){var $writer = nil;

            
            
            if (h == null) h = nil;;
            
            if (k == null) k = nil;;
            $writer = [k, []];
            $send(h, '[]=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, 2);
          if ($eqeq(self.map_using, "identity")) {
            self.mapping.$compare_by_identity()
          };
          self.comment_num = -1;
          self.$advance_comment();
          if ($truthy(self.skip_directives)) {
            self.$advance_through_directives()
          };
          if ($truthy(self.ast)) {
            self.$visit(self.ast)
          };
          return self.mapping;
        }, 0);
        
        $def(self, '$visit', function $$visit(node) {
          var self = this, node_loc = nil;

          
          self.$process_leading_comments(node);
          if (!$truthy(self.current_comment)) {
            return nil
          };
          node_loc = node.$location();
          if (($truthy($rb_le(self.current_comment.$location().$line(), node_loc.$last_line())) || ($truthy(node_loc['$is_a?']($$$($$('Map'), 'Heredoc')))))) {
            
            $send(self.$children_in_source_order(node), 'each', [], function $$4(child){var self = $$4.$$s == null ? this : $$4.$$s;

              
              
              if (child == null) child = nil;;
              return self.$visit(child);}, {$$arity: 1, $$s: self});
            return self.$process_trailing_comments(node);
          } else {
            return nil
          };
        }, 1);
        
        $def(self, '$process_leading_comments', function $$process_leading_comments(node) {
          var $a, self = this;

          
          if ($eqeq(node.$type(), "begin")) {
            return nil
          };
          while ($truthy(self['$current_comment_before?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, 1);
        
        $def(self, '$process_trailing_comments', function $$process_trailing_comments(node) {
          var $a, self = this;

          
          while ($truthy(self['$current_comment_before_end?'](node))) {
            self.$associate_and_advance_comment(node)
          };
          while ($truthy(self['$current_comment_decorates?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, 1);
        
        $def(self, '$advance_comment', function $$advance_comment() {
          var self = this;

          
          self.comment_num = $rb_plus(self.comment_num, 1);
          return (self.current_comment = self.comments['$[]'](self.comment_num));
        }, 0);
        
        $def(self, '$current_comment_before?', function $Associator_current_comment_before$ques$5(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($not(self.current_comment)) {
            return false
          };
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$begin_pos());
        }, 1);
        
        $def(self, '$current_comment_before_end?', function $Associator_current_comment_before_end$ques$6(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($not(self.current_comment)) {
            return false
          };
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$end_pos());
        }, 1);
        
        $def(self, '$current_comment_decorates?', function $Associator_current_comment_decorates$ques$7(node) {
          var self = this;

          
          if ($not(self.current_comment)) {
            return false
          };
          return self.current_comment.$location().$line()['$=='](node.$location().$last_line());
        }, 1);
        
        $def(self, '$associate_and_advance_comment', function $$associate_and_advance_comment(node) {
          var self = this, key = nil;

          
          key = ($eqeq(self.map_using, "location") ? (node.$location()) : (node));
          self.mapping['$[]'](key)['$<<'](self.current_comment);
          return self.$advance_comment();
        }, 1);
        $const_set($nesting[0], 'MAGIC_COMMENT_RE', /^#\s*(-\*-|)\s*(frozen_string_literal|warn_indent|warn_past_scope):.*\1$/);
        return $def(self, '$advance_through_directives', function $$advance_through_directives() {
          var self = this;

          
          if (($truthy(self.current_comment) && ($truthy(self.current_comment.$text()['$start_with?']("#!".$freeze()))))) {
            self.$advance_comment()
          };
          if (($truthy(self.current_comment) && ($truthy(self.current_comment.$text()['$=~']($$('MAGIC_COMMENT_RE')))))) {
            self.$advance_comment()
          };
          if (($truthy(self.current_comment) && ($truthy(self.current_comment.$text()['$=~']($$$($$('Buffer'), 'ENCODING_RE')))))) {
            return self.$advance_comment()
          } else {
            return nil
          };
        }, 0);
      })($$('Comment'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/rewriter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $not = Opal.not, $neqeq = Opal.neqeq, $rb_le = Opal.rb_le, $rb_ge = Opal.rb_ge, $rb_lt = Opal.rb_lt, $hash2 = Opal.hash2, $const_set = Opal.const_set;

  Opal.add_stubs('attr_reader,warn_of_deprecation,class,new,lambda,puts,render,consumer=,-,append,freeze,begin,end,+,in_transaction?,raise,dup,source,each,sort,begin_pos,range,length,replacement,[]=,private,empty?,clobbered_insertion?,!,allow_multiple_insertions?,raise_clobber_error,record_insertion,adjacent_updates?,find,overlaps?,replace_compatible_with_insertion?,merge_actions!,<<,active_queue,adjacent_insertions?,merge_actions,delete,can_merge?,record_replace,|,active_insertions,active_insertions=,active_clobber,clobbered_position_mask,active_clobber=,size,!=,&,<=,end_pos,adjacent_insertion_mask,select,adjacent?,adjacent_position_mask,>=,==,[],all?,intersect,nil?,max,sort_by,push,join,first,max_by,merge_replacements,replace_actions,disjoint?,<,process,extend');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Rewriter');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.diagnostics = $proto.insert_before_multi_order = $proto.insert_after_multi_order = $proto.source_buffer = $proto.queue = $proto.clobber = $proto.insertions = $proto.pending_queue = $proto.pending_clobber = $proto.pending_insertions = nil;
        
        self.$attr_reader("source_buffer");
        self.$attr_reader("diagnostics");
        
        $def(self, '$initialize', function $$initialize(source_buffer) {
          var self = this, $writer = nil;

          
          self.$class().$warn_of_deprecation();
          self.diagnostics = $$$($$('Diagnostic'), 'Engine').$new();
          
          $writer = [$send(self, 'lambda', [], function $$1(diag){            if ($gvars.stderr == null) $gvars.stderr = nil;

            
            
            if (diag == null) diag = nil;;
            return $gvars.stderr.$puts(diag.$render());}, 1)];
          $send(self.diagnostics, 'consumer=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.source_buffer = source_buffer;
          self.queue = [];
          self.clobber = 0;
          self.insertions = 0;
          self.insert_before_multi_order = 0;
          self.insert_after_multi_order = 0;
          self.pending_queue = nil;
          self.pending_clobber = nil;
          return (self.pending_insertions = nil);
        }, 1);
        
        $def(self, '$remove', function $$remove(range) {
          var self = this;

          return self.$append($$$($$('Rewriter'), 'Action').$new(range, "".$freeze()))
        }, 1);
        
        $def(self, '$insert_before', function $$insert_before(range, content) {
          var self = this;

          return self.$append($$$($$('Rewriter'), 'Action').$new(range.$begin(), content))
        }, 2);
        
        $def(self, '$wrap', function $$wrap(range, before, after) {
          var self = this;

          
          self.$append($$$($$('Rewriter'), 'Action').$new(range.$begin(), before));
          return self.$append($$$($$('Rewriter'), 'Action').$new(range.$end(), after));
        }, 3);
        
        $def(self, '$insert_before_multi', function $$insert_before_multi(range, content) {
          var self = this;

          
          self.insert_before_multi_order = $rb_minus(self.insert_before_multi_order, 1);
          return self.$append($$$($$('Rewriter'), 'Action').$new(range.$begin(), content, true, self.insert_before_multi_order));
        }, 2);
        
        $def(self, '$insert_after', function $$insert_after(range, content) {
          var self = this;

          return self.$append($$$($$('Rewriter'), 'Action').$new(range.$end(), content))
        }, 2);
        
        $def(self, '$insert_after_multi', function $$insert_after_multi(range, content) {
          var self = this;

          
          self.insert_after_multi_order = $rb_plus(self.insert_after_multi_order, 1);
          return self.$append($$$($$('Rewriter'), 'Action').$new(range.$end(), content, true, self.insert_after_multi_order));
        }, 2);
        
        $def(self, '$replace', function $$replace(range, content) {
          var self = this;

          return self.$append($$$($$('Rewriter'), 'Action').$new(range, content))
        }, 2);
        
        $def(self, '$process', function $$process() {
          var self = this, adjustment = nil, source = nil;

          
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("Do not call " + (self.$class()) + "#" + ("process") + " inside a transaction")
          };
          adjustment = 0;
          source = self.source_buffer.$source().$dup();
          $send(self.queue.$sort(), 'each', [], function $$2(action){var begin_pos = nil, end_pos = nil, $writer = nil;

            
            
            if (action == null) action = nil;;
            begin_pos = $rb_plus(action.$range().$begin_pos(), adjustment);
            end_pos = $rb_plus(begin_pos, action.$range().$length());
            
            $writer = [Opal.Range.$new(begin_pos,end_pos, true), action.$replacement()];
            $send(source, '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (adjustment = $rb_plus(adjustment, $rb_minus(action.$replacement().$length(), action.$range().$length())));}, 1);
          return source;
        }, 0);
        
        $def(self, '$transaction', function $$transaction() {
          var $yield = $$transaction.$$p || nil, self = this;

          delete $$transaction.$$p;
          return (function() { try {
          
          if (!($yield !== nil)) {
            self.$raise("" + (self.$class()) + "#" + ("transaction") + " requires block")
          };
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("Nested transaction is not supported")
          };
          self.pending_queue = self.queue.$dup();
          self.pending_clobber = self.clobber;
          self.pending_insertions = self.insertions;
          Opal.yieldX($yield, []);
          self.queue = self.pending_queue;
          self.clobber = self.pending_clobber;
          self.insertions = self.pending_insertions;
          return self;
          } finally {
            ((self.pending_queue = nil), (self.pending_clobber = nil), (self.pending_insertions = nil))
          }; })()
        }, 0);
        self.$private();
        
        $def(self, '$append', function $$append(action) {
          var self = this, range = nil, conflicting = nil, adjacent = nil, insertions = nil;

          
          range = action.$range();
          if ($truthy(range['$empty?']())) {
            
            if ($truthy(action.$replacement()['$empty?']())) {
              return self
            };
            if (($not(action['$allow_multiple_insertions?']()) && ($truthy((conflicting = self['$clobbered_insertion?'](range)))))) {
              self.$raise_clobber_error(action, [conflicting])
            };
            self.$record_insertion(range);
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              
              conflicting = $send(adjacent, 'find', [], function $$3(a){var self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil;

                
                
                if (a == null) a = nil;;
                if ($truthy(($ret_or_1 = a.$range()['$overlaps?'](range)))) {
                  return self['$replace_compatible_with_insertion?'](a, action)['$!']()
                } else {
                  return $ret_or_1
                };}, {$$arity: 1, $$s: self});
              if ($truthy(conflicting)) {
                self.$raise_clobber_error(action, [conflicting])
              };
              self['$merge_actions!'](action, adjacent);
            } else {
              self.$active_queue()['$<<'](action)
            };
          } else {
            
            if ($truthy((insertions = self['$adjacent_insertions?'](range)))) {
              $send(insertions, 'each', [], function $$4(insertion){var self = $$4.$$s == null ? this : $$4.$$s;

                
                
                if (insertion == null) insertion = nil;;
                if (($truthy(range['$overlaps?'](insertion.$range())) && ($not(self['$replace_compatible_with_insertion?'](action, insertion))))) {
                  return self.$raise_clobber_error(action, [insertion])
                } else {
                  
                  action = self.$merge_actions(action, [insertion]);
                  return self.$active_queue().$delete(insertion);
                };}, {$$arity: 1, $$s: self})
            };
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              if ($truthy(self['$can_merge?'](action, adjacent))) {
                
                self.$record_replace(range);
                self['$merge_actions!'](action, adjacent);
              } else {
                self.$raise_clobber_error(action, adjacent)
              }
            } else {
              
              self.$record_replace(range);
              self.$active_queue()['$<<'](action);
            };
          };
          return self;
        }, 1);
        
        $def(self, '$record_insertion', function $$record_insertion(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_insertions()['$|']((1)['$<<'](range.$begin_pos()))];
          $send(self, 'active_insertions=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, 1);
        
        $def(self, '$record_replace', function $$record_replace(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_clobber()['$|'](self.$clobbered_position_mask(range))];
          $send(self, 'active_clobber=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, 1);
        
        $def(self, '$clobbered_position_mask', function $$clobbered_position_mask(range) {
          
          return $rb_minus((1)['$<<'](range.$size()), 1)['$<<'](range.$begin_pos())
        }, 1);
        
        $def(self, '$adjacent_position_mask', function $$adjacent_position_mask(range) {
          
          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 2)), 1)['$<<']($rb_minus(range.$begin_pos(), 1))
        }, 1);
        
        $def(self, '$adjacent_insertion_mask', function $$adjacent_insertion_mask(range) {
          
          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 1)), 1)['$<<'](range.$begin_pos())
        }, 1);
        
        $def(self, '$clobbered_insertion?', function $Rewriter_clobbered_insertion$ques$5(insertion) {
          var self = this, insertion_pos = nil;

          
          insertion_pos = insertion.$begin_pos();
          if ($neqeq(self.$active_insertions()['$&']((1)['$<<'](insertion_pos)), 0)) {
            return $send(self.$active_queue(), 'find', [], function $$6(a){var $ret_or_1 = nil;

              
              
              if (a == null) a = nil;;
              if ($truthy(($ret_or_1 = $rb_le(a.$range().$begin_pos(), insertion_pos)))) {
                return $rb_le(insertion_pos, a.$range().$end_pos())
              } else {
                return $ret_or_1
              };}, 1)
          } else {
            return nil
          };
        }, 1);
        
        $def(self, '$adjacent_insertions?', function $Rewriter_adjacent_insertions$ques$7(range) {
          var self = this, result = nil;

          if ($neqeq(self.$active_insertions()['$&'](self.$adjacent_insertion_mask(range)), 0)) {
            
            result = $send(self.$active_queue(), 'select', [], function $$8(a){var self = $$8.$$s == null ? this : $$8.$$s, $ret_or_1 = nil;

              
              
              if (a == null) a = nil;;
              if ($truthy(($ret_or_1 = a.$range()['$empty?']()))) {
                return self['$adjacent?'](range, a.$range())
              } else {
                return $ret_or_1
              };}, {$$arity: 1, $$s: self});
            if ($truthy(result['$empty?']())) {
              return nil
            } else {
              return result
            };
          } else {
            return nil
          }
        }, 1);
        
        $def(self, '$adjacent_updates?', function $Rewriter_adjacent_updates$ques$9(range) {
          var self = this;

          if ($neqeq(self.$active_clobber()['$&'](self.$adjacent_position_mask(range)), 0)) {
            return $send(self.$active_queue(), 'select', [], function $$10(a){var self = $$10.$$s == null ? this : $$10.$$s;

              
              
              if (a == null) a = nil;;
              return self['$adjacent?'](range, a.$range());}, {$$arity: 1, $$s: self})
          } else {
            return nil
          }
        }, 1);
        
        $def(self, '$replace_compatible_with_insertion?', function $Rewriter_replace_compatible_with_insertion$ques$11(replace, insertion) {
          var $ret_or_1 = nil, $ret_or_2 = nil, offset = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = $rb_ge($rb_minus(replace.$replacement().$length(), replace.$range().$size()), insertion.$range().$size()))) ? ((offset = $rb_minus(insertion.$range().$begin_pos(), replace.$range().$begin_pos()))) : ($ret_or_2))))) {
            return replace.$replacement()['$[]'](offset, insertion.$replacement().$length())['$=='](insertion.$replacement())
          } else {
            return $ret_or_1
          }
        }, 2);
        
        $def(self, '$can_merge?', function $Rewriter_can_merge$ques$12(action, existing) {
          var range = nil;

          
          range = action.$range();
          return $send(existing, 'all?', [], function $$13(other){var overlap = nil, repl1_offset = nil, repl2_offset = nil, repl1_length = nil, repl2_length = nil, replacement1 = nil, $ret_or_1 = nil, replacement2 = nil;

            
            
            if (other == null) other = nil;;
            overlap = range.$intersect(other.$range());
            if ($truthy(overlap['$nil?']())) {
              return true;
            };
            repl1_offset = $rb_minus(overlap.$begin_pos(), range.$begin_pos());
            repl2_offset = $rb_minus(overlap.$begin_pos(), other.$range().$begin_pos());
            repl1_length = [$rb_minus(other.$range().$length(), repl2_offset), $rb_minus(other.$replacement().$length(), repl2_offset)].$max();
            repl2_length = [$rb_minus(range.$length(), repl1_offset), $rb_minus(action.$replacement().$length(), repl1_offset)].$max();
            replacement1 = ($truthy(($ret_or_1 = action.$replacement()['$[]'](repl1_offset, repl1_length))) ? ($ret_or_1) : ("".$freeze()));
            replacement2 = ($truthy(($ret_or_1 = other.$replacement()['$[]'](repl2_offset, repl2_length))) ? ($ret_or_1) : ("".$freeze()));
            return replacement1['$=='](replacement2);}, 1);
        }, 2);
        
        $def(self, '$merge_actions', function $$merge_actions(action, existing) {
          var self = this, actions = nil, range = nil;

          
          actions = $send(existing.$push(action), 'sort_by', [], function $$14(a){
            
            
            if (a == null) a = nil;;
            return [a.$range().$begin_pos(), a.$range().$end_pos()];}, 1);
          range = actions.$first().$range().$join($send(actions, 'max_by', [], function $$15(a){
            
            
            if (a == null) a = nil;;
            return a.$range().$end_pos();}, 1).$range());
          return $$$($$('Rewriter'), 'Action').$new(range, self.$merge_replacements(actions));
        }, 2);
        
        $def(self, '$merge_actions!', function $Rewriter_merge_actions$excl$16(action, existing) {
          var self = this, new_action = nil;

          
          new_action = self.$merge_actions(action, existing);
          self.$active_queue().$delete(action);
          return self.$replace_actions(existing, new_action);
        }, 2);
        
        $def(self, '$merge_replacements', function $$merge_replacements(actions) {
          var result = nil, prev_act = nil;

          
          result = "".$dup();
          prev_act = nil;
          $send(actions, 'each', [], function $$17(act){var prev_end = nil, offset = nil;

            
            
            if (act == null) act = nil;;
            if (($not(prev_act) || ($truthy(act.$range()['$disjoint?'](prev_act.$range()))))) {
              result['$<<'](act.$replacement())
            } else {
              
              prev_end = [$rb_plus(prev_act.$range().$begin_pos(), prev_act.$replacement().$length()), prev_act.$range().$end_pos()].$max();
              offset = $rb_minus(prev_end, act.$range().$begin_pos());
              if ($truthy($rb_lt(offset, act.$replacement().$size()))) {
                result['$<<'](act.$replacement()['$[]'](Opal.Range.$new(offset, -1, false)))
              };
            };
            return (prev_act = act);}, 1);
          return result;
        }, 1);
        
        $def(self, '$replace_actions', function $$replace_actions(old, updated) {
          var self = this;

          
          $send(old, 'each', [], function $$18(act){var self = $$18.$$s == null ? this : $$18.$$s;

            
            
            if (act == null) act = nil;;
            return self.$active_queue().$delete(act);}, {$$arity: 1, $$s: self});
          return self.$active_queue()['$<<'](updated);
        }, 2);
        
        $def(self, '$raise_clobber_error', function $$raise_clobber_error(action, existing) {
          var self = this, diagnostic = nil;

          
          diagnostic = $$('Diagnostic').$new("error", "invalid_action", $hash2(["action"], {"action": action}), action.$range());
          self.diagnostics.$process(diagnostic);
          diagnostic = $$('Diagnostic').$new("note", "clobbered", $hash2(["action"], {"action": existing['$[]'](0)}), existing['$[]'](0).$range());
          self.diagnostics.$process(diagnostic);
          return self.$raise($$('ClobberingError'), "Parser::Source::Rewriter detected clobbering");
        }, 2);
        
        $def(self, '$in_transaction?', function $Rewriter_in_transaction$ques$19() {
          var self = this;

          return self.pending_queue['$nil?']()['$!']()
        }, 0);
        
        $def(self, '$active_queue', function $$active_queue() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.pending_queue))) {
            return $ret_or_1
          } else {
            return self.queue
          }
        }, 0);
        
        $def(self, '$active_clobber', function $$active_clobber() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.pending_clobber))) {
            return $ret_or_1
          } else {
            return self.clobber
          }
        }, 0);
        
        $def(self, '$active_insertions', function $$active_insertions() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.pending_insertions))) {
            return $ret_or_1
          } else {
            return self.insertions
          }
        }, 0);
        
        $def(self, '$active_clobber=', function $Rewriter_active_clobber$eq$20(value) {
          var self = this;

          if ($truthy(self.pending_clobber)) {
            return (self.pending_clobber = value)
          } else {
            return (self.clobber = value)
          }
        }, 1);
        
        $def(self, '$active_insertions=', function $Rewriter_active_insertions$eq$21(value) {
          var self = this;

          if ($truthy(self.pending_insertions)) {
            return (self.pending_insertions = value)
          } else {
            return (self.insertions = value)
          }
        }, 1);
        
        $def(self, '$adjacent?', function $Rewriter_adjacent$ques$22(range1, range2) {
          var $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = $rb_le(range1.$begin_pos(), range2.$end_pos())))) {
            return $rb_le(range2.$begin_pos(), range1.$end_pos())
          } else {
            return $ret_or_1
          }
        }, 2);
        $const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Source::Rewriter is deprecated.", "Please update your code to use Parser::Source::TreeRewriter instead"].$join("\n").$freeze());
        return self.$extend($$('Deprecation'));
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/rewriter/action"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $eqeq = Opal.eqeq;

  Opal.add_stubs('include,attr_reader,alias_method,freeze,<=>,begin_pos,range,zero?,order,empty?,==,length,inspect');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Action');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.replacement = $proto.range = nil;
        
        self.$include($$('Comparable'));
        self.$attr_reader("range", "replacement", "allow_multiple_insertions", "order");
        self.$alias_method("allow_multiple_insertions?", "allow_multiple_insertions");
        
        $def(self, '$initialize', function $$initialize(range, replacement, allow_multiple_insertions, order) {
          var self = this;

          
          
          if (replacement == null) replacement = "";;
          
          if (allow_multiple_insertions == null) allow_multiple_insertions = false;;
          
          if (order == null) order = 0;;
          self.range = range;
          self.replacement = replacement;
          self.allow_multiple_insertions = allow_multiple_insertions;
          self.order = order;
          return self.$freeze();
        }, -2);
        
        $def(self, '$<=>', function $Action_$lt_eq_gt$1(other) {
          var self = this, result = nil;

          
          result = self.$range().$begin_pos()['$<=>'](other.$range().$begin_pos());
          if (!$truthy(result['$zero?']())) {
            return result
          };
          return self.$order()['$<=>'](other.$order());
        }, 1);
        return $def(self, '$to_s', function $$to_s() {
          var self = this;

          if (($eqeq(self.range.$length(), 0) && ($truthy(self.replacement['$empty?']())))) {
            return "do nothing"
          } else if ($eqeq(self.range.$length(), 0)) {
            return "insert " + (self.replacement.$inspect())
          } else if ($truthy(self.replacement['$empty?']())) {
            return "remove " + (self.range.$length()) + " character(s)"
          } else {
            return "replace " + (self.range.$length()) + " character(s) with " + (self.replacement.$inspect())
          }
        }, 0);
      })($$('Rewriter'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/tree_rewriter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $lambda = Opal.lambda, $gvars = Opal.gvars, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $const_set = Opal.const_set, $eqeqeq = Opal.eqeqeq, $range = Opal.range, $to_ary = Opal.to_ary, $hash = Opal.hash, $rb_gt = Opal.rb_gt, $rb_lt = Opal.rb_lt, $slice = Opal.slice;

  Opal.add_stubs('attr_reader,new,puts,render,consumer=,-,freeze,check_policy_validity,method,adjust,source_range,empty?,==,source_buffer,raise,combine,action_root,merge!,dup,contract,+,begin_pos,range,end_pos,check_range_validity,moved,to_s,replace,wrap,source,each,ordered_replacements,<<,[],length,join,nested_actions,class,name,action_summary,warn_of_deprecation,insert_before,insert_after,extend,protected,private,as_replacements,===,size,first,map,to_range,inspect,values,>,<,trigger_policy,process');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TreeRewriter');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.diagnostics = $proto.source_buffer = $proto.enforcer = $proto.action_root = $proto.in_transaction = $proto.policy = nil;
        
        self.$attr_reader("source_buffer");
        self.$attr_reader("diagnostics");
        
        $def(self, '$initialize', function $$initialize(source_buffer, $kwargs) {
          var crossing_deletions, different_replacements, swallowed_insertions, self = this, $writer = nil, all_encompassing_range = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          crossing_deletions = $kwargs.$$smap["crossing_deletions"];
          if (crossing_deletions == null) crossing_deletions = "accept";
          
          different_replacements = $kwargs.$$smap["different_replacements"];
          if (different_replacements == null) different_replacements = "accept";
          
          swallowed_insertions = $kwargs.$$smap["swallowed_insertions"];
          if (swallowed_insertions == null) swallowed_insertions = "accept";
          self.diagnostics = $$$($$('Diagnostic'), 'Engine').$new();
          
          $writer = [$lambda(function $$1(diag){            if ($gvars.stderr == null) $gvars.stderr = nil;

            
            
            if (diag == null) diag = nil;;
            return $gvars.stderr.$puts(diag.$render());}, 1)];
          $send(self.diagnostics, 'consumer=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.source_buffer = source_buffer;
          self.in_transaction = false;
          self.policy = $hash2(["crossing_deletions", "different_replacements", "swallowed_insertions"], {"crossing_deletions": crossing_deletions, "different_replacements": different_replacements, "swallowed_insertions": swallowed_insertions}).$freeze();
          self.$check_policy_validity();
          self.enforcer = self.$method("enforce_policy");
          all_encompassing_range = self.source_buffer.$source_range().$adjust($hash2(["begin_pos", "end_pos"], {"begin_pos": -1, "end_pos": 1}));
          return (self.action_root = $$$($$('TreeRewriter'), 'Action').$new(all_encompassing_range, self.enforcer));
        }, -2);
        
        $def(self, '$empty?', function $TreeRewriter_empty$ques$2() {
          var self = this;

          return self.action_root['$empty?']()
        }, 0);
        
        $def(self, '$merge!', function $TreeRewriter_merge$excl$3(with$) {
          var self = this;

          
          if (!$eqeq(self.$source_buffer(), with$.$source_buffer())) {
            self.$raise("TreeRewriter are not for the same source_buffer")
          };
          self.action_root = self.action_root.$combine(with$.$action_root());
          return self;
        }, 1);
        
        $def(self, '$merge', function $$merge(with$) {
          var self = this;

          return self.$dup()['$merge!'](with$)
        }, 1);
        
        $def(self, '$import!', function $TreeRewriter_import$excl$4(foreign_rewriter, $kwargs) {
          var offset, self = this, contracted = nil, merge_effective_range = nil, merge_with = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          offset = $kwargs.$$smap["offset"];
          if (offset == null) offset = 0;
          if ($truthy(foreign_rewriter['$empty?']())) {
            return self
          };
          contracted = foreign_rewriter.$action_root().$contract();
          merge_effective_range = $$$($$$($$$('Parser'), 'Source'), 'Range').$new(self.source_buffer, $rb_plus(contracted.$range().$begin_pos(), offset), $rb_plus(contracted.$range().$end_pos(), offset));
          self.$check_range_validity(merge_effective_range);
          merge_with = contracted.$moved(self.source_buffer, offset);
          self.action_root = self.action_root.$combine(merge_with);
          return self;
        }, -2);
        
        $def(self, '$replace', function $$replace(range, content) {
          var self = this;

          return self.$combine(range, $hash2(["replacement"], {"replacement": content}))
        }, 2);
        
        $def(self, '$wrap', function $$wrap(range, insert_before, insert_after) {
          var self = this;

          return self.$combine(range, $hash2(["insert_before", "insert_after"], {"insert_before": insert_before.$to_s(), "insert_after": insert_after.$to_s()}))
        }, 3);
        
        $def(self, '$remove', function $$remove(range) {
          var self = this;

          return self.$replace(range, "".$freeze())
        }, 1);
        
        $def(self, '$insert_before', function $$insert_before(range, content) {
          var self = this;

          return self.$wrap(range, content, nil)
        }, 2);
        
        $def(self, '$insert_after', function $$insert_after(range, content) {
          var self = this;

          return self.$wrap(range, nil, content)
        }, 2);
        
        $def(self, '$process', function $$process() {
          var self = this, source = nil, chunks = nil, last_end = nil;

          
          source = self.source_buffer.$source();
          chunks = [];
          last_end = 0;
          $send(self.action_root.$ordered_replacements(), 'each', [], function $$5(range, replacement){
            
            
            if (range == null) range = nil;;
            
            if (replacement == null) replacement = nil;;
            chunks['$<<'](source['$[]'](Opal.Range.$new(last_end,range.$begin_pos(), true)))['$<<'](replacement);
            return (last_end = range.$end_pos());}, 2);
          chunks['$<<'](source['$[]'](Opal.Range.$new(last_end,source.$length(), true)));
          return chunks.$join();
        }, 0);
        
        $def(self, '$as_replacements', function $$as_replacements() {
          var self = this;

          return self.action_root.$ordered_replacements()
        }, 0);
        
        $def(self, '$as_nested_actions', function $$as_nested_actions() {
          var self = this;

          return self.action_root.$nested_actions()
        }, 0);
        
        $def(self, '$transaction', function $$transaction() {
          var $yield = $$transaction.$$p || nil, self = this, previous = nil, restore_root = nil;

          delete $$transaction.$$p;
          return (function() { try {
          
          if (!($yield !== nil)) {
            self.$raise("" + (self.$class()) + "#" + ("transaction") + " requires block")
          };
          previous = self.in_transaction;
          self.in_transaction = true;
          restore_root = self.action_root;
          Opal.yieldX($yield, []);
          restore_root = nil;
          return self;
          } finally {
            (($truthy(restore_root) ? ((self.action_root = restore_root)) : nil), (self.in_transaction = previous))
          }; })()
        }, 0);
        
        $def(self, '$in_transaction?', function $TreeRewriter_in_transaction$ques$6() {
          var self = this;

          return self.in_transaction
        }, 0);
        
        $def(self, '$inspect', function $$inspect() {
          var self = this;

          return "#<" + (self.$class()) + " " + (self.$source_buffer().$name()) + ": " + (self.$action_summary()) + ">"
        }, 0);
        
        $def(self, '$insert_before_multi', function $$insert_before_multi(range, text) {
          var self = this;

          
          self.$class().$warn_of_deprecation();
          return self.$insert_before(range, text);
        }, 2);
        
        $def(self, '$insert_after_multi', function $$insert_after_multi(range, text) {
          var self = this;

          
          self.$class().$warn_of_deprecation();
          return self.$insert_after(range, text);
        }, 2);
        $const_set($nesting[0], 'DEPRECATION_WARNING', ["TreeRewriter#insert_before_multi and insert_before_multi exist only for legacy compatibility.", "Please update your code to use `wrap`, `insert_before` or `insert_after` instead."].$join("\n").$freeze());
        self.$extend($$('Deprecation'));
        self.$protected();
        self.$attr_reader("action_root");
        self.$private();
        
        $def(self, '$action_summary', function $$action_summary() {
          var self = this, replacements = nil, $ret_or_1 = nil, suffix = nil, parts = nil;

          
          replacements = self.$as_replacements();
          if ($eqeqeq(0, ($ret_or_1 = replacements.$size()))) {
            return "empty"
          } else if (!$eqeqeq($range(1, 3, false), $ret_or_1)) {
            
            replacements = replacements.$first(3);
            suffix = "…";
          };
          parts = $send(replacements, 'map', [], function $$7($mlhs_tmp1){var $a, $b, range = nil, str = nil;

            
            
            if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;;
            $b = $mlhs_tmp1, $a = $to_ary($b), (range = ($a[0] == null ? nil : $a[0])), (str = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(str['$empty?']())) {
              return "-" + (range.$to_range())
            } else if ($eqeq(range.$size(), 0)) {
              return "+" + (str.$inspect()) + "@" + (range.$begin_pos())
            } else {
              return "^" + (str.$inspect()) + "@" + (range.$to_range())
            };}, {$$arity: 1, $$has_top_level_mlhs_arg: true});
          if ($truthy(suffix)) {
            parts['$<<'](suffix)
          };
          return parts.$join(", ");
        }, 0);
        $const_set($nesting[0], 'ACTIONS', ["accept", "warn", "raise"].$freeze());
        
        $def(self, '$check_policy_validity', function $$check_policy_validity() {
          var self = this, invalid = nil;

          
          invalid = $rb_minus(self.policy.$values(), $$('ACTIONS'));
          if ($truthy(invalid['$empty?']())) {
            return nil
          } else {
            return self.$raise($$('ArgumentError'), "Invalid policy: " + (invalid.$join(", ")))
          };
        }, 0);
        
        $def(self, '$combine', function $$combine(range, attributes) {
          var self = this, action = nil;

          
          range = self.$check_range_validity(range);
          action = $$$($$('TreeRewriter'), 'Action').$new(range, self.enforcer, Opal.to_hash(attributes));
          self.action_root = self.action_root.$combine(action);
          return self;
        }, 2);
        
        $def(self, '$check_range_validity', function $$check_range_validity(range) {
          var self = this;

          
          if (($truthy($rb_lt(range.$begin_pos(), 0)) || ($truthy($rb_gt(range.$end_pos(), self.source_buffer.$source().$size()))))) {
            self.$raise($$('IndexError'), "The range " + (range.$to_range()) + " is outside the bounds of the source")
          };
          return range;
        }, 1);
        
        $def(self, '$enforce_policy', function $$enforce_policy(event) {
          var $yield = $$enforce_policy.$$p || nil, self = this, values = nil;

          delete $$enforce_policy.$$p;
          
          if ($eqeq(self.policy['$[]'](event), "accept")) {
            return nil
          };
          if (!$truthy((values = Opal.yieldX($yield, [])))) {
            return nil
          };
          return self.$trigger_policy(event, Opal.to_hash(values));
        }, 1);
        $const_set($nesting[0], 'POLICY_TO_LEVEL', $hash2(["warn", "raise"], {"warn": "warning", "raise": "error"}).$freeze());
        return $def(self, '$trigger_policy', function $$trigger_policy(event, $kwargs) {
          var range, conflict, arguments$, $a, $b, self = this, action = nil, $ret_or_1 = nil, diag = nil, highlights = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          range = $kwargs.$$smap["range"];
          if (range == null) range = self.$raise();
          
          conflict = $kwargs.$$smap["conflict"];
          if (conflict == null) conflict = nil;
          
          arguments$ = Opal.kwrestargs($kwargs, {'range': true,'conflict': true});;
          action = ($truthy(($ret_or_1 = self.policy['$[]'](event))) ? ($ret_or_1) : ("raise"));
          diag = $$$($$('Parser'), 'Diagnostic').$new($$('POLICY_TO_LEVEL')['$[]'](action), event, arguments$, range);
          self.diagnostics.$process(diag);
          if ($truthy(conflict)) {
            
            $b = conflict, $a = $to_ary($b), (range = ($a[0] == null ? nil : $a[0])), (highlights = $slice.call($a, 1)), $b;
            diag = $$$($$('Parser'), 'Diagnostic').$new($$('POLICY_TO_LEVEL')['$[]'](action), "" + (event) + "_conflict", arguments$, range, highlights);
            self.diagnostics.$process(diag);
          };
          if ($eqeq(action, "raise")) {
            return self.$raise($$$($$('Parser'), 'ClobberingError'), "Parser::Source::TreeRewriter detected clobbering")
          } else {
            return nil
          };
        }, -2);
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/tree_rewriter/action"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $not = Opal.not, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $to_a = Opal.to_a, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $rb_ge = Opal.rb_ge, $eqeqeq = Opal.eqeqeq, $rb_le = Opal.rb_le, $rb_lt = Opal.rb_lt, $neqeq = Opal.neqeq;

  Opal.add_stubs('attr_reader,freeze,empty?,do_combine,==,<<,begin,concat,flat_map,to_proc,end,!,insert_before,insert_after,replacement,raise,insertion?,with,begin_pos,range,first,children,end_pos,last,new,+,map,moved,protected,swallow,class,merge,place_in_hierarchy,analyse_hierarchy,[],fuse_deletions,combine_children,inject,size,bsearch,bsearch_child_index,>,-,>=,===,<=>,<=,check_fusible,<,shift,pop,compact!,each,call,call_enforcer_for_merge,!=,select');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Action');

        var $proto = self.$$prototype;

        $proto.insert_before = $proto.insert_after = $proto.children = $proto.replacement = $proto.range = $proto.enforcer = nil;
        
        self.$attr_reader("range", "replacement", "insert_before", "insert_after");
        
        $def(self, '$initialize', function $$initialize(range, enforcer, $kwargs) {
          var insert_before, replacement, insert_after, children, $a, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          insert_before = $kwargs.$$smap["insert_before"];
          if (insert_before == null) insert_before = "";
          
          replacement = $kwargs.$$smap["replacement"];
          if (replacement == null) replacement = nil;
          
          insert_after = $kwargs.$$smap["insert_after"];
          if (insert_after == null) insert_after = "";
          
          children = $kwargs.$$smap["children"];
          if (children == null) children = [];
          $a = [range, enforcer, children.$freeze(), insert_before.$freeze(), replacement, insert_after.$freeze()], (self.range = $a[0]), (self.enforcer = $a[1]), (self.children = $a[2]), (self.insert_before = $a[3]), (self.replacement = $a[4]), (self.insert_after = $a[5]), $a;
          return self.$freeze();
        }, -3);
        
        $def(self, '$combine', function $$combine(action) {
          var self = this;

          
          if ($truthy(action['$empty?']())) {
            return self
          };
          return self.$do_combine(action);
        }, 1);
        
        $def(self, '$empty?', function $Action_empty$ques$1() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = self.insert_before['$empty?']())) ? (self.insert_after['$empty?']()) : ($ret_or_3)))) ? (self.children['$empty?']()) : ($ret_or_2))))) {
            
            if ($truthy(($ret_or_2 = self.replacement['$=='](nil)))) {
              return $ret_or_2
            } else {
              
              if ($truthy(($ret_or_3 = self.replacement['$empty?']()))) {
                return self.range['$empty?']()
              } else {
                return $ret_or_3
              };
            };
          } else {
            return $ret_or_1
          }
        }, 0);
        
        $def(self, '$ordered_replacements', function $$ordered_replacements() {
          var self = this, reps = nil;

          
          reps = [];
          if (!$truthy(self.insert_before['$empty?']())) {
            reps['$<<']([self.range.$begin(), self.insert_before])
          };
          if ($truthy(self.replacement)) {
            reps['$<<']([self.range, self.replacement])
          };
          reps.$concat($send(self.children, 'flat_map', [], "ordered_replacements".$to_proc()));
          if (!$truthy(self.insert_after['$empty?']())) {
            reps['$<<']([self.range.$end(), self.insert_after])
          };
          return reps;
        }, 0);
        
        $def(self, '$nested_actions', function $$nested_actions() {
          var self = this, actions = nil;

          
          actions = [];
          if (($not(self.insert_before['$empty?']()) || ($not(self.insert_after['$empty?']())))) {
            actions['$<<'](["wrap", self.range, self.insert_before, self.insert_after])
          };
          if ($truthy(self.replacement)) {
            actions['$<<'](["replace", self.range, self.replacement])
          };
          return actions.$concat($send(self.children, 'flat_map', [], "nested_actions".$to_proc()));
        }, 0);
        
        $def(self, '$insertion?', function $Action_insertion$ques$2() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$insert_before()['$empty?']()['$!']())) ? ($ret_or_2) : (self.$insert_after()['$empty?']()['$!']()))))) {
            return $ret_or_1
          } else {
            
            if ($truthy(($ret_or_2 = self.$replacement()))) {
              return self.$replacement()['$empty?']()['$!']()
            } else {
              return $ret_or_2
            };
          }
        }, 0);
        
        $def(self, '$contract', function $$contract() {
          var self = this, range = nil;

          
          if ($truthy(self['$empty?']())) {
            self.$raise("Empty actions can not be contracted")
          };
          if ($truthy(self['$insertion?']())) {
            return self
          };
          range = self.range.$with($hash2(["begin_pos", "end_pos"], {"begin_pos": self.$children().$first().$range().$begin_pos(), "end_pos": self.$children().$last().$range().$end_pos()}));
          return self.$with($hash2(["range"], {"range": range}));
        }, 0);
        
        $def(self, '$moved', function $$moved(source_buffer, offset) {
          var self = this, moved_range = nil;

          
          moved_range = $$$($$$($$$('Parser'), 'Source'), 'Range').$new(source_buffer, $rb_plus(self.range.$begin_pos(), offset), $rb_plus(self.range.$end_pos(), offset));
          return self.$with($hash2(["range", "children"], {"range": moved_range, "children": $send(self.$children(), 'map', [], function $$3(child){
            
            
            if (child == null) child = nil;;
            return child.$moved(source_buffer, offset);}, 1)}));
        }, 2);
        self.$protected();
        self.$attr_reader("children");
        
        $def(self, '$with', function $Action_with$4($kwargs) {
          var range, enforcer, children, insert_before, replacement, insert_after, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          range = $kwargs.$$smap["range"];
          if (range == null) range = self.range;
          
          enforcer = $kwargs.$$smap["enforcer"];
          if (enforcer == null) enforcer = self.enforcer;
          
          children = $kwargs.$$smap["children"];
          if (children == null) children = self.children;
          
          insert_before = $kwargs.$$smap["insert_before"];
          if (insert_before == null) insert_before = self.insert_before;
          
          replacement = $kwargs.$$smap["replacement"];
          if (replacement == null) replacement = self.replacement;
          
          insert_after = $kwargs.$$smap["insert_after"];
          if (insert_after == null) insert_after = self.insert_after;
          if ($truthy(replacement)) {
            children = self.$swallow(children)
          };
          return self.$class().$new(range, enforcer, $hash2(["children", "insert_before", "replacement", "insert_after"], {"children": children, "insert_before": insert_before, "replacement": replacement, "insert_after": insert_after}));
        }, -1);
        
        $def(self, '$do_combine', function $$do_combine(action) {
          var self = this;

          if ($eqeq(action.$range(), self.range)) {
            return self.$merge(action)
          } else {
            return self.$place_in_hierarchy(action)
          }
        }, 1);
        
        $def(self, '$place_in_hierarchy', function $$place_in_hierarchy(action) {
          var self = this, family = nil, extra_sibbling = nil;

          
          family = self.$analyse_hierarchy(action);
          if ($truthy(family['$[]']("fusible"))) {
            return self.$fuse_deletions(action, family['$[]']("fusible"), [].concat($to_a(family['$[]']("sibbling_left"))).concat($to_a(family['$[]']("child"))).concat($to_a(family['$[]']("sibbling_right"))))
          } else {
            
            extra_sibbling = ($truthy(family['$[]']("parent")) ? (family['$[]']("parent").$do_combine(action)) : ($truthy(family['$[]']("child")) ? (action.$with($hash2(["children", "enforcer"], {"children": family['$[]']("child"), "enforcer": self.enforcer})).$combine_children(action.$children())) : (action)));
            return self.$with($hash2(["children"], {"children": [].concat($to_a(family['$[]']("sibbling_left"))).concat([extra_sibbling]).concat($to_a(family['$[]']("sibbling_right")))}));
          };
        }, 1);
        
        $def(self, '$combine_children', function $$combine_children(more_children) {
          var self = this;

          return $send(more_children, 'inject', [self], function $$5(parent, new_child){
            
            
            if (parent == null) parent = nil;;
            
            if (new_child == null) new_child = nil;;
            return parent.$place_in_hierarchy(new_child);}, 2)
        }, 1);
        
        $def(self, '$fuse_deletions', function $$fuse_deletions(action, fusible, other_sibblings) {
          var self = this, without_fusible = nil, fused_range = nil, fused_deletion = nil;

          
          without_fusible = self.$with($hash2(["children"], {"children": other_sibblings}));
          fused_range = $send([action].concat($to_a(fusible)), 'map', [], "range".$to_proc()).$inject("join");
          fused_deletion = action.$with($hash2(["range"], {"range": fused_range}));
          return without_fusible.$do_combine(fused_deletion);
        }, 3);
        
        $def(self, '$bsearch_child_index', function $$bsearch_child_index(from) {
          var $yield = $$bsearch_child_index.$$p || nil, self = this, size = nil, $ret_or_1 = nil;

          delete $$bsearch_child_index.$$p;
          
          
          if (from == null) from = 0;;
          size = self.children.$size();
          if ($truthy(($ret_or_1 = $send(Opal.Range.$new(from,size, true), 'bsearch', [], function $$6(i){var self = $$6.$$s == null ? this : $$6.$$s;
            if (self.children == null) self.children = nil;

            
            
            if (i == null) i = nil;;
            return Opal.yield1($yield, self.children['$[]'](i));;}, {$$arity: 1, $$s: self})))) {
            return $ret_or_1
          } else {
            return size
          };
        }, -1);
        
        $def(self, '$analyse_hierarchy', function $$analyse_hierarchy(action) {
          var self = this, r = nil, left_index = nil, start = nil, right_index = nil, center = nil, $ret_or_1 = nil, parent = nil, overlap_left = nil, overlap_right = nil, contained = nil, fusible = nil;

          
          r = action.$range();
          left_index = $send(self, 'bsearch_child_index', [], function $$7(child){
            
            
            if (child == null) child = nil;;
            return $rb_gt(child.$range().$end_pos(), r.$begin_pos());}, 1);
          start = ($eqeq(left_index, 0) ? (0) : ($rb_minus(left_index, 1)));
          right_index = $send(self, 'bsearch_child_index', [start], function $$8(child){
            
            
            if (child == null) child = nil;;
            return $rb_ge(child.$range().$begin_pos(), r.$end_pos());}, 1);
          center = $rb_minus(right_index, left_index);
          if (!$eqeqeq(0, ($ret_or_1 = center))) {
            if ($eqeqeq(-1, $ret_or_1)) {
              
              left_index = $rb_minus(left_index, 1);
              right_index = $rb_plus(right_index, 1);
              parent = self.children['$[]'](left_index);
            } else {
              
              overlap_left = self.children['$[]'](left_index).$range().$begin_pos()['$<=>'](r.$begin_pos());
              overlap_right = self.children['$[]']($rb_minus(right_index, 1)).$range().$end_pos()['$<=>'](r.$end_pos());
              if ((($eqeq(center, 1) && ($truthy($rb_le(overlap_left, 0)))) && ($truthy($rb_ge(overlap_right, 0))))) {
                parent = self.children['$[]'](left_index)
              } else {
                
                contained = self.children['$[]'](Opal.Range.$new(left_index,right_index, true));
                fusible = self.$check_fusible(action, ($truthy($rb_lt(overlap_left, 0)) ? (contained.$shift()) : nil), ($truthy($rb_gt(overlap_right, 0)) ? (contained.$pop()) : nil));
              };
            }
          };
          return $hash2(["parent", "sibbling_left", "sibbling_right", "fusible", "child"], {"parent": parent, "sibbling_left": self.children['$[]'](Opal.Range.$new(0,left_index, true)), "sibbling_right": self.children['$[]'](Opal.Range.$new(right_index,self.children.$size(), true)), "fusible": fusible, "child": contained});
        }, 1);
        
        $def(self, '$check_fusible', function $$check_fusible(action, $a) {
          var $post_args, fusible, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1);
          
          fusible = $post_args;;
          fusible['$compact!']();
          if ($truthy(fusible['$empty?']())) {
            return nil
          };
          $send(fusible, 'each', [], function $$9(child){var self = $$9.$$s == null ? this : $$9.$$s, kind = nil;
            if (self.enforcer == null) self.enforcer = nil;

            
            
            if (child == null) child = nil;;
            kind = (($truthy(action['$insertion?']()) || ($truthy(child['$insertion?']()))) ? ("crossing_insertions") : ("crossing_deletions"));
            return $send(self.enforcer, 'call', [kind], function $$10(){
              return $hash2(["range", "conflict"], {"range": action.$range(), "conflict": child.$range()})}, 0);}, {$$arity: 1, $$s: self});
          return fusible;
        }, -2);
        
        $def(self, '$merge', function $$merge(action) {
          var self = this, $ret_or_1 = nil;

          
          self.$call_enforcer_for_merge(action);
          return self.$with($hash2(["insert_before", "replacement", "insert_after"], {"insert_before": "" + (action.$insert_before()) + (self.$insert_before()), "replacement": ($truthy(($ret_or_1 = action.$replacement())) ? ($ret_or_1) : (self.replacement)), "insert_after": "" + (self.$insert_after()) + (action.$insert_after())})).$combine_children(action.$children());
        }, 1);
        
        $def(self, '$call_enforcer_for_merge', function $$call_enforcer_for_merge(action) {
          var self = this;

          return $send(self.enforcer, 'call', ["different_replacements"], function $$11(){var self = $$11.$$s == null ? this : $$11.$$s;
            if (self.replacement == null) self.replacement = nil;
            if (self.range == null) self.range = nil;

            if ((($truthy(self.replacement) && ($truthy(action.$replacement()))) && ($neqeq(self.replacement, action.$replacement())))) {
              return $hash2(["range", "replacement", "other_replacement"], {"range": self.range, "replacement": action.$replacement(), "other_replacement": self.replacement})
            } else {
              return nil
            }}, {$$arity: 0, $$s: self})
        }, 1);
        return $def(self, '$swallow', function $$swallow(children) {
          var self = this;

          
          $send(self.enforcer, 'call', ["swallowed_insertions"], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s, insertions = nil;
            if (self.range == null) self.range = nil;

            
            insertions = $send(children, 'select', [], "insertion?".$to_proc());
            if ($truthy(insertions['$empty?']())) {
              return nil
            } else {
              return $hash2(["range", "conflict"], {"range": self.range, "conflict": $send(insertions, 'map', [], "range".$to_proc())})
            };}, {$$arity: 0, $$s: self});
          return [];
        }, 1);
      })($$('TreeRewriter'), null)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $eqeq = Opal.eqeq, $range = Opal.range, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus;

  Opal.add_stubs('attr_reader,freeze,line,alias_method,column,last_line,last_column,with,update_expression,==,class,reduce,map,instance_variables,instance_variable_get,send,inject,to_sym,[],[]=,-,protected,tap,dup,to_proc');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Map');

        var $proto = self.$$prototype;

        $proto.node = $proto.expression = nil;
        
        self.$attr_reader("node");
        self.$attr_reader("expression");
        
        $def(self, '$initialize', function $$initialize(expression) {
          var self = this;

          return (self.expression = expression)
        }, 1);
        
        $def(self, '$initialize_copy', function $$initialize_copy(other) {
          var $yield = $$initialize_copy.$$p || nil, self = this;

          delete $$initialize_copy.$$p;
          
          $send2(self, $find_super(self, 'initialize_copy', $$initialize_copy, false, true), 'initialize_copy', [other], $yield);
          return (self.node = nil);
        }, 1);
        
        $def(self, '$node=', function $Map_node$eq$1(node) {
          var self = this;

          
          self.node = node;
          self.$freeze();
          return self.node;
        }, 1);
        
        $def(self, '$line', function $$line() {
          var self = this;

          return self.expression.$line()
        }, 0);
        self.$alias_method("first_line", "line");
        
        $def(self, '$column', function $$column() {
          var self = this;

          return self.expression.$column()
        }, 0);
        
        $def(self, '$last_line', function $$last_line() {
          var self = this;

          return self.expression.$last_line()
        }, 0);
        
        $def(self, '$last_column', function $$last_column() {
          var self = this;

          return self.expression.$last_column()
        }, 0);
        
        $def(self, '$with_expression', function $$with_expression(expression_l) {
          var self = this;

          return $send(self, 'with', [], function $$2(map){
            
            
            if (map == null) map = nil;;
            return map.$update_expression(expression_l);}, 1)
        }, 1);
        
        $def(self, '$==', function $Map_$eq_eq$3(other) {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = other.$class()['$=='](self.$class())))) {
            return $send(self.$instance_variables(), 'map', [], function $$4(ivar){var self = $$4.$$s == null ? this : $$4.$$s;

              
              
              if (ivar == null) ivar = nil;;
              return self.$instance_variable_get(ivar)['$=='](other.$send("instance_variable_get", ivar));}, {$$arity: 1, $$s: self}).$reduce("&")
          } else {
            return $ret_or_1
          }
        }, 1);
        
        $def(self, '$to_hash', function $$to_hash() {
          var self = this;

          return $send(self.$instance_variables(), 'inject', [$hash2([], {})], function $$5(hash, ivar){var self = $$5.$$s == null ? this : $$5.$$s, $writer = nil;

            
            
            if (hash == null) hash = nil;;
            
            if (ivar == null) ivar = nil;;
            if ($eqeq(ivar.$to_sym(), "@node")) {
              return hash;
            };
            
            $writer = [ivar['$[]']($range(1, -1, false)).$to_sym(), self.$instance_variable_get(ivar)];
            $send(hash, '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return hash;}, {$$arity: 2, $$s: self})
        }, 0);
        self.$protected();
        
        $def(self, '$with', function $Map_with$6() {
          var block = $Map_with$6.$$p || nil, self = this;

          delete $Map_with$6.$$p;
          
          ;
          return $send(self.$dup(), 'tap', [], block.$to_proc());
        }, 0);
        return $def(self, '$update_expression', function $$update_expression(expression_l) {
          var self = this;

          return (self.expression = expression_l)
        }, 1);
      })($nesting[0], null)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/operator"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Operator');

        
        
        self.$attr_reader("operator");
        return $def(self, '$initialize', function $$initialize(operator, expression) {
          var $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          self.operator = operator;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression], null);
        }, 2);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/collection"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Collection');

        
        
        self.$attr_reader("begin");
        self.$attr_reader("end");
        return $def(self, '$initialize', function $$initialize(begin_l, end_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, 3);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/constant"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('attr_reader,with,update_operator,protected');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Constant');

        
        
        self.$attr_reader("double_colon");
        self.$attr_reader("name");
        self.$attr_reader("operator");
        
        $def(self, '$initialize', function $$initialize(double_colon, name, expression) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          $a = [double_colon, name], (self.double_colon = $a[0]), (self.name = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression], null);
        }, 3);
        
        $def(self, '$with_operator', function $$with_operator(operator_l) {
          var self = this;

          return $send(self, 'with', [], function $$1(map){
            
            
            if (map == null) map = nil;;
            return map.$update_operator(operator_l);}, 1)
        }, 1);
        self.$protected();
        return $def(self, '$update_operator', function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, 1);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/variable"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('attr_reader,with,update_operator,protected');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Variable');

        
        
        self.$attr_reader("name");
        self.$attr_reader("operator");
        
        $def(self, '$initialize', function $$initialize(name_l, expression_l) {
          var $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          
          if (expression_l == null) expression_l = name_l;;
          self.name = name_l;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, -2);
        
        $def(self, '$with_operator', function $$with_operator(operator_l) {
          var self = this;

          return $send(self, 'with', [], function $$1(map){
            
            
            if (map == null) map = nil;;
            return map.$update_operator(operator_l);}, 1)
        }, 1);
        self.$protected();
        return $def(self, '$update_operator', function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, 1);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/keyword"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Keyword');

        
        
        self.$attr_reader("keyword");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        return $def(self, '$initialize', function $$initialize(keyword_l, begin_l, end_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          self.keyword = keyword_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, 4);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/definition"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader,join');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Definition');

        var $proto = self.$$prototype;

        $proto.keyword = $proto.end = nil;
        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("name");
        self.$attr_reader("end");
        return $def(self, '$initialize', function $$initialize(keyword_l, operator_l, name_l, end_l) {
          var $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          self.keyword = keyword_l;
          self.operator = operator_l;
          self.name = name_l;
          self.end = end_l;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [self.keyword.$join(self.end)], null);
        }, 4);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/method_definition"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $def = Opal.def;

  Opal.add_stubs('attr_reader,join');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'MethodDefinition');

        var $proto = self.$$prototype;

        $proto.keyword = nil;
        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("name");
        self.$attr_reader("end");
        self.$attr_reader("assignment");
        return $def(self, '$initialize', function $$initialize(keyword_l, operator_l, name_l, end_l, assignment_l, body_l) {
          var $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil;

          delete $$initialize.$$p;
          
          self.keyword = keyword_l;
          self.operator = operator_l;
          self.name = name_l;
          self.end = end_l;
          self.assignment = assignment_l;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [self.keyword.$join(($truthy(($ret_or_1 = end_l)) ? ($ret_or_1) : (body_l)))], null);
        }, 6);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/send"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('attr_reader,with,update_operator,protected');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Send');

        
        
        self.$attr_reader("dot");
        self.$attr_reader("selector");
        self.$attr_reader("operator");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        
        $def(self, '$initialize', function $$initialize(dot_l, selector_l, begin_l, end_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          self.dot = dot_l;
          self.selector = selector_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, 5);
        
        $def(self, '$with_operator', function $$with_operator(operator_l) {
          var self = this;

          return $send(self, 'with', [], function $$1(map){
            
            
            if (map == null) map = nil;;
            return map.$update_operator(operator_l);}, 1)
        }, 1);
        self.$protected();
        return $def(self, '$update_operator', function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, 1);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/index"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('attr_reader,with,update_operator,protected');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Index');

        
        
        self.$attr_reader("begin");
        self.$attr_reader("end");
        self.$attr_reader("operator");
        
        $def(self, '$initialize', function $$initialize(begin_l, end_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          self.operator = nil;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, 3);
        
        $def(self, '$with_operator', function $$with_operator(operator_l) {
          var self = this;

          return $send(self, 'with', [], function $$1(map){
            
            
            if (map == null) map = nil;;
            return map.$update_operator(operator_l);}, 1)
        }, 1);
        self.$protected();
        return $def(self, '$update_operator', function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, 1);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/condition"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Condition');

        
        
        self.$attr_reader("keyword");
        self.$attr_reader("begin");
        self.$attr_reader("else");
        self.$attr_reader("end");
        return $def(self, '$initialize', function $$initialize(keyword_l, begin_l, else_l, end_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          self.keyword = keyword_l;
          $a = [begin_l, else_l, end_l], (self.begin = $a[0]), (self["else"] = $a[1]), (self.end = $a[2]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, 5);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/ternary"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Ternary');

        
        
        self.$attr_reader("question");
        self.$attr_reader("colon");
        return $def(self, '$initialize', function $$initialize(question_l, colon_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          $a = [question_l, colon_l], (self.question = $a[0]), (self.colon = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, 3);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/for"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'For');

        
        
        self.$attr_reader("keyword", "in");
        self.$attr_reader("begin", "end");
        return $def(self, '$initialize', function $$initialize(keyword_l, in_l, begin_l, end_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          $a = [keyword_l, in_l], (self.keyword = $a[0]), (self["in"] = $a[1]), $a;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, 5);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/rescue_body"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'RescueBody');

        
        
        self.$attr_reader("keyword");
        self.$attr_reader("assoc");
        self.$attr_reader("begin");
        return $def(self, '$initialize', function $$initialize(keyword_l, assoc_l, begin_l, expression_l) {
          var $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          self.keyword = keyword_l;
          self.assoc = assoc_l;
          self.begin = begin_l;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, 4);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/heredoc"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Heredoc');

        
        
        self.$attr_reader("heredoc_body");
        self.$attr_reader("heredoc_end");
        return $def(self, '$initialize', function $$initialize(begin_l, body_l, end_l) {
          var $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          self.heredoc_body = body_l;
          self.heredoc_end = end_l;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [begin_l], null);
        }, 3);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/source/map/objc_kwarg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'ObjcKwarg');

        
        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("argument");
        return $def(self, '$initialize', function $$initialize(keyword_l, operator_l, argument_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          $a = [keyword_l, operator_l, argument_l], (self.keyword = $a[0]), (self.operator = $a[1]), (self.argument = $a[2]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        }, 4);
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/syntax_error"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def;

  Opal.add_stubs('attr_reader,message');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super) {
      var self = $klass($base, $super, 'SyntaxError');

      
      
      self.$attr_reader("diagnostic");
      return $def(self, '$initialize', function $$initialize(diagnostic) {
        var $yield = $$initialize.$$p || nil, self = this;

        delete $$initialize.$$p;
        
        self.diagnostic = diagnostic;
        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [diagnostic.$message()], null);
      }, 1);
    })($nesting[0], $$('StandardError'))
  })($nesting[0], $nesting)
};

Opal.modules["parser/clobbering_error"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return ($klass($nesting[0], $$('RuntimeError'), 'ClobberingError'), nil)
  })($nesting[0], $nesting)
};

Opal.modules["parser/diagnostic"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $truthy = Opal.truthy, $hash2 = Opal.hash2, $def = Opal.def, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $to_ary = Opal.to_ary, $rb_gt = Opal.rb_gt, $rb_times = Opal.rb_times, $send = Opal.send, $to_a = Opal.to_a, $rb_ge = Opal.rb_ge, $not = Opal.not, $neqeq = Opal.neqeq;

  Opal.add_stubs('freeze,attr_reader,include?,raise,join,inspect,dup,compile,is?,==,line,last_line,+,message,render_line,first_line_only,last_line_only,-,source_buffer,decompose_position,end_pos,>,private,source_line,*,length,each,line_range,intersect,column_range,size,[]=,>=,!,map,name,!=,resize,=~,source,adjust');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Diagnostic');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.reason = $proto["arguments"] = $proto.location = $proto.level = $proto.highlights = nil;
      
      $const_set($nesting[0], 'LEVELS', ["note", "warning", "error", "fatal"].$freeze());
      self.$attr_reader("level", "reason", "arguments");
      self.$attr_reader("location", "highlights");
      
      $def(self, '$initialize', function $$initialize(level, reason, arguments$, location, highlights) {
        var self = this, $ret_or_1 = nil;

        
        
        if (highlights == null) highlights = [];;
        if (!$truthy($$('LEVELS')['$include?'](level))) {
          self.$raise($$('ArgumentError'), "" + ("Diagnostic#level must be one of " + ($$('LEVELS').$join(", ")) + "; ") + ("" + (level.$inspect()) + " provided."))
        };
        if (!$truthy(location)) {
          self.$raise("Expected a location")
        };
        self.level = level;
        self.reason = reason;
        self["arguments"] = ($truthy(($ret_or_1 = arguments$)) ? ($ret_or_1) : ($hash2([], {}))).$dup().$freeze();
        self.location = location;
        self.highlights = highlights.$dup().$freeze();
        return self.$freeze();
      }, -5);
      
      $def(self, '$message', function $$message() {
        var self = this;

        return $$('Messages').$compile(self.reason, self["arguments"])
      }, 0);
      
      $def(self, '$render', function $$render() {
        var $a, $b, self = this, first_line = nil, last_line = nil, num_lines = nil, buffer = nil, last_lineno = nil, last_column = nil;

        if (($eqeq(self.location.$line(), self.location.$last_line()) || ($truthy(self.location['$is?']("\n"))))) {
          return $rb_plus(["" + (self.location) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(self.location))
        } else {
          
          first_line = self.$first_line_only(self.location);
          last_line = self.$last_line_only(self.location);
          num_lines = $rb_plus($rb_minus(self.location.$last_line(), self.location.$line()), 1);
          buffer = self.location.$source_buffer();
          $b = buffer.$decompose_position(self.location.$end_pos()), $a = $to_ary($b), (last_lineno = ($a[0] == null ? nil : $a[0])), (last_column = ($a[1] == null ? nil : $a[1])), $b;
          return $rb_plus($rb_plus(["" + (self.location) + "-" + (last_lineno) + ":" + (last_column) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(first_line, $rb_gt(num_lines, 2), false)), self.$render_line(last_line, false, true));
        }
      }, 0);
      self.$private();
      
      $def(self, '$render_line', function $$render_line(range, ellipsis, range_end) {
        var self = this, source_line = nil, highlight_line = nil, $writer = nil;

        
        
        if (ellipsis == null) ellipsis = false;;
        
        if (range_end == null) range_end = false;;
        source_line = range.$source_line();
        highlight_line = $rb_times(" ", source_line.$length());
        $send(self.highlights, 'each', [], function $$1(highlight){var line_range = nil, $writer = nil;

          
          
          if (highlight == null) highlight = nil;;
          line_range = range.$source_buffer().$line_range(range.$line());
          if ($truthy((highlight = highlight.$intersect(line_range)))) {
            
            $writer = [highlight.$column_range(), $rb_times("~", highlight.$size())];
            $send(highlight_line, '[]=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };}, 1);
        if ($truthy(range['$is?']("\n"))) {
          highlight_line = $rb_plus(highlight_line, "^")
        } else if (($not(range_end) && ($truthy($rb_ge(range.$size(), 1))))) {
          
          $writer = [range.$column_range(), $rb_plus("^", $rb_times("~", $rb_minus(range.$size(), 1)))];
          $send(highlight_line, '[]=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [range.$column_range(), $rb_times("~", range.$size())];
          $send(highlight_line, '[]=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(ellipsis)) {
          highlight_line = $rb_plus(highlight_line, "...")
        };
        return $send([source_line, highlight_line], 'map', [], function $$2(line){
          
          
          if (line == null) line = nil;;
          return "" + (range.$source_buffer().$name()) + ":" + (range.$line()) + ": " + (line);}, 1);
      }, -2);
      
      $def(self, '$first_line_only', function $$first_line_only(range) {
        
        if ($neqeq(range.$line(), range.$last_line())) {
          return range.$resize(range.$source()['$=~'](/\n/))
        } else {
          return range
        }
      }, 1);
      return $def(self, '$last_line_only', function $$last_line_only(range) {
        
        if ($neqeq(range.$line(), range.$last_line())) {
          return range.$adjust($hash2(["begin_pos"], {"begin_pos": range.$source()['$=~'](/[^\n]*$/)}))
        } else {
          return range
        }
      }, 1);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/diagnostic/engine"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy;

  Opal.add_stubs('attr_accessor,ignore?,call,raise?,raise,protected,==,level');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Engine');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.consumer = $proto.ignore_warnings = $proto.all_errors_are_fatal = nil;
      
      self.$attr_accessor("consumer");
      self.$attr_accessor("all_errors_are_fatal");
      self.$attr_accessor("ignore_warnings");
      
      $def(self, '$initialize', function $$initialize(consumer) {
        var self = this;

        
        
        if (consumer == null) consumer = nil;;
        self.consumer = consumer;
        self.all_errors_are_fatal = false;
        return (self.ignore_warnings = false);
      }, -1);
      
      $def(self, '$process', function $$process(diagnostic) {
        var self = this;

        
        if (!$truthy(self['$ignore?'](diagnostic))) {
          if ($truthy(self.consumer)) {
            self.consumer.$call(diagnostic)
          }
        };
        if ($truthy(self['$raise?'](diagnostic))) {
          self.$raise($$$($$('Parser'), 'SyntaxError'), diagnostic)
        };
        return self;
      }, 1);
      self.$protected();
      
      $def(self, '$ignore?', function $Engine_ignore$ques$1(diagnostic) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.ignore_warnings))) {
          return diagnostic.$level()['$==']("warning")
        } else {
          return $ret_or_1
        }
      }, 1);
      return $def(self, '$raise?', function $Engine_raise$ques$2(diagnostic) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.all_errors_are_fatal)) ? (diagnostic.$level()['$==']("error")) : ($ret_or_2))))) {
          return $ret_or_1
        } else {
          return diagnostic.$level()['$==']("fatal")
        }
      }, 1);
    })($$('Diagnostic'), null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/static_environment"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def;

  Opal.add_stubs('reset,[],push,dup,pop,add,to_sym,include?,declare,declared?,empty?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StaticEnvironment');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.stack = $proto.variables = nil;
      
      $const_set($nesting[0], 'FORWARD_ARGS', "FORWARD_ARGS");
      $const_set($nesting[0], 'ANONYMOUS_BLOCKARG', "ANONYMOUS_BLOCKARG");
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        return self.$reset()
      }, 0);
      
      $def(self, '$reset', function $$reset() {
        var self = this;

        
        self.variables = $$('Set')['$[]']();
        return (self.stack = []);
      }, 0);
      
      $def(self, '$extend_static', function $$extend_static() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = $$('Set')['$[]']();
        return self;
      }, 0);
      
      $def(self, '$extend_dynamic', function $$extend_dynamic() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = self.variables.$dup();
        return self;
      }, 0);
      
      $def(self, '$unextend', function $$unextend() {
        var self = this;

        
        self.variables = self.stack.$pop();
        return self;
      }, 0);
      
      $def(self, '$declare', function $$declare(name) {
        var self = this;

        
        self.variables.$add(name.$to_sym());
        return self;
      }, 1);
      
      $def(self, '$declared?', function $StaticEnvironment_declared$ques$1(name) {
        var self = this;

        return self.variables['$include?'](name.$to_sym())
      }, 1);
      
      $def(self, '$declare_forward_args', function $$declare_forward_args() {
        var self = this;

        return self.$declare($$('FORWARD_ARGS'))
      }, 0);
      
      $def(self, '$declared_forward_args?', function $StaticEnvironment_declared_forward_args$ques$2() {
        var self = this;

        return self['$declared?']($$('FORWARD_ARGS'))
      }, 0);
      
      $def(self, '$declare_anonymous_blockarg', function $$declare_anonymous_blockarg() {
        var self = this;

        return self.$declare($$('ANONYMOUS_BLOCKARG'))
      }, 0);
      
      $def(self, '$declared_anonymous_blockarg?', function $StaticEnvironment_declared_anonymous_blockarg$ques$3() {
        var self = this;

        return self['$declared?']($$('ANONYMOUS_BLOCKARG'))
      }, 0);
      return $def(self, '$empty?', function $StaticEnvironment_empty$ques$4() {
        var self = this;

        return self.stack['$empty?']()
      }, 0);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/lexer"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $const_set = Opal.const_set, $hash = Opal.hash, $def = Opal.def, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $to_ary = Opal.to_ary, $rb_le = Opal.rb_le, $eqeqeq = Opal.eqeqeq, $rb_gt = Opal.rb_gt, $neqeq = Opal.neqeq, $not = Opal.not, $rb_ge = Opal.rb_ge, $range = Opal.range, $rb_lt = Opal.rb_lt, $gvars = Opal.gvars;

  Opal.add_stubs('attr_accessor,private,_lex_trans_keys=,-,_lex_key_spans=,_lex_index_offsets=,_lex_indicies=,_lex_trans_targs=,_lex_trans_actions=,_lex_to_state_actions=,_lex_from_state_actions=,_lex_eof_trans=,lex_start=,lex_error=,lex_en_interp_words=,lex_en_interp_string=,lex_en_plain_words=,lex_en_plain_string=,lex_en_interp_backslash_delimited=,lex_en_plain_backslash_delimited=,lex_en_interp_backslash_delimited_words=,lex_en_plain_backslash_delimited_words=,lex_en_regexp_modifiers=,lex_en_expr_variable=,lex_en_expr_fname=,lex_en_expr_endfn=,lex_en_expr_dot=,lex_en_expr_arg=,lex_en_expr_cmdarg=,lex_en_expr_endarg=,lex_en_expr_mid=,lex_en_expr_beg=,lex_en_expr_labelarg=,lex_en_expr_value=,lex_en_expr_end=,lex_en_leading_dot=,lex_en_line_comment=,lex_en_line_begin=,freeze,ord,union,chars,attr_reader,reset,lex_en_line_begin,class,new,source,==,encoding,unpack,[],lex_en_expr_dot,lex_en_expr_fname,lex_en_expr_value,lex_en_expr_beg,lex_en_expr_mid,lex_en_expr_arg,lex_en_expr_cmdarg,lex_en_expr_end,lex_en_expr_endarg,lex_en_expr_endfn,lex_en_expr_labelarg,lex_en_interp_string,lex_en_interp_words,lex_en_plain_string,fetch,invert,push,count,pop,any?,shift,send,+,size,<=,===,<<,>,!=,emit_comment,tok,literal,flush_string,extend_content,emit,heredoc?,saved_herebody_s=,start_interp_brace,[]=,diagnostic,range,str_s,gsub,version?,nest_and_try_closing,heredoc_e,pop_literal,infer_indent_level,!,eof_codepoint?,words?,extend_space,extend_string,active?,>=,slice,start_with?,chr,munge_escape?,match,regexp?,squiggly_heredoc?,supports_line_continuation_via_slash?,include?,scan,join,=~,to_i,stack_pop,emit_table,push_literal,arg_or_cmdarg,<,emit_do,declared?,nil?,last,in_def_open_args?,getbyte,inspect,end_with?,empty?,index,call,Float,to_f,length,lambda,Rational,Complex,each,encode_escape,%,end_interp_brace_and_try_closing,lexpop,saved_herebody_s,next_state_for_literal,rstrip,&,|,lex_error,protected,force_encoding,process,backslash_delimited?,interpolate?,lex_en_interp_backslash_delimited_words,lex_en_plain_backslash_delimited_words,lex_en_plain_words,lex_en_interp_backslash_delimited,lex_en_plain_backslash_delimited,dedent_level,type,lex_en_regexp_modifiers,upcase');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lexer');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $writer = nil, $proto = self.$$prototype;

    $proto.source_buffer = $proto.source_pts = $proto.cs = $proto.cmdarg_stack = $proto.cmdarg = $proto.cond_stack = $proto.cond = $proto.dedent_level = $proto.token_queue = $proto.p = $proto.command_start = $proto.herebody_s = $proto.sharp_s = $proto.ts = $proto.te = $proto.top = $proto.stack = $proto.version = $proto.escape_s = $proto.escape = $proto.act = $proto.static_env = $proto.newline_s = $proto.lambda_stack = $proto.paren_nest = $proto.context = $proto.num_digits_s = $proto.num_suffix_s = $proto.num_base = $proto.num_xfrm = $proto.eq_begin_s = $proto.cs_before_block_comment = $proto.in_kwarg = $proto.tokens = $proto.comments = $proto.diagnostics = $proto.literal_stack = nil;
    
    (function(self, $parent_nesting) {
      
      
      self.$attr_accessor("_lex_trans_keys");
      return self.$private("_lex_trans_keys", "_lex_trans_keys=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 101, 101, 103, 103, 105, 105, 110, 110, 69, 69, 78, 78, 68, 68, 95, 95, 95, 95, 0, 26, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 120, 0, 120, 0, 92, 0, 120, 0, 120, 0, 45, 0, 120, 0, 120, 67, 99, 45, 45, 0, 92, 0, 120, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 120, 0, 120, 0, 92, 0, 120, 0, 120, 0, 45, 0, 120, 0, 120, 67, 99, 45, 45, 0, 92, 0, 120, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 58, 58, 58, 46, 46, 10, 10, 0, 127, 58, 58, 60, 60, 62, 62, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 115, 115, 99, 99, 117, 117, 101, 101, 108, 116, 101, 101, 115, 115, 115, 115, 105, 105, 108, 108, 105, 105, 108, 108, 58, 58, 0, 127, 10, 10, 0, 127, 9, 92, 10, 10, 9, 92, 58, 58, 98, 98, 101, 101, 103, 103, 105, 105, 110, 110, 0, 127, 61, 61, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 10, 10, 0, 127, 0, 127, 61, 126, 93, 93, 0, 127, 0, 127, 10, 10, 34, 34, 10, 10, 39, 39, 0, 127, 10, 96, 96, 96, 0, 45, 0, 120, 0, 120, 0, 92, 0, 120, 0, 120, 0, 45, 0, 120, 0, 120, 67, 99, 45, 45, 0, 92, 0, 120, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 58, 58, 58, 0, 127, 43, 57, 48, 57, 48, 57, 48, 57, 48, 57, 115, 115, 99, 99, 117, 117, 101, 101, 99, 99, 117, 117, 101, 101, 0, 127, 58, 58, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 60, 60, 10, 10, 9, 92, 9, 92, 10, 10, 10, 10, 10, 10, 10, 10, 46, 46, 0, 95, 9, 32, 0, 0, 10, 10, 10, 10, 98, 98, 9, 32, 10, 10, 95, 95, 0, 92, 9, 32, 36, 123, 0, 127, 48, 57, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 48, 102, 48, 102, 0, 0, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 36, 123, 0, 127, 48, 57, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 48, 102, 48, 102, 0, 0, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 9, 32, 0, 26, 0, 92, 0, 26, 0, 35, 36, 123, 0, 127, 48, 57, 0, 127, 0, 26, 0, 35, 9, 32, 36, 123, 0, 127, 48, 57, 0, 127, 0, 32, 9, 32, 65, 122, 65, 122, 36, 64, 0, 127, 48, 57, 0, 127, 0, 127, 0, 127, 0, 127, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 115, 115, 38, 38, 42, 42, 64, 64, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 93, 93, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 124, 124, 0, 127, 0, 127, 9, 32, 10, 10, 10, 10, 46, 46, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 93, 93, 10, 10, 124, 124, 0, 126, 0, 127, 0, 61, 9, 61, 9, 61, 0, 0, 9, 61, 9, 62, 46, 46, 46, 46, 58, 58, 9, 32, 0, 0, 0, 127, 0, 0, 9, 124, 0, 0, 10, 10, 10, 10, 0, 0, 9, 61, 58, 58, 60, 60, 62, 62, 9, 32, 10, 10, 0, 127, 102, 102, 101, 101, 110, 110, 104, 104, 0, 127, 0, 127, 0, 127, 0, 0, 0, 127, 10, 10, 0, 123, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 111, 111, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 61, 0, 0, 61, 126, 61, 61, 0, 0, 0, 0, 0, 0, 9, 32, 61, 61, 9, 32, 61, 126, 10, 10, 10, 10, 0, 127, 38, 61, 0, 0, 42, 61, 61, 61, 9, 92, 9, 92, 9, 92, 46, 46, 46, 46, 10, 10, 0, 26, 0, 127, 0, 127, 61, 61, 0, 0, 61, 126, 61, 62, 0, 0, 0, 0, 0, 0, 0, 0, 61, 126, 0, 127, 48, 57, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 61, 61, 62, 0, 127, 48, 57, 0, 127, 124, 124, 64, 64, 60, 61, 0, 0, 10, 34, 10, 39, 96, 96, 62, 62, 61, 126, 61, 62, 0, 122, 0, 0, 0, 127, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 48, 102, 48, 102, 0, 0, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 61, 126, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 92, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 61, 61, 38, 61, 0, 0, 0, 0, 42, 61, 61, 62, 46, 57, 46, 46, 10, 10, 48, 101, 48, 95, 46, 120, 48, 114, 43, 57, 48, 105, 102, 102, 0, 0, 101, 105, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 105, 114, 102, 102, 0, 0, 101, 105, 115, 115, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 46, 114, 48, 114, 46, 114, 48, 114, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 9, 92, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 0, 9, 92, 9, 92, 9, 92, 46, 46, 46, 46, 10, 10, 46, 46, 10, 10, 10, 61, 10, 10, 10, 101, 10, 110, 10, 100, 10, 10, 0]];
    $send(self, '_lex_trans_keys=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      
      self.$attr_accessor("_lex_key_spans");
      return self.$private("_lex_key_spans", "_lex_key_spans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 128, 128, 128, 128, 46, 121, 121, 93, 121, 121, 46, 121, 121, 33, 1, 93, 121, 103, 128, 128, 128, 128, 46, 121, 121, 93, 121, 121, 46, 121, 121, 33, 1, 93, 121, 103, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 1, 1, 1, 128, 1, 1, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 128, 1, 128, 84, 1, 84, 1, 1, 1, 1, 1, 1, 128, 1, 84, 84, 84, 84, 84, 1, 128, 128, 66, 1, 128, 128, 1, 1, 1, 1, 128, 87, 1, 46, 121, 121, 93, 121, 121, 46, 121, 121, 33, 1, 93, 121, 103, 128, 128, 128, 128, 128, 128, 1, 1, 128, 15, 10, 10, 10, 10, 1, 1, 1, 1, 1, 1, 1, 128, 1, 84, 84, 84, 84, 84, 84, 1, 1, 84, 84, 1, 1, 1, 1, 1, 96, 24, 0, 1, 1, 1, 24, 1, 1, 93, 24, 88, 128, 10, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 55, 55, 0, 55, 55, 0, 46, 93, 93, 0, 0, 93, 55, 55, 0, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 88, 128, 10, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 55, 55, 0, 55, 55, 0, 46, 93, 93, 0, 0, 93, 55, 55, 0, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 24, 27, 93, 27, 36, 88, 128, 10, 128, 27, 36, 24, 88, 128, 10, 128, 33, 24, 58, 58, 29, 128, 10, 128, 128, 128, 128, 24, 0, 66, 1, 1, 128, 128, 10, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 128, 128, 128, 128, 128, 128, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 128, 128, 24, 1, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 1, 1, 1, 127, 128, 62, 53, 53, 0, 53, 54, 1, 1, 1, 24, 0, 128, 0, 116, 0, 1, 1, 0, 53, 1, 1, 1, 24, 1, 128, 1, 1, 1, 1, 128, 128, 128, 0, 128, 1, 124, 24, 1, 1, 1, 0, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 4, 0, 66, 1, 0, 0, 0, 24, 1, 24, 66, 1, 1, 128, 24, 0, 20, 1, 84, 84, 84, 1, 1, 1, 27, 128, 128, 1, 0, 66, 2, 0, 0, 0, 0, 66, 128, 10, 1, 1, 1, 2, 1, 1, 2, 128, 10, 128, 1, 1, 2, 0, 25, 30, 1, 1, 66, 2, 123, 0, 128, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 55, 55, 0, 55, 55, 0, 46, 93, 93, 0, 0, 93, 55, 55, 0, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 128, 128, 128, 0, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 93, 24, 0, 1, 1, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 128, 128, 10, 1, 24, 0, 0, 20, 2, 12, 1, 1, 54, 48, 75, 67, 15, 58, 1, 0, 5, 0, 0, 67, 67, 67, 67, 10, 1, 0, 5, 1, 0, 0, 67, 67, 67, 67, 67, 67, 67, 67, 69, 67, 69, 67, 1, 2, 1, 66, 1, 2, 128, 128, 0, 128, 128, 128, 128, 128, 128, 0, 1, 0, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 84, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 0, 84, 84, 84, 1, 1, 1, 1, 1, 52, 1, 92, 101, 91, 1]];
    $send(self, '_lex_key_spans=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      
      self.$attr_accessor("_lex_index_offsets");
      return self.$private("_lex_index_offsets", "_lex_index_offsets=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 46, 175, 304, 433, 562, 609, 731, 853, 947, 1069, 1191, 1238, 1360, 1482, 1516, 1518, 1612, 1734, 1838, 1967, 2096, 2225, 2354, 2401, 2523, 2645, 2739, 2861, 2983, 3030, 3152, 3274, 3308, 3310, 3404, 3526, 3630, 3759, 3888, 4017, 4146, 4275, 4404, 4533, 4662, 4791, 4920, 5049, 5178, 5307, 5436, 5565, 5567, 5569, 5571, 5573, 5702, 5704, 5706, 5708, 5710, 5839, 5968, 6097, 6226, 6355, 6484, 6613, 6742, 6871, 7000, 7129, 7258, 7387, 7516, 7645, 7774, 7903, 8032, 8034, 8036, 8038, 8040, 8050, 8052, 8054, 8056, 8058, 8060, 8062, 8064, 8066, 8195, 8197, 8326, 8411, 8413, 8498, 8500, 8502, 8504, 8506, 8508, 8510, 8639, 8641, 8726, 8811, 8896, 8981, 9066, 9068, 9197, 9326, 9393, 9395, 9524, 9653, 9655, 9657, 9659, 9661, 9790, 9878, 9880, 9927, 10049, 10171, 10265, 10387, 10509, 10556, 10678, 10800, 10834, 10836, 10930, 11052, 11156, 11285, 11414, 11543, 11672, 11801, 11930, 11932, 11934, 12063, 12079, 12090, 12101, 12112, 12123, 12125, 12127, 12129, 12131, 12133, 12135, 12137, 12266, 12268, 12353, 12438, 12523, 12608, 12693, 12778, 12780, 12782, 12867, 12952, 12954, 12956, 12958, 12960, 12962, 13059, 13084, 13085, 13087, 13089, 13091, 13116, 13118, 13120, 13214, 13239, 13328, 13457, 13468, 13597, 13719, 13720, 13721, 13730, 13739, 13740, 13741, 13835, 13836, 13837, 13838, 13932, 13934, 13935, 13936, 13937, 14031, 14087, 14143, 14144, 14200, 14256, 14257, 14304, 14398, 14492, 14493, 14494, 14588, 14644, 14700, 14701, 14748, 14750, 14844, 14921, 14977, 15033, 15089, 15090, 15217, 15344, 15345, 15472, 15473, 15600, 15727, 15854, 15981, 15982, 16109, 16236, 16363, 16490, 16617, 16744, 16745, 16746, 16802, 16803, 16897, 16986, 17115, 17126, 17255, 17377, 17378, 17379, 17388, 17397, 17398, 17399, 17493, 17494, 17495, 17496, 17590, 17592, 17593, 17594, 17595, 17689, 17745, 17801, 17802, 17858, 17914, 17915, 17962, 18056, 18150, 18151, 18152, 18246, 18302, 18358, 18359, 18406, 18408, 18502, 18579, 18635, 18691, 18747, 18748, 18875, 19002, 19003, 19130, 19131, 19258, 19385, 19512, 19639, 19640, 19767, 19894, 20021, 20148, 20275, 20402, 20403, 20404, 20460, 20461, 20555, 20580, 20608, 20702, 20730, 20767, 20856, 20985, 20996, 21125, 21153, 21190, 21215, 21304, 21433, 21444, 21573, 21607, 21632, 21691, 21750, 21780, 21909, 21920, 22049, 22178, 22307, 22436, 22461, 22462, 22529, 22531, 22533, 22662, 22791, 22802, 22804, 22806, 22808, 22810, 22812, 22815, 22817, 22884, 22886, 22889, 23018, 23147, 23276, 23405, 23534, 23663, 23792, 23794, 23796, 23925, 24054, 24183, 24312, 24441, 24570, 24699, 24828, 24957, 25086, 25215, 25344, 25473, 25602, 25731, 25860, 25989, 26118, 26247, 26376, 26505, 26634, 26763, 26892, 27021, 27150, 27279, 27408, 27537, 27666, 27795, 27924, 28053, 28182, 28311, 28440, 28569, 28698, 28827, 28956, 29085, 29214, 29343, 29472, 29601, 29730, 29859, 29988, 30117, 30246, 30375, 30504, 30633, 30762, 30891, 31020, 31149, 31278, 31407, 31536, 31665, 31794, 31923, 32052, 32181, 32310, 32439, 32568, 32697, 32826, 32955, 33084, 33213, 33342, 33471, 33600, 33729, 33858, 33987, 34116, 34245, 34374, 34503, 34505, 34634, 34763, 34788, 34790, 34792, 34794, 34796, 34797, 34926, 35055, 35057, 35058, 35083, 35084, 35151, 35153, 35155, 35157, 35159, 35161, 35164, 35166, 35233, 35235, 35238, 35367, 35369, 35371, 35373, 35501, 35630, 35693, 35747, 35801, 35802, 35856, 35911, 35913, 35915, 35917, 35942, 35943, 36072, 36073, 36190, 36191, 36193, 36195, 36196, 36250, 36252, 36254, 36256, 36281, 36283, 36412, 36414, 36416, 36418, 36420, 36549, 36678, 36807, 36808, 36937, 36939, 37064, 37089, 37091, 37093, 37095, 37096, 37098, 37099, 37228, 37357, 37382, 37383, 37385, 37387, 37389, 37390, 37519, 37648, 37777, 37906, 38035, 38164, 38293, 38422, 38551, 38680, 38809, 38938, 39067, 39196, 39325, 39454, 39583, 39712, 39717, 39718, 39785, 39787, 39788, 39789, 39790, 39815, 39817, 39842, 39909, 39911, 39913, 40042, 40067, 40068, 40089, 40091, 40176, 40261, 40346, 40348, 40350, 40352, 40380, 40509, 40638, 40640, 40641, 40708, 40711, 40712, 40713, 40714, 40715, 40782, 40911, 40922, 40924, 40926, 40928, 40931, 40933, 40935, 40938, 41067, 41078, 41207, 41209, 41211, 41214, 41215, 41241, 41272, 41274, 41276, 41343, 41346, 41470, 41471, 41600, 41729, 41851, 41852, 41853, 41862, 41871, 41872, 41873, 41967, 41968, 41969, 41970, 42064, 42066, 42067, 42068, 42069, 42163, 42219, 42275, 42276, 42332, 42388, 42389, 42436, 42530, 42624, 42625, 42626, 42720, 42776, 42832, 42833, 42880, 42882, 42976, 43053, 43109, 43165, 43221, 43222, 43349, 43476, 43477, 43604, 43605, 43732, 43859, 43986, 44113, 44114, 44241, 44368, 44495, 44622, 44749, 44876, 45003, 45130, 45257, 45384, 45511, 45638, 45765, 45892, 46019, 46146, 46273, 46400, 46527, 46528, 46529, 46585, 46586, 46715, 46844, 46973, 46974, 46976, 46977, 47106, 47235, 47364, 47493, 47622, 47751, 47880, 48009, 48138, 48267, 48396, 48525, 48654, 48783, 48912, 49041, 49170, 49299, 49428, 49557, 49686, 49815, 49944, 50073, 50202, 50331, 50460, 50589, 50718, 50847, 50976, 51105, 51234, 51363, 51492, 51621, 51750, 51879, 52008, 52137, 52266, 52395, 52524, 52653, 52782, 52911, 53040, 53169, 53298, 53427, 53556, 53685, 53814, 53943, 54072, 54201, 54330, 54459, 54588, 54717, 54846, 54913, 55042, 55171, 55300, 55429, 55558, 55687, 55816, 55945, 56074, 56203, 56332, 56461, 56590, 56719, 56848, 56977, 57106, 57235, 57364, 57493, 57622, 57751, 57880, 58009, 58138, 58139, 58204, 58298, 58323, 58324, 58326, 58328, 58330, 58331, 58460, 58589, 58614, 58615, 58617, 58619, 58621, 58622, 58751, 58880, 58882, 58883, 58908, 58909, 58976, 58978, 58980, 59109, 59238, 59249, 59251, 59276, 59277, 59278, 59299, 59302, 59315, 59317, 59319, 59374, 59423, 59499, 59567, 59583, 59642, 59644, 59645, 59651, 59652, 59653, 59721, 59789, 59857, 59925, 59936, 59938, 59939, 59945, 59947, 59948, 59949, 60017, 60085, 60153, 60221, 60289, 60357, 60425, 60493, 60563, 60631, 60701, 60769, 60771, 60774, 60776, 60843, 60845, 60848, 60977, 61106, 61107, 61236, 61365, 61494, 61623, 61752, 61881, 61882, 61884, 61885, 61886, 62015, 62144, 62273, 62402, 62531, 62660, 62789, 62918, 63047, 63176, 63305, 63434, 63563, 63692, 63821, 63950, 64079, 64208, 64337, 64466, 64595, 64724, 64853, 64982, 65111, 65240, 65369, 65498, 65627, 65756, 65885, 66014, 66143, 66272, 66401, 66530, 66659, 66744, 66873, 67002, 67131, 67260, 67389, 67518, 67647, 67776, 67905, 68034, 68163, 68292, 68421, 68550, 68679, 68808, 68937, 69066, 69195, 69324, 69453, 69582, 69711, 69840, 69969, 70098, 70227, 70356, 70485, 70614, 70743, 70872, 71001, 71130, 71259, 71388, 71517, 71646, 71775, 71904, 72033, 72162, 72291, 72420, 72549, 72678, 72807, 72936, 73065, 73194, 73323, 73452, 73581, 73710, 73839, 73968, 74097, 74226, 74355, 74484, 74613, 74742, 74871, 75000, 75129, 75130, 75195, 75196, 75281, 75366, 75451, 75453, 75455, 75457, 75459, 75461, 75514, 75516, 75609, 75711, 75803]];
    $send(self, '_lex_index_offsets=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      
      self.$attr_accessor("_lex_indicies");
      return self.$private("_lex_indicies", "_lex_indicies=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 12, 14, 12, 14, 14, 12, 12, 14, 14, 14, 15, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 14, 12, 12, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 14, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 14, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 18, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 19, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 20, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 26, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 27, 27, 27, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 27, 19, 30, 30, 30, 19, 30, 30, 30, 30, 30, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 19, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 32, 30, 19, 30, 30, 30, 19, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 19, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 32, 30, 19, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 33, 20, 19, 34, 34, 34, 19, 34, 34, 34, 34, 34, 35, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 19, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 36, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 37, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 39, 34, 19, 34, 34, 34, 19, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 19, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 39, 34, 40, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 41, 19, 41, 19, 19, 42, 42, 42, 19, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 19, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 44, 42, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 26, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 45, 45, 45, 19, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 19, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 49, 49, 47, 49, 47, 49, 49, 47, 47, 49, 49, 49, 50, 49, 49, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 49, 49, 49, 49, 49, 49, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 49, 47, 47, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 49, 47, 48, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 47, 47, 47, 47, 47, 47, 47, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 47, 47, 47, 47, 49, 47, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 47, 47, 47, 47, 47, 49, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 47, 47, 47, 47, 47, 47, 53, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 48, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 47, 48, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 48, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 47, 48, 54, 55, 55, 55, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 55, 54, 57, 57, 57, 54, 57, 57, 57, 57, 57, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 54, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 59, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 60, 57, 54, 57, 57, 57, 54, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 54, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 61, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 60, 57, 54, 62, 62, 62, 54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 64, 62, 54, 65, 65, 65, 54, 65, 65, 65, 65, 65, 66, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 54, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 67, 65, 54, 65, 65, 65, 54, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 54, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 67, 65, 54, 55, 55, 55, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68, 55, 54, 69, 69, 69, 54, 69, 69, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 54, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 71, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 72, 69, 69, 69, 69, 69, 69, 73, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 74, 69, 54, 69, 69, 69, 54, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 54, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 74, 69, 75, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 76, 54, 76, 54, 54, 77, 77, 77, 54, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 54, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 79, 77, 54, 57, 57, 57, 54, 57, 57, 57, 57, 57, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 54, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 61, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 60, 57, 54, 80, 80, 80, 54, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 54, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 84, 84, 82, 84, 82, 84, 84, 82, 82, 84, 84, 84, 85, 84, 84, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 84, 82, 82, 83, 84, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 84, 82, 83, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 82, 82, 82, 82, 82, 82, 82, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 82, 82, 82, 82, 84, 82, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 82, 82, 82, 82, 82, 84, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 82, 82, 82, 82, 82, 82, 88, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 83, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 82, 83, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 83, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 82, 83, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 91, 89, 91, 89, 91, 91, 89, 89, 91, 91, 91, 92, 91, 91, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 91, 91, 91, 91, 91, 91, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 91, 89, 89, 90, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 91, 89, 90, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 89, 89, 89, 89, 89, 89, 89, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 89, 89, 89, 89, 91, 89, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 89, 89, 89, 89, 89, 91, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 89, 89, 89, 89, 89, 89, 95, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89, 90, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89, 89, 90, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89, 90, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89, 89, 90, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 97, 97, 98, 97, 98, 97, 97, 98, 98, 97, 97, 97, 99, 97, 97, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 97, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 98, 97, 98, 98, 96, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 98, 98, 98, 97, 98, 96, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 97, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 98, 98, 98, 98, 98, 98, 102, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 98, 98, 98, 98, 101, 98, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 98, 98, 98, 98, 98, 101, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 98, 98, 98, 98, 98, 98, 98, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 98, 98, 98, 98, 103, 98, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 98, 98, 98, 98, 98, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 106, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 111, 108, 108, 108, 108, 110, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 108, 108, 108, 108, 109, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 108, 108, 108, 108, 108, 109, 111, 108, 108, 112, 113, 108, 114, 108, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 115, 115, 115, 115, 117, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 115, 115, 115, 115, 116, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 115, 115, 115, 115, 115, 116, 118, 115, 120, 119, 121, 119, 122, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 124, 119, 124, 124, 124, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 124, 119, 119, 119, 119, 125, 126, 119, 127, 119, 128, 129, 130, 131, 132, 125, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 133, 119, 134, 130, 135, 136, 119, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 137, 138, 130, 139, 123, 119, 123, 123, 123, 123, 123, 123, 123, 123, 140, 123, 123, 123, 123, 123, 123, 123, 123, 141, 123, 123, 142, 123, 143, 123, 123, 123, 144, 145, 119, 139, 119, 123, 119, 119, 119, 119, 119, 119, 119, 119, 119, 146, 119, 146, 146, 146, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 146, 119, 119, 119, 119, 147, 148, 119, 149, 119, 150, 151, 152, 153, 154, 147, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 155, 119, 156, 152, 157, 158, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 159, 160, 152, 121, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 161, 116, 116, 116, 116, 116, 116, 116, 116, 162, 116, 116, 163, 116, 164, 116, 116, 116, 165, 166, 119, 121, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 167, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 168, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 170, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 171, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 167, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 172, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 173, 116, 116, 116, 116, 116, 116, 116, 174, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 175, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 176, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 167, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 177, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 167, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 178, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 179, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 119, 119, 119, 119, 117, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 116, 119, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 171, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 116, 181, 180, 182, 180, 183, 180, 152, 180, 184, 180, 180, 180, 180, 180, 180, 180, 185, 180, 186, 180, 187, 180, 152, 180, 188, 180, 152, 180, 189, 180, 183, 180, 191, 190, 192, 192, 192, 192, 192, 192, 192, 192, 192, 194, 192, 194, 194, 194, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 194, 192, 192, 192, 192, 192, 192, 192, 195, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 192, 196, 192, 192, 193, 192, 193, 193, 193, 197, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 192, 192, 192, 192, 192, 193, 198, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 200, 192, 200, 200, 200, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 200, 192, 192, 192, 192, 192, 192, 192, 201, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 192, 202, 192, 192, 199, 192, 199, 199, 199, 203, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 192, 192, 192, 192, 192, 199, 205, 204, 205, 205, 205, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 205, 204, 204, 204, 204, 204, 204, 204, 206, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 207, 204, 208, 204, 209, 204, 209, 209, 209, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 209, 204, 204, 204, 204, 204, 204, 204, 210, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 211, 204, 212, 213, 215, 214, 216, 214, 217, 214, 218, 214, 219, 214, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 221, 221, 221, 221, 221, 221, 221, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 221, 221, 221, 221, 221, 221, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 221, 221, 221, 221, 221, 220, 222, 212, 223, 224, 223, 223, 223, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 223, 212, 212, 225, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 227, 212, 228, 229, 228, 228, 228, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 228, 212, 212, 230, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 232, 212, 234, 235, 234, 234, 234, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 234, 233, 233, 236, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 238, 233, 240, 241, 240, 240, 240, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 240, 239, 239, 242, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 244, 239, 240, 245, 240, 240, 240, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 240, 239, 239, 242, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 244, 239, 224, 212, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 248, 248, 246, 248, 246, 248, 248, 246, 246, 248, 248, 248, 249, 248, 248, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 248, 248, 248, 248, 248, 248, 248, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 246, 248, 246, 246, 247, 248, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 246, 246, 246, 248, 246, 247, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 246, 246, 246, 246, 246, 246, 246, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 246, 246, 246, 246, 248, 246, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 246, 246, 246, 246, 246, 248, 251, 248, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 248, 246, 251, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 253, 246, 246, 246, 246, 254, 246, 246, 246, 246, 246, 255, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 222, 246, 246, 246, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 246, 246, 246, 246, 252, 256, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 246, 246, 246, 255, 246, 252, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 259, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 258, 258, 258, 258, 258, 258, 258, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 258, 258, 258, 258, 257, 258, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 258, 258, 258, 258, 258, 257, 261, 260, 264, 263, 259, 258, 264, 265, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 253, 246, 246, 246, 246, 254, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 246, 246, 246, 246, 252, 256, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 246, 246, 246, 246, 246, 252, 267, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 264, 266, 264, 267, 268, 269, 269, 269, 268, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 268, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 270, 269, 268, 271, 271, 271, 268, 271, 271, 271, 271, 271, 272, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 268, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 273, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 274, 271, 268, 271, 271, 271, 268, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 268, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 275, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 274, 271, 268, 276, 276, 276, 268, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 268, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 277, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 278, 276, 268, 279, 279, 279, 268, 279, 279, 279, 279, 279, 280, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 268, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 281, 279, 268, 279, 279, 279, 268, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 268, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 281, 279, 268, 269, 269, 269, 268, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 268, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 282, 269, 268, 283, 283, 283, 268, 283, 283, 283, 283, 283, 284, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 268, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 285, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 286, 283, 283, 283, 283, 283, 283, 287, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 288, 283, 268, 283, 283, 283, 268, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 268, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 288, 283, 289, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 290, 268, 290, 268, 268, 291, 291, 291, 268, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 268, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 292, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 293, 291, 268, 271, 271, 271, 268, 271, 271, 271, 271, 271, 272, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 268, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 275, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 274, 271, 268, 294, 294, 294, 268, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 268, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 294, 294, 294, 294, 294, 294, 294, 295, 295, 295, 295, 295, 295, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 295, 295, 295, 295, 295, 295, 294, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 297, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 298, 212, 212, 299, 212, 297, 212, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 212, 212, 212, 212, 296, 212, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 212, 212, 212, 212, 212, 296, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 297, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 298, 246, 246, 299, 246, 297, 246, 296, 296, 296, 296, 296, 296, 300, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 246, 246, 246, 246, 296, 246, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 246, 246, 246, 246, 246, 296, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 297, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 298, 246, 246, 299, 246, 297, 246, 296, 296, 296, 296, 296, 296, 296, 296, 301, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 246, 246, 246, 246, 296, 246, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 246, 246, 246, 246, 246, 296, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 297, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 298, 246, 246, 299, 246, 297, 246, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 302, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 246, 246, 246, 246, 296, 246, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 246, 246, 246, 246, 246, 296, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 297, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 298, 246, 246, 299, 246, 297, 246, 296, 296, 296, 302, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 246, 246, 246, 246, 296, 246, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 246, 246, 246, 246, 246, 296, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 305, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 306, 303, 303, 303, 303, 305, 303, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 303, 303, 303, 303, 304, 303, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 303, 303, 303, 303, 303, 304, 306, 303, 303, 307, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 308, 308, 308, 308, 308, 308, 308, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 308, 308, 308, 308, 309, 308, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 308, 308, 308, 308, 308, 309, 311, 310, 311, 310, 310, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 310, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 310, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 310, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 314, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 314, 318, 317, 319, 317, 320, 317, 321, 317, 323, 322, 324, 322, 325, 322, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 308, 308, 308, 308, 308, 308, 308, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 308, 308, 308, 308, 326, 308, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 308, 308, 308, 308, 308, 326, 327, 314, 328, 329, 328, 328, 328, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 328, 314, 314, 330, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 331, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 332, 314, 333, 334, 333, 333, 333, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 333, 314, 314, 335, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 336, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 337, 314, 339, 340, 339, 339, 339, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 339, 338, 338, 341, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 342, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 343, 338, 345, 346, 345, 345, 345, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 345, 344, 344, 347, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 348, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 349, 344, 345, 346, 345, 345, 345, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 345, 344, 344, 347, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 350, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 349, 344, 345, 351, 345, 345, 345, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 345, 344, 344, 347, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 348, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 349, 344, 352, 314, 329, 314, 354, 355, 354, 354, 354, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 354, 353, 353, 356, 353, 353, 357, 353, 353, 353, 353, 353, 353, 353, 358, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 359, 353, 361, 355, 361, 361, 361, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 361, 360, 360, 356, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 359, 360, 364, 363, 366, 365, 367, 362, 368, 362, 369, 353, 371, 370, 370, 370, 371, 370, 370, 370, 370, 372, 373, 372, 372, 372, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 371, 370, 370, 370, 370, 370, 372, 370, 370, 374, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 375, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 376, 370, 370, 377, 370, 372, 378, 372, 372, 372, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 372, 378, 379, 380, 381, 382, 383, 385, 384, 387, 388, 387, 387, 387, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 387, 386, 373, 384, 389, 384, 391, 390, 390, 390, 391, 390, 390, 390, 390, 392, 393, 392, 392, 392, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 391, 390, 390, 390, 390, 390, 392, 390, 390, 394, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 395, 390, 392, 396, 392, 392, 392, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 392, 396, 398, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 399, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 400, 397, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 401, 401, 401, 401, 401, 401, 401, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 401, 401, 401, 401, 13, 401, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 401, 401, 401, 401, 401, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 401, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 402, 402, 402, 402, 402, 402, 402, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 402, 402, 402, 402, 17, 402, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 402, 402, 402, 402, 402, 17, 405, 404, 404, 404, 405, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 405, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 406, 406, 406, 406, 406, 406, 406, 406, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 407, 404, 404, 404, 404, 404, 404, 404, 404, 404, 408, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 409, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 410, 404, 404, 411, 404, 412, 413, 415, 415, 415, 415, 415, 415, 415, 415, 414, 416, 416, 416, 416, 416, 416, 416, 416, 414, 414, 417, 417, 42, 42, 42, 417, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 417, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 418, 42, 419, 420, 421, 421, 42, 42, 42, 421, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 421, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 422, 42, 41, 421, 423, 424, 425, 425, 27, 27, 27, 425, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 425, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 426, 27, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 425, 425, 425, 425, 425, 425, 425, 427, 427, 427, 427, 427, 427, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 427, 427, 427, 427, 427, 427, 425, 429, 429, 429, 429, 429, 429, 429, 429, 429, 429, 428, 428, 428, 428, 428, 428, 428, 429, 429, 429, 429, 429, 429, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 429, 429, 429, 429, 429, 429, 428, 428, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 421, 421, 421, 421, 421, 421, 421, 430, 430, 430, 430, 430, 430, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 430, 430, 430, 430, 430, 430, 421, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 431, 431, 431, 431, 431, 431, 431, 432, 432, 432, 432, 432, 432, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 432, 432, 432, 432, 432, 432, 431, 431, 421, 20, 20, 20, 421, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 421, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 433, 20, 417, 27, 27, 27, 417, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 417, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 27, 417, 434, 434, 434, 417, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 417, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 435, 434, 436, 437, 437, 434, 434, 434, 437, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 437, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 438, 434, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 437, 437, 437, 437, 437, 437, 437, 439, 439, 439, 439, 439, 439, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 439, 439, 439, 439, 439, 439, 437, 441, 441, 441, 441, 441, 441, 441, 441, 441, 441, 440, 440, 440, 440, 440, 440, 440, 441, 441, 441, 441, 441, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 441, 441, 441, 441, 441, 441, 440, 440, 437, 20, 20, 20, 437, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 437, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 433, 20, 442, 437, 437, 27, 27, 27, 437, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 437, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 27, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 443, 443, 443, 443, 443, 443, 443, 444, 444, 444, 444, 444, 444, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 444, 444, 444, 444, 444, 444, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 445, 443, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 443, 443, 443, 443, 443, 443, 443, 446, 446, 446, 446, 446, 446, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 446, 446, 446, 446, 446, 446, 443, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 443, 443, 443, 443, 443, 443, 443, 447, 447, 447, 447, 447, 447, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 447, 447, 447, 447, 447, 447, 443, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 443, 443, 443, 443, 443, 443, 443, 448, 448, 448, 448, 448, 448, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 448, 448, 448, 448, 448, 448, 443, 449, 452, 451, 451, 451, 452, 451, 451, 451, 451, 453, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 452, 451, 451, 451, 451, 451, 453, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 451, 451, 451, 451, 451, 451, 451, 454, 454, 454, 454, 454, 454, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 454, 454, 454, 454, 454, 454, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 455, 451, 452, 451, 451, 451, 452, 451, 451, 451, 451, 450, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 452, 451, 451, 451, 451, 451, 450, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 451, 451, 451, 451, 451, 451, 451, 456, 456, 456, 456, 456, 456, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 456, 456, 456, 456, 456, 456, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 457, 451, 450, 452, 456, 456, 456, 452, 456, 456, 456, 456, 450, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 452, 456, 456, 456, 456, 456, 450, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 450, 456, 458, 452, 459, 459, 459, 452, 459, 459, 459, 459, 453, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 453, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 459, 459, 459, 459, 459, 459, 459, 454, 454, 454, 454, 454, 454, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 454, 454, 454, 454, 454, 454, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 450, 459, 452, 459, 459, 459, 452, 459, 459, 459, 459, 450, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 450, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 459, 459, 459, 459, 459, 459, 459, 456, 456, 456, 456, 456, 456, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 456, 456, 456, 456, 456, 456, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 452, 459, 459, 459, 452, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 459, 459, 459, 459, 459, 459, 459, 461, 461, 461, 461, 461, 461, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 461, 461, 461, 461, 461, 461, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 462, 459, 452, 459, 459, 459, 452, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 459, 459, 459, 459, 459, 459, 459, 454, 454, 454, 454, 454, 454, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 454, 454, 454, 454, 454, 454, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 462, 459, 463, 452, 459, 459, 459, 452, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 459, 459, 459, 459, 459, 459, 459, 464, 464, 464, 464, 464, 464, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 464, 464, 464, 464, 464, 464, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 462, 459, 452, 459, 459, 459, 452, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 459, 459, 459, 459, 459, 459, 459, 465, 465, 465, 465, 465, 465, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 465, 465, 465, 465, 465, 465, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 462, 459, 452, 459, 459, 459, 452, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 459, 459, 459, 459, 459, 459, 459, 466, 466, 466, 466, 466, 466, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 466, 466, 466, 466, 466, 466, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 462, 459, 452, 459, 459, 459, 452, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 459, 459, 459, 459, 459, 459, 459, 467, 467, 467, 467, 467, 467, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 467, 467, 467, 467, 467, 467, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 462, 459, 452, 459, 459, 459, 452, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 459, 459, 459, 459, 459, 459, 459, 468, 468, 468, 468, 468, 468, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 468, 468, 468, 468, 468, 468, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 462, 459, 452, 459, 459, 459, 452, 459, 459, 459, 459, 450, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 452, 459, 459, 459, 459, 459, 450, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 459, 459, 459, 459, 459, 459, 459, 468, 468, 468, 468, 468, 468, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 468, 468, 468, 468, 468, 468, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 450, 459, 469, 470, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 471, 471, 471, 471, 471, 471, 471, 472, 472, 472, 472, 472, 472, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 472, 472, 472, 472, 472, 472, 471, 471, 474, 473, 473, 473, 474, 473, 473, 473, 473, 473, 475, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 474, 473, 473, 473, 473, 473, 473, 473, 473, 476, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 477, 473, 479, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 480, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 481, 478, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 482, 482, 482, 482, 482, 482, 482, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 482, 482, 482, 482, 48, 482, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 482, 482, 482, 482, 482, 48, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 482, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 483, 483, 483, 483, 483, 483, 483, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 483, 483, 483, 483, 52, 483, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 483, 483, 483, 483, 483, 52, 486, 485, 485, 485, 486, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 486, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 487, 487, 487, 487, 487, 487, 487, 487, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 488, 485, 485, 485, 485, 485, 485, 485, 485, 485, 489, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 490, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 491, 485, 485, 492, 485, 493, 494, 496, 496, 496, 496, 496, 496, 496, 496, 495, 497, 497, 497, 497, 497, 497, 497, 497, 495, 495, 498, 498, 77, 77, 77, 498, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 498, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 499, 77, 500, 501, 502, 502, 77, 77, 77, 502, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 502, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 503, 77, 76, 502, 504, 505, 506, 506, 62, 62, 62, 506, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 506, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 507, 62, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 506, 506, 506, 506, 506, 506, 506, 508, 508, 508, 508, 508, 508, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 508, 508, 508, 508, 508, 508, 506, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 509, 509, 509, 509, 509, 509, 509, 510, 510, 510, 510, 510, 510, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 510, 510, 510, 510, 510, 510, 509, 509, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 502, 502, 502, 502, 502, 502, 502, 511, 511, 511, 511, 511, 511, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 511, 511, 511, 511, 511, 511, 502, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 512, 512, 512, 512, 512, 512, 512, 513, 513, 513, 513, 513, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 513, 513, 513, 513, 513, 513, 512, 512, 502, 55, 55, 55, 502, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 502, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 514, 55, 498, 62, 62, 62, 498, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 498, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 64, 62, 498, 515, 515, 515, 498, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 498, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 516, 515, 517, 518, 518, 515, 515, 515, 518, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 518, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 519, 515, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 518, 518, 518, 518, 518, 518, 518, 520, 520, 520, 520, 520, 520, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 520, 520, 520, 520, 520, 520, 518, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 521, 521, 521, 521, 521, 521, 521, 522, 522, 522, 522, 522, 522, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 522, 522, 522, 522, 522, 522, 521, 521, 518, 55, 55, 55, 518, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 518, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 514, 55, 523, 518, 518, 62, 62, 62, 518, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 518, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 64, 62, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 524, 524, 524, 524, 524, 524, 524, 525, 525, 525, 525, 525, 525, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 525, 525, 525, 525, 525, 525, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 526, 524, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 524, 524, 524, 524, 524, 524, 524, 527, 527, 527, 527, 527, 527, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 527, 527, 527, 527, 527, 527, 524, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 524, 524, 524, 524, 524, 524, 524, 528, 528, 528, 528, 528, 528, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 528, 528, 528, 528, 528, 528, 524, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 524, 524, 524, 524, 524, 524, 524, 529, 529, 529, 529, 529, 529, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 529, 529, 529, 529, 529, 529, 524, 530, 533, 532, 532, 532, 533, 532, 532, 532, 532, 534, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 533, 532, 532, 532, 532, 532, 534, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 532, 532, 532, 532, 532, 532, 532, 535, 535, 535, 535, 535, 535, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 535, 535, 535, 535, 535, 535, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 536, 532, 533, 532, 532, 532, 533, 532, 532, 532, 532, 531, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 533, 532, 532, 532, 532, 532, 531, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 532, 532, 532, 532, 532, 532, 532, 537, 537, 537, 537, 537, 537, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 537, 537, 537, 537, 537, 537, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 538, 532, 531, 533, 537, 537, 537, 533, 537, 537, 537, 537, 531, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 533, 537, 537, 537, 537, 537, 531, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 531, 537, 539, 533, 540, 540, 540, 533, 540, 540, 540, 540, 534, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 534, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 540, 540, 540, 540, 540, 540, 540, 535, 535, 535, 535, 535, 535, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 535, 535, 535, 535, 535, 535, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 531, 540, 533, 540, 540, 540, 533, 540, 540, 540, 540, 531, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 531, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 540, 540, 540, 540, 540, 540, 540, 537, 537, 537, 537, 537, 537, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 537, 537, 537, 537, 537, 537, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 533, 540, 540, 540, 533, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 540, 540, 540, 540, 540, 540, 540, 542, 542, 542, 542, 542, 542, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 542, 542, 542, 542, 542, 542, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 543, 540, 533, 540, 540, 540, 533, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 540, 540, 540, 540, 540, 540, 540, 535, 535, 535, 535, 535, 535, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 535, 535, 535, 535, 535, 535, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 543, 540, 544, 533, 540, 540, 540, 533, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 540, 540, 540, 540, 540, 540, 540, 545, 545, 545, 545, 545, 545, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 545, 545, 545, 545, 545, 545, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 543, 540, 533, 540, 540, 540, 533, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 540, 540, 540, 540, 540, 540, 540, 546, 546, 546, 546, 546, 546, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 546, 546, 546, 546, 546, 546, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 543, 540, 533, 540, 540, 540, 533, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 540, 540, 540, 540, 540, 540, 540, 547, 547, 547, 547, 547, 547, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 547, 547, 547, 547, 547, 547, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 543, 540, 533, 540, 540, 540, 533, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 540, 540, 540, 540, 540, 540, 540, 548, 548, 548, 548, 548, 548, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 548, 548, 548, 548, 548, 548, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 543, 540, 533, 540, 540, 540, 533, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 541, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 540, 540, 540, 540, 540, 540, 540, 549, 549, 549, 549, 549, 549, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 549, 549, 549, 549, 549, 549, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 543, 540, 533, 540, 540, 540, 533, 540, 540, 540, 540, 531, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 533, 540, 540, 540, 540, 540, 531, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 540, 540, 540, 540, 540, 540, 540, 549, 549, 549, 549, 549, 549, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 549, 549, 549, 549, 549, 549, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 531, 540, 550, 551, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 552, 552, 552, 552, 552, 552, 552, 553, 553, 553, 553, 553, 553, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 553, 553, 553, 553, 553, 553, 552, 552, 555, 554, 554, 554, 555, 554, 554, 554, 554, 556, 557, 556, 556, 556, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 555, 554, 554, 554, 554, 554, 556, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 558, 554, 556, 559, 556, 556, 556, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 556, 559, 560, 561, 561, 561, 560, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 560, 561, 563, 562, 562, 562, 563, 562, 562, 562, 562, 562, 564, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 563, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 565, 562, 566, 567, 567, 567, 566, 567, 567, 567, 567, 567, 568, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 566, 567, 570, 569, 569, 569, 570, 569, 569, 569, 569, 569, 571, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 570, 569, 569, 569, 569, 569, 569, 569, 569, 572, 569, 574, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 575, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 576, 573, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 577, 577, 577, 577, 577, 577, 577, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 577, 577, 577, 577, 83, 577, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 577, 577, 577, 577, 577, 83, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 577, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 578, 578, 578, 578, 578, 578, 578, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 578, 578, 578, 578, 87, 578, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 578, 578, 578, 578, 578, 87, 580, 579, 579, 579, 580, 579, 579, 579, 579, 579, 581, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 580, 579, 583, 582, 582, 582, 583, 582, 582, 582, 582, 584, 585, 584, 584, 584, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 583, 582, 582, 582, 582, 582, 584, 582, 582, 586, 582, 584, 587, 584, 584, 584, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 584, 587, 589, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 590, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 591, 588, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 592, 592, 592, 592, 592, 592, 592, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 592, 592, 592, 592, 90, 592, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 592, 592, 592, 592, 592, 90, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 592, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 593, 593, 593, 593, 593, 593, 593, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 593, 593, 593, 593, 94, 593, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 593, 593, 593, 593, 593, 94, 595, 594, 594, 594, 595, 594, 594, 594, 594, 596, 597, 596, 596, 596, 594, 594, 594, 594, 594, 594, 594, 594, 594, 594, 594, 594, 595, 594, 594, 594, 594, 594, 596, 594, 596, 598, 596, 596, 596, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 596, 598, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 599, 599, 599, 599, 599, 599, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 599, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 601, 601, 601, 601, 601, 601, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 601, 602, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 603, 98, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 604, 604, 604, 604, 604, 604, 604, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 604, 604, 604, 604, 96, 604, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 604, 604, 604, 604, 604, 96, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 604, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 605, 605, 605, 605, 605, 605, 605, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 605, 605, 605, 605, 101, 605, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 605, 605, 605, 605, 605, 101, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 606, 606, 606, 606, 606, 606, 606, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 606, 606, 606, 606, 103, 606, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 606, 606, 606, 606, 606, 103, 608, 609, 609, 609, 608, 609, 609, 609, 609, 610, 611, 610, 610, 610, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 608, 609, 609, 609, 609, 609, 610, 612, 609, 613, 614, 615, 616, 609, 609, 609, 617, 618, 609, 618, 609, 619, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 620, 609, 621, 622, 623, 609, 609, 624, 625, 624, 624, 626, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 627, 628, 609, 619, 629, 619, 630, 631, 632, 633, 634, 635, 607, 607, 636, 607, 607, 607, 637, 638, 639, 607, 607, 640, 641, 642, 643, 607, 644, 607, 645, 607, 609, 646, 609, 618, 609, 607, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 648, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 647, 647, 647, 648, 647, 648, 647, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 647, 647, 647, 647, 607, 647, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 647, 647, 647, 647, 647, 607, 610, 649, 610, 610, 610, 649, 649, 649, 649, 649, 649, 649, 649, 649, 649, 649, 649, 649, 649, 649, 649, 649, 649, 610, 649, 650, 619, 651, 651, 619, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 651, 619, 651, 652, 653, 654, 655, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 105, 105, 656, 105, 656, 105, 105, 656, 656, 105, 105, 105, 658, 105, 105, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 105, 105, 105, 105, 105, 105, 105, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 656, 105, 656, 656, 657, 105, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 656, 656, 656, 105, 656, 657, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 660, 660, 660, 660, 660, 660, 660, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 660, 660, 660, 660, 657, 660, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 660, 660, 660, 660, 660, 657, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 660, 661, 651, 619, 651, 619, 651, 619, 651, 663, 662, 619, 664, 651, 619, 651, 665, 619, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 619, 656, 619, 651, 619, 619, 651, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 648, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 647, 647, 647, 648, 647, 648, 647, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 647, 647, 647, 647, 624, 647, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 647, 647, 647, 647, 647, 624, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 648, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 648, 666, 648, 666, 624, 624, 624, 624, 667, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 624, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 666, 624, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 648, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 648, 666, 648, 666, 624, 624, 624, 624, 624, 624, 668, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 624, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 666, 624, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 648, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 648, 666, 648, 666, 624, 624, 624, 624, 624, 624, 624, 624, 669, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 624, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 666, 624, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 648, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 648, 666, 648, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 670, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 624, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 666, 624, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 648, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 648, 666, 648, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 671, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 624, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 666, 624, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 648, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 648, 666, 648, 666, 624, 624, 624, 670, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 624, 666, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 666, 666, 666, 666, 666, 624, 665, 656, 611, 656, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 673, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 674, 675, 607, 607, 607, 607, 607, 676, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 677, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 678, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 679, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 680, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 681, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 682, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 683, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 684, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 685, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 686, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 687, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 683, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 688, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 687, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 689, 607, 690, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 691, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 692, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 693, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 694, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 695, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 696, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 697, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 698, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 699, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 700, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 701, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 702, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 692, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 703, 607, 607, 607, 607, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 704, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 648, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 705, 705, 705, 648, 705, 648, 705, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 705, 705, 705, 705, 607, 705, 607, 607, 607, 607, 607, 607, 607, 607, 706, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 705, 705, 705, 705, 705, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 707, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 708, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 709, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 710, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 711, 607, 712, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 713, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 685, 607, 607, 607, 714, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 715, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 716, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 701, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 717, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 639, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 699, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 718, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 719, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 720, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 701, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 721, 607, 607, 607, 722, 607, 607, 607, 607, 607, 723, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 723, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 724, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 725, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 726, 727, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 685, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 728, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 701, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 729, 607, 607, 730, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 685, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 696, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 731, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 732, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 714, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 733, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 639, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 734, 607, 607, 607, 607, 607, 607, 607, 607, 607, 728, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 696, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 735, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 736, 607, 607, 607, 607, 607, 607, 607, 737, 607, 607, 607, 607, 607, 607, 607, 738, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 714, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 702, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 722, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 739, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 696, 607, 607, 607, 720, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 740, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 741, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 648, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 648, 672, 648, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 607, 672, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 690, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 672, 672, 672, 672, 672, 607, 619, 651, 743, 744, 744, 744, 743, 744, 744, 744, 744, 745, 744, 745, 745, 745, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 743, 744, 744, 744, 744, 744, 745, 744, 744, 746, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 747, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 744, 748, 744, 744, 742, 744, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 744, 744, 744, 744, 744, 742, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 110, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 111, 749, 749, 749, 749, 110, 749, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 749, 749, 749, 749, 109, 749, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 749, 749, 749, 749, 749, 109, 745, 750, 745, 745, 745, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 745, 750, 751, 752, 753, 754, 755, 749, 756, 749, 757, 759, 760, 760, 760, 759, 760, 760, 760, 760, 761, 762, 761, 761, 761, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 759, 760, 760, 760, 760, 760, 761, 763, 760, 764, 760, 765, 766, 760, 760, 760, 767, 768, 760, 768, 760, 765, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 769, 770, 771, 760, 760, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 773, 774, 760, 765, 758, 765, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 760, 775, 760, 768, 760, 758, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 777, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 776, 776, 776, 776, 776, 777, 776, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 776, 776, 776, 776, 758, 776, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 776, 776, 776, 776, 776, 758, 779, 778, 780, 761, 781, 761, 761, 761, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 761, 781, 782, 765, 783, 783, 765, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 765, 783, 784, 785, 786, 787, 765, 783, 765, 783, 765, 783, 765, 788, 783, 765, 783, 790, 765, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 765, 789, 765, 783, 765, 765, 783, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 777, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 791, 791, 791, 791, 791, 777, 791, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 791, 791, 791, 791, 772, 791, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 772, 791, 791, 791, 791, 791, 772, 790, 789, 762, 789, 765, 783, 793, 792, 792, 792, 793, 792, 792, 792, 792, 794, 795, 794, 794, 794, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 793, 792, 792, 792, 792, 792, 794, 792, 792, 796, 792, 121, 797, 792, 798, 792, 799, 121, 152, 800, 154, 121, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 801, 792, 802, 152, 803, 804, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 152, 805, 152, 121, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 806, 792, 792, 792, 792, 792, 792, 792, 792, 807, 792, 792, 808, 792, 809, 792, 792, 792, 165, 166, 792, 121, 792, 810, 810, 810, 810, 810, 810, 810, 810, 810, 794, 810, 794, 794, 794, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 794, 810, 810, 810, 810, 147, 148, 810, 149, 810, 150, 151, 152, 153, 154, 147, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 155, 810, 156, 152, 157, 158, 810, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 159, 160, 152, 121, 116, 810, 116, 116, 116, 116, 116, 116, 116, 116, 161, 116, 116, 116, 116, 116, 116, 116, 116, 162, 116, 116, 163, 116, 164, 116, 116, 116, 165, 166, 810, 121, 810, 116, 811, 812, 812, 812, 811, 812, 812, 812, 812, 152, 813, 152, 152, 152, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 811, 812, 812, 812, 812, 812, 152, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 812, 152, 812, 152, 813, 152, 152, 152, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 152, 115, 115, 115, 115, 115, 121, 115, 115, 115, 115, 115, 115, 115, 152, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 152, 115, 152, 813, 152, 152, 152, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 152, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 152, 115, 814, 152, 813, 152, 152, 152, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 152, 815, 815, 815, 815, 815, 815, 815, 815, 815, 816, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 152, 815, 152, 813, 152, 152, 152, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 152, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 152, 152, 115, 817, 811, 152, 811, 819, 818, 821, 822, 821, 821, 821, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 821, 820, 823, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 117, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 811, 811, 811, 811, 117, 811, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 811, 811, 811, 811, 116, 811, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 811, 811, 811, 811, 811, 116, 824, 152, 813, 152, 152, 152, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 152, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 152, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 121, 811, 825, 826, 827, 828, 829, 830, 152, 813, 152, 152, 152, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 152, 811, 811, 811, 811, 811, 811, 811, 811, 811, 121, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 152, 811, 152, 818, 121, 831, 121, 831, 832, 833, 832, 832, 832, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 832, 820, 834, 831, 835, 835, 835, 835, 835, 835, 835, 835, 835, 124, 835, 124, 124, 124, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 124, 835, 835, 835, 835, 125, 126, 835, 127, 835, 128, 129, 130, 131, 132, 125, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 133, 835, 134, 130, 135, 136, 835, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 137, 138, 130, 139, 123, 835, 123, 123, 123, 123, 123, 123, 123, 123, 140, 123, 123, 123, 123, 123, 123, 123, 123, 141, 123, 123, 142, 123, 143, 123, 123, 123, 144, 145, 835, 139, 835, 123, 152, 831, 836, 831, 837, 831, 838, 831, 839, 191, 191, 191, 839, 191, 191, 191, 191, 840, 191, 840, 840, 840, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 839, 191, 191, 191, 191, 191, 840, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 191, 841, 191, 191, 193, 191, 193, 193, 193, 197, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 191, 191, 191, 191, 191, 193, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 842, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 191, 190, 190, 190, 190, 842, 190, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 190, 190, 190, 190, 193, 190, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 190, 190, 190, 190, 190, 193, 843, 843, 843, 843, 843, 843, 843, 843, 843, 194, 843, 194, 194, 194, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 194, 843, 843, 843, 843, 843, 843, 843, 195, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 843, 196, 843, 843, 193, 843, 193, 193, 193, 197, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 843, 843, 843, 843, 843, 193, 844, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 842, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 843, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 191, 843, 843, 843, 843, 842, 843, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 843, 843, 843, 843, 193, 843, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 845, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 843, 843, 843, 843, 843, 193, 198, 843, 847, 846, 846, 846, 847, 846, 846, 846, 846, 848, 846, 848, 848, 848, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 847, 846, 846, 846, 846, 846, 848, 846, 846, 849, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 850, 846, 846, 846, 846, 846, 846, 846, 851, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 852, 846, 848, 853, 848, 848, 848, 853, 853, 853, 853, 853, 853, 853, 853, 853, 853, 853, 853, 853, 853, 853, 853, 853, 853, 848, 853, 854, 855, 856, 857, 859, 858, 860, 861, 858, 862, 864, 865, 865, 865, 864, 865, 865, 865, 865, 866, 867, 866, 866, 866, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 864, 865, 865, 865, 865, 865, 866, 865, 865, 868, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 865, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 865, 869, 865, 865, 863, 865, 863, 863, 863, 863, 863, 863, 863, 863, 870, 863, 863, 863, 863, 863, 863, 863, 863, 871, 863, 863, 872, 863, 873, 863, 863, 863, 865, 865, 865, 865, 865, 863, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 874, 874, 874, 874, 874, 874, 874, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 874, 874, 874, 874, 863, 874, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 874, 874, 874, 874, 874, 863, 866, 875, 866, 866, 866, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 866, 875, 876, 877, 878, 879, 880, 882, 881, 883, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 885, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 886, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 887, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 888, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 889, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 885, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 890, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 891, 863, 863, 863, 863, 863, 863, 863, 892, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 893, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 894, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 885, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 895, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 885, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 896, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 897, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 884, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 863, 884, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 889, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 884, 884, 884, 884, 884, 863, 899, 222, 222, 222, 899, 222, 222, 222, 222, 900, 901, 900, 900, 900, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 899, 222, 222, 222, 222, 222, 900, 902, 222, 903, 222, 904, 905, 222, 906, 222, 907, 908, 222, 909, 910, 911, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 912, 222, 913, 914, 915, 916, 222, 917, 918, 917, 917, 919, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 920, 921, 222, 922, 923, 222, 924, 925, 926, 927, 928, 929, 898, 898, 930, 898, 898, 898, 931, 932, 933, 898, 898, 934, 935, 936, 937, 898, 938, 898, 939, 898, 940, 941, 222, 922, 222, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 946, 945, 945, 947, 945, 948, 950, 951, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 952, 949, 954, 953, 955, 956, 957, 900, 958, 900, 900, 900, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 900, 958, 960, 959, 962, 963, 962, 962, 962, 961, 961, 961, 961, 961, 961, 961, 961, 961, 961, 961, 961, 961, 961, 961, 961, 961, 961, 962, 961, 222, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 222, 964, 965, 966, 967, 968, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 970, 970, 970, 970, 970, 970, 970, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 970, 970, 970, 970, 970, 970, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 970, 970, 970, 970, 970, 969, 973, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 222, 972, 974, 976, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 222, 975, 222, 212, 223, 224, 223, 223, 223, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 223, 972, 972, 225, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 972, 972, 972, 222, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 227, 972, 240, 241, 240, 240, 240, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 240, 239, 239, 242, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 244, 239, 223, 224, 223, 223, 223, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 223, 972, 972, 225, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 972, 972, 972, 222, 222, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 227, 972, 978, 964, 980, 979, 982, 981, 964, 983, 983, 983, 964, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 964, 983, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 985, 986, 964, 987, 248, 988, 986, 964, 964, 989, 990, 964, 990, 964, 248, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 991, 964, 992, 993, 994, 964, 995, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 996, 964, 964, 248, 984, 248, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 964, 997, 964, 998, 964, 984, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 1000, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 999, 999, 999, 1001, 999, 1000, 999, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 999, 999, 999, 999, 984, 999, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984, 999, 999, 999, 999, 999, 984, 1003, 1002, 1004, 1006, 1007, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1008, 1005, 1010, 1011, 1009, 1012, 1013, 1014, 1015, 248, 999, 999, 1016, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 248, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 999, 999, 999, 999, 999, 999, 999, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 999, 999, 999, 999, 247, 999, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 999, 999, 999, 999, 999, 247, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 999, 1017, 999, 248, 999, 248, 999, 248, 1018, 999, 248, 999, 248, 999, 248, 248, 999, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1019, 1019, 1019, 1019, 1019, 1019, 1022, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1019, 1019, 1019, 1019, 1020, 1019, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1019, 1019, 1019, 1019, 1019, 1020, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1023, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1025, 1025, 1025, 1025, 1026, 1025, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1025, 1025, 1025, 1025, 1025, 1026, 1017, 999, 1016, 999, 1028, 1029, 964, 1030, 263, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 264, 253, 265, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 264, 254, 264, 267, 222, 964, 922, 222, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 222, 964, 222, 973, 964, 1034, 1033, 1033, 1033, 1034, 1033, 1033, 1033, 1033, 1035, 1036, 1035, 1035, 1035, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1034, 1033, 1033, 1033, 1033, 1033, 1035, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1033, 1038, 1033, 1033, 1037, 1033, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1033, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1039, 1039, 1039, 1039, 1040, 1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1039, 1039, 1039, 1039, 1039, 1040, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1041, 1041, 1041, 1041, 1042, 1041, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1041, 1041, 1041, 1041, 1041, 1042, 1045, 1044, 1044, 1044, 1045, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1045, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1047, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1048, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1049, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1050, 1044, 1044, 1051, 1044, 1052, 1053, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1054, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1054, 1054, 1057, 1057, 291, 291, 291, 1057, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 1057, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 292, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 1058, 291, 1059, 1060, 1061, 1061, 291, 291, 291, 1061, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 1061, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 292, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 1062, 291, 290, 1061, 1063, 1064, 1065, 1065, 276, 276, 276, 1065, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 1065, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 277, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 1066, 276, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1067, 1067, 1067, 1067, 1067, 1067, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1067, 1067, 1067, 1067, 1067, 1067, 1065, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1069, 1069, 1069, 1069, 1069, 1069, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1069, 1069, 1069, 1069, 1069, 1069, 1068, 1068, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1070, 1070, 1070, 1070, 1070, 1070, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1070, 1070, 1070, 1070, 1070, 1070, 1061, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072, 1071, 1071, 1061, 269, 269, 269, 1061, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 1061, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 1073, 269, 1057, 276, 276, 276, 1057, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 1057, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 277, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 278, 276, 1057, 1074, 1074, 1074, 1057, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1057, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1075, 1074, 1076, 1077, 1077, 1074, 1074, 1074, 1077, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1077, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1078, 1074, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1079, 1079, 1079, 1079, 1079, 1079, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1079, 1079, 1079, 1079, 1079, 1079, 1077, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1081, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1081, 1080, 1080, 1077, 269, 269, 269, 1077, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 1077, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 1073, 269, 1082, 1077, 1077, 276, 276, 276, 1077, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 1077, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 277, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 278, 276, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084, 1084, 1084, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084, 1084, 1084, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1085, 1083, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1086, 1086, 1086, 1086, 1086, 1086, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1086, 1086, 1086, 1086, 1086, 1086, 1083, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1087, 1087, 1087, 1087, 1087, 1087, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1087, 1087, 1087, 1087, 1087, 1087, 1083, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1088, 1088, 1088, 1088, 1088, 1088, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1088, 1088, 1088, 1088, 1088, 1088, 1083, 1089, 1092, 1091, 1091, 1091, 1092, 1091, 1091, 1091, 1091, 1093, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1092, 1091, 1091, 1091, 1091, 1091, 1093, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1094, 1094, 1094, 1094, 1094, 1094, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1094, 1094, 1094, 1094, 1094, 1094, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1095, 1091, 1092, 1091, 1091, 1091, 1092, 1091, 1091, 1091, 1091, 1090, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1092, 1091, 1091, 1091, 1091, 1091, 1090, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1096, 1096, 1096, 1096, 1096, 1096, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1096, 1096, 1096, 1096, 1096, 1096, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1097, 1091, 1090, 1092, 1096, 1096, 1096, 1092, 1096, 1096, 1096, 1096, 1090, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1092, 1096, 1096, 1096, 1096, 1096, 1090, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1090, 1096, 1098, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1093, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1093, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1090, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1096, 1096, 1096, 1096, 1096, 1096, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1096, 1096, 1096, 1096, 1096, 1096, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1102, 1102, 1102, 1102, 1102, 1102, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1102, 1102, 1102, 1102, 1102, 1102, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1104, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1105, 1105, 1105, 1105, 1105, 1105, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1105, 1105, 1105, 1105, 1105, 1105, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1106, 1106, 1106, 1106, 1106, 1106, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1106, 1106, 1106, 1106, 1106, 1106, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1107, 1107, 1107, 1107, 1107, 1107, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1107, 1107, 1107, 1107, 1107, 1107, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1108, 1108, 1108, 1108, 1108, 1108, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1108, 1108, 1108, 1108, 1108, 1108, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1101, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1090, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1111, 1111, 1111, 1111, 1111, 1111, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1111, 1111, 1111, 1111, 1111, 1111, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1112, 1112, 1112, 1112, 1112, 1112, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1112, 1112, 1112, 1112, 1112, 1112, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1113, 1113, 1113, 1113, 1113, 1113, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1113, 1113, 1113, 1113, 1113, 1113, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1114, 1114, 1114, 1114, 1114, 1114, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1114, 1114, 1114, 1114, 1114, 1114, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1115, 1115, 1115, 1115, 1115, 1115, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1115, 1115, 1115, 1115, 1115, 1115, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1116, 1116, 1116, 1116, 1116, 1116, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1116, 1116, 1116, 1116, 1116, 1116, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1117, 1117, 1117, 1117, 1117, 1117, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1117, 1117, 1117, 1117, 1117, 1117, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1090, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1118, 1118, 1118, 1118, 1118, 1118, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1118, 1118, 1118, 1118, 1118, 1118, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1119, 1119, 1119, 1119, 1119, 1119, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1119, 1119, 1119, 1119, 1119, 1119, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1120, 1120, 1120, 1120, 1120, 1120, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1120, 1120, 1120, 1120, 1120, 1120, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1121, 1121, 1121, 1121, 1121, 1121, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1121, 1121, 1121, 1121, 1121, 1121, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1092, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1092, 1099, 1099, 1099, 1099, 1099, 1110, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1109, 1109, 1109, 1109, 1109, 1109, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103, 1099, 1122, 1123, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1125, 1125, 1125, 1125, 1125, 1125, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1125, 1125, 1125, 1125, 1125, 1125, 1124, 1124, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 297, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 298, 212, 212, 299, 212, 297, 212, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 212, 212, 212, 212, 296, 212, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 212, 212, 212, 212, 212, 296, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 297, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 298, 964, 964, 299, 964, 297, 964, 296, 296, 296, 296, 1126, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 964, 964, 964, 964, 296, 964, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 964, 964, 964, 964, 964, 296, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 297, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 298, 964, 964, 299, 964, 297, 964, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 1127, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 964, 964, 964, 964, 296, 964, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 964, 964, 964, 964, 964, 296, 1128, 1129, 964, 959, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 1130, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 1131, 1132, 898, 898, 898, 898, 898, 1133, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1134, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 1135, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1136, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 1137, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 1138, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1139, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 1140, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 1141, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 1142, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 297, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 212, 212, 299, 212, 297, 212, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 212, 212, 212, 212, 898, 212, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 212, 212, 212, 212, 212, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 1143, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1144, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 1140, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 1145, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1144, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1146, 898, 1147, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 1148, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 1149, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1150, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1151, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 1152, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 1153, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1154, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 1155, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 1156, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1157, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1158, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 1159, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1149, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1160, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1161, 898, 1162, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1163, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1142, 898, 898, 898, 1160, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1164, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1165, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1158, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 1166, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 933, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1156, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 1167, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1168, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 1169, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1170, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1158, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1171, 898, 898, 898, 1172, 898, 898, 898, 898, 898, 1173, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1173, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1174, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 1175, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1176, 1177, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 1178, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1179, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1180, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1183, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1184, 1181, 1181, 1185, 1181, 1183, 1181, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1181, 1181, 1181, 1181, 1182, 1181, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1181, 1181, 1181, 1181, 1181, 1182, 950, 1186, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 952, 949, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1187, 898, 898, 1188, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1142, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1153, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1189, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1190, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1160, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1191, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 933, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 1192, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1193, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1153, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1158, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1194, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 1195, 898, 898, 898, 898, 898, 898, 898, 1196, 898, 898, 898, 898, 898, 898, 898, 1197, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1160, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1198, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1199, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1167, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 1200, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1167, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 1201, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1153, 898, 898, 898, 1202, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1203, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1167, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 1204, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 1205, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 943, 943, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 297, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 298, 942, 942, 299, 942, 297, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 944, 942, 942, 898, 942, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 1147, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 942, 942, 942, 942, 942, 898, 1206, 222, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 1207, 964, 1209, 1208, 1208, 1208, 1209, 1208, 1208, 1208, 1208, 1210, 1211, 1210, 1210, 1210, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209, 1208, 1208, 1208, 1208, 1208, 1210, 1208, 1208, 1212, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1213, 1208, 1210, 1214, 1210, 1210, 1210, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1210, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1220, 1222, 1224, 1225, 1225, 1225, 1224, 1225, 1225, 1225, 1225, 1226, 1227, 1226, 1226, 1226, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1224, 1225, 1225, 1225, 1225, 1225, 1226, 1225, 1228, 1229, 1225, 1225, 1225, 1228, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1225, 1230, 1225, 1225, 1223, 1225, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1225, 1225, 1225, 1225, 1225, 1223, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 305, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 306, 1231, 1231, 1231, 1231, 305, 1231, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1231, 1231, 1231, 1231, 304, 1231, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1231, 1231, 1231, 1231, 1231, 304, 1226, 1232, 1226, 1226, 1226, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1226, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1231, 1239, 1241, 1242, 1242, 1242, 1241, 1242, 1242, 1242, 1242, 1243, 1244, 1243, 1243, 1243, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1241, 1242, 1242, 1242, 1242, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1246, 1251, 1252, 1253, 1249, 1254, 1255, 1256, 1249, 1257, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1266, 1266, 1268, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1269, 1270, 1271, 1249, 1272, 1246, 1273, 1274, 1275, 1276, 1277, 1278, 1240, 1240, 1279, 1240, 1240, 1240, 1280, 1281, 1282, 1240, 1240, 1283, 1284, 1285, 1286, 1240, 1287, 1240, 1288, 1240, 1289, 1290, 1291, 1292, 1242, 1240, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 1293, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 314, 314, 314, 314, 314, 1293, 314, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 314, 314, 314, 314, 1240, 314, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 314, 314, 314, 314, 314, 1240, 1295, 1294, 1296, 1243, 1297, 1243, 1243, 1243, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1243, 1297, 1298, 1300, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1300, 1299, 1301, 1302, 1303, 1304, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 309, 309, 1305, 309, 1305, 309, 309, 1305, 1305, 309, 309, 309, 1306, 309, 309, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 309, 309, 309, 309, 309, 309, 309, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 1305, 309, 1305, 1305, 326, 309, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 1305, 1305, 1305, 309, 1305, 326, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 1308, 1308, 1308, 1308, 326, 1308, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 1308, 1308, 1308, 1308, 1308, 326, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308, 1309, 314, 1249, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1311, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1309, 1310, 1312, 1313, 1249, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1309, 1314, 1309, 1315, 1310, 1317, 1316, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 1316, 1319, 1318, 1320, 1318, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1322, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1323, 1321, 1321, 1321, 1321, 1321, 1322, 1321, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 311, 1321, 1325, 1324, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1327, 1324, 1328, 1329, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1330, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1331, 1324, 1324, 1324, 1324, 1324, 1324, 1332, 1324, 1324, 1327, 1324, 1328, 1329, 1324, 1324, 1324, 1333, 1324, 1324, 1324, 1324, 1324, 1330, 1324, 1324, 1334, 1324, 1324, 1324, 1324, 1324, 1331, 1324, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1336, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1337, 1335, 1335, 1335, 1335, 1335, 1336, 1335, 1335, 1335, 1338, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1339, 1335, 1340, 314, 1340, 314, 314, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 314, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1340, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342, 1341, 1344, 1343, 1345, 1347, 1346, 1346, 1346, 1348, 1346, 1349, 1350, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1332, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1333, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1334, 1324, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1352, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1333, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1334, 1324, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1355, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1358, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1360, 1359, 1361, 1363, 1362, 1362, 1362, 1364, 1362, 1366, 1365, 1367, 1368, 1370, 1370, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1371, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1372, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1373, 1369, 1374, 1374, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1375, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1374, 1374, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1358, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1378, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1379, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1380, 1376, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1383, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1384, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1385, 1381, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387, 1387, 1387, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1388, 1386, 1387, 1387, 1387, 1387, 1387, 1387, 1386, 1386, 1389, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1390, 1386, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1391, 1391, 1391, 1391, 1391, 1391, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1392, 1353, 1391, 1391, 1391, 1391, 1391, 1391, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1391, 1391, 1391, 1391, 1391, 1391, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1358, 1353, 1391, 1391, 1391, 1391, 1391, 1391, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1394, 1393, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1396, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1397, 1393, 1393, 1393, 1393, 1393, 1396, 1393, 1393, 1393, 1398, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1399, 1393, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1401, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1398, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1399, 1393, 1402, 1353, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1404, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1405, 1353, 1353, 1353, 1353, 1353, 1404, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1358, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1311, 1318, 1249, 1406, 1310, 1300, 1310, 1407, 1408, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1300, 1318, 1300, 1310, 1300, 1249, 1310, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 1305, 1305, 1305, 1305, 1305, 1305, 1409, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 1305, 1305, 1305, 1305, 326, 1305, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 1305, 1305, 1305, 1305, 1305, 326, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 1293, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1410, 314, 314, 314, 314, 1293, 314, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 314, 314, 314, 314, 1266, 314, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 314, 314, 314, 314, 314, 1266, 1411, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1293, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1410, 1412, 1412, 1412, 1412, 1293, 1412, 1266, 1266, 1266, 1266, 1413, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1266, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1412, 1266, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1293, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1410, 1412, 1412, 1412, 1412, 1293, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1414, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1266, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1412, 1266, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1293, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1410, 1412, 1412, 1412, 1412, 1293, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1415, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1266, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1412, 1266, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1293, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1410, 1412, 1412, 1412, 1412, 1293, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1416, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1266, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1412, 1266, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1293, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1410, 1412, 1412, 1412, 1412, 1293, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1417, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1266, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1412, 1266, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1293, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1410, 1412, 1412, 1412, 1412, 1293, 1412, 1266, 1266, 1266, 1416, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1266, 1412, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1412, 1412, 1412, 1412, 1412, 1266, 1418, 1420, 1419, 1421, 1422, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1424, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1425, 1426, 1240, 1240, 1240, 1240, 1240, 1427, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1428, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1429, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1430, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1431, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1432, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1433, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1434, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1435, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1436, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1437, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1438, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1439, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1440, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1441, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1442, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1438, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1443, 1240, 1444, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1445, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1446, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1447, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1448, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1449, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1450, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1451, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1452, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1448, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1453, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1454, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1455, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1456, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1457, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1458, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1448, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1459, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1460, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1461, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 328, 329, 328, 328, 328, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 328, 1293, 1462, 330, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1462, 1462, 331, 1462, 1462, 1293, 1462, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1462, 332, 1462, 1462, 1240, 1462, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1462, 1462, 1462, 1462, 1462, 1240, 345, 346, 345, 345, 345, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 345, 344, 344, 347, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 350, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 349, 344, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1464, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1465, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1466, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1293, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1467, 1467, 1467, 1467, 1467, 1293, 1467, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1467, 1467, 1467, 1467, 1240, 1467, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1468, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1467, 1467, 1467, 1467, 1467, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1469, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1470, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1471, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1472, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1473, 1240, 1474, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1475, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1448, 1240, 1240, 1240, 1476, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1448, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1441, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1477, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1478, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1458, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1479, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1282, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1480, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1481, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1441, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1448, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1482, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1448, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1483, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1484, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1485, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1458, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1486, 1240, 1240, 1240, 1487, 1240, 1240, 1240, 1240, 1240, 1488, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1489, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1455, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1441, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1490, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1491, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1492, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1493, 1494, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1441, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1495, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1496, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1482, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1497, 1240, 1240, 1498, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1441, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1499, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1455, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1500, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1501, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1502, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1441, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1503, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1504, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1490, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1505, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1506, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1452, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1481, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1507, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1508, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1509, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1510, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1511, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1447, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1512, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1513, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1482, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1514, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1482, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1515, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1452, 1240, 1240, 1240, 1516, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1517, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1482, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1518, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1519, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1520, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1293, 1423, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1240, 1423, 1240, 1240, 1240, 1490, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1423, 1423, 1423, 1423, 1423, 1240, 1521, 1309, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1249, 1299, 1522, 1524, 1523, 1524, 1524, 1524, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1524, 1523, 1523, 1525, 1523, 1523, 1526, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 358, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1527, 1523, 354, 355, 354, 354, 354, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 354, 1528, 1528, 356, 1528, 1528, 357, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 358, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 359, 1528, 361, 1529, 361, 361, 361, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 361, 1529, 1529, 356, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 359, 1529, 1531, 1530, 1533, 1532, 364, 363, 369, 1528, 367, 1528, 1535, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1536, 1534, 1535, 1534, 1535, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1538, 1534, 1535, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1539, 1534, 1535, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1540, 1534, 1542, 1540, 0]];
    $send(self, '_lex_indicies=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      
      self.$attr_accessor("_lex_trans_targs");
      return self.$private("_lex_trans_targs", "_lex_trans_targs=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[187, 2, 3, 4, 193, 6, 7, 8, 9, 10, 187, 187, 196, 199, 196, 12, 200, 201, 14, 196, 208, 209, 212, 213, 225, 222, 214, 215, 216, 19, 217, 218, 219, 227, 229, 230, 234, 235, 236, 231, 25, 18, 210, 211, 27, 259, 260, 262, 264, 262, 30, 265, 266, 32, 262, 273, 274, 277, 278, 290, 287, 279, 280, 281, 37, 282, 283, 284, 292, 294, 295, 299, 300, 301, 296, 43, 36, 275, 276, 45, 324, 325, 332, 334, 332, 48, 335, 336, 50, 338, 341, 338, 52, 342, 343, 54, 349, 348, 0, 56, 350, 351, 58, 352, 353, 353, 353, 353, 466, 61, 62, 63, 466, 65, 466, 495, 66, 67, 495, 495, 499, 499, 71, 66, 72, 497, 498, 500, 501, 499, 495, 502, 503, 505, 68, 69, 506, 507, 70, 499, 73, 74, 79, 86, 509, 510, 72, 497, 498, 500, 501, 499, 495, 502, 503, 505, 68, 69, 506, 507, 70, 73, 74, 79, 86, 509, 510, 508, 75, 76, 77, 78, 80, 81, 84, 82, 83, 85, 87, 88, 495, 90, 91, 92, 94, 97, 95, 96, 98, 100, 526, 526, 526, 527, 102, 529, 103, 530, 104, 527, 102, 529, 103, 530, 564, 105, 564, 106, 107, 105, 564, 106, 564, 564, 564, 110, 111, 112, 113, 575, 564, 564, 564, 116, 117, 118, 564, 121, 116, 117, 118, 564, 121, 119, 119, 117, 118, 585, 120, 119, 119, 117, 118, 585, 120, 117, 564, 602, 564, 123, 603, 609, 127, 618, 619, 132, 133, 127, 128, 617, 128, 617, 564, 129, 130, 131, 620, 134, 564, 634, 635, 638, 639, 651, 648, 640, 641, 642, 139, 643, 644, 645, 653, 655, 656, 660, 661, 662, 657, 145, 138, 636, 637, 147, 698, 699, 149, 566, 108, 568, 151, 152, 701, 803, 154, 155, 156, 803, 811, 811, 811, 159, 833, 832, 811, 835, 837, 811, 164, 165, 166, 841, 811, 168, 169, 852, 821, 874, 172, 173, 174, 178, 179, 172, 173, 174, 178, 179, 175, 175, 173, 174, 176, 177, 175, 175, 173, 174, 176, 177, 922, 173, 811, 991, 180, 993, 182, 186, 994, 184, 991, 181, 991, 183, 993, 183, 993, 185, 993, 991, 187, 187, 188, 189, 190, 192, 194, 195, 187, 187, 187, 191, 187, 191, 187, 1, 187, 187, 187, 5, 196, 196, 197, 196, 198, 202, 196, 196, 11, 13, 196, 196, 196, 196, 203, 204, 205, 15, 21, 26, 237, 28, 196, 196, 196, 206, 207, 196, 16, 196, 196, 196, 17, 196, 196, 196, 20, 220, 196, 221, 223, 196, 224, 226, 228, 22, 196, 196, 23, 232, 196, 233, 24, 196, 238, 242, 239, 240, 241, 196, 196, 243, 244, 247, 249, 258, 245, 246, 196, 248, 250, 252, 251, 196, 253, 254, 255, 256, 257, 196, 196, 196, 261, 262, 262, 262, 263, 267, 262, 29, 31, 262, 262, 262, 262, 268, 269, 270, 33, 39, 44, 302, 46, 262, 262, 262, 271, 272, 262, 34, 262, 262, 262, 35, 262, 262, 262, 38, 285, 262, 286, 288, 262, 289, 291, 293, 40, 262, 262, 41, 297, 262, 298, 42, 262, 303, 307, 304, 305, 306, 262, 262, 308, 309, 312, 314, 323, 310, 311, 262, 313, 315, 317, 316, 262, 318, 319, 320, 321, 322, 262, 262, 262, 326, 327, 327, 328, 327, 329, 327, 327, 327, 330, 330, 330, 331, 330, 330, 330, 332, 332, 332, 333, 332, 47, 49, 332, 332, 332, 337, 337, 337, 338, 338, 339, 338, 340, 338, 338, 51, 53, 338, 338, 338, 344, 344, 345, 344, 344, 346, 347, 346, 55, 57, 348, 348, 348, 354, 353, 353, 355, 356, 357, 358, 360, 363, 364, 365, 366, 353, 367, 368, 370, 372, 373, 374, 378, 380, 381, 382, 398, 403, 410, 415, 422, 429, 432, 433, 437, 431, 441, 449, 453, 455, 460, 462, 465, 353, 353, 353, 353, 353, 353, 359, 353, 359, 353, 361, 59, 362, 353, 60, 353, 353, 369, 371, 353, 375, 376, 377, 373, 379, 353, 383, 384, 393, 396, 385, 386, 387, 388, 389, 390, 391, 392, 354, 394, 395, 397, 399, 402, 400, 401, 404, 407, 405, 406, 408, 409, 411, 413, 412, 414, 416, 417, 353, 418, 419, 420, 421, 353, 423, 426, 424, 425, 427, 428, 430, 434, 435, 436, 438, 440, 439, 442, 443, 444, 446, 445, 447, 448, 450, 451, 452, 454, 456, 457, 458, 459, 461, 463, 464, 467, 466, 466, 468, 469, 471, 472, 466, 466, 466, 470, 466, 470, 64, 473, 466, 475, 474, 474, 478, 479, 480, 481, 474, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 474, 476, 474, 477, 474, 474, 474, 474, 474, 482, 474, 482, 487, 474, 489, 474, 495, 495, 496, 511, 512, 498, 514, 515, 502, 516, 517, 518, 519, 520, 522, 523, 524, 525, 495, 495, 495, 495, 495, 495, 499, 504, 495, 495, 495, 495, 495, 495, 495, 495, 495, 513, 495, 513, 495, 495, 495, 495, 521, 495, 89, 93, 99, 526, 528, 531, 101, 526, 526, 527, 532, 532, 533, 534, 536, 538, 539, 532, 532, 535, 532, 535, 532, 537, 532, 532, 532, 541, 540, 540, 542, 543, 544, 546, 548, 549, 554, 561, 540, 540, 540, 540, 545, 540, 545, 540, 547, 540, 540, 541, 550, 551, 552, 553, 555, 556, 559, 557, 558, 560, 562, 563, 565, 564, 573, 574, 576, 577, 579, 580, 581, 582, 584, 586, 587, 590, 591, 616, 622, 623, 624, 701, 702, 703, 704, 705, 583, 707, 724, 729, 736, 741, 743, 749, 752, 753, 757, 751, 761, 772, 776, 779, 787, 791, 794, 795, 564, 105, 106, 564, 108, 567, 564, 564, 569, 571, 572, 564, 570, 564, 564, 564, 564, 564, 109, 564, 564, 564, 564, 564, 578, 564, 578, 564, 564, 114, 564, 115, 564, 564, 583, 564, 588, 564, 589, 564, 564, 564, 592, 601, 564, 122, 604, 605, 606, 564, 607, 124, 610, 611, 125, 614, 615, 564, 593, 595, 564, 594, 564, 564, 596, 599, 600, 564, 597, 598, 564, 564, 564, 564, 564, 564, 608, 564, 602, 612, 613, 564, 612, 564, 602, 612, 126, 621, 564, 564, 564, 625, 564, 564, 564, 626, 628, 564, 627, 564, 627, 564, 629, 630, 631, 135, 141, 146, 663, 148, 564, 564, 564, 632, 633, 564, 136, 564, 564, 564, 137, 564, 564, 564, 140, 646, 564, 647, 649, 564, 650, 652, 654, 142, 564, 564, 143, 658, 564, 659, 144, 564, 664, 668, 665, 666, 667, 564, 564, 669, 670, 673, 684, 697, 671, 672, 564, 674, 675, 676, 678, 677, 564, 679, 680, 681, 682, 683, 685, 692, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 564, 564, 564, 700, 150, 153, 564, 706, 708, 709, 719, 722, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 725, 728, 726, 727, 730, 733, 731, 732, 734, 735, 737, 739, 738, 740, 742, 744, 746, 745, 747, 748, 750, 718, 754, 755, 756, 758, 760, 759, 762, 763, 764, 769, 765, 766, 767, 564, 565, 566, 108, 768, 571, 770, 771, 773, 774, 775, 777, 778, 780, 781, 782, 785, 783, 784, 786, 788, 789, 790, 792, 793, 564, 583, 796, 796, 797, 798, 799, 801, 796, 796, 796, 800, 796, 800, 796, 802, 796, 804, 803, 803, 805, 806, 803, 807, 809, 803, 803, 803, 803, 808, 803, 808, 810, 803, 812, 811, 811, 815, 816, 817, 811, 818, 820, 823, 824, 825, 826, 827, 811, 828, 829, 834, 862, 866, 811, 867, 869, 871, 811, 872, 873, 875, 879, 881, 882, 884, 885, 903, 908, 915, 923, 930, 937, 942, 943, 947, 941, 952, 962, 968, 971, 980, 984, 988, 989, 990, 823, 813, 811, 814, 811, 811, 811, 811, 811, 811, 819, 811, 819, 811, 157, 822, 811, 811, 811, 811, 811, 811, 811, 811, 811, 830, 811, 831, 811, 811, 158, 160, 811, 161, 843, 854, 857, 836, 858, 859, 844, 848, 850, 811, 836, 161, 838, 840, 162, 811, 838, 811, 839, 811, 811, 163, 842, 811, 811, 845, 847, 811, 845, 846, 848, 850, 847, 811, 849, 811, 811, 851, 853, 811, 167, 811, 811, 811, 855, 847, 848, 850, 855, 856, 811, 845, 847, 848, 850, 811, 845, 847, 848, 850, 811, 860, 847, 848, 850, 860, 861, 811, 161, 862, 836, 863, 848, 850, 864, 847, 161, 864, 836, 865, 868, 870, 811, 170, 171, 811, 811, 876, 877, 878, 873, 880, 811, 811, 883, 811, 811, 811, 886, 887, 896, 901, 888, 889, 890, 891, 892, 893, 894, 895, 812, 897, 898, 899, 900, 812, 902, 904, 907, 905, 906, 812, 812, 909, 912, 910, 911, 913, 914, 812, 916, 918, 917, 919, 920, 921, 811, 811, 924, 812, 925, 811, 926, 927, 928, 929, 813, 931, 934, 932, 933, 935, 936, 938, 939, 940, 812, 944, 945, 946, 948, 950, 951, 949, 812, 953, 954, 955, 958, 956, 957, 959, 960, 961, 963, 965, 964, 966, 967, 969, 970, 972, 973, 975, 978, 974, 976, 977, 979, 981, 982, 983, 985, 986, 987, 811, 811, 991, 992, 996, 997, 998, 991, 991, 991, 995, 991, 991, 1000, 999, 1001, 999, 1002, 1003, 1004, 999, 999]];
    $send(self, '_lex_trans_targs=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      
      self.$attr_accessor("_lex_trans_actions");
      return self.$private("_lex_trans_actions", "_lex_trans_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 5, 0, 0, 0, 0, 6, 0, 7, 0, 8, 0, 0, 7, 0, 0, 0, 0, 8, 0, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 10, 0, 0, 0, 0, 11, 0, 7, 0, 8, 0, 0, 7, 0, 0, 0, 0, 8, 0, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 13, 0, 0, 0, 0, 14, 0, 15, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 17, 18, 19, 20, 21, 0, 0, 0, 22, 0, 23, 24, 0, 0, 25, 26, 27, 28, 29, 30, 30, 31, 32, 30, 33, 32, 34, 32, 30, 30, 31, 30, 35, 30, 30, 36, 30, 30, 30, 30, 30, 30, 0, 37, 38, 0, 39, 38, 40, 38, 0, 0, 37, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 46, 0, 0, 0, 46, 29, 47, 30, 30, 30, 47, 48, 0, 49, 0, 29, 30, 50, 30, 51, 52, 53, 0, 0, 0, 0, 0, 54, 55, 56, 0, 29, 0, 57, 0, 30, 58, 30, 59, 30, 60, 61, 62, 61, 63, 61, 0, 64, 65, 64, 66, 64, 67, 68, 0, 69, 0, 0, 0, 0, 70, 70, 0, 0, 71, 71, 72, 0, 29, 73, 0, 0, 0, 70, 0, 74, 0, 7, 0, 8, 0, 0, 7, 0, 0, 0, 0, 8, 0, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 75, 76, 0, 0, 0, 77, 78, 79, 80, 0, 7, 7, 81, 82, 82, 83, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 30, 58, 30, 30, 30, 60, 61, 62, 61, 61, 61, 0, 64, 65, 64, 64, 64, 85, 67, 86, 87, 0, 88, 0, 89, 89, 0, 90, 0, 91, 60, 92, 0, 93, 29, 94, 95, 98, 99, 0, 29, 0, 7, 0, 7, 100, 101, 102, 60, 103, 0, 104, 0, 105, 106, 107, 0, 108, 109, 0, 110, 7, 7, 111, 112, 0, 0, 113, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 118, 119, 120, 0, 0, 121, 0, 122, 123, 124, 0, 125, 126, 127, 0, 0, 128, 0, 0, 129, 0, 7, 0, 0, 130, 131, 0, 0, 132, 0, 29, 133, 0, 0, 0, 0, 0, 134, 135, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 138, 139, 140, 0, 141, 142, 143, 7, 7, 144, 0, 0, 145, 146, 147, 148, 117, 117, 117, 117, 117, 117, 117, 117, 149, 150, 151, 0, 0, 152, 0, 153, 154, 155, 0, 156, 157, 158, 0, 0, 159, 0, 0, 160, 0, 7, 0, 0, 161, 162, 0, 0, 163, 0, 29, 164, 0, 0, 0, 0, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 167, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 169, 170, 171, 0, 172, 173, 0, 174, 0, 175, 176, 177, 178, 179, 180, 0, 181, 182, 183, 184, 185, 186, 7, 187, 0, 0, 188, 189, 190, 191, 192, 193, 194, 195, 0, 196, 7, 197, 198, 0, 0, 199, 200, 201, 202, 203, 0, 204, 205, 206, 0, 207, 0, 0, 208, 209, 210, 211, 212, 213, 0, 29, 0, 0, 7, 7, 0, 0, 0, 214, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 217, 218, 219, 220, 221, 60, 222, 0, 223, 0, 0, 0, 224, 0, 225, 226, 0, 0, 227, 0, 0, 0, 228, 0, 229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 232, 233, 0, 0, 7, 0, 234, 235, 236, 60, 237, 0, 0, 29, 238, 0, 239, 240, 0, 29, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 243, 0, 244, 245, 246, 247, 248, 60, 249, 0, 0, 250, 0, 251, 252, 253, 254, 29, 0, 28, 0, 0, 28, 0, 0, 0, 0, 0, 0, 7, 7, 7, 255, 256, 257, 258, 259, 260, 261, 0, 262, 263, 264, 265, 266, 267, 268, 269, 270, 60, 271, 0, 272, 273, 274, 275, 276, 277, 0, 0, 0, 278, 7, 7, 0, 279, 280, 281, 282, 283, 0, 0, 0, 0, 0, 284, 285, 60, 286, 0, 287, 29, 288, 289, 290, 291, 292, 293, 0, 29, 0, 0, 0, 0, 0, 0, 294, 295, 296, 297, 60, 298, 0, 299, 29, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 304, 0, 8, 0, 0, 7, 305, 0, 0, 305, 305, 0, 0, 7, 306, 0, 306, 0, 306, 306, 306, 0, 0, 306, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 0, 0, 307, 308, 308, 309, 310, 0, 311, 312, 0, 75, 0, 313, 0, 314, 315, 316, 317, 318, 30, 319, 320, 321, 322, 323, 60, 324, 0, 325, 326, 0, 327, 0, 328, 329, 305, 330, 0, 331, 0, 332, 333, 334, 0, 0, 335, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 337, 0, 0, 338, 0, 339, 340, 0, 0, 0, 341, 0, 0, 342, 343, 344, 345, 346, 347, 0, 348, 349, 349, 0, 350, 0, 351, 352, 352, 0, 0, 353, 354, 355, 0, 356, 357, 358, 0, 7, 359, 360, 361, 0, 362, 117, 117, 117, 117, 117, 117, 117, 117, 363, 364, 365, 0, 0, 366, 0, 367, 368, 369, 0, 370, 371, 372, 0, 0, 373, 0, 0, 374, 0, 7, 0, 0, 375, 376, 0, 0, 377, 0, 29, 378, 0, 0, 0, 0, 0, 379, 380, 0, 0, 0, 0, 0, 0, 0, 381, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 384, 385, 0, 0, 0, 386, 29, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 75, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 387, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 388, 389, 390, 391, 392, 392, 388, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 393, 394, 395, 396, 0, 29, 0, 0, 397, 398, 399, 60, 400, 0, 401, 29, 402, 7, 403, 404, 0, 29, 405, 0, 0, 406, 407, 408, 409, 60, 410, 0, 29, 411, 412, 413, 414, 0, 29, 0, 415, 0, 7, 416, 0, 0, 0, 0, 417, 0, 0, 418, 418, 0, 419, 0, 0, 0, 420, 7, 421, 421, 421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 422, 423, 424, 0, 425, 426, 427, 428, 429, 430, 60, 431, 0, 432, 0, 0, 433, 434, 435, 436, 437, 438, 439, 440, 441, 0, 442, 0, 443, 444, 0, 0, 445, 446, 447, 0, 0, 448, 0, 0, 447, 449, 449, 450, 451, 0, 452, 453, 0, 454, 455, 456, 0, 457, 458, 0, 0, 459, 460, 447, 447, 461, 0, 0, 462, 462, 0, 463, 0, 464, 465, 7, 0, 466, 0, 467, 468, 469, 470, 470, 471, 471, 0, 0, 472, 473, 473, 474, 474, 475, 476, 476, 477, 477, 478, 479, 479, 480, 480, 0, 0, 481, 482, 483, 484, 485, 486, 486, 483, 485, 487, 418, 488, 0, 0, 0, 489, 0, 0, 490, 491, 421, 421, 421, 492, 421, 493, 494, 29, 495, 496, 497, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 0, 0, 0, 0, 492, 0, 0, 0, 0, 0, 499, 500, 0, 0, 0, 0, 0, 0, 501, 0, 0, 0, 0, 0, 500, 502, 503, 0, 504, 0, 505, 0, 0, 0, 0, 506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507, 0, 0, 0, 0, 0, 0, 0, 506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 508, 509, 510, 511, 511, 89, 511, 512, 513, 514, 0, 515, 516, 0, 517, 0, 518, 0, 0, 0, 519, 520]];
    $send(self, '_lex_trans_actions=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      
      self.$attr_accessor("_lex_to_state_actions");
      return self.$private("_lex_to_state_actions", "_lex_to_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer
    $send(self, '_lex_to_state_actions=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      
      self.$attr_accessor("_lex_from_state_actions");
      return self.$private("_lex_from_state_actions", "_lex_from_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer
    $send(self, '_lex_from_state_actions=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      
      self.$attr_accessor("_lex_eof_trans");
      return self.$private("_lex_eof_trans", "_lex_eof_trans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 13, 13, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 48, 48, 48, 48, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 83, 83, 83, 83, 90, 90, 90, 90, 0, 0, 0, 0, 105, 107, 109, 109, 109, 109, 109, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 191, 193, 193, 193, 205, 205, 205, 213, 215, 215, 215, 215, 215, 221, 213, 213, 213, 213, 213, 213, 213, 247, 247, 247, 247, 247, 247, 213, 263, 213, 263, 247, 247, 213, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 213, 247, 247, 247, 247, 304, 304, 304, 309, 311, 311, 311, 315, 315, 318, 318, 318, 318, 323, 323, 323, 309, 315, 315, 315, 315, 315, 315, 315, 315, 315, 354, 361, 363, 363, 363, 363, 354, 0, 379, 380, 381, 383, 385, 387, 385, 385, 0, 397, 398, 402, 402, 403, 404, 413, 414, 415, 415, 415, 418, 418, 420, 421, 422, 422, 422, 424, 425, 426, 426, 426, 429, 429, 422, 432, 432, 422, 418, 418, 437, 438, 438, 438, 441, 441, 438, 438, 438, 444, 444, 444, 444, 450, 451, 451, 451, 451, 459, 451, 451, 451, 451, 464, 451, 451, 451, 451, 451, 451, 470, 471, 472, 472, 0, 479, 483, 483, 484, 485, 494, 495, 496, 496, 496, 499, 499, 501, 502, 503, 503, 503, 505, 506, 507, 507, 507, 510, 510, 503, 513, 513, 503, 499, 499, 518, 519, 519, 519, 522, 522, 519, 519, 519, 525, 525, 525, 525, 531, 532, 532, 532, 532, 540, 532, 532, 532, 532, 545, 532, 532, 532, 532, 532, 532, 551, 552, 553, 553, 0, 560, 561, 0, 567, 0, 574, 578, 578, 579, 0, 0, 588, 589, 593, 593, 594, 0, 599, 0, 602, 0, 605, 605, 606, 607, 0, 648, 650, 651, 652, 653, 655, 657, 661, 661, 652, 652, 652, 652, 663, 652, 652, 657, 652, 652, 648, 667, 667, 667, 667, 667, 667, 657, 657, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 706, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 652, 0, 750, 751, 752, 754, 750, 750, 758, 0, 777, 779, 781, 782, 783, 784, 785, 787, 784, 784, 784, 784, 784, 790, 784, 784, 792, 790, 790, 784, 0, 811, 812, 116, 116, 815, 816, 116, 812, 812, 819, 821, 824, 812, 825, 812, 826, 827, 829, 831, 812, 819, 832, 832, 821, 832, 836, 832, 832, 832, 832, 0, 191, 844, 845, 844, 844, 0, 854, 855, 857, 859, 861, 859, 863, 0, 875, 876, 877, 878, 880, 882, 884, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 0, 943, 946, 949, 950, 954, 956, 957, 958, 959, 960, 962, 965, 966, 968, 970, 973, 975, 976, 213, 973, 978, 973, 965, 980, 982, 965, 965, 1000, 1003, 1005, 1006, 1010, 1013, 1014, 1015, 1016, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1020, 1024, 1026, 1000, 1000, 965, 1031, 1032, 1032, 1032, 965, 965, 965, 1033, 1040, 1040, 1042, 1044, 1053, 1054, 1055, 1055, 1055, 1058, 1058, 1060, 1061, 1062, 1062, 1062, 1064, 1065, 1066, 1066, 1066, 1069, 1069, 1062, 1072, 1072, 1062, 1058, 1058, 1077, 1078, 1078, 1078, 1081, 1081, 1078, 1078, 1078, 1084, 1084, 1084, 1084, 1090, 1091, 1091, 1091, 1091, 1099, 1091, 1091, 1091, 1091, 1105, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1123, 1124, 1125, 1125, 213, 965, 965, 1129, 965, 960, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 213, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 1182, 950, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 1207, 965, 0, 1215, 1216, 1217, 1219, 1221, 1223, 0, 1232, 1233, 1234, 1235, 1237, 1232, 1240, 0, 315, 1295, 1297, 1298, 1299, 1300, 1302, 1304, 1306, 1309, 1309, 315, 1311, 1313, 1314, 1315, 1311, 1317, 1319, 1319, 1322, 1322, 1325, 1336, 315, 1342, 1344, 1346, 1347, 1350, 1351, 1325, 1325, 1354, 1354, 1354, 1360, 1362, 1363, 1366, 1368, 1369, 1370, 1354, 1354, 1377, 1382, 1387, 1354, 1354, 1394, 1394, 1354, 1354, 1319, 1311, 1311, 1319, 1311, 1311, 1306, 315, 1412, 1413, 1413, 1413, 1413, 1413, 1413, 1419, 1306, 1422, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1463, 1464, 1424, 1424, 1468, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1522, 1300, 1523, 0, 1529, 1530, 1531, 1533, 1529, 1529, 1529, 0, 1538, 1538, 1538, 1538, 1542]];
    $send(self, '_lex_eof_trans=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_start")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [187];
    $send(self, 'lex_start=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_error")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [0];
    $send(self, 'lex_error=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_interp_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [196];
    $send(self, 'lex_en_interp_words=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_interp_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [262];
    $send(self, 'lex_en_interp_string=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_plain_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [327];
    $send(self, 'lex_en_plain_words=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_plain_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [330];
    $send(self, 'lex_en_plain_string=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_interp_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [332];
    $send(self, 'lex_en_interp_backslash_delimited=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_plain_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [337];
    $send(self, 'lex_en_plain_backslash_delimited=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_interp_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [338];
    $send(self, 'lex_en_interp_backslash_delimited_words=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_plain_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [344];
    $send(self, 'lex_en_plain_backslash_delimited_words=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_regexp_modifiers")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [346];
    $send(self, 'lex_en_regexp_modifiers=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_variable")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [348];
    $send(self, 'lex_en_expr_variable=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_fname")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [353];
    $send(self, 'lex_en_expr_fname=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_endfn")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [466];
    $send(self, 'lex_en_expr_endfn=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [474];
    $send(self, 'lex_en_expr_dot=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_arg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [495];
    $send(self, 'lex_en_expr_arg=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_cmdarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [526];
    $send(self, 'lex_en_expr_cmdarg=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_endarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [532];
    $send(self, 'lex_en_expr_endarg=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_mid")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [540];
    $send(self, 'lex_en_expr_mid=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_beg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [564];
    $send(self, 'lex_en_expr_beg=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_labelarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [796];
    $send(self, 'lex_en_expr_labelarg=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_value")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [803];
    $send(self, 'lex_en_expr_value=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_expr_end")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [811];
    $send(self, 'lex_en_expr_end=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_leading_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [991];
    $send(self, 'lex_en_leading_dot=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_line_comment")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [999];
    $send(self, 'lex_en_line_comment=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("lex_en_line_begin")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [187];
    $send(self, 'lex_en_line_begin=', $to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    $const_set($nesting[0], 'ESCAPES', $hash("a".$ord(), "\u0007", "b".$ord(), "\b", "e".$ord(), "\u001b", "f".$ord(), "\f", "n".$ord(), "\n", "r".$ord(), "\r", "s".$ord(), " ", "t".$ord(), "\t", "v".$ord(), "\v", "\\".$ord(), "\\").$freeze());
    $const_set($nesting[0], 'REGEXP_META_CHARACTERS', $send($$('Regexp'), 'union', $to_a("\\$()*+.<>?[]^{|}".$chars())).$freeze());
    self.$attr_reader("source_buffer");
    self.$attr_accessor("diagnostics");
    self.$attr_accessor("static_env");
    self.$attr_accessor("force_utf32");
    self.$attr_accessor("cond", "cmdarg", "in_kwarg", "context", "command_start");
    self.$attr_accessor("tokens", "comments");
    self.$attr_reader("paren_nest", "cmdarg_stack", "cond_stack", "lambda_stack");
    
    $def(self, '$initialize', function $$initialize(version) {
      var self = this;

      
      self.version = version;
      self.static_env = nil;
      self.context = nil;
      self.tokens = nil;
      self.comments = nil;
      return self.$reset();
    }, 1);
    
    $def(self, '$reset', function $$reset(reset_state) {
      var self = this;

      
      
      if (reset_state == null) reset_state = true;;
      if ($truthy(reset_state)) {
        
        self.cs = self.$class().$lex_en_line_begin();
        self.cond = $$('StackState').$new("cond");
        self.cmdarg = $$('StackState').$new("cmdarg");
        self.cond_stack = [];
        self.cmdarg_stack = [];
      };
      self.force_utf32 = false;
      self.source_pts = nil;
      self.p = 0;
      self.ts = nil;
      self.te = nil;
      self.act = 0;
      self.stack = [];
      self.top = 0;
      self.token_queue = [];
      self.literal_stack = [];
      self.eq_begin_s = nil;
      self.sharp_s = nil;
      self.newline_s = nil;
      self.num_base = nil;
      self.num_digits_s = nil;
      self.num_suffix_s = nil;
      self.num_xfrm = nil;
      self.escape_s = nil;
      self.escape = nil;
      self.herebody_s = nil;
      self.paren_nest = 0;
      self.lambda_stack = [];
      self.dedent_level = nil;
      self.command_start = true;
      self.in_kwarg = false;
      return (self.cs_before_block_comment = self.$class().$lex_en_line_begin());
    }, -1);
    
    $def(self, '$source_buffer=', function $Lexer_source_buffer$eq$1(source_buffer) {
      var self = this, source = nil;

      
      self.source_buffer = source_buffer;
      if ($truthy(self.source_buffer)) {
        
        source = self.source_buffer.$source();
        if ($eqeq(source.$encoding(), $$$($$('Encoding'), 'UTF_8'))) {
          self.source_pts = source.$unpack("U*")
        } else {
          self.source_pts = source.$unpack("C*")
        };
        if ($eqeq(self.source_pts['$[]'](0), 65279)) {
          return (self.p = 1)
        } else {
          return nil
        };
      } else {
        return (self.source_pts = nil)
      };
    }, 1);
    
    $def(self, '$encoding', function $$encoding() {
      var self = this;

      return self.source_buffer.$source().$encoding()
    }, 0);
    $const_set($nesting[0], 'LEX_STATES', $hash2(["line_begin", "expr_dot", "expr_fname", "expr_value", "expr_beg", "expr_mid", "expr_arg", "expr_cmdarg", "expr_end", "expr_endarg", "expr_endfn", "expr_labelarg", "interp_string", "interp_words", "plain_string", "plain_words"], {"line_begin": self.$lex_en_line_begin(), "expr_dot": self.$lex_en_expr_dot(), "expr_fname": self.$lex_en_expr_fname(), "expr_value": self.$lex_en_expr_value(), "expr_beg": self.$lex_en_expr_beg(), "expr_mid": self.$lex_en_expr_mid(), "expr_arg": self.$lex_en_expr_arg(), "expr_cmdarg": self.$lex_en_expr_cmdarg(), "expr_end": self.$lex_en_expr_end(), "expr_endarg": self.$lex_en_expr_endarg(), "expr_endfn": self.$lex_en_expr_endfn(), "expr_labelarg": self.$lex_en_expr_labelarg(), "interp_string": self.$lex_en_interp_string(), "interp_words": self.$lex_en_interp_words(), "plain_string": self.$lex_en_plain_string(), "plain_words": self.$lex_en_plain_string()}));
    
    $def(self, '$state', function $$state() {
      var self = this;

      return $$('LEX_STATES').$invert().$fetch(self.cs, self.cs)
    }, 0);
    
    $def(self, '$state=', function $Lexer_state$eq$2(state) {
      var self = this;

      return (self.cs = $$('LEX_STATES').$fetch(state))
    }, 1);
    
    $def(self, '$push_cmdarg', function $$push_cmdarg() {
      var self = this;

      
      self.cmdarg_stack.$push(self.cmdarg);
      return (self.cmdarg = $$('StackState').$new("cmdarg." + (self.cmdarg_stack.$count())));
    }, 0);
    
    $def(self, '$pop_cmdarg', function $$pop_cmdarg() {
      var self = this;

      return (self.cmdarg = self.cmdarg_stack.$pop())
    }, 0);
    
    $def(self, '$push_cond', function $$push_cond() {
      var self = this;

      
      self.cond_stack.$push(self.cond);
      return (self.cond = $$('StackState').$new("cond." + (self.cond_stack.$count())));
    }, 0);
    
    $def(self, '$pop_cond', function $$pop_cond() {
      var self = this;

      return (self.cond = self.cond_stack.$pop())
    }, 0);
    
    $def(self, '$dedent_level', function $$dedent_level() {
      var $a, self = this, dedent_level = nil;

      
      $a = [self.dedent_level, nil], (dedent_level = $a[0]), (self.dedent_level = $a[1]), $a;
      return dedent_level;
    }, 0);
    
    $def(self, '$advance', function $$advance() {
      var $a, $b, self = this, klass = nil, _lex_trans_keys = nil, _lex_key_spans = nil, _lex_index_offsets = nil, _lex_indicies = nil, _lex_trans_targs = nil, _lex_trans_actions = nil, _lex_to_state_actions = nil, _lex_from_state_actions = nil, _lex_eof_trans = nil, pe = nil, p = nil, eof = nil, cmd_state = nil, testEof = nil, _slen = nil, _trans = nil, _keys = nil, _inds = nil, _acts = nil, _nacts = nil, _goto_level = nil, _resume = nil, _eof_trans = nil, _again = nil, _test_eof = nil, _out = nil, $ret_or_1 = nil, _wide = nil, tm = nil, heredoc_e = nil, diag_msg = nil, ident_tok = nil, ident_ts = nil, ident_te = nil, current_literal = nil, $writer = nil, line = nil, string = nil, lookahead = nil, token = nil, message = nil, escaped_char = nil, $ret_or_2 = nil, unknown_options = nil, type = nil, delimiter = nil, escape = nil, ident = nil, followed_by_nl = nil, nl_emitted = nil, dots_te = nil, value = nil, digits = nil, invalid_idx = nil, invalid_s = nil, codepoints = nil, codepoint_s = nil, spaces_p = nil, codepoint = nil, new_herebody_s = nil, indent = nil, dedent_body = nil;

      
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()
      };
      klass = self.$class();
      _lex_trans_keys = klass.$send("_lex_trans_keys");
      _lex_key_spans = klass.$send("_lex_key_spans");
      _lex_index_offsets = klass.$send("_lex_index_offsets");
      _lex_indicies = klass.$send("_lex_indicies");
      _lex_trans_targs = klass.$send("_lex_trans_targs");
      _lex_trans_actions = klass.$send("_lex_trans_actions");
      _lex_to_state_actions = klass.$send("_lex_to_state_actions");
      _lex_from_state_actions = klass.$send("_lex_from_state_actions");
      _lex_eof_trans = klass.$send("_lex_eof_trans");
      pe = $rb_plus(self.source_pts.$size(), 2);
      $a = [self.p, pe], (p = $a[0]), (eof = $a[1]), $a;
      cmd_state = self.command_start;
      self.command_start = false;
      
      testEof = false;
      $b = nil, $a = $to_ary($b), (_slen = ($a[0] == null ? nil : $a[0])), (_trans = ($a[1] == null ? nil : $a[1])), (_keys = ($a[2] == null ? nil : $a[2])), (_inds = ($a[3] == null ? nil : $a[3])), (_acts = ($a[4] == null ? nil : $a[4])), (_nacts = ($a[5] == null ? nil : $a[5])), $b;
      _goto_level = 0;
      _resume = 10;
      _eof_trans = 15;
      _again = 20;
      _test_eof = 30;
      _out = 40;
      while ($truthy(true)) {
        
        if ($truthy($rb_le(_goto_level, 0))) {
          
          if ($eqeq(p, pe)) {
            
            _goto_level = _test_eof;
            continue;;
          };
          if ($eqeq(self.cs, 0)) {
            
            _goto_level = _out;
            continue;;
          };
        };
        if ($truthy($rb_le(_goto_level, _resume))) {
          
          if ($eqeqeq(97, ($ret_or_1 = _lex_from_state_actions['$[]'](self.cs)))) {
            
            self.ts = p;
          } else {
            nil
          };
          _keys = self.cs['$<<'](1);
          _inds = _lex_index_offsets['$[]'](self.cs);
          _slen = _lex_key_spans['$[]'](self.cs);
          _wide = ($truthy(($ret_or_1 = self.source_pts['$[]'](p))) ? ($ret_or_1) : (0));
          _trans = ((($truthy($rb_gt(_slen, 0)) && ($truthy($rb_le(_lex_trans_keys['$[]'](_keys), _wide)))) && ($truthy($rb_le(_wide, _lex_trans_keys['$[]']($rb_plus(_keys, 1)))))) ? (_lex_indicies['$[]']($rb_minus($rb_plus(_inds, _wide), _lex_trans_keys['$[]'](_keys)))) : (_lex_indicies['$[]']($rb_plus(_inds, _slen))));
        };
        if ($truthy($rb_le(_goto_level, _eof_trans))) {
          
          self.cs = _lex_trans_targs['$[]'](_trans);
          if ($neqeq(_lex_trans_actions['$[]'](_trans), 0)) {
            if ($eqeqeq(29, ($ret_or_1 = _lex_trans_actions['$[]'](_trans)))) {
              
              self.newline_s = p;
            } else if ($eqeqeq(117, $ret_or_1)) {
              
              self.escape_s = p;
              self.escape = nil;
            } else if ($eqeqeq(30, $ret_or_1)) {
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };
            } else if ($eqeqeq(60, $ret_or_1)) {
              
              self.sharp_s = $rb_minus(p, 1);
            } else if ($eqeqeq(64, $ret_or_1)) {
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));
            } else if ($eqeqeq(310, $ret_or_1)) {
              
              tm = p;
            } else if ($eqeqeq(37, $ret_or_1)) {
              
              tm = p;
            } else if ($eqeqeq(39, $ret_or_1)) {
              
              tm = p;
            } else if ($eqeqeq(41, $ret_or_1)) {
              
              tm = p;
            } else if ($eqeqeq(71, $ret_or_1)) {
              
              heredoc_e = p;
            } else if ($eqeqeq(349, $ret_or_1)) {
              
              tm = $rb_minus(p, 1);
              diag_msg = "ivar_name";
            } else if ($eqeqeq(352, $ret_or_1)) {
              
              tm = $rb_minus(p, 2);
              diag_msg = "cvar_name";
            } else if ($eqeqeq(360, $ret_or_1)) {
              
              self.escape = nil;
            } else if ($eqeqeq(392, $ret_or_1)) {
              
              tm = p;
            } else if ($eqeqeq(308, $ret_or_1)) {
              
              ident_tok = self.$tok();
              ident_ts = self.ts;
              ident_te = self.te;
            } else if ($eqeqeq(479, $ret_or_1)) {
              
              self.num_base = 16;
              self.num_digits_s = p;
            } else if ($eqeqeq(473, $ret_or_1)) {
              
              self.num_base = 10;
              self.num_digits_s = p;
            } else if ($eqeqeq(476, $ret_or_1)) {
              
              self.num_base = 8;
              self.num_digits_s = p;
            } else if ($eqeqeq(470, $ret_or_1)) {
              
              self.num_base = 2;
              self.num_digits_s = p;
            } else if ($eqeqeq(485, $ret_or_1)) {
              
              self.num_base = 10;
              self.num_digits_s = self.ts;
            } else if ($eqeqeq(447, $ret_or_1)) {
              
              self.num_base = 8;
              self.num_digits_s = self.ts;
            } else if ($eqeqeq(462, $ret_or_1)) {
              
              self.num_suffix_s = p;
            } else if ($eqeqeq(455, $ret_or_1)) {
              
              self.num_suffix_s = p;
            } else if ($eqeqeq(452, $ret_or_1)) {
              
              self.num_suffix_s = p;
            } else if ($eqeqeq(89, $ret_or_1)) {
              
              tm = p;
            } else if ($eqeqeq(7, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
            } else if ($eqeqeq(113, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DBEG", "\#{".$freeze());
              if ($truthy(current_literal['$heredoc?']())) {
                
                
                $writer = [self.herebody_s];
                $send(current_literal, 'saved_herebody_s=', $to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                self.herebody_s = nil;
              };
              current_literal.$start_interp_brace();
              self.command_start = true;
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(5, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(109, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;
            } else if ($eqeqeq(108, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(115, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy($rb_ge(self.version, 27))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
              } else {
                
                message = ($truthy(self.$tok()['$start_with?']("\#@@")) ? ("cvar_name") : ("ivar_name"));
                self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
              };;
            } else if ($eqeqeq(114, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(111, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$literal().$extend_space(self.ts, self.te);;
            } else if ($eqeqeq(112, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(6, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;
            } else if ($eqeqeq(4, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(145, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DBEG", "\#{".$freeze());
              if ($truthy(current_literal['$heredoc?']())) {
                
                
                $writer = [self.herebody_s];
                $send(current_literal, 'saved_herebody_s=', $to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                self.herebody_s = nil;
              };
              current_literal.$start_interp_brace();
              self.command_start = true;
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(10, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(142, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;
            } else if ($eqeqeq(141, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(147, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy($rb_ge(self.version, 27))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
              } else {
                
                message = ($truthy(self.$tok()['$start_with?']("\#@@")) ? ("cvar_name") : ("ivar_name"));
                self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
              };;
            } else if ($eqeqeq(146, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(144, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(11, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;
            } else if ($eqeqeq(9, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(173, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;
            } else if ($eqeqeq(172, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(175, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$literal().$extend_space(self.ts, self.te);;
            } else if ($eqeqeq(176, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(179, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;
            } else if ($eqeqeq(178, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(181, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(188, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DBEG", "\#{".$freeze());
              if ($truthy(current_literal['$heredoc?']())) {
                
                
                $writer = [self.herebody_s];
                $send(current_literal, 'saved_herebody_s=', $to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                self.herebody_s = nil;
              };
              current_literal.$start_interp_brace();
              self.command_start = true;
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(13, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(185, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;
            } else if ($eqeqeq(184, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(190, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy($rb_ge(self.version, 27))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
              } else {
                
                message = ($truthy(self.$tok()['$start_with?']("\#@@")) ? ("cvar_name") : ("ivar_name"));
                self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
              };;
            } else if ($eqeqeq(189, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(187, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(12, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(192, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;
            } else if ($eqeqeq(191, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(199, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DBEG", "\#{".$freeze());
              if ($truthy(current_literal['$heredoc?']())) {
                
                
                $writer = [self.herebody_s];
                $send(current_literal, 'saved_herebody_s=', $to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                self.herebody_s = nil;
              };
              current_literal.$start_interp_brace();
              self.command_start = true;
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(15, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(195, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;
            } else if ($eqeqeq(194, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(201, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy($rb_ge(self.version, 27))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
              } else {
                
                message = ($truthy(self.$tok()['$start_with?']("\#@@")) ? ("cvar_name") : ("ivar_name"));
                self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
              };;
            } else if ($eqeqeq(200, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              current_literal.$flush_string();
              current_literal.$extend_content();
              self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(197, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$literal().$extend_space(self.ts, self.te);;
            } else if ($eqeqeq(198, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(14, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(203, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;
            } else if ($eqeqeq(202, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              string = self.$tok();
              if (($truthy($rb_ge(self.version, 22)) && ($not(self.cond['$active?']())))) {
                lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))
              };
              current_literal = self.$literal();
              if (($not(current_literal['$heredoc?']()) && ($truthy((token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)))))) {
                
                if ($eqeq(token['$[]'](0), "tLABEL_END")) {
                  
                  p = $rb_plus(p, 1);
                  self.$pop_literal();
                  self.cs = 796;
                } else {
                  self.cs = self.$pop_literal()
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                current_literal.$extend_string(string, self.ts, self.te)
              };;
            } else if ($eqeqeq(205, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$literal().$extend_space(self.ts, self.te);;
            } else if ($eqeqeq(206, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tREGEXP_OPT", self.$tok(self.ts, $rb_minus(self.te, 1)), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(207, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              unknown_options = self.$tok().$scan(/[^imxouesn]/);
              if ($truthy(unknown_options['$any?']())) {
                self.$diagnostic("error", "regexp_options", $hash2(["options"], {"options": unknown_options.$join()}))
              };
              self.$emit("tREGEXP_OPT");
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(16, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
                self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
              } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
                self.$emit("tBACK_REF")
              } else {
                self.$emit("tGVAR")
              };
              self.cs = self.$stack_pop();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(208, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
                self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
              } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
                self.$emit("tBACK_REF")
              } else {
                self.$emit("tGVAR")
              };
              self.cs = self.$stack_pop();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(210, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy(self.$tok()['$=~'](/^@@[0-9]/))) {
                self.$diagnostic("error", "cvar_name", $hash2(["name"], {"name": self.$tok()}))
              };
              self.$emit("tCVAR");
              self.cs = self.$stack_pop();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(209, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy(self.$tok()['$=~'](/^@[0-9]/))) {
                self.$diagnostic("error", "ivar_name", $hash2(["name"], {"name": self.$tok()}))
              };
              self.$emit("tIVAR");
              self.cs = self.$stack_pop();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(231, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_table($$('KEYWORDS_BEGIN'));
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(217, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tIDENTIFIER");
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(18, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              self.cs = 811;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(214, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(226, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(20, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              if ($truthy(self['$version?'](23))) {
                
                $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
                
                self.cs = self.$push_literal(type, delimiter, self.ts);
                _goto_level = _again;
                continue;;;
              } else {
                
                p = $rb_minus(self.ts, 1);
                
                self.cs = 811;
                _goto_level = _again;
                continue;;;
              };;
            } else if ($eqeqeq(213, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(212, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(230, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('KEYWORDS_BEGIN'));
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(227, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tCONSTANT");
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(229, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tIDENTIFIER");
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(224, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              self.cs = 811;
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(220, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(225, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(218, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(223, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(19, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(17, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(216, $ret_or_1)) {
              
              if ($eqeqeq(43, ($ret_or_2 = self.act))) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS_BEGIN'));
                self.cs = 466;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(44, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tCONSTANT");
                self.cs = 466;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(45, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tIDENTIFIER");
                self.cs = 466;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                nil
              };
            } else if ($eqeqeq(22, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              self.cs = 796;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(233, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(232, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(235, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(234, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(21, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(241, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 495;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(240, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(239, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(251, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tCONSTANT");
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(242, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tIDENTIFIER");
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(247, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 495;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(245, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(250, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(274, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(257, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              if ($eqeq(self.$tok(tm, $rb_plus(tm, 1)), "/".$freeze())) {
                if ($truthy($rb_lt(self.version, 30))) {
                  self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))
                } else {
                  self.$diagnostic("warning", "ambiguous_regexp", nil, self.$range(tm, $rb_plus(tm, 1)))
                }
              };
              p = $rb_minus(tm, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(263, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(25, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(265, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(tm, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(40, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(252, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(253, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(264, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(260, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
              p = $rb_minus(tm, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(262, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(256, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(255, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(273, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(26, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
            } else if ($eqeqeq(42, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(24, $ret_or_1)) {
              
              if ($eqeqeq(72, ($ret_or_2 = self.act))) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($eqeq(self.$tok(tm, $rb_plus(tm, 1)), "/".$freeze())) {
                  if ($truthy($rb_lt(self.version, 30))) {
                    self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))
                  } else {
                    self.$diagnostic("warning", "ambiguous_regexp", nil, self.$range(tm, $rb_plus(tm, 1)))
                  }
                };
                p = $rb_minus(tm, 1);
                
                self.cs = 564;
                _goto_level = _again;
                continue;;;
              } else if ($eqeqeq(73, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
                p = $rb_minus(tm, 1);
                
                self.cs = 564;
                _goto_level = _again;
                continue;;;
              } else if ($eqeqeq(78, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                p = $rb_minus(self.ts, 1);
                
                self.cs = 811;
                _goto_level = _again;
                continue;;;
              } else {
                
                
                p = $rb_minus(self.te, 1);;
              };
            } else if ($eqeqeq(44, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 495;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(278, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(279, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 495;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(45, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 495;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(43, $ret_or_1)) {
              
              if ($eqeqeq(85, ($ret_or_2 = self.act))) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy(self.cond['$active?']())) {
                  self.$emit("kDO_COND", "do".$freeze(), $rb_minus(self.te, 2), self.te)
                } else {
                  self.$emit("kDO", "do".$freeze(), $rb_minus(self.te, 2), self.te)
                };
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(86, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                p = $rb_minus(self.ts, 1);
                
                self.cs = 495;
                _goto_level = _again;
                continue;;;
              } else {
                nil
              };
            } else if ($eqeqeq(289, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_do(true);
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(282, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(283, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(284, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(287, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(293, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(292, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(301, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(295, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(299, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(294, $ret_or_1)) {
              
              if ($eqeqeq(93, ($ret_or_2 = self.act))) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(94, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                p = $rb_minus(self.ts, 1);
                
                self.cs = 564;
                _goto_level = _again;
                continue;;;
              } else {
                nil
              };
            } else if ($eqeqeq(57, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = $rb_minus(p, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(334, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              type = (delimiter = self.$tok()['$[]'](0).$chr());
              p = $rb_minus(p, 1);
              
              self.cs = self.$push_literal(type, delimiter, self.ts);
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(326, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              $b = [self.source_buffer.$slice(self.ts).$chr(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
              
              self.cs = self.$push_literal(type, delimiter, self.ts);
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(55, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
              
              self.cs = self.$push_literal(type, delimiter, self.ts);
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(347, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              p = $rb_minus(p, 1);
              self.$emit("tSYMBEG", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              
              self.cs = 353;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(335, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
              
              self.cs = self.$push_literal(type, delimiter, self.ts);
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(346, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), $rb_plus(self.ts, 2)));
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(69, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(357, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
              self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(356, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;
            } else if ($eqeqeq(336, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_table($$('PUNCTUATION_BEGIN'));
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(52, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              if ($truthy(self['$version?'](18))) {
                
                ident = self.$tok(self.ts, $rb_minus(self.te, 2));
                self.$emit(($truthy(self.source_buffer.$slice(self.ts)['$=~'](/[A-Z]/)) ? ("tCONSTANT") : ("tIDENTIFIER")), ident, self.ts, $rb_minus(self.te, 2));
                p = $rb_minus(p, 1);
                if (($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](ident))))) {
                  self.cs = 811
                } else {
                  self.cs = self.$arg_or_cmdarg(cmd_state)
                };
              } else {
                
                self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
                self.cs = 796;
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(49, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
              p = $rb_minus(ident_te, 1);
              if ((($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](ident_tok)))) && ($truthy($rb_lt(self.version, 25))))) {
                self.cs = 466
              } else {
                self.cs = 526
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(320, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              self.cs_before_block_comment = self.cs;
              
              self.cs = 187;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(56, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(304, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(330, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = $rb_minus(p, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(329, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSTAR", "*".$freeze());
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(325, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;
            } else if ($eqeqeq(354, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;
            } else if ($eqeqeq(337, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(350, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy($rb_ge(self.version, 27))) {
                self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
              } else {
                
                self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
                p = self.ts;
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(355, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;
            } else if ($eqeqeq(361, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(327, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION_BEGIN'));
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(331, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy($rb_ge(self.version, 27))) {
                self.$emit("tBDOT2")
              } else {
                self.$emit("tDOT2")
              };
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(332, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              followed_by_nl = $rb_minus(self.te, 1)['$=='](self.newline_s);
              nl_emitted = false;
              dots_te = ($truthy(followed_by_nl) ? ($rb_minus(self.te, 1)) : (self.te));
              if ($truthy($rb_ge(self.version, 30))) {
                if (($truthy(self.lambda_stack['$any?']()) && ($eqeq($rb_plus(self.lambda_stack.$last(), 1), self.paren_nest)))) {
                  self.$emit("tDOT3", "...".$freeze(), self.ts, dots_te)
                } else {
                  
                  self.$emit("tBDOT3", "...".$freeze(), self.ts, dots_te);
                  if ((($truthy($rb_ge(self.version, 31)) && ($truthy(followed_by_nl))) && ($truthy(self.context['$in_def_open_args?']())))) {
                    
                    self.$emit("tNL", $rb_minus(self.te, 1), self.te);
                    nl_emitted = true;
                  };
                }
              } else if ($truthy($rb_ge(self.version, 27))) {
                self.$emit("tBDOT3", "...".$freeze(), self.ts, dots_te)
              } else {
                self.$emit("tDOT3", "...".$freeze(), self.ts, dots_te)
              };
              if (($truthy(followed_by_nl) && ($not(nl_emitted)))) {
                p = $rb_minus(p, 1)
              };
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(307, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tIDENTIFIER");
              if (($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](self.$tok()))))) {
                
                self.cs = 466;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                self.cs = self.$arg_or_cmdarg(cmd_state);
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              };;
            } else if ($eqeqeq(317, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(319, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              self.cs_before_block_comment = self.cs;
              
              self.cs = 187;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(322, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(54, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;
            } else if ($eqeqeq(73, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;
            } else if ($eqeqeq(74, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(48, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              self.$emit("tIDENTIFIER");
              if (($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](self.$tok()))))) {
                
                self.cs = 466;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                self.cs = self.$arg_or_cmdarg(cmd_state);
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              };;
            } else if ($eqeqeq(53, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
            } else if ($eqeqeq(68, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(51, $ret_or_1)) {
              
              if ($eqeqeq(99, ($ret_or_2 = self.act))) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
                p = $rb_minus(p, 1);
                self.cs = 811;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(106, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
              } else if ($eqeqeq(117, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy($rb_ge(self.version, 27))) {
                  
                  self.$emit("tPIPE", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
                  p = $rb_minus(p, 1);
                  self.cs = 564;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  p = $rb_minus(p, 2);
                  
                  self.cs = 811;
                  _goto_level = _again;
                  continue;;;
                };
              } else if ($eqeqeq(121, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('PUNCTUATION_BEGIN'));
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(122, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
                p = $rb_minus(tm, 1);
                self.cs = 540;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(123, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS_BEGIN'));
                self.command_start = true;
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(127, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                p = $rb_minus(self.ts, 1);
                
                self.cs = 811;
                _goto_level = _again;
                continue;;;
              } else if ($eqeqeq(128, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tIDENTIFIER");
                if (($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](self.$tok()))))) {
                  
                  self.cs = 466;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  self.cs = self.$arg_or_cmdarg(cmd_state);
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(132, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                p = $rb_minus(self.ts, 1);
                
                self.cs = 811;
                _goto_level = _again;
                continue;;;
              } else {
                nil
              };
            } else if ($eqeqeq(395, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(396, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(397, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(401, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(77, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(405, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              
              self.cs = self.$push_literal(self.$tok(), self.$tok(), self.ts);
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(404, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(403, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(407, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(406, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(76, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              p = $rb_minus(p, 1);
              
              self.cs = 564;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(440, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tLAMBDA", "->".$freeze(), self.ts, $rb_plus(self.ts, 2));
              self.lambda_stack.$push(self.paren_nest);
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(86, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
              self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(415, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
              
              self.cs = self.$push_literal(type, delimiter, self.ts, nil, false, false, true);
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(79, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(436, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 474;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(489, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(429, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(434, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tOP_ASGN", self.$tok(self.ts, $rb_minus(self.te, 1)));
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(420, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tEH", "?".$freeze());
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(417, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(419, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tSEMI", ";".$freeze());
              self.command_start = true;
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(494, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$diagnostic("error", "bare_backslash", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(414, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;
            } else if ($eqeqeq(413, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(505, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('KEYWORDS'));
              self.cs = 353;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(503, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
              self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(502, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('KEYWORDS'));
              self.command_start = true;
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(444, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$diagnostic("error", "no_dot_digit_literal");;
            } else if ($eqeqeq(491, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tCONSTANT");
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(433, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              
              $writer = [self.top, self.cs];
              $send(self.stack, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.top = $rb_plus(self.top, 1);
              self.cs = 348;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(441, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 474;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(497, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tIDENTIFIER");
              if (($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](self.$tok()))))) {
                
                self.cs = 466;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                self.cs = self.$arg_or_cmdarg(cmd_state);
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              };;
            } else if ($eqeqeq(439, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(435, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(428, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(442, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(426, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(432, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;
            } else if ($eqeqeq(84, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(80, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              self.$diagnostic("error", "no_dot_digit_literal");;
            } else if ($eqeqeq(83, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              digits = self.$tok(self.ts, self.num_suffix_s);
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits)
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(78, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;
            } else if ($eqeqeq(81, $ret_or_1)) {
              
              if ($eqeqeq(145, ($ret_or_2 = self.act))) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($eqeq(self.lambda_stack.$last(), self.paren_nest)) {
                  
                  self.lambda_stack.$pop();
                  if ($eqeq(self.$tok(), "{".$freeze())) {
                    self.$emit("tLAMBEG", "{".$freeze())
                  } else {
                    self.$emit("kDO_LAMBDA", "do".$freeze())
                  };
                } else if ($eqeq(self.$tok(), "{".$freeze())) {
                  self.$emit("tLCURLY", "{".$freeze())
                } else {
                  self.$emit_do()
                };
                if ($eqeq(self.$tok(), "{".$freeze())) {
                  self.paren_nest = $rb_plus(self.paren_nest, 1)
                };
                self.command_start = true;
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(146, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                self.cs = 353;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(147, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
                self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(148, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(149, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                self.command_start = true;
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(150, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                self.cs = 540;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(151, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                if (($truthy(self['$version?'](18)) && ($eqeq(self.$tok(), "not".$freeze())))) {
                  
                  self.cs = 564;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  self.cs = 495;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(152, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy(self['$version?'](18))) {
                  
                  self.$emit("tIDENTIFIER");
                  if (!($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](self.$tok()))))) {
                    self.cs = self.$arg_or_cmdarg(cmd_state)
                  };
                } else {
                  self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(153, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(154, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                digits = self.$tok(self.num_digits_s, self.num_suffix_s);
                if ($truthy(digits['$end_with?']("_".$freeze()))) {
                  self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
                } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                  digits = "0".$freeze()
                } else if ($truthy(digits['$empty?']())) {
                  self.$diagnostic("error", "empty_numeric")
                } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                  
                  invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                  self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
                };
                if ($truthy(self['$version?'](18, 19, 20))) {
                  
                  self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                  p = $rb_minus(self.num_suffix_s, 1);
                } else {
                  self.num_xfrm.$call(digits.$to_i(self.num_base))
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(156, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy(self['$version?'](18, 19, 20))) {
                  self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
                } else {
                  
                  self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
                  p = $rb_minus(p, 1);
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(157, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy(self['$version?'](18, 19, 20))) {
                  self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
                } else {
                  
                  self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
                  p = $rb_minus(p, 1);
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(158, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                digits = self.$tok(self.ts, self.num_suffix_s);
                if ($truthy(self['$version?'](18, 19, 20))) {
                  
                  self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                  p = $rb_minus(self.num_suffix_s, 1);
                } else {
                  self.num_xfrm.$call(digits)
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(160, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tCONSTANT");
                self.cs = self.$arg_or_cmdarg(cmd_state);
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(164, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tIDENTIFIER");
                if (($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](self.$tok()))))) {
                  
                  self.cs = 466;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  self.cs = self.$arg_or_cmdarg(cmd_state);
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(165, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($eqeq(tm, self.te)) {
                  self.$emit("tFID")
                } else {
                  
                  self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
                  p = $rb_minus(tm, 1);
                };
                self.cs = 495;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(167, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('PUNCTUATION'));
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(168, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('PUNCTUATION'));
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                nil
              };
            } else if ($eqeqeq(516, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              if ($truthy($rb_lt(self.version, 27))) {
                
                p = $rb_minus(p, 1);
                self.cs = 187;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                self.$emit("tBDOT3");
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              };;
            } else if ($eqeqeq(95, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(tm, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(510, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 187;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(513, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy($rb_lt(self.version, 27))) {
                
                self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
                p = $rb_minus(p, 1);
                self.cs = 187;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              };;
            } else if ($eqeqeq(515, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              if ($truthy($rb_lt(self.version, 27))) {
                
                p = $rb_minus(p, 1);
                self.cs = 187;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                self.$emit("tBDOT2");
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              };;
            } else if ($eqeqeq(514, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(tm, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(512, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 187;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(90, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              if ($truthy($rb_lt(self.version, 27))) {
                
                self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
                p = $rb_minus(p, 1);
                self.cs = 187;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              };;
            } else if ($eqeqeq(87, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 187;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(91, $ret_or_1)) {
              
              if ($eqeqeq(181, ($ret_or_2 = self.act))) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy($rb_lt(self.version, 27))) {
                  
                  self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
                  p = $rb_minus(p, 1);
                  self.cs = 187;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(185, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
                p = $rb_minus(p, 1);
                self.cs = 187;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                nil
              };
            } else if ($eqeqeq(519, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_comment(self.eq_begin_s, self.te);
              
              self.cs = self.cs_before_block_comment;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(518, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$diagnostic("fatal", "embedded_document", nil, self.$range(self.eq_begin_s, $rb_plus(self.eq_begin_s, "=begin".$length())));;
            } else if ($eqeqeq(106, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              self.eq_begin_s = self.ts;
              
              self.cs = 999;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(2, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(pe, 3);;
            } else if ($eqeqeq(98, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              cmd_state = true;
              p = $rb_minus(p, 1);
              
              self.cs = 803;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(99, $ret_or_1)) {
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;
            } else if ($eqeqeq(100, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
            } else if ($eqeqeq(105, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.eq_begin_s = self.ts;
              
              self.cs = 999;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(104, $ret_or_1)) {
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              cmd_state = true;
              p = $rb_minus(p, 1);
              
              self.cs = 803;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(1, $ret_or_1)) {
              
              
              p = $rb_minus(self.te, 1);;
              
              cmd_state = true;
              p = $rb_minus(p, 1);
              
              self.cs = 803;
              _goto_level = _again;
              continue;;;;
            } else if ($eqeqeq(67, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
            } else if ($eqeqeq(110, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;;
            } else if ($eqeqeq(143, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;;
            } else if ($eqeqeq(174, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;;
            } else if ($eqeqeq(180, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;;
            } else if ($eqeqeq(186, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;;
            } else if ($eqeqeq(193, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;;
            } else if ($eqeqeq(196, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;;
            } else if ($eqeqeq(204, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;;
            } else if ($eqeqeq(23, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              if ($truthy($rb_ge(self.version, 31))) {
                
                self.$emit("tBDOT3", "...".$freeze(), self.ts, $rb_minus(self.te, 1));
                self.$emit("tNL", "\n".$freeze(), $rb_minus(self.te, 1), self.te);
                self.cs = 811;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                p = $rb_minus(p, 4);
                p = $rb_minus(p, 1);
                
                self.cs = 811;
                _goto_level = _again;
                continue;;;
              };;;
            } else if ($eqeqeq(275, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(266, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(tm, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(258, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(358, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
              self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(333, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              followed_by_nl = $rb_minus(self.te, 1)['$=='](self.newline_s);
              nl_emitted = false;
              dots_te = ($truthy(followed_by_nl) ? ($rb_minus(self.te, 1)) : (self.te));
              if ($truthy($rb_ge(self.version, 30))) {
                if (($truthy(self.lambda_stack['$any?']()) && ($eqeq($rb_plus(self.lambda_stack.$last(), 1), self.paren_nest)))) {
                  self.$emit("tDOT3", "...".$freeze(), self.ts, dots_te)
                } else {
                  
                  self.$emit("tBDOT3", "...".$freeze(), self.ts, dots_te);
                  if ((($truthy($rb_ge(self.version, 31)) && ($truthy(followed_by_nl))) && ($truthy(self.context['$in_def_open_args?']())))) {
                    
                    self.$emit("tNL", $rb_minus(self.te, 1), self.te);
                    nl_emitted = true;
                  };
                }
              } else if ($truthy($rb_ge(self.version, 27))) {
                self.$emit("tBDOT3", "...".$freeze(), self.ts, dots_te)
              } else {
                self.$emit("tDOT3", "...".$freeze(), self.ts, dots_te)
              };
              if (($truthy(followed_by_nl) && ($not(nl_emitted)))) {
                p = $rb_minus(p, 1)
              };
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(321, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              self.cs_before_block_comment = self.cs;
              
              self.cs = 187;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(443, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              if ($eqeq(self.paren_nest, 0)) {
                self.$diagnostic("warning", "triple_dot_at_eol", nil, self.$range(self.ts, $rb_minus(self.te, 1)))
              };
              self.$emit("tDOT3", "...".$freeze(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(520, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              self.$emit_comment(self.eq_begin_s, self.te);
              
              self.cs = self.cs_before_block_comment;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(517, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);;
            } else if ($eqeqeq(107, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              self.eq_begin_s = self.ts;
              
              self.cs = 999;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(3, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(pe, 3);;;
            } else if ($eqeqeq(465, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$3(chars){var self = $$3.$$s == null ? this : $$3.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tRATIONAL", self.$Rational(chars));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(463, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$4(chars){var self = $$4.$$s == null ? this : $$4.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tIMAGINARY", self.$Complex(0, chars));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(468, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$5(chars){var self = $$5.$$s == null ? this : $$5.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(466, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$6(chars){var self = $$6.$$s == null ? this : $$6.$$s;
                if (self.ts == null) self.ts = nil;
                if (self.te == null) self.te = nil;

                
                
                if (chars == null) chars = nil;;
                self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
                return (p = $rb_minus(p, 2));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(464, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$7(chars){var self = $$7.$$s == null ? this : $$7.$$s;
                if (self.ts == null) self.ts = nil;
                if (self.te == null) self.te = nil;

                
                
                if (chars == null) chars = nil;;
                self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
                return (p = $rb_minus(p, 2));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(467, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$8(chars){var self = $$8.$$s == null ? this : $$8.$$s;
                if (self.ts == null) self.ts = nil;
                if (self.te == null) self.te = nil;

                
                
                if (chars == null) chars = nil;;
                self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 6));
                return (p = $rb_minus(p, 6));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(456, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$9(chars){var self = $$9.$$s == null ? this : $$9.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tIMAGINARY", self.$Complex(0, self.$Float(chars)));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.ts, self.num_suffix_s);
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits)
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(457, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$10(chars){var self = $$10.$$s == null ? this : $$10.$$s;
                if (self.ts == null) self.ts = nil;
                if (self.te == null) self.te = nil;

                
                
                if (chars == null) chars = nil;;
                self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 2));
                return (p = $rb_minus(p, 2));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.ts, self.num_suffix_s);
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits)
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(458, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$11(chars){var self = $$11.$$s == null ? this : $$11.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tRATIONAL", self.$Rational(chars));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.ts, self.num_suffix_s);
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits)
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(460, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$12(chars){var self = $$12.$$s == null ? this : $$12.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.ts, self.num_suffix_s);
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits)
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(459, $ret_or_1)) {
              
              
              self.num_xfrm = $send(self, 'lambda', [], function $$13(chars){var self = $$13.$$s == null ? this : $$13.$$s;
                if (self.ts == null) self.ts = nil;
                if (self.te == null) self.te = nil;

                
                
                if (chars == null) chars = nil;;
                self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 6));
                return (p = $rb_minus(p, 6));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.ts, self.num_suffix_s);
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits)
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(137, $ret_or_1)) {
              
              
              self.escape = "";
              codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
              codepoint_s = $rb_plus(self.escape_s, 2);
              if ($truthy($rb_lt(self.version, 24))) {
                
                if (($truthy(codepoints['$start_with?'](" ")) || ($truthy(codepoints['$start_with?']("\t"))))) {
                  self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))
                };
                if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                  self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))
                };
                if (($truthy(codepoints['$end_with?'](" ")) || ($truthy(codepoints['$end_with?']("\t"))))) {
                  self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))
                };
              };
              (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], function $$14($mlhs_tmp1){var $c, $d, self = $$14.$$s == null ? this : $$14.$$s, codepoint_str = nil, spaces = nil, codepoint = nil;
                if (self.escape == null) self.escape = nil;

                
                
                if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;;
                $d = $mlhs_tmp1, $c = $to_ary($d), (codepoint_str = ($c[0] == null ? nil : $c[0])), (spaces = ($c[1] == null ? nil : $c[1])), $d;
                if ($truthy(spaces)) {
                  return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
                } else {
                  
                  codepoint = codepoint_str.$to_i(16);
                  if ($truthy($rb_ge(codepoint, 1114112))) {
                    
                    self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                    
                    Opal.brk(nil, $brk);
                  };
                  self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$('Encoding'), 'UTF_8')));
                  return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
                };}, {$$arity: 1, $$s: self, $$brk: $brk, $$has_top_level_mlhs_arg: true})
              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(168, $ret_or_1)) {
              
              
              self.escape = "";
              codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
              codepoint_s = $rb_plus(self.escape_s, 2);
              if ($truthy($rb_lt(self.version, 24))) {
                
                if (($truthy(codepoints['$start_with?'](" ")) || ($truthy(codepoints['$start_with?']("\t"))))) {
                  self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))
                };
                if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                  self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))
                };
                if (($truthy(codepoints['$end_with?'](" ")) || ($truthy(codepoints['$end_with?']("\t"))))) {
                  self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))
                };
              };
              (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], function $$15($mlhs_tmp1){var $c, $d, self = $$15.$$s == null ? this : $$15.$$s, codepoint_str = nil, spaces = nil, codepoint = nil;
                if (self.escape == null) self.escape = nil;

                
                
                if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;;
                $d = $mlhs_tmp1, $c = $to_ary($d), (codepoint_str = ($c[0] == null ? nil : $c[0])), (spaces = ($c[1] == null ? nil : $c[1])), $d;
                if ($truthy(spaces)) {
                  return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
                } else {
                  
                  codepoint = codepoint_str.$to_i(16);
                  if ($truthy($rb_ge(codepoint, 1114112))) {
                    
                    self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                    
                    Opal.brk(nil, $brk);
                  };
                  self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$('Encoding'), 'UTF_8')));
                  return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
                };}, {$$arity: 1, $$s: self, $$brk: $brk, $$has_top_level_mlhs_arg: true})
              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(382, $ret_or_1)) {
              
              
              self.escape = "";
              codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
              codepoint_s = $rb_plus(self.escape_s, 2);
              if ($truthy($rb_lt(self.version, 24))) {
                
                if (($truthy(codepoints['$start_with?'](" ")) || ($truthy(codepoints['$start_with?']("\t"))))) {
                  self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))
                };
                if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                  self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))
                };
                if (($truthy(codepoints['$end_with?'](" ")) || ($truthy(codepoints['$end_with?']("\t"))))) {
                  self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))
                };
              };
              (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], function $$16($mlhs_tmp1){var $c, $d, self = $$16.$$s == null ? this : $$16.$$s, codepoint_str = nil, spaces = nil, codepoint = nil;
                if (self.escape == null) self.escape = nil;

                
                
                if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;;
                $d = $mlhs_tmp1, $c = $to_ary($d), (codepoint_str = ($c[0] == null ? nil : $c[0])), (spaces = ($c[1] == null ? nil : $c[1])), $d;
                if ($truthy(spaces)) {
                  return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
                } else {
                  
                  codepoint = codepoint_str.$to_i(16);
                  if ($truthy($rb_ge(codepoint, 1114112))) {
                    
                    self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                    
                    Opal.brk(nil, $brk);
                  };
                  self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$('Encoding'), 'UTF_8')));
                  return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
                };}, {$$arity: 1, $$s: self, $$brk: $brk, $$has_top_level_mlhs_arg: true})
              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(118, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(149, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(363, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(121, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_escape");;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(152, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_escape");;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(366, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_escape");;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(123, $ret_or_1)) {
              
              
              self.escape = "\u007F";;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(154, $ret_or_1)) {
              
              
              self.escape = "\u007F";;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(368, $ret_or_1)) {
              
              
              self.escape = "\u007F";;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(120, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(151, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(365, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(140, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(171, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(385, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(139, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(170, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(384, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(134, $ret_or_1)) {
              
              
              self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$('Encoding'), 'UTF_8'));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(165, $ret_or_1)) {
              
              
              self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$('Encoding'), 'UTF_8'));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(379, $ret_or_1)) {
              
              
              self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$('Encoding'), 'UTF_8'));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(133, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(164, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(378, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(138, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(169, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(383, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(135, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(166, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(380, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(119, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(150, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(364, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(177, $ret_or_1)) {
              
              
              self.escape_s = p;
              self.escape = nil;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(182, $ret_or_1)) {
              
              
              self.escape_s = p;
              self.escape = nil;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(58, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.newline_s = p;;
            } else if ($eqeqeq(31, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              tm = p;;
            } else if ($eqeqeq(33, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              tm = p;;
            } else if ($eqeqeq(35, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              tm = p;;
            } else if ($eqeqeq(219, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(238, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(246, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(34, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = $rb_plus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(277, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(269, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(288, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(300, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(296, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(p, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(59, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = $rb_minus(p, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(50, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = $rb_plus(p, 1);
              
              self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
              p = $rb_minus(ident_te, 1);
              if ((($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](ident_tok)))) && ($truthy($rb_lt(self.version, 25))))) {
                self.cs = 466
              } else {
                self.cs = 526
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(318, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(402, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(398, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy(self.in_kwarg)) {
                
                p = $rb_minus(p, 1);
                
                self.cs = 811;
                _goto_level = _again;
                continue;;;
              } else {
                
                self.cs = 187;
                _goto_level = _again;
                continue;;
              };;;
            } else if ($eqeqeq(411, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(408, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              
              self.cs = 187;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(495, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(427, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              
              self.cs = 991;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(101, $ret_or_1)) {
              
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(268, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              current_literal = self.$literal();
              if ($truthy(current_literal)) {
                current_literal.$start_interp_brace()
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($eqeq(self.lambda_stack.$last(), self.paren_nest)) {
                
                self.lambda_stack.$pop();
                self.$emit("tLAMBEG", "{".$freeze(), $rb_minus(self.te, 1), self.te);
              } else {
                self.$emit("tLCURLY", "{".$freeze(), $rb_minus(self.te, 1), self.te)
              };
              self.command_start = true;
              self.paren_nest = $rb_plus(self.paren_nest, 1);
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(290, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              current_literal = self.$literal();
              if ($truthy(current_literal)) {
                current_literal.$start_interp_brace()
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($eqeq(self.lambda_stack.$last(), self.paren_nest)) {
                
                self.lambda_stack.$pop();
                self.$emit("tLAMBEG", "{".$freeze());
              } else {
                self.$emit("tLBRACE_ARG", "{".$freeze())
              };
              self.paren_nest = $rb_plus(self.paren_nest, 1);
              self.command_start = true;
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(393, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              current_literal = self.$literal();
              if ($truthy(current_literal)) {
                current_literal.$start_interp_brace()
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($eqeq(self.lambda_stack.$last(), self.paren_nest)) {
                
                self.lambda_stack.$pop();
                self.command_start = true;
                self.$emit("tLAMBEG", "{".$freeze());
              } else {
                self.$emit("tLBRACE", "{".$freeze())
              };
              self.paren_nest = $rb_plus(self.paren_nest, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(508, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              current_literal = self.$literal();
              if ($truthy(current_literal)) {
                current_literal.$start_interp_brace()
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($eqeq(self.lambda_stack.$last(), self.paren_nest)) {
                
                self.lambda_stack.$pop();
                if ($eqeq(self.$tok(), "{".$freeze())) {
                  self.$emit("tLAMBEG", "{".$freeze())
                } else {
                  self.$emit("kDO_LAMBDA", "do".$freeze())
                };
              } else if ($eqeq(self.$tok(), "{".$freeze())) {
                self.$emit("tLCURLY", "{".$freeze())
              } else {
                self.$emit_do()
              };
              if ($eqeq(self.$tok(), "{".$freeze())) {
                self.paren_nest = $rb_plus(self.paren_nest, 1)
              };
              self.command_start = true;
              self.cs = 803;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(509, $ret_or_1)) {
              
              
              current_literal = self.$literal();
              if ($truthy(current_literal)) {
                if ($truthy(current_literal.$end_interp_brace_and_try_closing())) {
                  
                  if ($truthy(self['$version?'](18, 19))) {
                    
                    self.$emit("tRCURLY", "}".$freeze(), $rb_minus(p, 1), p);
                    self.cond.$lexpop();
                    self.cmdarg.$lexpop();
                  } else {
                    self.$emit("tSTRING_DEND", "}".$freeze(), $rb_minus(p, 1), p)
                  };
                  if ($truthy(current_literal.$saved_herebody_s())) {
                    self.herebody_s = current_literal.$saved_herebody_s()
                  };
                  p = $rb_minus(p, 1);
                  self.cs = self.$next_state_for_literal(current_literal);
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                }
              };
              self.paren_nest = $rb_minus(self.paren_nest, 1);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              if ($truthy($rb_lt(self.version, 24))) {
                
                self.cond.$lexpop();
                self.cmdarg.$lexpop();
              } else {
                
                self.cond.$pop();
                self.cmdarg.$pop();
              };
              if (($eqeq(self.$tok(), "}".$freeze()) || ($eqeq(self.$tok(), "]".$freeze())))) {
                if ($truthy($rb_ge(self.version, 25))) {
                  self.cs = 811
                } else {
                  self.cs = 532
                }
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(61, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
            } else if ($eqeqeq(65, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.newline_s = p;;
            } else if ($eqeqeq(222, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(237, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(249, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(271, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(286, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(298, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(324, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(400, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(410, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(431, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(103, $ret_or_1)) {
              
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(243, $ret_or_1)) {
              
              
              tm = p;;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
              self.cs = self.$arg_or_cmdarg(cmd_state);
              p = $rb_minus(tm, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(338, $ret_or_1)) {
              
              
              tm = p;;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
              p = $rb_minus(tm, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(309, $ret_or_1)) {
              
              
              tm = p;;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(424, $ret_or_1)) {
              
              
              tm = p;;
              
              if ($eqeqeq(145, ($ret_or_2 = self.act))) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($eqeq(self.lambda_stack.$last(), self.paren_nest)) {
                  
                  self.lambda_stack.$pop();
                  if ($eqeq(self.$tok(), "{".$freeze())) {
                    self.$emit("tLAMBEG", "{".$freeze())
                  } else {
                    self.$emit("kDO_LAMBDA", "do".$freeze())
                  };
                } else if ($eqeq(self.$tok(), "{".$freeze())) {
                  self.$emit("tLCURLY", "{".$freeze())
                } else {
                  self.$emit_do()
                };
                if ($eqeq(self.$tok(), "{".$freeze())) {
                  self.paren_nest = $rb_plus(self.paren_nest, 1)
                };
                self.command_start = true;
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(146, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                self.cs = 353;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(147, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
                self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(148, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(149, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                self.command_start = true;
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(150, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                self.cs = 540;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(151, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                if (($truthy(self['$version?'](18)) && ($eqeq(self.$tok(), "not".$freeze())))) {
                  
                  self.cs = 564;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  self.cs = 495;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(152, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy(self['$version?'](18))) {
                  
                  self.$emit("tIDENTIFIER");
                  if (!($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](self.$tok()))))) {
                    self.cs = self.$arg_or_cmdarg(cmd_state)
                  };
                } else {
                  self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(153, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS'));
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(154, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                digits = self.$tok(self.num_digits_s, self.num_suffix_s);
                if ($truthy(digits['$end_with?']("_".$freeze()))) {
                  self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
                } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                  digits = "0".$freeze()
                } else if ($truthy(digits['$empty?']())) {
                  self.$diagnostic("error", "empty_numeric")
                } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                  
                  invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                  self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
                };
                if ($truthy(self['$version?'](18, 19, 20))) {
                  
                  self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                  p = $rb_minus(self.num_suffix_s, 1);
                } else {
                  self.num_xfrm.$call(digits.$to_i(self.num_base))
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(156, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy(self['$version?'](18, 19, 20))) {
                  self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
                } else {
                  
                  self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
                  p = $rb_minus(p, 1);
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(157, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy(self['$version?'](18, 19, 20))) {
                  self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
                } else {
                  
                  self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
                  p = $rb_minus(p, 1);
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(158, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                digits = self.$tok(self.ts, self.num_suffix_s);
                if ($truthy(self['$version?'](18, 19, 20))) {
                  
                  self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                  p = $rb_minus(self.num_suffix_s, 1);
                } else {
                  self.num_xfrm.$call(digits)
                };
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(160, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tCONSTANT");
                self.cs = self.$arg_or_cmdarg(cmd_state);
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(164, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tIDENTIFIER");
                if (($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](self.$tok()))))) {
                  
                  self.cs = 466;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  self.cs = self.$arg_or_cmdarg(cmd_state);
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(165, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($eqeq(tm, self.te)) {
                  self.$emit("tFID")
                } else {
                  
                  self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
                  p = $rb_minus(tm, 1);
                };
                self.cs = 495;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(167, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('PUNCTUATION'));
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(168, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('PUNCTUATION'));
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                nil
              };;
            } else if ($eqeqeq(244, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
              self.cs = self.$arg_or_cmdarg(cmd_state);
              p = $rb_minus(tm, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(339, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
              p = $rb_minus(tm, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(311, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(425, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($eqeq(tm, self.te)) {
                self.$emit("tFID")
              } else {
                
                self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
                p = $rb_minus(tm, 1);
              };
              self.cs = 495;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(340, $ret_or_1)) {
              
              
              tm = p;;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
              p = $rb_minus(tm, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(312, $ret_or_1)) {
              
              
              tm = p;;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(341, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
              p = $rb_minus(tm, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(313, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(345, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
              p = $rb_minus(tm, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(316, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(344, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
              p = $rb_minus(tm, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(315, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              if ($eqeqeq(99, ($ret_or_2 = self.act))) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
                p = $rb_minus(p, 1);
                self.cs = 811;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(106, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
              } else if ($eqeqeq(117, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                if ($truthy($rb_ge(self.version, 27))) {
                  
                  self.$emit("tPIPE", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
                  p = $rb_minus(p, 1);
                  self.cs = 564;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  p = $rb_minus(p, 2);
                  
                  self.cs = 811;
                  _goto_level = _again;
                  continue;;;
                };
              } else if ($eqeqeq(121, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('PUNCTUATION_BEGIN'));
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(122, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
                p = $rb_minus(tm, 1);
                self.cs = 540;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(123, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit_table($$('KEYWORDS_BEGIN'));
                self.command_start = true;
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else if ($eqeqeq(127, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                p = $rb_minus(self.ts, 1);
                
                self.cs = 811;
                _goto_level = _again;
                continue;;;
              } else if ($eqeqeq(128, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                self.$emit("tIDENTIFIER");
                if (($not(self.static_env['$nil?']()) && ($truthy(self.static_env['$declared?'](self.$tok()))))) {
                  
                  self.cs = 466;
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  self.cs = self.$arg_or_cmdarg(cmd_state);
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
              } else if ($eqeqeq(132, $ret_or_2)) {
                
                
                p = $rb_minus(self.te, 1);;
                p = $rb_minus(self.ts, 1);
                
                self.cs = 811;
                _goto_level = _again;
                continue;;;
              } else {
                nil
              };;
            } else if ($eqeqeq(342, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 3);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
              p = $rb_minus(tm, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(314, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 3);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(343, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
              p = $rb_minus(tm, 1);
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(490, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tCONSTANT", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(267, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              self.paren_nest = $rb_plus(self.paren_nest, 1);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tLBRACK", "[".$freeze(), $rb_minus(self.te, 1), self.te);
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(386, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              self.paren_nest = $rb_plus(self.paren_nest, 1);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tLBRACK", "[".$freeze());
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(493, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              self.paren_nest = $rb_plus(self.paren_nest, 1);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tLBRACK2", "[".$freeze());
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(496, $ret_or_1)) {
              
              
              self.paren_nest = $rb_minus(self.paren_nest, 1);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              if ($truthy($rb_lt(self.version, 24))) {
                
                self.cond.$lexpop();
                self.cmdarg.$lexpop();
              } else {
                
                self.cond.$pop();
                self.cmdarg.$pop();
              };
              if (($eqeq(self.$tok(), "}".$freeze()) || ($eqeq(self.$tok(), "]".$freeze())))) {
                if ($truthy($rb_ge(self.version, 25))) {
                  self.cs = 811
                } else {
                  self.cs = 532
                }
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(259, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              self.paren_nest = $rb_plus(self.paren_nest, 1);
              if ($truthy(self['$version?'](18))) {
                self.command_start = true
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy(self['$version?'](18))) {
                
                self.$emit("tLPAREN2", "(".$freeze(), $rb_minus(self.te, 1), self.te);
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              };;;
            } else if ($eqeqeq(272, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              self.paren_nest = $rb_plus(self.paren_nest, 1);
              if ($truthy(self['$version?'](18))) {
                self.command_start = true
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tLPAREN2", "(".$freeze());
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(280, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              self.paren_nest = $rb_plus(self.paren_nest, 1);
              if ($truthy(self['$version?'](18))) {
                self.command_start = true
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
              if ($truthy(self['$version?'](18))) {
                
                self.cs = 803;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              };;;
            } else if ($eqeqeq(328, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              self.paren_nest = $rb_plus(self.paren_nest, 1);
              if ($truthy(self['$version?'](18))) {
                self.command_start = true
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("tLPAREN", "(".$freeze());
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(437, $ret_or_1)) {
              
              
              self.cond.$push(false);
              self.cmdarg.$push(false);
              self.paren_nest = $rb_plus(self.paren_nest, 1);
              if ($truthy(self['$version?'](18))) {
                self.command_start = true
              };;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              self.cs = 564;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(438, $ret_or_1)) {
              
              
              self.paren_nest = $rb_minus(self.paren_nest, 1);;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit_table($$('PUNCTUATION'));
              if ($truthy($rb_lt(self.version, 24))) {
                
                self.cond.$lexpop();
                self.cmdarg.$lexpop();
              } else {
                
                self.cond.$pop();
                self.cmdarg.$pop();
              };
              if (($eqeq(self.$tok(), "}".$freeze()) || ($eqeq(self.$tok(), "]".$freeze())))) {
                if ($truthy($rb_ge(self.version, 25))) {
                  self.cs = 811
                } else {
                  self.cs = 532
                }
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(72, $ret_or_1)) {
              
              
              heredoc_e = p;;
              
              self.newline_s = p;;
            } else if ($eqeqeq(353, $ret_or_1)) {
              
              
              new_herebody_s = p;;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$tok(self.ts, heredoc_e)['$=~'](/^<<(-?)(~?)(["'`]?)(.*)\3$/m);
              indent = ($truthy(($ret_or_2 = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$empty?']()['$!']())) ? ($ret_or_2) : ((($b = $gvars['~']) === nil ? nil : $b['$[]'](2))['$empty?']()['$!']()));
              dedent_body = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))['$empty?']()['$!']();
              type = ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](3))['$empty?']()) ? ("<<\"".$freeze()) : ($rb_plus("<<".$freeze(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3)))));
              delimiter = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4));
              if ($truthy($rb_ge(self.version, 27))) {
                if (($truthy($rb_gt(delimiter.$count("\n"), 0)) || ($truthy($rb_gt(delimiter.$count("\r"), 0))))) {
                  self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)))
                }
              } else if ($truthy($rb_ge(self.version, 24))) {
                if ($truthy($rb_gt(delimiter.$count("\n"), 0))) {
                  if ($truthy(delimiter['$end_with?']("\n"))) {
                    
                    self.$diagnostic("warning", "heredoc_id_ends_with_nl", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
                    delimiter = delimiter.$rstrip();
                  } else {
                    self.$diagnostic("fatal", "heredoc_id_has_newline", nil, self.$range(self.ts, $rb_plus(self.ts, 1)))
                  }
                }
              };
              if (($truthy(dedent_body) && ($truthy(self['$version?'](18, 19, 20, 21, 22))))) {
                
                self.$emit("tLSHFT", "<<".$freeze(), self.ts, $rb_plus(self.ts, 2));
                p = $rb_plus(self.ts, 1);
                self.cs = 564;
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                self.cs = self.$push_literal(type, delimiter, self.ts, heredoc_e, indent, dedent_body);
                self.herebody_s = ($truthy(($ret_or_2 = self.herebody_s)) ? ($ret_or_2) : (new_herebody_s));
                p = $rb_minus(self.herebody_s, 1);
              };;;
            } else if ($eqeqeq(348, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 1);
              diag_msg = "ivar_name";;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy($rb_ge(self.version, 27))) {
                self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
              } else {
                
                self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
                p = self.ts;
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(351, $ret_or_1)) {
              
              
              tm = $rb_minus(p, 2);
              diag_msg = "cvar_name";;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              if ($truthy($rb_ge(self.version, 27))) {
                self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
              } else {
                
                self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
                p = self.ts;
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(359, $ret_or_1)) {
              
              
              self.escape = nil;;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(389, $ret_or_1)) {
              
              
              tm = p;;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
              p = $rb_minus(tm, 1);
              self.cs = 540;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(480, $ret_or_1)) {
              
              
              self.num_base = 16;
              self.num_digits_s = p;;
              
              self.num_suffix_s = p;;
            } else if ($eqeqeq(474, $ret_or_1)) {
              
              
              self.num_base = 10;
              self.num_digits_s = p;;
              
              self.num_suffix_s = p;;
            } else if ($eqeqeq(477, $ret_or_1)) {
              
              
              self.num_base = 8;
              self.num_digits_s = p;;
              
              self.num_suffix_s = p;;
            } else if ($eqeqeq(471, $ret_or_1)) {
              
              
              self.num_base = 2;
              self.num_digits_s = p;;
              
              self.num_suffix_s = p;;
            } else if ($eqeqeq(486, $ret_or_1)) {
              
              
              self.num_base = 10;
              self.num_digits_s = self.ts;;
              
              self.num_suffix_s = p;;
            } else if ($eqeqeq(449, $ret_or_1)) {
              
              
              self.num_base = 8;
              self.num_digits_s = self.ts;;
              
              self.num_suffix_s = p;;
            } else if ($eqeqeq(487, $ret_or_1)) {
              
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$17(chars){var self = $$17.$$s == null ? this : $$17.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
            } else if ($eqeqeq(8, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.newline_s = p;;
            } else if ($eqeqeq(453, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.num_suffix_s = p;;
            } else if ($eqeqeq(228, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 43;;
            } else if ($eqeqeq(215, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 44;;
            } else if ($eqeqeq(211, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 45;;
            } else if ($eqeqeq(27, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 72;;
            } else if ($eqeqeq(261, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 73;;
            } else if ($eqeqeq(28, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 78;;
            } else if ($eqeqeq(254, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 79;;
            } else if ($eqeqeq(281, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 85;;
            } else if ($eqeqeq(46, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 86;;
            } else if ($eqeqeq(302, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 93;;
            } else if ($eqeqeq(291, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 94;;
            } else if ($eqeqeq(70, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 106;;
            } else if ($eqeqeq(394, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 117;;
            } else if ($eqeqeq(305, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 121;;
            } else if ($eqeqeq(388, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 122;;
            } else if ($eqeqeq(387, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 123;;
            } else if ($eqeqeq(75, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 127;;
            } else if ($eqeqeq(303, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 128;;
            } else if ($eqeqeq(306, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 132;;
            } else if ($eqeqeq(504, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 145;;
            } else if ($eqeqeq(499, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 146;;
            } else if ($eqeqeq(507, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 148;;
            } else if ($eqeqeq(500, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 149;;
            } else if ($eqeqeq(501, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 150;;
            } else if ($eqeqeq(506, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 151;;
            } else if ($eqeqeq(498, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 152;;
            } else if ($eqeqeq(492, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 153;;
            } else if ($eqeqeq(418, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 154;;
            } else if ($eqeqeq(451, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 157;;
            } else if ($eqeqeq(82, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 158;;
            } else if ($eqeqeq(421, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 160;;
            } else if ($eqeqeq(412, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 164;;
            } else if ($eqeqeq(423, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 165;;
            } else if ($eqeqeq(416, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 167;;
            } else if ($eqeqeq(422, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 168;;
            } else if ($eqeqeq(88, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 181;;
            } else if ($eqeqeq(511, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.act = 185;;
            } else if ($eqeqeq(183, $ret_or_1)) {
              
              
              self.newline_s = p;;
              
              self.te = $rb_plus(p, 1);
              
              current_literal = self.$literal();
              if ($eqeq(self.te, pe)) {
                self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))
              };
              if ($truthy(current_literal['$heredoc?']())) {
                
                line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
                if ($truthy(self['$version?'](18, 19, 20))) {
                  line = line.$gsub(/\r.*$/, "".$freeze())
                };
                if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                  
                  self.herebody_s = self.te;
                  p = $rb_minus(current_literal.$heredoc_e(), 1);
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                } else {
                  
                  current_literal.$infer_indent_level(line);
                  self.herebody_s = self.te;
                };
              } else {
                
                if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                  
                  self.cs = self.$pop_literal();
                  
                  p = $rb_plus(p, 1);
                  _goto_level = _out;
                  continue;;;
                };
                if ($truthy(self.herebody_s)) {
                  
                  p = $rb_minus(self.herebody_s, 1);
                  self.herebody_s = nil;
                };
              };
              if (($truthy(current_literal['$words?']()) && ($not(self['$eof_codepoint?'](self.source_pts['$[]'](p)))))) {
                current_literal.$extend_space(self.ts, self.te)
              } else {
                
                current_literal.$extend_string(self.$tok(), self.ts, self.te);
                current_literal.$flush_string();
              };;;
              
              self.escape_s = p;
              self.escape = nil;;
            } else if ($eqeqeq(124, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(155, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(369, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(131, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(162, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(376, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(122, $ret_or_1)) {
              
              
              self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
              if (($truthy($rb_ge(self.version, 27)) && (($truthy($range(0, 8, false)['$include?'](self.escape.$ord())) || ($truthy($range(14, 31, false)['$include?'](self.escape.$ord()))))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(153, $ret_or_1)) {
              
              
              self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
              if (($truthy($rb_ge(self.version, 27)) && (($truthy($range(0, 8, false)['$include?'](self.escape.$ord())) || ($truthy($range(14, 31, false)['$include?'](self.escape.$ord()))))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(367, $ret_or_1)) {
              
              
              self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
              if (($truthy($rb_ge(self.version, 27)) && (($truthy($range(0, 8, false)['$include?'](self.escape.$ord())) || ($truthy($range(14, 31, false)['$include?'](self.escape.$ord()))))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(130, $ret_or_1)) {
              
              
              self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
              if (($truthy($rb_ge(self.version, 27)) && (($truthy($range(0, 8, false)['$include?'](self.escape.$ord())) || ($truthy($range(14, 31, false)['$include?'](self.escape.$ord()))))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(161, $ret_or_1)) {
              
              
              self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
              if (($truthy($rb_ge(self.version, 27)) && (($truthy($range(0, 8, false)['$include?'](self.escape.$ord())) || ($truthy($range(14, 31, false)['$include?'](self.escape.$ord()))))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(375, $ret_or_1)) {
              
              
              self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
              if (($truthy($rb_ge(self.version, 27)) && (($truthy($range(0, 8, false)['$include?'](self.escape.$ord())) || ($truthy($range(14, 31, false)['$include?'](self.escape.$ord()))))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(126, $ret_or_1)) {
              
              
              self.escape = "\u007F";;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(157, $ret_or_1)) {
              
              
              self.escape = "\u007F";;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(371, $ret_or_1)) {
              
              
              self.escape = "\u007F";;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(129, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(160, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(374, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(136, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
              
              self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(167, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
              
              self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(381, $ret_or_1)) {
              
              
              self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
              
              self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(116, $ret_or_1)) {
              
              
              self.escape_s = p;
              self.escape = nil;;
              
              self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(148, $ret_or_1)) {
              
              
              self.escape_s = p;
              self.escape = nil;;
              
              self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(362, $ret_or_1)) {
              
              
              self.escape_s = p;
              self.escape = nil;;
              
              self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(62, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.newline_s = p;;
            } else if ($eqeqeq(221, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(236, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(248, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(270, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              
              self.cs = 811;
              _goto_level = _again;
              continue;;;;;
            } else if ($eqeqeq(285, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(297, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(323, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(399, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(409, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(430, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(102, $ret_or_1)) {
              
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.te = p;
              p = $rb_minus(p, 1);;
            } else if ($eqeqeq(482, $ret_or_1)) {
              
              
              self.num_base = 10;
              self.num_digits_s = self.ts;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$18(chars){var self = $$18.$$s == null ? this : $$18.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
            } else if ($eqeqeq(446, $ret_or_1)) {
              
              
              self.num_base = 8;
              self.num_digits_s = self.ts;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$19(chars){var self = $$19.$$s == null ? this : $$19.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
            } else if ($eqeqeq(461, $ret_or_1)) {
              
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$20(chars){var self = $$20.$$s == null ? this : $$20.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(454, $ret_or_1)) {
              
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$21(chars){var self = $$21.$$s == null ? this : $$21.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tFLOAT", self.$Float(chars));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.ts, self.num_suffix_s);
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits)
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(450, $ret_or_1)) {
              
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$22(chars){var self = $$22.$$s == null ? this : $$22.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tFLOAT", self.$Float(chars));}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.ts, self.num_suffix_s);
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits)
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(276, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.newline_s = p;;
              
              self.act = 79;;
            } else if ($eqeqeq(36, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.act = 78;;
            } else if ($eqeqeq(47, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.act = 86;;
            } else if ($eqeqeq(94, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              self.act = 181;;
            } else if ($eqeqeq(66, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.act = 99;;
            } else if ($eqeqeq(85, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.act = 147;;
            } else if ($eqeqeq(93, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.act = 181;;
            } else if ($eqeqeq(38, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              tm = p;;
              
              self.act = 73;;
            } else if ($eqeqeq(391, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              tm = p;;
              
              self.act = 127;;
            } else if ($eqeqeq(390, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              tm = p;;
              
              self.act = 128;;
            } else if ($eqeqeq(483, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.num_base = 10;
              self.num_digits_s = self.ts;;
              
              self.act = 154;;
            } else if ($eqeqeq(127, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(158, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(372, $ret_or_1)) {
              
              
              codepoint = self.source_pts['$[]']($rb_minus(p, 1));
              if (($truthy($rb_ge(self.version, 30)) && (($eqeq(codepoint, 117) || ($eqeq(codepoint, 85)))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };
              if ($truthy((self.escape = $$('ESCAPES')['$[]'](codepoint))['$nil?']())) {
                self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(125, $ret_or_1)) {
              
              
              self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
              if (($truthy($rb_ge(self.version, 27)) && (($truthy($range(0, 8, false)['$include?'](self.escape.$ord())) || ($truthy($range(14, 31, false)['$include?'](self.escape.$ord()))))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(156, $ret_or_1)) {
              
              
              self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
              if (($truthy($rb_ge(self.version, 27)) && (($truthy($range(0, 8, false)['$include?'](self.escape.$ord())) || ($truthy($range(14, 31, false)['$include?'](self.escape.$ord()))))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(370, $ret_or_1)) {
              
              
              self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
              if (($truthy($rb_ge(self.version, 27)) && (($truthy($range(0, 8, false)['$include?'](self.escape.$ord())) || ($truthy($range(14, 31, false)['$include?'](self.escape.$ord()))))))) {
                self.$diagnostic("fatal", "invalid_escape")
              };;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(132, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(163, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(377, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(128, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(159, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              current_literal = self.$literal();
              escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
              if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
                if (($truthy(current_literal['$regexp?']()) && ($truthy($$('REGEXP_META_CHARACTERS').$match(escaped_char))))) {
                  current_literal.$extend_string(self.$tok(), self.ts, self.te)
                } else {
                  current_literal.$extend_string(escaped_char, self.ts, self.te)
                }
              } else if (($truthy(current_literal['$squiggly_heredoc?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else if (($truthy(current_literal['$supports_line_continuation_via_slash?']()) && ($eqeq(escaped_char, "\n".$freeze())))) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else if ((($truthy(current_literal['$regexp?']()) && ($truthy($rb_ge(self.version, 31)))) && ($truthy(["c", "C", "m", "M"]['$include?'](escaped_char))))) {
                current_literal.$extend_string(self.escape, self.ts, self.te)
              } else if ($truthy(current_literal['$regexp?']())) {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              } else {
                current_literal.$extend_string(($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok())), self.ts, self.te)
              };;;
            } else if ($eqeqeq(373, $ret_or_1)) {
              
              
              self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
              
              self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              value = ($truthy(($ret_or_2 = self.escape)) ? ($ret_or_2) : (self.$tok($rb_plus(self.ts, 1))));
              if ($truthy(self['$version?'](18))) {
                self.$emit("tINTEGER", value.$getbyte(0))
              } else {
                self.$emit("tCHARACTER", value)
              };
              self.cs = 811;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(478, $ret_or_1)) {
              
              
              self.num_base = 16;
              self.num_digits_s = p;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$23(chars){var self = $$23.$$s == null ? this : $$23.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(472, $ret_or_1)) {
              
              
              self.num_base = 10;
              self.num_digits_s = p;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$24(chars){var self = $$24.$$s == null ? this : $$24.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(475, $ret_or_1)) {
              
              
              self.num_base = 8;
              self.num_digits_s = p;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$25(chars){var self = $$25.$$s == null ? this : $$25.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(469, $ret_or_1)) {
              
              
              self.num_base = 2;
              self.num_digits_s = p;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$26(chars){var self = $$26.$$s == null ? this : $$26.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(481, $ret_or_1)) {
              
              
              self.num_base = 10;
              self.num_digits_s = self.ts;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$27(chars){var self = $$27.$$s == null ? this : $$27.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(445, $ret_or_1)) {
              
              
              self.num_base = 8;
              self.num_digits_s = self.ts;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$28(chars){var self = $$28.$$s == null ? this : $$28.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.te = p;
              p = $rb_minus(p, 1);
              
              digits = self.$tok(self.num_digits_s, self.num_suffix_s);
              if ($truthy(digits['$end_with?']("_".$freeze()))) {
                self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
              } else if ((($truthy(digits['$empty?']()) && ($eqeq(self.num_base, 8))) && ($truthy(self['$version?'](18))))) {
                digits = "0".$freeze()
              } else if ($truthy(digits['$empty?']())) {
                self.$diagnostic("error", "empty_numeric")
              } else if (($eqeq(self.num_base, 8) && ($truthy((invalid_idx = digits.$index(/[89]/)))))) {
                
                invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
                self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));
              };
              if ($truthy(self['$version?'](18, 19, 20))) {
                
                self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
                p = $rb_minus(self.num_suffix_s, 1);
              } else {
                self.num_xfrm.$call(digits.$to_i(self.num_base))
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;;;
            } else if ($eqeqeq(32, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              if ($truthy(self.herebody_s)) {
                
                p = self.herebody_s;
                self.herebody_s = nil;
              };;
              
              tm = p;;
              
              self.act = 73;;
            } else if ($eqeqeq(63, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.act = 99;;
            } else if ($eqeqeq(92, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.sharp_s = $rb_minus(p, 1);;
              
              self.$emit_comment(self.sharp_s, ($eqeq(p, pe) ? ($rb_minus(p, 2)) : (p)));;
              
              self.act = 181;;
            } else if ($eqeqeq(488, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$29(chars){var self = $$29.$$s == null ? this : $$29.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.act = 156;;
            } else if ($eqeqeq(484, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.num_base = 10;
              self.num_digits_s = self.ts;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$30(chars){var self = $$30.$$s == null ? this : $$30.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.act = 156;;
            } else if ($eqeqeq(448, $ret_or_1)) {
              
              
              self.te = $rb_plus(p, 1);;
              
              self.num_base = 8;
              self.num_digits_s = self.ts;;
              
              self.num_suffix_s = p;;
              
              self.num_xfrm = $send(self, 'lambda', [], function $$31(chars){var self = $$31.$$s == null ? this : $$31.$$s;

                
                
                if (chars == null) chars = nil;;
                return self.$emit("tINTEGER", chars);}, {$$arity: 1, $$s: self});;
              
              self.act = 156;;
            } else {
              nil
            }
          };
        };
        if ($truthy($rb_le(_goto_level, _again))) {
          
          if ($eqeqeq(96, ($ret_or_1 = _lex_to_state_actions['$[]'](self.cs)))) {
            
            self.ts = nil;
          } else {
            nil
          };
          if ($eqeq(self.cs, 0)) {
            
            _goto_level = _out;
            continue;;
          };
          p = $rb_plus(p, 1);
          if ($neqeq(p, pe)) {
            
            _goto_level = _resume;
            continue;;
          };
        };
        if ($truthy($rb_le(_goto_level, _test_eof))) {
          if ($eqeq(p, eof)) {
            if ($truthy($rb_gt(_lex_eof_trans['$[]'](self.cs), 0))) {
              
              _trans = $rb_minus(_lex_eof_trans['$[]'](self.cs), 1);
              _goto_level = _eof_trans;
              continue;;
            }
          }
        };
        if ($truthy($rb_le(_goto_level, _out))) {
          break;
        };
      };;
      if ($truthy(false)) {
        testEof
      };
      self.p = p;
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()
      } else if ($eqeq(self.cs, klass.$lex_error())) {
        return [false, ["$error".$freeze(), self.$range($rb_minus(p, 1), p)]]
      } else {
        
        eof = self.source_pts.$size();
        return [false, ["$eof".$freeze(), self.$range(eof, eof)]];
      };
    }, 0);
    self.$protected();
    
    $def(self, '$eof_codepoint?', function $Lexer_eof_codepoint$ques$32(point) {
      
      return [4, 26, 0]['$include?'](point)
    }, 1);
    
    $def(self, '$version?', function $Lexer_version$ques$33($a) {
      var $post_args, versions, self = this;

      
      
      $post_args = Opal.slice.call(arguments);
      
      versions = $post_args;;
      return versions['$include?'](self.version);
    }, -1);
    
    $def(self, '$stack_pop', function $$stack_pop() {
      var self = this;

      
      self.top = $rb_minus(self.top, 1);
      return self.stack['$[]'](self.top);
    }, 0);
    
    $def(self, '$encode_escape', function $$encode_escape(ord) {
      var self = this;

      return ord.$chr().$force_encoding(self.source_buffer.$source().$encoding())
    }, 1);
    
    $def(self, '$tok', function $$tok(s, e) {
      var self = this;

      
      
      if (s == null) s = self.ts;;
      
      if (e == null) e = self.te;;
      return self.source_buffer.$slice(Opal.Range.$new(s,e, true));
    }, -1);
    
    $def(self, '$range', function $$range(s, e) {
      var self = this;

      
      
      if (s == null) s = self.ts;;
      
      if (e == null) e = self.te;;
      return $$$($$$($$('Parser'), 'Source'), 'Range').$new(self.source_buffer, s, e);
    }, -1);
    
    $def(self, '$emit', function $$emit(type, value, s, e) {
      var self = this, token = nil;

      
      
      if (value == null) value = self.$tok();;
      
      if (s == null) s = self.ts;;
      
      if (e == null) e = self.te;;
      token = [type, [value, self.$range(s, e)]];
      self.token_queue.$push(token);
      if ($truthy(self.tokens)) {
        self.tokens.$push(token)
      };
      return token;
    }, -2);
    
    $def(self, '$emit_table', function $$emit_table(table, s, e) {
      var self = this, value = nil;

      
      
      if (s == null) s = self.ts;;
      
      if (e == null) e = self.te;;
      value = self.$tok(s, e);
      return self.$emit(table['$[]'](value), value, s, e);
    }, -2);
    
    $def(self, '$emit_do', function $$emit_do(do_block) {
      var self = this;

      
      
      if (do_block == null) do_block = false;;
      if ($truthy(self.cond['$active?']())) {
        return self.$emit("kDO_COND", "do".$freeze())
      } else if (($truthy(self.cmdarg['$active?']()) || ($truthy(do_block)))) {
        return self.$emit("kDO_BLOCK", "do".$freeze())
      } else {
        return self.$emit("kDO", "do".$freeze())
      };
    }, -1);
    
    $def(self, '$arg_or_cmdarg', function $$arg_or_cmdarg(cmd_state) {
      var self = this;

      if ($truthy(cmd_state)) {
        return self.$class().$lex_en_expr_cmdarg()
      } else {
        return self.$class().$lex_en_expr_arg()
      }
    }, 1);
    
    $def(self, '$emit_comment', function $$emit_comment(s, e) {
      var self = this;

      
      
      if (s == null) s = self.ts;;
      
      if (e == null) e = self.te;;
      if ($truthy(self.comments)) {
        self.comments.$push($$$($$$($$('Parser'), 'Source'), 'Comment').$new(self.$range(s, e)))
      };
      if ($truthy(self.tokens)) {
        self.tokens.$push(["tCOMMENT", [self.$tok(s, e), self.$range(s, e)]])
      };
      return nil;
    }, -1);
    
    $def(self, '$diagnostic', function $$diagnostic(type, reason, arguments$, location, highlights) {
      var self = this;

      
      
      if (arguments$ == null) arguments$ = nil;;
      
      if (location == null) location = self.$range();;
      
      if (highlights == null) highlights = [];;
      return self.diagnostics.$process($$$($$('Parser'), 'Diagnostic').$new(type, reason, arguments$, location, highlights));
    }, -3);
    
    $def(self, '$push_literal', function $$push_literal($a) {
      var $post_args, args, self = this, new_literal = nil;

      
      
      $post_args = Opal.slice.call(arguments);
      
      args = $post_args;;
      new_literal = $send($$('Literal'), 'new', [self].concat($to_a(args)));
      self.literal_stack.$push(new_literal);
      return self.$next_state_for_literal(new_literal);
    }, -1);
    
    $def(self, '$next_state_for_literal', function $$next_state_for_literal(literal) {
      var self = this;

      if (($truthy(literal['$words?']()) && ($truthy(literal['$backslash_delimited?']())))) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited_words()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited_words()
        }
      } else if (($truthy(literal['$words?']()) && ($not(literal['$backslash_delimited?']())))) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_words()
        } else {
          return self.$class().$lex_en_plain_words()
        }
      } else if (($not(literal['$words?']()) && ($truthy(literal['$backslash_delimited?']())))) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited()
        }
      } else if ($truthy(literal['$interpolate?']())) {
        return self.$class().$lex_en_interp_string()
      } else {
        return self.$class().$lex_en_plain_string()
      }
    }, 1);
    
    $def(self, '$literal', function $$literal() {
      var self = this;

      return self.literal_stack.$last()
    }, 0);
    
    $def(self, '$pop_literal', function $$pop_literal() {
      var self = this, old_literal = nil;

      
      old_literal = self.literal_stack.$pop();
      self.dedent_level = old_literal.$dedent_level();
      if ($eqeq(old_literal.$type(), "tREGEXP_BEG")) {
        return self.$class().$lex_en_regexp_modifiers()
      } else {
        return self.$class().$lex_en_expr_end()
      };
    }, 0);
    $const_set($nesting[0], 'PUNCTUATION', $hash2(["=", "&", "|", "!", "^", "+", "-", "*", "/", "%", "~", ",", ";", ".", "..", "...", "[", "]", "(", ")", "?", ":", "&&", "||", "-@", "+@", "~@", "**", "->", "=~", "!~", "==", "!=", ">", ">>", ">=", "<", "<<", "<=", "=>", "::", "===", "<=>", "[]", "[]=", "{", "}", "`", "!@", "&."], {"=": "tEQL", "&": "tAMPER2", "|": "tPIPE", "!": "tBANG", "^": "tCARET", "+": "tPLUS", "-": "tMINUS", "*": "tSTAR2", "/": "tDIVIDE", "%": "tPERCENT", "~": "tTILDE", ",": "tCOMMA", ";": "tSEMI", ".": "tDOT", "..": "tDOT2", "...": "tDOT3", "[": "tLBRACK2", "]": "tRBRACK", "(": "tLPAREN2", ")": "tRPAREN", "?": "tEH", ":": "tCOLON", "&&": "tANDOP", "||": "tOROP", "-@": "tUMINUS", "+@": "tUPLUS", "~@": "tTILDE", "**": "tPOW", "->": "tLAMBDA", "=~": "tMATCH", "!~": "tNMATCH", "==": "tEQ", "!=": "tNEQ", ">": "tGT", ">>": "tRSHFT", ">=": "tGEQ", "<": "tLT", "<<": "tLSHFT", "<=": "tLEQ", "=>": "tASSOC", "::": "tCOLON2", "===": "tEQQ", "<=>": "tCMP", "[]": "tAREF", "[]=": "tASET", "{": "tLCURLY", "}": "tRCURLY", "`": "tBACK_REF2", "!@": "tBANG", "&.": "tANDDOT"}));
    $const_set($nesting[0], 'PUNCTUATION_BEGIN', $hash2(["&", "*", "**", "+", "-", "::", "(", "{", "["], {"&": "tAMPER", "*": "tSTAR", "**": "tDSTAR", "+": "tUPLUS", "-": "tUMINUS", "::": "tCOLON3", "(": "tLPAREN", "{": "tLBRACE", "[": "tLBRACK"}));
    $const_set($nesting[0], 'KEYWORDS', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF_MOD", "unless": "kUNLESS_MOD", "while": "kWHILE_MOD", "until": "kUNTIL_MOD", "rescue": "kRESCUE_MOD", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    $const_set($nesting[0], 'KEYWORDS_BEGIN', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF", "unless": "kUNLESS", "while": "kWHILE", "until": "kUNTIL", "rescue": "kRESCUE", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    return $send(["class", "module", "def", "undef", "begin", "end", "then", "elsif", "else", "ensure", "case", "when", "for", "break", "next", "redo", "retry", "in", "do", "return", "yield", "super", "self", "nil", "true", "false", "and", "or", "not", "alias", "__FILE__", "__LINE__", "__ENCODING__"], 'each', [], function $Lexer$34(keyword){
      
      
      if (keyword == null) keyword = nil;;
      $writer = [keyword, (($writer = [keyword, "k" + (keyword.$upcase())]), $send($$('KEYWORDS'), '[]=', $to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
      $send($$('KEYWORDS_BEGIN'), '[]=', $to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];}, 1);
  })($$('Parser'), null, $nesting)
};

Opal.modules["parser/lexer/literal"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $hash2 = Opal.hash2, $enc = Opal.enc, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $to_ary = Opal.to_ary, $def = Opal.def, $eqeq = Opal.eqeq, $rb_minus = Opal.rb_minus, $neqeq = Opal.neqeq, $not = Opal.not, $send = Opal.send, $eqeqeq = Opal.eqeqeq, $rb_gt = Opal.rb_gt;

  Opal.add_stubs('attr_reader,attr_accessor,coerce_encoding,include?,send,+,[],fetch,==,!,heredoc?,start_with?,freeze,clear_buffer,emit_start_tok,type,=~,words?,delimiter?,-,extend_space,!=,flush_string,emit,each_char,===,%,>,nil?,<<,empty?,extend_content,protected,lstrip,b,dup,force_encoding,encoding,source,source_buffer,length');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Literal');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.lexer = $proto.start_tok = $proto.str_type = $proto.monolithic = $proto.interpolate = $proto.heredoc_e = $proto.dedent_body = $proto.end_delim = $proto.start_delim = $proto.nesting = $proto.label_allowed = $proto.buffer = $proto.str_s = $proto.interp_braces = $proto.buffer_s = $proto.buffer_e = $proto.space_emitted = $proto.indent = nil;
      
      $const_set($nesting[0], 'DELIMITERS', $hash2(["(", "[", "{", "<"], {"(": $enc(")", "ASCII-8BIT"), "[": $enc("]", "ASCII-8BIT"), "{": $enc("}", "ASCII-8BIT"), "<": $enc(">", "ASCII-8BIT")}));
      $const_set($nesting[0], 'TYPES', $hash2(["'", "<<'", "%q", "\"", "<<\"", "%", "%Q", "%w", "%W", "%i", "%I", ":'", "%s", ":\"", "/", "%r", "%x", "`", "<<`"], {"'": ["tSTRING_BEG", false], "<<'": ["tSTRING_BEG", false], "%q": ["tSTRING_BEG", false], "\"": ["tSTRING_BEG", true], "<<\"": ["tSTRING_BEG", true], "%": ["tSTRING_BEG", true], "%Q": ["tSTRING_BEG", true], "%w": ["tQWORDS_BEG", false], "%W": ["tWORDS_BEG", true], "%i": ["tQSYMBOLS_BEG", false], "%I": ["tSYMBOLS_BEG", true], ":'": ["tSYMBEG", false], "%s": ["tSYMBEG", false], ":\"": ["tSYMBEG", true], "/": ["tREGEXP_BEG", true], "%r": ["tREGEXP_BEG", true], "%x": ["tXSTRING_BEG", true], "`": ["tXSTRING_BEG", true], "<<`": ["tXSTRING_BEG", true]}));
      self.$attr_reader("heredoc_e", "str_s", "dedent_level");
      self.$attr_accessor("saved_herebody_s");
      
      $def(self, '$initialize', function $$initialize(lexer, str_type, delimiter, str_s, heredoc_e, indent, dedent_body, label_allowed) {
        var $a, $b, self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        
        
        if (heredoc_e == null) heredoc_e = nil;;
        
        if (indent == null) indent = false;;
        
        if (dedent_body == null) dedent_body = false;;
        
        if (label_allowed == null) label_allowed = false;;
        self.lexer = lexer;
        self.nesting = 1;
        str_type = self.$coerce_encoding(str_type);
        delimiter = self.$coerce_encoding(delimiter);
        if (!$truthy($$('TYPES')['$include?'](str_type))) {
          lexer.$send("diagnostic", "error", "unexpected_percent_str", $hash2(["type"], {"type": str_type}), self.lexer.$send("range", str_s, $rb_plus(str_s, 2)))
        };
        self.str_type = str_type;
        self.str_s = str_s;
        $b = $$('TYPES')['$[]'](str_type), $a = $to_ary($b), (self.start_tok = ($a[0] == null ? nil : $a[0])), (self.interpolate = ($a[1] == null ? nil : $a[1])), $b;
        self.start_delim = ($truthy($$('DELIMITERS')['$include?'](delimiter)) ? (delimiter) : (nil));
        self.end_delim = $$('DELIMITERS').$fetch(delimiter, delimiter);
        self.heredoc_e = heredoc_e;
        self.indent = indent;
        self.label_allowed = label_allowed;
        self.dedent_body = dedent_body;
        self.dedent_level = nil;
        self.interp_braces = 0;
        self.space_emitted = true;
        self.monolithic = ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.start_tok['$==']("tSTRING_BEG"))) ? ([$enc("'", "ASCII-8BIT"), $enc("\"", "ASCII-8BIT")]['$include?'](str_type)) : ($ret_or_2)))) ? (self['$heredoc?']()['$!']()) : ($ret_or_1));
        if ($truthy(self.str_type['$start_with?']($enc("%", "ASCII-8BIT").$freeze()))) {
          self.str_type = $rb_plus(self.str_type, delimiter)
        };
        self.$clear_buffer();
        if ($truthy(self.monolithic)) {
          return nil
        } else {
          return self.$emit_start_tok()
        };
      }, -5);
      
      $def(self, '$interpolate?', function $Literal_interpolate$ques$1() {
        var self = this;

        return self.interpolate
      }, 0);
      
      $def(self, '$words?', function $Literal_words$ques$2() {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = self.$type()['$==']("tWORDS_BEG"))) ? ($ret_or_3) : (self.$type()['$==']("tQWORDS_BEG"))))) ? ($ret_or_2) : (self.$type()['$==']("tSYMBOLS_BEG")))))) {
          return $ret_or_1
        } else {
          return self.$type()['$==']("tQSYMBOLS_BEG")
        }
      }, 0);
      
      $def(self, '$regexp?', function $Literal_regexp$ques$3() {
        var self = this;

        return self.$type()['$==']("tREGEXP_BEG")
      }, 0);
      
      $def(self, '$heredoc?', function $Literal_heredoc$ques$4() {
        var self = this;

        return self.heredoc_e['$!']()['$!']()
      }, 0);
      
      $def(self, '$plain_heredoc?', function $Literal_plain_heredoc$ques$5() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self['$heredoc?']()))) {
          return self.dedent_body['$!']()
        } else {
          return $ret_or_1
        }
      }, 0);
      
      $def(self, '$squiggly_heredoc?', function $Literal_squiggly_heredoc$ques$6() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self['$heredoc?']()))) {
          return self.dedent_body
        } else {
          return $ret_or_1
        }
      }, 0);
      
      $def(self, '$backslash_delimited?', function $Literal_backslash_delimited$ques$7() {
        var self = this;

        return self.end_delim['$==']($enc("\\", "ASCII-8BIT").$freeze())
      }, 0);
      
      $def(self, '$type', function $$type() {
        var self = this;

        return self.start_tok
      }, 0);
      
      $def(self, '$munge_escape?', function $Literal_munge_escape$ques$8(character) {
        var self = this;

        
        character = self.$coerce_encoding(character);
        if (($truthy(self['$words?']()) && ($truthy(character['$=~'](/[ \t\v\r\f\n]/))))) {
          return true
        } else {
          return [$enc("\\", "ASCII-8BIT").$freeze(), self.start_delim, self.end_delim]['$include?'](character)
        };
      }, 1);
      
      $def(self, '$nest_and_try_closing', function $$nest_and_try_closing(delimiter, ts, te, lookahead) {
        var self = this;

        
        
        if (lookahead == null) lookahead = nil;;
        delimiter = self.$coerce_encoding(delimiter);
        if (($truthy(self.start_delim) && ($eqeq(self.start_delim, delimiter)))) {
          self.nesting = $rb_plus(self.nesting, 1)
        } else if ($truthy(self['$delimiter?'](delimiter))) {
          self.nesting = $rb_minus(self.nesting, 1)
        };
        if ($eqeq(self.nesting, 0)) {
          
          if ($truthy(self['$words?']())) {
            self.$extend_space(ts, ts)
          };
          if ((((($truthy(lookahead) && ($truthy(self.label_allowed))) && ($eqeq(lookahead['$[]'](0), $enc(":", "ASCII-8BIT")))) && ($neqeq(lookahead['$[]'](1), $enc(":", "ASCII-8BIT")))) && ($eqeq(self.start_tok, "tSTRING_BEG")))) {
            
            self.$flush_string();
            return self.$emit("tLABEL_END", self.end_delim, ts, $rb_plus(te, 1));
          } else if ($truthy(self.monolithic)) {
            return self.$emit("tSTRING", self.buffer, self.str_s, te)
          } else {
            
            if (!$truthy(self['$heredoc?']())) {
              self.$flush_string()
            };
            return self.$emit("tSTRING_END", self.end_delim, ts, te);
          };
        } else {
          return nil
        };
      }, -4);
      
      $def(self, '$infer_indent_level', function $$infer_indent_level(line) {
        var self = this, indent_level = nil;

        
        if ($not(self.dedent_body)) {
          return nil
        };
        indent_level = 0;
        return (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_char', [], function $$9(char$){var self = $$9.$$s == null ? this : $$9.$$s, $ret_or_1 = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

          
          
          if (char$ == null) char$ = nil;;
          if ($eqeqeq(" ", ($ret_or_1 = char$))) {
            return (indent_level = $rb_plus(indent_level, 1))
          } else if ($eqeqeq("\t", $ret_or_1)) {
            return (indent_level = $rb_plus(indent_level, $rb_minus(8, indent_level['$%'](8))))
          } else {
            
            if (($truthy(self.dedent_level['$nil?']()) || ($truthy($rb_gt(self.dedent_level, indent_level))))) {
              self.dedent_level = indent_level
            };
            
            Opal.brk(nil, $brk);
          };}, {$$arity: 1, $$s: self, $$brk: $brk})
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      }, 1);
      
      $def(self, '$start_interp_brace', function $$start_interp_brace() {
        var self = this;

        return (self.interp_braces = $rb_plus(self.interp_braces, 1))
      }, 0);
      
      $def(self, '$end_interp_brace_and_try_closing', function $$end_interp_brace_and_try_closing() {
        var self = this;

        
        self.interp_braces = $rb_minus(self.interp_braces, 1);
        
        return self.interp_braces['$=='](0);;
      }, 0);
      
      $def(self, '$extend_string', function $$extend_string(string, ts, te) {
        var self = this, $ret_or_1 = nil;

        
        self.buffer_s = ($truthy(($ret_or_1 = self.buffer_s)) ? ($ret_or_1) : (ts));
        self.buffer_e = te;
        return self.buffer['$<<'](string);
      }, 3);
      
      $def(self, '$flush_string', function $$flush_string() {
        var self = this;

        
        if ($truthy(self.monolithic)) {
          
          self.$emit_start_tok();
          self.monolithic = false;
        };
        if ($truthy(self.buffer['$empty?']())) {
          return nil
        } else {
          
          self.$emit("tSTRING_CONTENT", self.buffer, self.buffer_s, self.buffer_e);
          self.$clear_buffer();
          return self.$extend_content();
        };
      }, 0);
      
      $def(self, '$extend_content', function $$extend_content() {
        var self = this;

        return (self.space_emitted = false)
      }, 0);
      
      $def(self, '$extend_space', function $$extend_space(ts, te) {
        var self = this;

        
        self.$flush_string();
        if ($truthy(self.space_emitted)) {
          return nil
        } else {
          
          self.$emit("tSPACE", nil, ts, te);
          return (self.space_emitted = true);
        };
      }, 2);
      
      $def(self, '$supports_line_continuation_via_slash?', function $Literal_supports_line_continuation_via_slash$ques$10() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self['$words?']()['$!']()))) {
          return self.interpolate
        } else {
          return $ret_or_1
        }
      }, 0);
      self.$protected();
      
      $def(self, '$delimiter?', function $Literal_delimiter$ques$11(delimiter) {
        var self = this;

        if ($truthy(self.indent)) {
          return self.end_delim['$=='](delimiter.$lstrip())
        } else {
          return self.end_delim['$=='](delimiter)
        }
      }, 1);
      
      $def(self, '$coerce_encoding', function $$coerce_encoding(string) {
        
        return string.$b()
      }, 1);
      
      $def(self, '$clear_buffer', function $$clear_buffer() {
        var self = this;

        
        self.buffer = $enc("", "ASCII-8BIT").$dup();
        self.buffer.$force_encoding(self.lexer.$source_buffer().$source().$encoding());
        self.buffer_s = nil;
        return (self.buffer_e = nil);
      }, 0);
      
      $def(self, '$emit_start_tok', function $$emit_start_tok() {
        var self = this, str_e = nil, $ret_or_1 = nil;

        
        str_e = ($truthy(($ret_or_1 = self.heredoc_e)) ? ($ret_or_1) : ($rb_plus(self.str_s, self.str_type.$length())));
        return self.$emit(self.start_tok, self.str_type, self.str_s, str_e);
      }, 0);
      return $def(self, '$emit', function $$emit(token, type, s, e) {
        var self = this;

        return self.lexer.$send("emit", token, type, s, e)
      }, 4);
    })($$('Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/lexer/stack_state"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs('freeze,clear,|,<<,&,>>,==,[],to_s');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super) {
      var self = $klass($base, $super, 'StackState');

      var $proto = self.$$prototype;

      $proto.stack = $proto.name = nil;
      
      
      $def(self, '$initialize', function $$initialize(name) {
        var self = this;

        
        self.name = name.$freeze();
        return self.$clear();
      }, 1);
      
      $def(self, '$clear', function $$clear() {
        var self = this;

        return (self.stack = 0)
      }, 0);
      
      $def(self, '$push', function $$push(bit) {
        var self = this, bit_value = nil;

        
        bit_value = ($truthy(bit) ? (1) : (0));
        self.stack = self.stack['$<<'](1)['$|'](bit_value);
        return bit;
      }, 1);
      
      $def(self, '$pop', function $$pop() {
        var self = this, bit_value = nil;

        
        bit_value = self.stack['$&'](1);
        self.stack = self.stack['$>>'](1);
        return bit_value['$=='](1);
      }, 0);
      
      $def(self, '$lexpop', function $$lexpop() {
        var self = this;

        
        self.stack = self.stack['$>>'](1)['$|'](self.stack['$&'](1));
        return self.stack['$[]'](0)['$=='](1);
      }, 0);
      
      $def(self, '$active?', function $StackState_active$ques$1() {
        var self = this;

        return self.stack['$[]'](0)['$=='](1)
      }, 0);
      
      $def(self, '$empty?', function $StackState_empty$ques$2() {
        var self = this;

        return self.stack['$=='](0)
      }, 0);
      
      $def(self, '$to_s', function $$to_s() {
        var self = this;

        return "[" + (self.stack.$to_s(2)) + " <= " + (self.name) + "]"
      }, 0);
      return $alias(self, "inspect", "to_s");
    })($$('Lexer'), null)
  })($nesting[0], $nesting)
};

Opal.modules["parser/lexer/dedenter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $eqeq = Opal.eqeq, $send = Opal.send, $truthy = Opal.truthy, $to_ary = Opal.to_ary, $slice = Opal.slice, $rb_le = Opal.rb_le, $eqeqeq = Opal.eqeqeq, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_gt = Opal.rb_gt, $rb_times = Opal.rb_times, $rb_divide = Opal.rb_divide;

  Opal.add_stubs('encoding,split,force_encoding,==,length,map!,each,each_char,<=,===,+,-,>,*,/,slice!,replace,join,end_with?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Dedenter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.at_line_begin = nil;
      
      $const_set($nesting[0], 'TAB_WIDTH', 8);
      
      $def(self, '$initialize', function $$initialize(dedent_level) {
        var self = this;

        
        self.dedent_level = dedent_level;
        self.at_line_begin = true;
        return (self.indent_level = 0);
      }, 1);
      
      $def(self, '$dedent', function $$dedent(string) {
        var $a, $b, self = this, original_encoding = nil, lines = nil, lines_to_dedent = nil, _first = nil;

        
        original_encoding = string.$encoding();
        lines = string.$force_encoding($$$($$('Encoding'), 'BINARY')).$split("\\\n");
        if ($eqeq(lines.$length(), 1)) {
          lines = [string.$force_encoding(original_encoding)]
        } else {
          $send(lines, 'map!', [], function $$1(s){
            
            
            if (s == null) s = nil;;
            return s.$force_encoding(original_encoding);}, 1)
        };
        if ($truthy(self.at_line_begin)) {
          lines_to_dedent = lines
        } else {
          $b = lines, $a = $to_ary($b), (_first = ($a[0] == null ? nil : $a[0])), (lines_to_dedent = $slice.call($a, 1)), $b
        };
        (function(){var $brk = Opal.new_brk(); try {return $send(lines_to_dedent, 'each', [], function $$2(line){var self = $$2.$$s == null ? this : $$2.$$s, left_to_remove = nil, remove = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

          
          
          if (line == null) line = nil;;
          left_to_remove = self.dedent_level;
          remove = 0;
          (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_char', [], function $$3(char$){var self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil;
            if (self.dedent_level == null) self.dedent_level = nil;

            
            
            if (char$ == null) char$ = nil;;
            if ($truthy($rb_le(left_to_remove, 0))) {
              
              Opal.brk(nil, $brk)
            };
            if ($eqeqeq(" ", ($ret_or_1 = char$))) {
              
              remove = $rb_plus(remove, 1);
              return (left_to_remove = $rb_minus(left_to_remove, 1));
            } else if ($eqeqeq("\t", $ret_or_1)) {
              
              if ($truthy($rb_gt($rb_times($$('TAB_WIDTH'), $rb_plus($rb_divide(remove, $$('TAB_WIDTH')), 1)), self.dedent_level))) {
                
                Opal.brk(nil, $brk)
              };
              remove = $rb_plus(remove, 1);
              return (left_to_remove = $rb_minus(left_to_remove, $$('TAB_WIDTH')));
            } else {
              
              Opal.brk(nil, $brk)
            };}, {$$arity: 1, $$s: self, $$brk: $brk})
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return line['$slice!'](0, remove);}, {$$arity: 1, $$s: self, $$brk: $brk})
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        string.$replace(lines.$join());
        return (self.at_line_begin = string['$end_with?']("\n"));
      }, 1);
      return $def(self, '$interrupt', function $$interrupt() {
        var self = this;

        return (self.at_line_begin = false)
      }, 0);
    })($$('Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/builders/default"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $to_a = Opal.to_a, $eqeqeq = Opal.eqeqeq, $hash2 = Opal.hash2, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $not = Opal.not, $send = Opal.send, $neqeq = Opal.neqeq, $to_ary = Opal.to_ary, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $rb_ge = Opal.rb_ge, $range = Opal.range, $slice = Opal.slice, $rb_gt = Opal.rb_gt, $rb_le = Opal.rb_le, $rb_lt = Opal.rb_lt;

  Opal.add_stubs('attr_accessor,n0,token_map,numeric,n,value,new,loc,private,===,+@,-@,updated,join,expression,string_value,delimited_string_map,unquoted_map,collapse_string_parts?,nil?,first,children,string_map,prefix_string_map,to_sym,collection_map,empty?,==,version,diagnostic,!,type,dedent,map,interrupt,compact,uniq,sort,each_char,to_proc,static_regexp,message,<<,regexp_map,unary_op_map,binary_op_map,!=,%,size,last,each_slice,pair_keyword_map,pair_quoted_map,symbol_compose,adjust,=~,pair_keyword,accessible,upto,-,length,+,[],>=,range_map,variable_map,name,source_buffer,dup,line,emit_encoding,class,any?,end_with?,to_s,try_declare_numparam,declared?,static_env,var_send_map,top,current_arg_stack,parser,constant_map,dynamic_const_definition_allowed?,context,check_assignment_to_numparam,check_reserved_for_numparam,declare,with_expression,with_operator,join_exprs,module_definition_map,definition_map,endless_definition_map,validate_definee,keyword_map,check_duplicate_args,validate_no_forward_arg_after_restarg,emit_forward_arg,forward_arg,arg_prefix_map,kwarg_map,emit_procarg0,emit_arg_inside_procarg0,location,resize,end,call_type_for_dot,emit_kwargs,rewrite_hash_args_to_kwargs,send_map,emit_lambda,expr_map,keyword,include?,block_map,array,emit_index,index_map,send_index_map,send_binary_op_map,static_regexp_node,each,names,send_unary_op_map,check_condition,condition_map,keyword_mod_map,ternary_map,for_map,>,count,rescue_body_map,eh_keyword_map,push,none?,one?,begin,guard_map,check_lvar_name,check_duplicate_pattern_variable,match_hash_var_from_str,match_var,check_duplicate_pattern_key,static_string,pair_quoted,match_hash_var,<=,check_duplicate_arg,is_a?,[]=,arg_name_collides?,<,in_dynamic_block?,has_numparams?,max_numparam_stack,start_with?,pattern_variables,pattern_hash_keys,with,begin_pos,end_pos,encode,valid_encoding?,process,diagnostics,send,kwargs?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Default');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.parser = $proto.emit_file_line_as_literals = nil;
      
      (function(self, $parent_nesting) {
        
        return self.$attr_accessor("emit_lambda")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_lambda = false;
      (function(self, $parent_nesting) {
        
        return self.$attr_accessor("emit_procarg0")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_procarg0 = false;
      (function(self, $parent_nesting) {
        
        return self.$attr_accessor("emit_encoding")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_encoding = false;
      (function(self, $parent_nesting) {
        
        return self.$attr_accessor("emit_index")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_index = false;
      (function(self, $parent_nesting) {
        
        return self.$attr_accessor("emit_arg_inside_procarg0")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_arg_inside_procarg0 = false;
      (function(self, $parent_nesting) {
        
        return self.$attr_accessor("emit_forward_arg")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_forward_arg = false;
      (function(self, $parent_nesting) {
        
        return self.$attr_accessor("emit_kwargs")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_kwargs = false;
      (function(self, $parent_nesting) {
        
        return self.$attr_accessor("emit_match_pattern")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_match_pattern = false;
      (function(self, $parent_nesting) {
        
        return $def(self, '$modernize', function $$modernize() {
          var self = this;

          
          self.emit_lambda = true;
          self.emit_procarg0 = true;
          self.emit_encoding = true;
          self.emit_index = true;
          self.emit_arg_inside_procarg0 = true;
          self.emit_forward_arg = true;
          self.emit_kwargs = true;
          return (self.emit_match_pattern = true);
        }, 0)
      })(Opal.get_singleton_class(self), $nesting);
      self.$attr_accessor("parser");
      self.$attr_accessor("emit_file_line_as_literals");
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        return (self.emit_file_line_as_literals = true)
      }, 0);
      
      $def(self, '$nil', function $$nil(nil_t) {
        var self = this;

        return self.$n0("nil", self.$token_map(nil_t))
      }, 1);
      
      $def(self, '$true', function $Default_true$1(true_t) {
        var self = this;

        return self.$n0("true", self.$token_map(true_t))
      }, 1);
      
      $def(self, '$false', function $Default_false$2(false_t) {
        var self = this;

        return self.$n0("false", self.$token_map(false_t))
      }, 1);
      
      $def(self, '$integer', function $$integer(integer_t) {
        var self = this;

        return self.$numeric("int", integer_t)
      }, 1);
      
      $def(self, '$float', function $Default_float$3(float_t) {
        var self = this;

        return self.$numeric("float", float_t)
      }, 1);
      
      $def(self, '$rational', function $$rational(rational_t) {
        var self = this;

        return self.$numeric("rational", rational_t)
      }, 1);
      
      $def(self, '$complex', function $$complex(complex_t) {
        var self = this;

        return self.$numeric("complex", complex_t)
      }, 1);
      
      $def(self, '$numeric', function $$numeric(kind, token) {
        var self = this;

        return self.$n(kind, [self.$value(token)], $$$($$$($$('Source'), 'Map'), 'Operator').$new(nil, self.$loc(token)))
      }, 2);
      self.$private("numeric");
      
      $def(self, '$unary_num', function $$unary_num(unary_t, numeric) {
        var $a, self = this, value = nil, operator_loc = nil, $ret_or_1 = nil;

        
        $a = [].concat($to_a(numeric)), (value = ($a[0] == null ? nil : $a[0])), $a;
        operator_loc = self.$loc(unary_t);
        if ($eqeqeq("+", ($ret_or_1 = self.$value(unary_t)))) {
          value = value['$+@']()
        } else if ($eqeqeq("-", $ret_or_1)) {
          value = value['$-@']()
        } else {
          nil
        };
        return numeric.$updated(nil, [value], $hash2(["location"], {"location": $$$($$$($$('Source'), 'Map'), 'Operator').$new(operator_loc, operator_loc.$join(numeric.$loc().$expression()))}));
      }, 2);
      
      $def(self, '$__LINE__', function $$__LINE__(__LINE__t) {
        var self = this;

        return self.$n0("__LINE__", self.$token_map(__LINE__t))
      }, 1);
      
      $def(self, '$string', function $$string(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$delimited_string_map(string_t))
      }, 1);
      
      $def(self, '$string_internal', function $$string_internal(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$unquoted_map(string_t))
      }, 1);
      
      $def(self, '$string_compose', function $$string_compose(begin_t, parts, end_t) {
        var self = this;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          if (($truthy(begin_t['$nil?']()) && ($truthy(end_t['$nil?']())))) {
            return parts.$first()
          } else {
            return self.$n("str", parts.$first().$children(), self.$string_map(begin_t, parts, end_t))
          }
        } else {
          return self.$n("dstr", [].concat($to_a(parts)), self.$string_map(begin_t, parts, end_t))
        }
      }, 3);
      
      $def(self, '$character', function $$character(char_t) {
        var self = this;

        return self.$n("str", [self.$string_value(char_t)], self.$prefix_string_map(char_t))
      }, 1);
      
      $def(self, '$__FILE__', function $$__FILE__(__FILE__t) {
        var self = this;

        return self.$n0("__FILE__", self.$token_map(__FILE__t))
      }, 1);
      
      $def(self, '$symbol', function $$symbol(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$prefix_string_map(symbol_t))
      }, 1);
      
      $def(self, '$symbol_internal', function $$symbol_internal(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$unquoted_map(symbol_t))
      }, 1);
      
      $def(self, '$symbol_compose', function $$symbol_compose(begin_t, parts, end_t) {
        var self = this, str = nil;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          
          str = parts.$first();
          return self.$n("sym", [str.$children().$first().$to_sym()], self.$collection_map(begin_t, str.$loc().$expression(), end_t));
        } else if (($eqeq(self.parser.$version(), 18) && ($truthy(parts['$empty?']())))) {
          return self.$diagnostic("error", "empty_symbol", nil, self.$loc(begin_t).$join(self.$loc(end_t)))
        } else {
          return self.$n("dsym", [].concat($to_a(parts)), self.$collection_map(begin_t, parts, end_t))
        }
      }, 3);
      
      $def(self, '$xstring_compose', function $$xstring_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("xstr", [].concat($to_a(parts)), self.$string_map(begin_t, parts, end_t))
      }, 3);
      
      $def(self, '$dedent_string', function $$dedent_string(node, dedent_level) {
        var dedenter = nil, $ret_or_1 = nil, str = nil, children = nil;

        
        if ($not(dedent_level['$nil?']())) {
          
          dedenter = $$$($$('Lexer'), 'Dedenter').$new(dedent_level);
          if ($eqeqeq("str", ($ret_or_1 = node.$type()))) {
            
            str = node.$children().$first();
            dedenter.$dedent(str);
          } else if (($eqeqeq("dstr", $ret_or_1) || ($eqeqeq("xstr", $ret_or_1)))) {
            
            children = $send(node.$children(), 'map', [], function $$4(str_node){
              
              
              if (str_node == null) str_node = nil;;
              if ($eqeq(str_node.$type(), "str")) {
                
                str = str_node.$children().$first();
                dedenter.$dedent(str);
                if ($truthy(str['$empty?']())) {
                  return nil;
                };
              } else {
                dedenter.$interrupt()
              };
              return str_node;}, 1);
            node = node.$updated(nil, children.$compact());
          } else {
            nil
          };
        };
        return node;
      }, 2);
      
      $def(self, '$regexp_options', function $$regexp_options(regopt_t) {
        var self = this, options = nil;

        
        options = $send(self.$value(regopt_t).$each_char().$sort().$uniq(), 'map', [], "to_sym".$to_proc());
        return self.$n("regopt", options, self.$token_map(regopt_t));
      }, 1);
      
      $def(self, '$regexp_compose', function $$regexp_compose(begin_t, parts, end_t, options) {
        var self = this, e = nil;

        
        
        try {
          self.$static_regexp(parts, options)
        } catch ($err) {
          if (Opal.rescue($err, [$$('RegexpError')])) {(e = $err)
            try {
              self.$diagnostic("error", "invalid_regexp", $hash2(["message"], {"message": e.$message()}), self.$loc(begin_t).$join(self.$loc(end_t)))
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };;
        return self.$n("regexp", parts['$<<'](options), self.$regexp_map(begin_t, end_t, options));
      }, 4);
      
      $def(self, '$array', function $$array(begin_t, elements, end_t) {
        var self = this;

        return self.$n("array", elements, self.$collection_map(begin_t, elements, end_t))
      }, 3);
      
      $def(self, '$splat', function $$splat(star_t, arg) {
        var self = this;

        
        
        if (arg == null) arg = nil;;
        if ($truthy(arg['$nil?']())) {
          return self.$n0("splat", self.$unary_op_map(star_t))
        } else {
          return self.$n("splat", [arg], self.$unary_op_map(star_t, arg))
        };
      }, -2);
      
      $def(self, '$word', function $$word(parts) {
        var self = this;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          return parts.$first()
        } else {
          return self.$n("dstr", [].concat($to_a(parts)), self.$collection_map(nil, parts, nil))
        }
      }, 1);
      
      $def(self, '$words_compose', function $$words_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("array", [].concat($to_a(parts)), self.$collection_map(begin_t, parts, end_t))
      }, 3);
      
      $def(self, '$symbols_compose', function $$symbols_compose(begin_t, parts, end_t) {
        var self = this;

        
        parts = $send(parts, 'map', [], function $$5(part){var $a, $ret_or_1 = nil, value = nil;

          
          
          if (part == null) part = nil;;
          if ($eqeqeq("str", ($ret_or_1 = part.$type()))) {
            
            $a = [].concat($to_a(part)), (value = ($a[0] == null ? nil : $a[0])), $a;
            return part.$updated("sym", [value.$to_sym()]);
          } else if ($eqeqeq("dstr", $ret_or_1)) {
            return part.$updated("dsym")
          } else {
            return part
          };}, 1);
        return self.$n("array", [].concat($to_a(parts)), self.$collection_map(begin_t, parts, end_t));
      }, 3);
      
      $def(self, '$pair', function $$pair(key, assoc_t, value) {
        var self = this;

        return self.$n("pair", [key, value], self.$binary_op_map(key, assoc_t, value))
      }, 3);
      
      $def(self, '$pair_list_18', function $$pair_list_18(list) {
        var self = this;

        if ($neqeq(list.$size()['$%'](2), 0)) {
          return self.$diagnostic("error", "odd_hash", nil, list.$last().$loc().$expression())
        } else {
          return $send(list.$each_slice(2), 'map', [], function $$6(key, value){var self = $$6.$$s == null ? this : $$6.$$s;

            
            
            if (key == null) key = nil;;
            
            if (value == null) value = nil;;
            return self.$n("pair", [key, value], self.$binary_op_map(key, nil, value));}, {$$arity: 2, $$s: self})
        }
      }, 1);
      
      $def(self, '$pair_keyword', function $$pair_keyword(key_t, value) {
        var $a, $b, self = this, key_map = nil, pair_map = nil, key = nil;

        
        $b = self.$pair_keyword_map(key_t, value), $a = $to_ary($b), (key_map = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$n("sym", [self.$value(key_t).$to_sym()], key_map);
        return self.$n("pair", [key, value], pair_map);
      }, 2);
      
      $def(self, '$pair_quoted', function $$pair_quoted(begin_t, parts, end_t, value) {
        var $a, $b, self = this, pair_map = nil, key = nil;

        
        $b = self.$pair_quoted_map(begin_t, end_t, value), $a = $to_ary($b), (end_t = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$symbol_compose(begin_t, parts, end_t);
        return self.$n("pair", [key, value], pair_map);
      }, 4);
      
      $def(self, '$pair_label', function $$pair_label(key_t) {
        var self = this, key_l = nil, value_l = nil, label = nil, value = nil;

        
        key_l = self.$loc(key_t);
        value_l = key_l.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        label = self.$value(key_t);
        value = ($truthy(label['$=~'](/^[[:lower:]]/)) ? (self.$n("ident", [label.$to_sym()], $$$($$$($$('Source'), 'Map'), 'Variable').$new(value_l))) : (self.$n("const", [nil, label.$to_sym()], $$$($$$($$('Source'), 'Map'), 'Constant').$new(nil, value_l, value_l))));
        return self.$pair_keyword(key_t, self.$accessible(value));
      }, 1);
      
      $def(self, '$kwsplat', function $$kwsplat(dstar_t, arg) {
        var self = this;

        return self.$n("kwsplat", [arg], self.$unary_op_map(dstar_t, arg))
      }, 2);
      
      $def(self, '$associate', function $$associate(begin_t, pairs, end_t) {
        var self = this;

        
        $send((0), 'upto', [$rb_minus(pairs.$length(), 1)], function $$7(i){var self = $$7.$$s == null ? this : $$7.$$s;

          
          
          if (i == null) i = nil;;
          return $send($rb_plus(i, 1), 'upto', [$rb_minus(pairs.$length(), 1)], function $$8(j){var $a, self = $$8.$$s == null ? this : $$8.$$s, key1 = nil, key2 = nil, do_warn = nil, $ret_or_1 = nil;
            if (self.parser == null) self.parser = nil;

            
            
            if (j == null) j = nil;;
            $a = [].concat($to_a(pairs['$[]'](i))), (key1 = ($a[0] == null ? nil : $a[0])), $a;
            $a = [].concat($to_a(pairs['$[]'](j))), (key2 = ($a[0] == null ? nil : $a[0])), $a;
            do_warn = false;
            if (($eqeqeq("sym", ($ret_or_1 = key1.$type())) || (($eqeqeq("str", $ret_or_1) || (($eqeqeq("int", $ret_or_1) || ($eqeqeq("float", $ret_or_1)))))))) {
              if ($eqeq(key1, key2)) {
                do_warn = true
              }
            } else if (($eqeqeq("rational", $ret_or_1) || (($eqeqeq("complex", $ret_or_1) || ($eqeqeq("regexp", $ret_or_1)))))) {
              if (($truthy($rb_ge(self.parser.$version(), 31)) && ($eqeq(key1, key2)))) {
                do_warn = true
              }
            } else {
              nil
            };
            if ($truthy(do_warn)) {
              return self.$diagnostic("warning", "duplicate_hash_key", nil, key2.$loc().$expression())
            } else {
              return nil
            };}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
        return self.$n("hash", [].concat($to_a(pairs)), self.$collection_map(begin_t, pairs, end_t));
      }, 3);
      
      $def(self, '$range_inclusive', function $$range_inclusive(lhs, dot2_t, rhs) {
        var self = this;

        return self.$n("irange", [lhs, rhs], self.$range_map(lhs, dot2_t, rhs))
      }, 3);
      
      $def(self, '$range_exclusive', function $$range_exclusive(lhs, dot3_t, rhs) {
        var self = this;

        return self.$n("erange", [lhs, rhs], self.$range_map(lhs, dot3_t, rhs))
      }, 3);
      
      $def(self, '$self', function $$self(token) {
        var self = this;

        return self.$n0("self", self.$token_map(token))
      }, 1);
      
      $def(self, '$ident', function $$ident(token) {
        var self = this;

        return self.$n("ident", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, 1);
      
      $def(self, '$ivar', function $$ivar(token) {
        var self = this;

        return self.$n("ivar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, 1);
      
      $def(self, '$gvar', function $$gvar(token) {
        var self = this;

        return self.$n("gvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, 1);
      
      $def(self, '$cvar', function $$cvar(token) {
        var self = this;

        return self.$n("cvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, 1);
      
      $def(self, '$back_ref', function $$back_ref(token) {
        var self = this;

        return self.$n("back_ref", [self.$value(token).$to_sym()], self.$token_map(token))
      }, 1);
      
      $def(self, '$nth_ref', function $$nth_ref(token) {
        var self = this;

        return self.$n("nth_ref", [self.$value(token)], self.$token_map(token))
      }, 1);
      
      $def(self, '$accessible', function $$accessible(node) {
        var $a, self = this, $ret_or_1 = nil, name = nil;

        if ($eqeqeq("__FILE__", ($ret_or_1 = node.$type()))) {
          if ($truthy(self.emit_file_line_as_literals)) {
            return self.$n("str", [node.$loc().$expression().$source_buffer().$name()], node.$loc().$dup())
          } else {
            return node
          }
        } else if ($eqeqeq("__LINE__", $ret_or_1)) {
          if ($truthy(self.emit_file_line_as_literals)) {
            return self.$n("int", [node.$loc().$expression().$line()], node.$loc().$dup())
          } else {
            return node
          }
        } else if ($eqeqeq("__ENCODING__", $ret_or_1)) {
          if ($not(self.$class().$emit_encoding())) {
            return self.$n("const", [self.$n("const", [nil, "Encoding"], nil), "UTF_8"], node.$loc().$dup())
          } else {
            return node
          }
        } else if ($eqeqeq("ident", $ret_or_1)) {
          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
          if ($truthy($send(["?", "!"], 'any?', [], function $$9(c){
            
            
            if (c == null) c = nil;;
            return name.$to_s()['$end_with?'](c);}, 1))) {
            self.$diagnostic("error", "invalid_id_to_get", $hash2(["identifier"], {"identifier": name.$to_s()}), node.$loc().$expression())
          };
          if (($truthy($rb_ge(self.parser.$version(), 27)) && ($truthy(self.parser.$try_declare_numparam(node))))) {
            return node.$updated("lvar")
          };
          if (!$truthy(self.parser.$static_env()['$declared?'](name))) {
            return self.$n("send", [nil, name], self.$var_send_map(node))
          };
          if ($eqeq(name.$to_s(), self.$parser().$current_arg_stack().$top())) {
            self.$diagnostic("error", "circular_argument_reference", $hash2(["var_name"], {"var_name": name.$to_s()}), node.$loc().$expression())
          };
          return node.$updated("lvar");
        } else {
          return node
        }
      }, 1);
      
      $def(self, '$const', function $Default_const$10(name_t) {
        var self = this;

        return self.$n("const", [nil, self.$value(name_t).$to_sym()], self.$constant_map(nil, nil, name_t))
      }, 1);
      
      $def(self, '$const_global', function $$const_global(t_colon3, name_t) {
        var self = this, cbase = nil;

        
        cbase = self.$n0("cbase", self.$token_map(t_colon3));
        return self.$n("const", [cbase, self.$value(name_t).$to_sym()], self.$constant_map(cbase, t_colon3, name_t));
      }, 2);
      
      $def(self, '$const_fetch', function $$const_fetch(scope, t_colon2, name_t) {
        var self = this;

        return self.$n("const", [scope, self.$value(name_t).$to_sym()], self.$constant_map(scope, t_colon2, name_t))
      }, 3);
      
      $def(self, '$__ENCODING__', function $$__ENCODING__(__ENCODING__t) {
        var self = this;

        return self.$n0("__ENCODING__", self.$token_map(__ENCODING__t))
      }, 1);
      
      $def(self, '$assignable', function $$assignable(node) {
        var $a, self = this, $ret_or_1 = nil, name = nil, var_name = nil, name_loc = nil;

        if ($eqeqeq("cvar", ($ret_or_1 = node.$type()))) {
          return node.$updated("cvasgn")
        } else if ($eqeqeq("ivar", $ret_or_1)) {
          return node.$updated("ivasgn")
        } else if ($eqeqeq("gvar", $ret_or_1)) {
          return node.$updated("gvasgn")
        } else if ($eqeqeq("const", $ret_or_1)) {
          
          if (!$truthy(self.parser.$context()['$dynamic_const_definition_allowed?']())) {
            self.$diagnostic("error", "dynamic_const", nil, node.$loc().$expression())
          };
          return node.$updated("casgn");
        } else if ($eqeqeq("ident", $ret_or_1)) {
          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
          var_name = node.$children()['$[]'](0).$to_s();
          name_loc = node.$loc().$expression();
          self.$check_assignment_to_numparam(var_name, name_loc);
          self.$check_reserved_for_numparam(var_name, name_loc);
          self.parser.$static_env().$declare(name);
          return node.$updated("lvasgn");
        } else if ($eqeqeq("match_var", $ret_or_1)) {
          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
          var_name = node.$children()['$[]'](0).$to_s();
          name_loc = node.$loc().$expression();
          self.$check_assignment_to_numparam(var_name, name_loc);
          self.$check_reserved_for_numparam(var_name, name_loc);
          return node;
        } else if (($eqeqeq("nil", $ret_or_1) || (($eqeqeq("self", $ret_or_1) || (($eqeqeq("true", $ret_or_1) || (($eqeqeq("false", $ret_or_1) || (($eqeqeq("__FILE__", $ret_or_1) || (($eqeqeq("__LINE__", $ret_or_1) || ($eqeqeq("__ENCODING__", $ret_or_1)))))))))))))) {
          return self.$diagnostic("error", "invalid_assignment", nil, node.$loc().$expression())
        } else if (($eqeqeq("back_ref", $ret_or_1) || ($eqeqeq("nth_ref", $ret_or_1)))) {
          return self.$diagnostic("error", "backref_assignment", nil, node.$loc().$expression())
        } else {
          return nil
        }
      }, 1);
      
      $def(self, '$const_op_assignable', function $$const_op_assignable(node) {
        
        return node.$updated("casgn")
      }, 1);
      
      $def(self, '$assign', function $$assign(lhs, eql_t, rhs) {
        var self = this;

        return lhs['$<<'](rhs).$updated(nil, nil, $hash2(["location"], {"location": lhs.$loc().$with_operator(self.$loc(eql_t)).$with_expression(self.$join_exprs(lhs, rhs))}))
      }, 3);
      
      $def(self, '$op_assign', function $$op_assign(lhs, op_t, rhs) {
        var self = this, $ret_or_1 = nil, operator = nil, source_map = nil, $ret_or_2 = nil;

        if (($eqeqeq("gvasgn", ($ret_or_1 = lhs.$type())) || (($eqeqeq("ivasgn", $ret_or_1) || (($eqeqeq("lvasgn", $ret_or_1) || (($eqeqeq("cvasgn", $ret_or_1) || (($eqeqeq("casgn", $ret_or_1) || (($eqeqeq("send", $ret_or_1) || (($eqeqeq("csend", $ret_or_1) || ($eqeqeq("index", $ret_or_1)))))))))))))))) {
          
          operator = self.$value(op_t)['$[]']($range(0, -1, false)).$to_sym();
          source_map = lhs.$loc().$with_operator(self.$loc(op_t)).$with_expression(self.$join_exprs(lhs, rhs));
          if ($eqeq(lhs.$type(), "index")) {
            lhs = lhs.$updated("indexasgn")
          };
          if ($eqeqeq("&&", ($ret_or_2 = operator))) {
            return self.$n("and_asgn", [lhs, rhs], source_map)
          } else if ($eqeqeq("||", $ret_or_2)) {
            return self.$n("or_asgn", [lhs, rhs], source_map)
          } else {
            return self.$n("op_asgn", [lhs, operator, rhs], source_map)
          };
        } else if (($eqeqeq("back_ref", $ret_or_1) || ($eqeqeq("nth_ref", $ret_or_1)))) {
          return self.$diagnostic("error", "backref_assignment", nil, lhs.$loc().$expression())
        } else {
          return nil
        }
      }, 3);
      
      $def(self, '$multi_lhs', function $$multi_lhs(begin_t, items, end_t) {
        var self = this;

        return self.$n("mlhs", [].concat($to_a(items)), self.$collection_map(begin_t, items, end_t))
      }, 3);
      
      $def(self, '$multi_assign', function $$multi_assign(lhs, eql_t, rhs) {
        var self = this;

        return self.$n("masgn", [lhs, rhs], self.$binary_op_map(lhs, eql_t, rhs))
      }, 3);
      
      $def(self, '$def_class', function $$def_class(class_t, name, lt_t, superclass, body, end_t) {
        var self = this;

        return self.$n("class", [name, superclass, body], self.$module_definition_map(class_t, name, lt_t, end_t))
      }, 6);
      
      $def(self, '$def_sclass', function $$def_sclass(class_t, lshft_t, expr, body, end_t) {
        var self = this;

        return self.$n("sclass", [expr, body], self.$module_definition_map(class_t, nil, lshft_t, end_t))
      }, 5);
      
      $def(self, '$def_module', function $$def_module(module_t, name, body, end_t) {
        var self = this;

        return self.$n("module", [name, body], self.$module_definition_map(module_t, name, nil, end_t))
      }, 4);
      
      $def(self, '$def_method', function $$def_method(def_t, name_t, args, body, end_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("def", [self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, nil, name_t, end_t));
      }, 5);
      
      $def(self, '$def_endless_method', function $$def_endless_method(def_t, name_t, args, assignment_t, body) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("def", [self.$value(name_t).$to_sym(), args, body], self.$endless_definition_map(def_t, nil, name_t, assignment_t, body));
      }, 5);
      
      $def(self, '$def_singleton', function $$def_singleton(def_t, definee, dot_t, name_t, args, body, end_t) {
        var self = this;

        
        self.$validate_definee(definee);
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("defs", [definee, self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, dot_t, name_t, end_t));
      }, 7);
      
      $def(self, '$def_endless_singleton', function $$def_endless_singleton(def_t, definee, dot_t, name_t, args, assignment_t, body) {
        var self = this;

        
        self.$validate_definee(definee);
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("defs", [definee, self.$value(name_t).$to_sym(), args, body], self.$endless_definition_map(def_t, dot_t, name_t, assignment_t, body));
      }, 7);
      
      $def(self, '$undef_method', function $$undef_method(undef_t, names) {
        var self = this;

        return self.$n("undef", [].concat($to_a(names)), self.$keyword_map(undef_t, nil, names, nil))
      }, 2);
      
      $def(self, '$alias', function $$alias(alias_t, to, from) {
        var self = this;

        return self.$n("alias", [to, from], self.$keyword_map(alias_t, nil, [to, from], nil))
      }, 3);
      
      $def(self, '$args', function $$args(begin_t, args, end_t, check_args) {
        var self = this, map = nil;

        
        
        if (check_args == null) check_args = true;;
        if ($truthy(check_args)) {
          args = self.$check_duplicate_args(args)
        };
        self.$validate_no_forward_arg_after_restarg(args);
        map = self.$collection_map(begin_t, args, end_t);
        if ((($not(self.$class().$emit_forward_arg()) && ($eqeq(args.$length(), 1))) && ($eqeq(args['$[]'](0).$type(), "forward_arg")))) {
          return self.$n("forward_args", [], map)
        } else {
          return self.$n("args", args, map)
        };
      }, -4);
      
      $def(self, '$numargs', function $$numargs(max_numparam) {
        var self = this;

        return self.$n("numargs", [max_numparam], nil)
      }, 1);
      
      $def(self, '$forward_only_args', function $$forward_only_args(begin_t, dots_t, end_t) {
        var self = this, arg = nil;

        if ($truthy(self.$class().$emit_forward_arg())) {
          
          arg = self.$forward_arg(dots_t);
          return self.$n("args", [arg], self.$collection_map(begin_t, [arg], end_t));
        } else {
          return self.$n("forward_args", [], self.$collection_map(begin_t, self.$token_map(dots_t), end_t))
        }
      }, 3);
      
      $def(self, '$forward_arg', function $$forward_arg(dots_t) {
        var self = this;

        return self.$n("forward_arg", [], self.$token_map(dots_t))
      }, 1);
      
      $def(self, '$arg', function $$arg(name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("arg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t));
      }, 1);
      
      $def(self, '$optarg', function $$optarg(name_t, eql_t, value) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("optarg", [self.$value(name_t).$to_sym(), value], self.$variable_map(name_t).$with_operator(self.$loc(eql_t)).$with_expression(self.$loc(name_t).$join(value.$loc().$expression())));
      }, 3);
      
      $def(self, '$restarg', function $$restarg(star_t, name_t) {
        var self = this;

        
        
        if (name_t == null) name_t = nil;;
        if ($truthy(name_t)) {
          
          self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
          return self.$n("restarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(star_t, name_t));
        } else {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        };
      }, -2);
      
      $def(self, '$kwarg', function $$kwarg(name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("kwarg", [self.$value(name_t).$to_sym()], self.$kwarg_map(name_t));
      }, 1);
      
      $def(self, '$kwoptarg', function $$kwoptarg(name_t, value) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("kwoptarg", [self.$value(name_t).$to_sym(), value], self.$kwarg_map(name_t, value));
      }, 2);
      
      $def(self, '$kwrestarg', function $$kwrestarg(dstar_t, name_t) {
        var self = this;

        
        
        if (name_t == null) name_t = nil;;
        if ($truthy(name_t)) {
          
          self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
          return self.$n("kwrestarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(dstar_t, name_t));
        } else {
          return self.$n0("kwrestarg", self.$arg_prefix_map(dstar_t))
        };
      }, -2);
      
      $def(self, '$kwnilarg', function $$kwnilarg(dstar_t, nil_t) {
        var self = this;

        return self.$n0("kwnilarg", self.$arg_prefix_map(dstar_t, nil_t))
      }, 2);
      
      $def(self, '$shadowarg', function $$shadowarg(name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("shadowarg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t));
      }, 1);
      
      $def(self, '$blockarg', function $$blockarg(amper_t, name_t) {
        var self = this, arg_name = nil;

        
        if ($not(name_t['$nil?']())) {
          self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t))
        };
        arg_name = ($truthy(name_t) ? (self.$value(name_t).$to_sym()) : (nil));
        return self.$n("blockarg", [arg_name], self.$arg_prefix_map(amper_t, name_t));
      }, 2);
      
      $def(self, '$procarg0', function $$procarg0(arg) {
        var self = this;

        if ($truthy(self.$class().$emit_procarg0())) {
          if (($eqeq(arg.$type(), "arg") && ($truthy(self.$class().$emit_arg_inside_procarg0())))) {
            return self.$n("procarg0", [arg], $$$($$$($$('Source'), 'Map'), 'Collection').$new(nil, nil, arg.$location().$expression()))
          } else {
            return arg.$updated("procarg0")
          }
        } else {
          return arg
        }
      }, 1);
      
      $def(self, '$arg_expr', function $$arg_expr(expr) {
        var self = this;

        if ($eqeq(expr.$type(), "lvasgn")) {
          return expr.$updated("arg")
        } else {
          return self.$n("arg_expr", [expr], expr.$loc().$dup())
        }
      }, 1);
      
      $def(self, '$restarg_expr', function $$restarg_expr(star_t, expr) {
        var self = this;

        
        
        if (expr == null) expr = nil;;
        if ($truthy(expr['$nil?']())) {
          return self.$n0("restarg", self.$token_map(star_t))
        } else if ($eqeq(expr.$type(), "lvasgn")) {
          return expr.$updated("restarg")
        } else {
          return self.$n("restarg_expr", [expr], expr.$loc().$dup())
        };
      }, -2);
      
      $def(self, '$blockarg_expr', function $$blockarg_expr(amper_t, expr) {
        var self = this;

        if ($eqeq(expr.$type(), "lvasgn")) {
          return expr.$updated("blockarg")
        } else {
          return self.$n("blockarg_expr", [expr], expr.$loc().$dup())
        }
      }, 2);
      
      $def(self, '$objc_kwarg', function $$objc_kwarg(kwname_t, assoc_t, name_t) {
        var self = this, kwname_l = nil, operator_l = nil;

        
        kwname_l = self.$loc(kwname_t);
        if ($truthy(assoc_t['$nil?']())) {
          
          kwname_l = kwname_l.$resize($rb_minus(kwname_l.$size(), 1));
          operator_l = kwname_l.$end().$resize(1);
        } else {
          operator_l = self.$loc(assoc_t)
        };
        return self.$n("objc_kwarg", [self.$value(kwname_t).$to_sym(), self.$value(name_t).$to_sym()], $$$($$$($$('Source'), 'Map'), 'ObjcKwarg').$new(kwname_l, operator_l, self.$loc(name_t), kwname_l.$join(self.$loc(name_t))));
      }, 3);
      
      $def(self, '$objc_restarg', function $$objc_restarg(star_t, name) {
        var self = this;

        
        
        if (name == null) name = nil;;
        if ($truthy(name['$nil?']())) {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        } else if ($eqeq(name.$type(), "arg")) {
          return name.$updated("restarg", nil, $hash2(["location"], {"location": name.$loc().$with_operator(self.$loc(star_t))}))
        } else {
          return self.$n("objc_restarg", [name], self.$unary_op_map(star_t, name))
        };
      }, -2);
      
      $def(self, '$call_type_for_dot', function $$call_type_for_dot(dot_t) {
        var self = this;

        if (($not(dot_t['$nil?']()) && ($eqeq(self.$value(dot_t), "anddot")))) {
          return "csend"
        } else {
          return "send"
        }
      }, 1);
      
      $def(self, '$forwarded_args', function $$forwarded_args(dots_t) {
        var self = this;

        return self.$n("forwarded_args", [], self.$token_map(dots_t))
      }, 1);
      
      $def(self, '$call_method', function $$call_method(receiver, dot_t, selector_t, lparen_t, args, rparen_t) {
        var self = this, type = nil;

        
        
        if (lparen_t == null) lparen_t = nil;;
        
        if (args == null) args = [];;
        
        if (rparen_t == null) rparen_t = nil;;
        type = self.$call_type_for_dot(dot_t);
        if ($truthy(self.$class().$emit_kwargs())) {
          self.$rewrite_hash_args_to_kwargs(args)
        };
        if ($truthy(selector_t['$nil?']())) {
          return self.$n(type, [receiver, "call"].concat($to_a(args)), self.$send_map(receiver, dot_t, nil, lparen_t, args, rparen_t))
        } else {
          return self.$n(type, [receiver, self.$value(selector_t).$to_sym()].concat($to_a(args)), self.$send_map(receiver, dot_t, selector_t, lparen_t, args, rparen_t))
        };
      }, -4);
      
      $def(self, '$call_lambda', function $$call_lambda(lambda_t) {
        var self = this;

        if ($truthy(self.$class().$emit_lambda())) {
          return self.$n0("lambda", self.$expr_map(self.$loc(lambda_t)))
        } else {
          return self.$n("send", [nil, "lambda"], self.$send_map(nil, nil, lambda_t))
        }
      }, 1);
      
      $def(self, '$block', function $$block(method_call, begin_t, args, body, end_t) {
        var $a, self = this, _receiver = nil, _selector = nil, call_args = nil, last_arg = nil, block_type = nil, actual_send = nil, block = nil;

        
        $a = [].concat($to_a(method_call)), (_receiver = ($a[0] == null ? nil : $a[0])), (_selector = ($a[1] == null ? nil : $a[1])), (call_args = $slice.call($a, 2)), $a;
        if ($eqeq(method_call.$type(), "yield")) {
          self.$diagnostic("error", "block_given_to_yield", nil, method_call.$loc().$keyword(), [self.$loc(begin_t)])
        };
        last_arg = call_args.$last();
        if (($truthy(last_arg) && (($eqeq(last_arg.$type(), "block_pass") || ($eqeq(last_arg.$type(), "forwarded_args")))))) {
          self.$diagnostic("error", "block_and_blockarg", nil, last_arg.$loc().$expression(), [self.$loc(begin_t)])
        };
        if ($eqeq(args.$type(), "numargs")) {
          
          block_type = "numblock";
          args = args.$children()['$[]'](0);
        } else {
          block_type = "block"
        };
        if ($truthy(["send", "csend", "index", "super", "zsuper", "lambda"]['$include?'](method_call.$type()))) {
          return self.$n(block_type, [method_call, args, body], self.$block_map(method_call.$loc().$expression(), begin_t, end_t))
        } else {
          
          $a = [].concat($to_a(method_call)), (actual_send = ($a[0] == null ? nil : $a[0])), $a;
          block = self.$n(block_type, [actual_send, args, body], self.$block_map(actual_send.$loc().$expression(), begin_t, end_t));
          return self.$n(method_call.$type(), [block], method_call.$loc().$with_expression(self.$join_exprs(method_call, block)));
        };
      }, 5);
      
      $def(self, '$block_pass', function $$block_pass(amper_t, arg) {
        var self = this;

        return self.$n("block_pass", [arg], self.$unary_op_map(amper_t, arg))
      }, 2);
      
      $def(self, '$objc_varargs', function $$objc_varargs(pair, rest_of_varargs) {
        var $a, self = this, value = nil, first_vararg = nil, vararg_array = nil;

        
        $a = [].concat($to_a(pair)), (value = ($a[0] == null ? nil : $a[0])), (first_vararg = ($a[1] == null ? nil : $a[1])), $a;
        vararg_array = self.$array(nil, [first_vararg].concat($to_a(rest_of_varargs)), nil).$updated("objc_varargs");
        return pair.$updated(nil, [value, vararg_array], $hash2(["location"], {"location": pair.$loc().$with_expression(pair.$loc().$expression().$join(vararg_array.$loc().$expression()))}));
      }, 2);
      
      $def(self, '$attr_asgn', function $$attr_asgn(receiver, dot_t, selector_t) {
        var self = this, method_name = nil, type = nil;

        
        method_name = $rb_plus(self.$value(selector_t), "=").$to_sym();
        type = self.$call_type_for_dot(dot_t);
        return self.$n(type, [receiver, method_name], self.$send_map(receiver, dot_t, selector_t));
      }, 3);
      
      $def(self, '$index', function $$index(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        
        if ($truthy(self.$class().$emit_kwargs())) {
          self.$rewrite_hash_args_to_kwargs(indexes)
        };
        if ($truthy(self.$class().$emit_index())) {
          return self.$n("index", [receiver].concat($to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]"].concat($to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        };
      }, 4);
      
      $def(self, '$index_asgn', function $$index_asgn(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        if ($truthy(self.$class().$emit_index())) {
          return self.$n("indexasgn", [receiver].concat($to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]="].concat($to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        }
      }, 4);
      
      $def(self, '$binary_op', function $$binary_op(receiver, operator_t, arg) {
        var self = this, source_map = nil, operator = nil, method_call = nil;

        
        source_map = self.$send_binary_op_map(receiver, operator_t, arg);
        if ($eqeq(self.parser.$version(), 18)) {
          
          operator = self.$value(operator_t);
          if ($eqeq(operator, "!=")) {
            method_call = self.$n("send", [receiver, "==", arg], source_map)
          } else if ($eqeq(operator, "!~")) {
            method_call = self.$n("send", [receiver, "=~", arg], source_map)
          };
          if ($truthy(["!=", "!~"]['$include?'](operator))) {
            return self.$n("not", [method_call], self.$expr_map(source_map.$expression()))
          };
        };
        return self.$n("send", [receiver, self.$value(operator_t).$to_sym(), arg], source_map);
      }, 3);
      
      $def(self, '$match_op', function $$match_op(receiver, match_t, arg) {
        var self = this, source_map = nil, regexp = nil;

        
        source_map = self.$send_binary_op_map(receiver, match_t, arg);
        if ($truthy((regexp = self.$static_regexp_node(receiver)))) {
          
          $send(regexp.$names(), 'each', [], function $$11(name){var self = $$11.$$s == null ? this : $$11.$$s;
            if (self.parser == null) self.parser = nil;

            
            
            if (name == null) name = nil;;
            return self.parser.$static_env().$declare(name);}, {$$arity: 1, $$s: self});
          return self.$n("match_with_lvasgn", [receiver, arg], source_map);
        } else {
          return self.$n("send", [receiver, "=~", arg], source_map)
        };
      }, 3);
      
      $def(self, '$unary_op', function $$unary_op(op_t, receiver) {
        var self = this, $ret_or_1 = nil, method = nil;

        
        if (($eqeqeq("+", ($ret_or_1 = self.$value(op_t))) || ($eqeqeq("-", $ret_or_1)))) {
          method = $rb_plus(self.$value(op_t), "@")
        } else {
          method = self.$value(op_t)
        };
        return self.$n("send", [receiver, method.$to_sym()], self.$send_unary_op_map(op_t, receiver));
      }, 2);
      
      $def(self, '$not_op', function $$not_op(not_t, begin_t, receiver, end_t) {
        var self = this, nil_node = nil;

        
        
        if (begin_t == null) begin_t = nil;;
        
        if (receiver == null) receiver = nil;;
        
        if (end_t == null) end_t = nil;;
        if ($eqeq(self.parser.$version(), 18)) {
          return self.$n("not", [self.$check_condition(receiver)], self.$unary_op_map(not_t, receiver))
        } else if ($truthy(receiver['$nil?']())) {
          
          nil_node = self.$n0("begin", self.$collection_map(begin_t, nil, end_t));
          return self.$n("send", [nil_node, "!"], self.$send_unary_op_map(not_t, nil_node));
        } else {
          return self.$n("send", [self.$check_condition(receiver), "!"], self.$send_map(nil, nil, not_t, begin_t, [receiver], end_t))
        };
      }, -2);
      
      $def(self, '$logical_op', function $$logical_op(type, lhs, op_t, rhs) {
        var self = this;

        return self.$n(type, [lhs, rhs], self.$binary_op_map(lhs, op_t, rhs))
      }, 4);
      
      $def(self, '$condition', function $$condition(cond_t, cond, then_t, if_true, else_t, if_false, end_t) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$condition_map(cond_t, cond, then_t, if_true, else_t, if_false, end_t))
      }, 7);
      
      $def(self, '$condition_mod', function $$condition_mod(if_true, if_false, cond_t, cond) {
        var self = this, $ret_or_1 = nil;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$keyword_mod_map(($truthy(($ret_or_1 = if_true)) ? ($ret_or_1) : (if_false)), cond_t, cond))
      }, 4);
      
      $def(self, '$ternary', function $$ternary(cond, question_t, if_true, colon_t, if_false) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$ternary_map(cond, question_t, if_true, colon_t, if_false))
      }, 5);
      
      $def(self, '$when', function $$when(when_t, patterns, then_t, body) {
        var self = this, children = nil;

        
        children = patterns['$<<'](body);
        return self.$n("when", children, self.$keyword_map(when_t, then_t, children, nil));
      }, 4);
      
      $def(self, '$case', function $Default_case$12(case_t, expr, when_bodies, else_t, else_body, end_t) {
        var self = this;

        return self.$n("case", [expr].concat($to_a(when_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t))
      }, 6);
      
      $def(self, '$loop', function $$loop(type, keyword_t, cond, do_t, body, end_t) {
        var self = this;

        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_map(keyword_t, do_t, nil, end_t))
      }, 6);
      
      $def(self, '$loop_mod', function $$loop_mod(type, body, keyword_t, cond) {
        var self = this;

        
        if ($eqeq(body.$type(), "kwbegin")) {
          type = "" + (type) + "_post"
        };
        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_mod_map(body, keyword_t, cond));
      }, 4);
      
      $def(self, '$for', function $Default_for$13(for_t, iterator, in_t, iteratee, do_t, body, end_t) {
        var self = this;

        return self.$n("for", [iterator, iteratee, body], self.$for_map(for_t, in_t, do_t, end_t))
      }, 7);
      
      $def(self, '$keyword_cmd', function $$keyword_cmd(type, keyword_t, lparen_t, args, rparen_t) {
        var self = this, last_arg = nil;

        
        
        if (lparen_t == null) lparen_t = nil;;
        
        if (args == null) args = [];;
        
        if (rparen_t == null) rparen_t = nil;;
        if (($eqeq(type, "yield") && ($truthy($rb_gt(args.$count(), 0))))) {
          
          last_arg = args.$last();
          if ($eqeq(last_arg.$type(), "block_pass")) {
            self.$diagnostic("error", "block_given_to_yield", nil, self.$loc(keyword_t), [last_arg.$loc().$expression()])
          };
        };
        if (($truthy(["yield", "super"]['$include?'](type)) && ($truthy(self.$class().$emit_kwargs())))) {
          self.$rewrite_hash_args_to_kwargs(args)
        };
        return self.$n(type, args, self.$keyword_map(keyword_t, lparen_t, args, rparen_t));
      }, -3);
      
      $def(self, '$preexe', function $$preexe(preexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("preexe", [compstmt], self.$keyword_map(preexe_t, lbrace_t, [], rbrace_t))
      }, 4);
      
      $def(self, '$postexe', function $$postexe(postexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("postexe", [compstmt], self.$keyword_map(postexe_t, lbrace_t, [], rbrace_t))
      }, 4);
      
      $def(self, '$rescue_body', function $$rescue_body(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt) {
        var self = this;

        return self.$n("resbody", [exc_list, exc_var, compound_stmt], self.$rescue_body_map(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt))
      }, 6);
      
      $def(self, '$begin_body', function $$begin_body(compound_stmt, rescue_bodies, else_t, else_, ensure_t, ensure_) {
        var self = this, statements = nil;

        
        
        if (rescue_bodies == null) rescue_bodies = [];;
        
        if (else_t == null) else_t = nil;;
        
        if (else_ == null) else_ = nil;;
        
        if (ensure_t == null) ensure_t = nil;;
        
        if (ensure_ == null) ensure_ = nil;;
        if ($truthy(rescue_bodies['$any?']())) {
          if ($truthy(else_t)) {
            compound_stmt = self.$n("rescue", [compound_stmt].concat($to_a($rb_plus(rescue_bodies, [else_]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, else_t, else_))
          } else {
            compound_stmt = self.$n("rescue", [compound_stmt].concat($to_a($rb_plus(rescue_bodies, [nil]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, nil, nil))
          }
        } else if ($truthy(else_t)) {
          
          statements = [];
          if ($not(compound_stmt['$nil?']())) {
            if ($eqeq(compound_stmt.$type(), "begin")) {
              statements = $rb_plus(statements, compound_stmt.$children())
            } else {
              statements.$push(compound_stmt)
            }
          };
          statements.$push(self.$n("begin", [else_], self.$collection_map(else_t, [else_], nil)));
          compound_stmt = self.$n("begin", statements, self.$collection_map(nil, statements, nil));
        };
        if ($truthy(ensure_t)) {
          compound_stmt = self.$n("ensure", [compound_stmt, ensure_], self.$eh_keyword_map(compound_stmt, ensure_t, [ensure_], nil, nil))
        };
        return compound_stmt;
      }, -2);
      
      $def(self, '$compstmt', function $$compstmt(statements) {
        var self = this;

        if ($truthy(statements['$none?']())) {
          return nil
        } else if ($truthy(statements['$one?']())) {
          return statements.$first()
        } else {
          return self.$n("begin", statements, self.$collection_map(nil, statements, nil))
        }
      }, 1);
      
      $def(self, '$begin', function $$begin(begin_t, body, end_t) {
        var self = this;

        if ($truthy(body['$nil?']())) {
          return self.$n0("begin", self.$collection_map(begin_t, nil, end_t))
        } else if (($eqeq(body.$type(), "mlhs") || ((($eqeq(body.$type(), "begin") && ($truthy(body.$loc().$begin()['$nil?']()))) && ($truthy(body.$loc().$end()['$nil?']())))))) {
          return self.$n(body.$type(), body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("begin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, 3);
      
      $def(self, '$begin_keyword', function $$begin_keyword(begin_t, body, end_t) {
        var self = this;

        if ($truthy(body['$nil?']())) {
          return self.$n0("kwbegin", self.$collection_map(begin_t, nil, end_t))
        } else if ((($eqeq(body.$type(), "begin") && ($truthy(body.$loc().$begin()['$nil?']()))) && ($truthy(body.$loc().$end()['$nil?']())))) {
          return self.$n("kwbegin", body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("kwbegin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, 3);
      
      $def(self, '$case_match', function $$case_match(case_t, expr, in_bodies, else_t, else_body, end_t) {
        var self = this;

        
        if (($truthy(else_t) && ($not(else_body)))) {
          else_body = self.$n("empty_else", nil, self.$token_map(else_t))
        };
        return self.$n("case_match", [expr].concat($to_a(in_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t));
      }, 6);
      
      $def(self, '$in_match', function $$in_match(lhs, in_t, rhs) {
        var self = this;

        return self.$n("in_match", [lhs, rhs], self.$binary_op_map(lhs, in_t, rhs))
      }, 3);
      
      $def(self, '$match_pattern', function $$match_pattern(lhs, match_t, rhs) {
        var self = this;

        return self.$n("match_pattern", [lhs, rhs], self.$binary_op_map(lhs, match_t, rhs))
      }, 3);
      
      $def(self, '$match_pattern_p', function $$match_pattern_p(lhs, match_t, rhs) {
        var self = this;

        return self.$n("match_pattern_p", [lhs, rhs], self.$binary_op_map(lhs, match_t, rhs))
      }, 3);
      
      $def(self, '$in_pattern', function $$in_pattern(in_t, pattern, guard, then_t, body) {
        var self = this, children = nil;

        
        children = [pattern, guard, body];
        return self.$n("in_pattern", children, self.$keyword_map(in_t, then_t, children.$compact(), nil));
      }, 5);
      
      $def(self, '$if_guard', function $$if_guard(if_t, if_body) {
        var self = this;

        return self.$n("if_guard", [if_body], self.$guard_map(if_t, if_body))
      }, 2);
      
      $def(self, '$unless_guard', function $$unless_guard(unless_t, unless_body) {
        var self = this;

        return self.$n("unless_guard", [unless_body], self.$guard_map(unless_t, unless_body))
      }, 2);
      
      $def(self, '$match_var', function $$match_var(name_t) {
        var self = this, name = nil, name_l = nil;

        
        name = self.$value(name_t).$to_sym();
        name_l = self.$loc(name_t);
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        return self.$n("match_var", [name], self.$variable_map(name_t));
      }, 1);
      
      $def(self, '$match_hash_var', function $$match_hash_var(name_t) {
        var self = this, name = nil, expr_l = nil, name_l = nil;

        
        name = self.$value(name_t).$to_sym();
        expr_l = self.$loc(name_t);
        name_l = expr_l.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        return self.$n("match_var", [name], $$$($$$($$('Source'), 'Map'), 'Variable').$new(name_l, expr_l));
      }, 1);
      
      $def(self, '$match_hash_var_from_str', function $$match_hash_var_from_str(begin_t, strings, end_t) {
        var $a, self = this, string = nil, $ret_or_1 = nil, name = nil, name_l = nil, begin_l = nil, end_l = nil, expr_l = nil;

        
        if ($truthy($rb_gt(strings.$length(), 1))) {
          self.$diagnostic("error", "pm_interp_in_var_name", nil, self.$loc(begin_t).$join(self.$loc(end_t)))
        };
        string = strings['$[]'](0);
        if ($eqeqeq("str", ($ret_or_1 = string.$type()))) {
          
          $a = [].concat($to_a(string)), (name = ($a[0] == null ? nil : $a[0])), $a;
          name_l = string.$loc().$expression();
          self.$check_lvar_name(name, name_l);
          self.$check_duplicate_pattern_variable(name, name_l);
          self.parser.$static_env().$declare(name);
          if ($truthy((begin_l = string.$loc().$begin()))) {
            name_l = name_l.$adjust($hash2(["begin_pos"], {"begin_pos": begin_l.$length()}))
          };
          if ($truthy((end_l = string.$loc().$end()))) {
            name_l = name_l.$adjust($hash2(["end_pos"], {"end_pos": end_l.$length()['$-@']()}))
          };
          expr_l = self.$loc(begin_t).$join(string.$loc().$expression()).$join(self.$loc(end_t));
          return self.$n("match_var", [name.$to_sym()], $$$($$$($$('Source'), 'Map'), 'Variable').$new(name_l, expr_l));
        } else if ($eqeqeq("begin", $ret_or_1)) {
          return self.$match_hash_var_from_str(begin_t, string.$children(), end_t)
        } else {
          return self.$diagnostic("error", "pm_interp_in_var_name", nil, self.$loc(begin_t).$join(self.$loc(end_t)))
        };
      }, 3);
      
      $def(self, '$match_rest', function $$match_rest(star_t, name_t) {
        var self = this, name = nil;

        
        
        if (name_t == null) name_t = nil;;
        if ($truthy(name_t['$nil?']())) {
          return self.$n0("match_rest", self.$unary_op_map(star_t))
        } else {
          
          name = self.$match_var(name_t);
          return self.$n("match_rest", [name], self.$unary_op_map(star_t, name));
        };
      }, -2);
      
      $def(self, '$hash_pattern', function $$hash_pattern(lbrace_t, kwargs, rbrace_t) {
        var self = this, args = nil;

        
        args = self.$check_duplicate_args(kwargs);
        return self.$n("hash_pattern", args, self.$collection_map(lbrace_t, args, rbrace_t));
      }, 3);
      
      $def(self, '$array_pattern', function $$array_pattern(lbrack_t, elements, rbrack_t) {
        var self = this, trailing_comma = nil, node_elements = nil, node_type = nil;

        
        if ($truthy(elements['$nil?']())) {
          return self.$n("array_pattern", nil, self.$collection_map(lbrack_t, [], rbrack_t))
        };
        trailing_comma = false;
        node_elements = $send(elements, 'map', [], function $$14(element){
          
          
          if (element == null) element = nil;;
          if ($eqeq(element.$type(), "match_with_trailing_comma")) {
            
            trailing_comma = true;
            return element.$children().$first();
          } else {
            
            trailing_comma = false;
            return element;
          };}, 1);
        node_type = ($truthy(trailing_comma) ? ("array_pattern_with_tail") : ("array_pattern"));
        return self.$n(node_type, node_elements, self.$collection_map(lbrack_t, elements, rbrack_t));
      }, 3);
      
      $def(self, '$find_pattern', function $$find_pattern(lbrack_t, elements, rbrack_t) {
        var self = this;

        return self.$n("find_pattern", elements, self.$collection_map(lbrack_t, elements, rbrack_t))
      }, 3);
      
      $def(self, '$match_with_trailing_comma', function $$match_with_trailing_comma(match, comma_t) {
        var self = this;

        return self.$n("match_with_trailing_comma", [match], self.$expr_map(match.$loc().$expression().$join(self.$loc(comma_t))))
      }, 2);
      
      $def(self, '$const_pattern', function $$const_pattern(const$, ldelim_t, pattern, rdelim_t) {
        var self = this;

        return self.$n("const_pattern", [const$, pattern], $$$($$$($$('Source'), 'Map'), 'Collection').$new(self.$loc(ldelim_t), self.$loc(rdelim_t), const$.$loc().$expression().$join(self.$loc(rdelim_t))))
      }, 4);
      
      $def(self, '$pin', function $$pin(pin_t, var$) {
        var self = this;

        return self.$n("pin", [var$], self.$send_unary_op_map(pin_t, var$))
      }, 2);
      
      $def(self, '$match_alt', function $$match_alt(left, pipe_t, right) {
        var self = this, source_map = nil;

        
        source_map = self.$binary_op_map(left, pipe_t, right);
        return self.$n("match_alt", [left, right], source_map);
      }, 3);
      
      $def(self, '$match_as', function $$match_as(value, assoc_t, as) {
        var self = this, source_map = nil;

        
        source_map = self.$binary_op_map(value, assoc_t, as);
        return self.$n("match_as", [value, as], source_map);
      }, 3);
      
      $def(self, '$match_nil_pattern', function $$match_nil_pattern(dstar_t, nil_t) {
        var self = this;

        return self.$n0("match_nil_pattern", self.$arg_prefix_map(dstar_t, nil_t))
      }, 2);
      
      $def(self, '$match_pair', function $$match_pair(label_type, label, value) {
        var $a, $b, self = this, begin_t = nil, parts = nil, end_t = nil, label_loc = nil, var_name = nil;

        if ($eqeq(label_type, "label")) {
          
          self.$check_duplicate_pattern_key(label['$[]'](0), label['$[]'](1));
          return self.$pair_keyword(label, value);
        } else {
          
          $b = label, $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (parts = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
          label_loc = self.$loc(begin_t).$join(self.$loc(end_t));
          if ($truthy((var_name = self.$static_string(parts)))) {
            self.$check_duplicate_pattern_key(var_name, label_loc)
          } else {
            self.$diagnostic("error", "pm_interp_in_var_name", nil, label_loc)
          };
          return self.$pair_quoted(begin_t, parts, end_t, value);
        }
      }, 3);
      
      $def(self, '$match_label', function $$match_label(label_type, label) {
        var $a, $b, self = this, begin_t = nil, strings = nil, end_t = nil;

        if ($eqeq(label_type, "label")) {
          return self.$match_hash_var(label)
        } else {
          
          $b = label, $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (strings = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
          return self.$match_hash_var_from_str(begin_t, strings, end_t);
        }
      }, 2);
      self.$private();
      
      $def(self, '$check_condition', function $$check_condition(cond) {
        var $a, self = this, $ret_or_1 = nil, lhs = nil, rhs = nil, type = nil, $ret_or_2 = nil;

        if ($eqeqeq("masgn", ($ret_or_1 = cond.$type()))) {
          if ($truthy($rb_le(self.parser.$version(), 23))) {
            return self.$diagnostic("error", "masgn_as_condition", nil, cond.$loc().$expression())
          } else {
            return cond
          }
        } else if ($eqeqeq("begin", $ret_or_1)) {
          if ($eqeq(cond.$children().$count(), 1)) {
            return cond.$updated(nil, [self.$check_condition(cond.$children().$last())])
          } else {
            return cond
          }
        } else if (($eqeqeq("and", $ret_or_1) || (($eqeqeq("or", $ret_or_1) || (($eqeqeq("irange", $ret_or_1) || ($eqeqeq("erange", $ret_or_1)))))))) {
          
          $a = [].concat($to_a(cond)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          type = ($eqeqeq("irange", ($ret_or_2 = cond.$type())) ? ("iflipflop") : ($eqeqeq("erange", $ret_or_2) ? ("eflipflop") : (nil)));
          if (($truthy(["and", "or"]['$include?'](cond.$type())) && ($eqeq(self.parser.$version(), 18)))) {
            return cond
          } else {
            return cond.$updated(type, [self.$check_condition(lhs), self.$check_condition(rhs)])
          };
        } else if ($eqeqeq("regexp", $ret_or_1)) {
          return self.$n("match_current_line", [cond], self.$expr_map(cond.$loc().$expression()))
        } else {
          return cond
        }
      }, 1);
      
      $def(self, '$check_duplicate_args', function $$check_duplicate_args(args, map) {
        var self = this;

        
        
        if (map == null) map = $hash2([], {});;
        return $send(args, 'each', [], function $$15(this_arg){var self = $$15.$$s == null ? this : $$15.$$s, $ret_or_1 = nil;

          
          
          if (this_arg == null) this_arg = nil;;
          if (($eqeqeq("arg", ($ret_or_1 = this_arg.$type())) || (($eqeqeq("optarg", $ret_or_1) || (($eqeqeq("restarg", $ret_or_1) || (($eqeqeq("blockarg", $ret_or_1) || (($eqeqeq("kwarg", $ret_or_1) || (($eqeqeq("kwoptarg", $ret_or_1) || (($eqeqeq("kwrestarg", $ret_or_1) || ($eqeqeq("shadowarg", $ret_or_1)))))))))))))))) {
            return self.$check_duplicate_arg(this_arg, map)
          } else if ($eqeqeq("procarg0", $ret_or_1)) {
            if ($truthy(this_arg.$children()['$[]'](0)['$is_a?']($$('Symbol')))) {
              return self.$check_duplicate_arg(this_arg, map)
            } else {
              return self.$check_duplicate_args(this_arg.$children(), map)
            }
          } else if ($eqeqeq("mlhs", $ret_or_1)) {
            return self.$check_duplicate_args(this_arg.$children(), map)
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
      }, -2);
      
      $def(self, '$check_duplicate_arg', function $$check_duplicate_arg(this_arg, map) {
        var $a, self = this, this_name = nil, that_arg = nil, that_name = nil, $writer = nil;

        
        
        if (map == null) map = $hash2([], {});;
        $a = [].concat($to_a(this_arg)), (this_name = ($a[0] == null ? nil : $a[0])), $a;
        that_arg = map['$[]'](this_name);
        $a = [].concat($to_a(that_arg)), (that_name = ($a[0] == null ? nil : $a[0])), $a;
        if ($truthy(that_arg['$nil?']())) {
          
          $writer = [this_name, this_arg];
          $send(map, '[]=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(self['$arg_name_collides?'](this_name, that_name))) {
          return self.$diagnostic("error", "duplicate_argument", nil, this_arg.$loc().$name(), [that_arg.$loc().$name()])
        } else {
          return nil
        };
      }, -2);
      
      $def(self, '$validate_no_forward_arg_after_restarg', function $$validate_no_forward_arg_after_restarg(args) {
        var self = this, restarg = nil, forward_arg = nil;

        
        restarg = nil;
        forward_arg = nil;
        $send(args, 'each', [], function $$16(arg){var $ret_or_1 = nil;

          
          
          if (arg == null) arg = nil;;
          if ($eqeqeq("restarg", ($ret_or_1 = arg.$type()))) {
            return (restarg = arg)
          } else if ($eqeqeq("forward_arg", $ret_or_1)) {
            return (forward_arg = arg)
          } else {
            return nil
          };}, 1);
        if (($not(forward_arg['$nil?']()) && ($not(restarg['$nil?']())))) {
          return self.$diagnostic("error", "forward_arg_after_restarg", nil, forward_arg.$loc().$expression(), [restarg.$loc().$expression()])
        } else {
          return nil
        };
      }, 1);
      
      $def(self, '$check_assignment_to_numparam', function $$check_assignment_to_numparam(name, loc) {
        var self = this, assigning_to_numparam = nil, $ret_or_1 = nil, $ret_or_2 = nil;

        
        if ($truthy($rb_lt(self.parser.$version(), 27))) {
          return nil
        };
        assigning_to_numparam = ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.parser.$context()['$in_dynamic_block?']())) ? (name['$=~'](/^_([1-9])$/)) : ($ret_or_2)))) ? (self.parser.$max_numparam_stack()['$has_numparams?']()) : ($ret_or_1));
        if ($truthy(assigning_to_numparam)) {
          return self.$diagnostic("error", "cant_assign_to_numparam", $hash2(["name"], {"name": name}), loc)
        } else {
          return nil
        };
      }, 2);
      
      $def(self, '$check_reserved_for_numparam', function $$check_reserved_for_numparam(name, loc) {
        var self = this;

        
        if ($truthy($rb_lt(self.parser.$version(), 30))) {
          return nil
        };
        if ($truthy(name['$=~'](/^_([1-9])$/))) {
          return self.$diagnostic("error", "reserved_for_numparam", $hash2(["name"], {"name": name}), loc)
        } else {
          return nil
        };
      }, 2);
      
      $def(self, '$arg_name_collides?', function $Default_arg_name_collides$ques$17(this_name, that_name) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

        if ($eqeqeq(18, ($ret_or_1 = self.parser.$version()))) {
          return this_name['$=='](that_name)
        } else if ($eqeqeq(19, $ret_or_1)) {
          if ($truthy(($ret_or_2 = this_name['$!=']("_")))) {
            return this_name['$=='](that_name)
          } else {
            return $ret_or_2
          }
        } else if ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = this_name)) ? (this_name['$[]'](0)['$!=']("_")) : ($ret_or_3))))) {
          return this_name['$=='](that_name)
        } else {
          return $ret_or_2
        }
      }, 2);
      
      $def(self, '$check_lvar_name', function $$check_lvar_name(name, loc) {
        var self = this;

        if ($truthy(name['$=~'](/^[[[:lower:]]_][[[:alnum:]]_]*$/))) {
          return nil
        } else {
          return self.$diagnostic("error", "lvar_name", $hash2(["name"], {"name": name}), loc)
        }
      }, 2);
      
      $def(self, '$check_duplicate_pattern_variable', function $$check_duplicate_pattern_variable(name, loc) {
        var self = this;

        
        if ($truthy(name.$to_s()['$start_with?']("_"))) {
          return nil
        };
        if ($truthy(self.parser.$pattern_variables()['$declared?'](name))) {
          self.$diagnostic("error", "duplicate_variable_name", $hash2(["name"], {"name": name.$to_s()}), loc)
        };
        return self.parser.$pattern_variables().$declare(name);
      }, 2);
      
      $def(self, '$check_duplicate_pattern_key', function $$check_duplicate_pattern_key(name, loc) {
        var self = this;

        
        if ($truthy(self.parser.$pattern_hash_keys()['$declared?'](name))) {
          self.$diagnostic("error", "duplicate_pattern_key", $hash2(["name"], {"name": name.$to_s()}), loc)
        };
        return self.parser.$pattern_hash_keys().$declare(name);
      }, 2);
      
      $def(self, '$n', function $$n(type, children, source_map) {
        
        return $$$($$('AST'), 'Node').$new(type, children, $hash2(["location"], {"location": source_map}))
      }, 3);
      
      $def(self, '$n0', function $$n0(type, source_map) {
        var self = this;

        return self.$n(type, [], source_map)
      }, 2);
      
      $def(self, '$join_exprs', function $$join_exprs(left_expr, right_expr) {
        
        return left_expr.$loc().$expression().$join(right_expr.$loc().$expression())
      }, 2);
      
      $def(self, '$token_map', function $$token_map(token) {
        var self = this;

        return $$$($$('Source'), 'Map').$new(self.$loc(token))
      }, 1);
      
      $def(self, '$delimited_string_map', function $$delimited_string_map(string_t) {
        var self = this, str_range = nil, begin_l = nil, end_l = nil;

        
        str_range = self.$loc(string_t);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        end_l = str_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(str_range.$end_pos(), 1)}));
        return $$$($$$($$('Source'), 'Map'), 'Collection').$new(begin_l, end_l, self.$loc(string_t));
      }, 1);
      
      $def(self, '$prefix_string_map', function $$prefix_string_map(symbol) {
        var self = this, str_range = nil, begin_l = nil;

        
        str_range = self.$loc(symbol);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        return $$$($$$($$('Source'), 'Map'), 'Collection').$new(begin_l, nil, self.$loc(symbol));
      }, 1);
      
      $def(self, '$unquoted_map', function $$unquoted_map(token) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Collection').$new(nil, nil, self.$loc(token))
      }, 1);
      
      $def(self, '$pair_keyword_map', function $$pair_keyword_map(key_t, value_e) {
        var self = this, key_range = nil, key_l = nil, colon_l = nil;

        
        key_range = self.$loc(key_t);
        key_l = key_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        colon_l = key_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(key_range.$end_pos(), 1)}));
        return [$$$($$$($$('Source'), 'Map'), 'Collection').$new(nil, nil, key_l), $$$($$$($$('Source'), 'Map'), 'Operator').$new(colon_l, key_range.$join(value_e.$loc().$expression()))];
      }, 2);
      
      $def(self, '$pair_quoted_map', function $$pair_quoted_map(begin_t, end_t, value_e) {
        var self = this, end_l = nil, quote_l = nil, colon_l = nil;

        
        end_l = self.$loc(end_t);
        quote_l = end_l.$with($hash2(["begin_pos", "end_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 2), "end_pos": $rb_minus(end_l.$end_pos(), 1)}));
        colon_l = end_l.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 1)}));
        return [[self.$value(end_t), quote_l], $$$($$$($$('Source'), 'Map'), 'Operator').$new(colon_l, self.$loc(begin_t).$join(value_e.$loc().$expression()))];
      }, 3);
      
      $def(self, '$expr_map', function $$expr_map(loc) {
        
        return $$$($$('Source'), 'Map').$new(loc)
      }, 1);
      
      $def(self, '$collection_map', function $$collection_map(begin_t, parts, end_t) {
        var self = this, expr_l = nil;

        
        if (($truthy(begin_t['$nil?']()) || ($truthy(end_t['$nil?']())))) {
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else if ($not(begin_t['$nil?']())) {
            expr_l = self.$loc(begin_t)
          } else if ($not(end_t['$nil?']())) {
            expr_l = self.$loc(end_t)
          }
        } else {
          expr_l = self.$loc(begin_t).$join(self.$loc(end_t))
        };
        return $$$($$$($$('Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), expr_l);
      }, 3);
      
      $def(self, '$string_map', function $$string_map(begin_t, parts, end_t) {
        var self = this, expr_l = nil;

        if (($truthy(begin_t) && ($truthy(self.$value(begin_t)['$start_with?']("<<"))))) {
          
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else {
            expr_l = self.$loc(end_t).$begin()
          };
          return $$$($$$($$('Source'), 'Map'), 'Heredoc').$new(self.$loc(begin_t), expr_l, self.$loc(end_t));
        } else {
          return self.$collection_map(begin_t, parts, end_t)
        }
      }, 3);
      
      $def(self, '$regexp_map', function $$regexp_map(begin_t, end_t, options_e) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), self.$loc(begin_t).$join(options_e.$loc().$expression()))
      }, 3);
      
      $def(self, '$constant_map', function $$constant_map(scope, colon2_t, name_t) {
        var self = this, expr_l = nil;

        
        if ($truthy(scope['$nil?']())) {
          expr_l = self.$loc(name_t)
        } else {
          expr_l = scope.$loc().$expression().$join(self.$loc(name_t))
        };
        return $$$($$$($$('Source'), 'Map'), 'Constant').$new(self.$loc(colon2_t), self.$loc(name_t), expr_l);
      }, 3);
      
      $def(self, '$variable_map', function $$variable_map(name_t) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Variable').$new(self.$loc(name_t))
      }, 1);
      
      $def(self, '$binary_op_map', function $$binary_op_map(left_e, op_t, right_e) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Operator').$new(self.$loc(op_t), self.$join_exprs(left_e, right_e))
      }, 3);
      
      $def(self, '$unary_op_map', function $$unary_op_map(op_t, arg_e) {
        var self = this, expr_l = nil;

        
        
        if (arg_e == null) arg_e = nil;;
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$('Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, -2);
      
      $def(self, '$range_map', function $$range_map(start_e, op_t, end_e) {
        var self = this, expr_l = nil;

        
        if (($truthy(start_e) && ($truthy(end_e)))) {
          expr_l = self.$join_exprs(start_e, end_e)
        } else if ($truthy(start_e)) {
          expr_l = start_e.$loc().$expression().$join(self.$loc(op_t))
        } else if ($truthy(end_e)) {
          expr_l = self.$loc(op_t).$join(end_e.$loc().$expression())
        };
        return $$$($$$($$('Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, 3);
      
      $def(self, '$arg_prefix_map', function $$arg_prefix_map(op_t, name_t) {
        var self = this, expr_l = nil;

        
        
        if (name_t == null) name_t = nil;;
        if ($truthy(name_t['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(self.$loc(name_t))
        };
        return $$$($$$($$('Source'), 'Map'), 'Variable').$new(self.$loc(name_t), expr_l);
      }, -2);
      
      $def(self, '$kwarg_map', function $$kwarg_map(name_t, value_e) {
        var self = this, label_range = nil, name_range = nil, expr_l = nil;

        
        
        if (value_e == null) value_e = nil;;
        label_range = self.$loc(name_t);
        name_range = label_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        if ($truthy(value_e)) {
          expr_l = self.$loc(name_t).$join(value_e.$loc().$expression())
        } else {
          expr_l = self.$loc(name_t)
        };
        return $$$($$$($$('Source'), 'Map'), 'Variable').$new(name_range, expr_l);
      }, -2);
      
      $def(self, '$module_definition_map', function $$module_definition_map(keyword_t, name_e, operator_t, end_t) {
        var self = this, name_l = nil;

        
        if ($truthy(name_e)) {
          name_l = name_e.$loc().$expression()
        };
        return $$$($$$($$('Source'), 'Map'), 'Definition').$new(self.$loc(keyword_t), self.$loc(operator_t), name_l, self.$loc(end_t));
      }, 4);
      
      $def(self, '$definition_map', function $$definition_map(keyword_t, operator_t, name_t, end_t) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'MethodDefinition').$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), self.$loc(end_t), nil, nil)
      }, 4);
      
      $def(self, '$endless_definition_map', function $$endless_definition_map(keyword_t, operator_t, name_t, assignment_t, body_e) {
        var self = this, body_l = nil;

        
        body_l = body_e.$loc().$expression();
        return $$$($$$($$('Source'), 'Map'), 'MethodDefinition').$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), nil, self.$loc(assignment_t), body_l);
      }, 5);
      
      $def(self, '$send_map', function $$send_map(receiver_e, dot_t, selector_t, begin_t, args, end_t) {
        var self = this, begin_l = nil, end_l = nil;

        
        
        if (begin_t == null) begin_t = nil;;
        
        if (args == null) args = [];;
        
        if (end_t == null) end_t = nil;;
        if ($truthy(receiver_e)) {
          begin_l = receiver_e.$loc().$expression()
        } else if ($truthy(selector_t)) {
          begin_l = self.$loc(selector_t)
        };
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy(args['$any?']())) {
          end_l = args.$last().$loc().$expression()
        } else if ($truthy(selector_t)) {
          end_l = self.$loc(selector_t)
        };
        return $$$($$$($$('Source'), 'Map'), 'Send').$new(self.$loc(dot_t), self.$loc(selector_t), self.$loc(begin_t), self.$loc(end_t), begin_l.$join(end_l));
      }, -4);
      
      $def(self, '$var_send_map', function $$var_send_map(variable_e) {
        
        return $$$($$$($$('Source'), 'Map'), 'Send').$new(nil, variable_e.$loc().$expression(), nil, nil, variable_e.$loc().$expression())
      }, 1);
      
      $def(self, '$send_binary_op_map', function $$send_binary_op_map(lhs_e, selector_t, rhs_e) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, self.$join_exprs(lhs_e, rhs_e))
      }, 3);
      
      $def(self, '$send_unary_op_map', function $$send_unary_op_map(selector_t, arg_e) {
        var self = this, expr_l = nil;

        
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(selector_t)
        } else {
          expr_l = self.$loc(selector_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$('Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, expr_l);
      }, 2);
      
      $def(self, '$index_map', function $$index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Index').$new(self.$loc(lbrack_t), self.$loc(rbrack_t), receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, 3);
      
      $def(self, '$send_index_map', function $$send_index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Send').$new(nil, self.$loc(lbrack_t).$join(self.$loc(rbrack_t)), nil, nil, receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, 3);
      
      $def(self, '$block_map', function $$block_map(receiver_l, begin_t, end_t) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), receiver_l.$join(self.$loc(end_t)))
      }, 3);
      
      $def(self, '$keyword_map', function $$keyword_map(keyword_t, begin_t, args, end_t) {
        var self = this, $ret_or_1 = nil, end_l = nil;

        
        args = ($truthy(($ret_or_1 = args)) ? ($ret_or_1) : ([]));
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if (($truthy(args['$any?']()) && ($not(args.$last()['$nil?']())))) {
          end_l = args.$last().$loc().$expression()
        } else if (($truthy(args['$any?']()) && ($truthy($rb_gt(args.$count(), 1))))) {
          end_l = args['$[]'](-2).$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$('Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, 4);
      
      $def(self, '$keyword_mod_map', function $$keyword_mod_map(pre_e, keyword_t, post_e) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), nil, nil, self.$join_exprs(pre_e, post_e))
      }, 3);
      
      $def(self, '$condition_map', function $$condition_map(keyword_t, cond_e, begin_t, body_e, else_t, else_e, end_t) {
        var self = this, end_l = nil;

        
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if (($truthy(else_e) && ($truthy(else_e.$loc().$expression())))) {
          end_l = else_e.$loc().$expression()
        } else if ($truthy(self.$loc(else_t))) {
          end_l = self.$loc(else_t)
        } else if (($truthy(body_e) && ($truthy(body_e.$loc().$expression())))) {
          end_l = body_e.$loc().$expression()
        } else if ($truthy(self.$loc(begin_t))) {
          end_l = self.$loc(begin_t)
        } else {
          end_l = cond_e.$loc().$expression()
        };
        return $$$($$$($$('Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(else_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, 7);
      
      $def(self, '$ternary_map', function $$ternary_map(begin_e, question_t, mid_e, colon_t, end_e) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'Ternary').$new(self.$loc(question_t), self.$loc(colon_t), self.$join_exprs(begin_e, end_e))
      }, 5);
      
      $def(self, '$for_map', function $$for_map(keyword_t, in_t, begin_t, end_t) {
        var self = this;

        return $$$($$$($$('Source'), 'Map'), 'For').$new(self.$loc(keyword_t), self.$loc(in_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(self.$loc(end_t)))
      }, 4);
      
      $def(self, '$rescue_body_map', function $$rescue_body_map(keyword_t, exc_list_e, assoc_t, exc_var_e, then_t, compstmt_e) {
        var self = this, end_l = nil;

        
        if ($truthy(compstmt_e)) {
          end_l = compstmt_e.$loc().$expression()
        };
        if (($truthy(end_l['$nil?']()) && ($truthy(then_t)))) {
          end_l = self.$loc(then_t)
        };
        if (($truthy(end_l['$nil?']()) && ($truthy(exc_var_e)))) {
          end_l = exc_var_e.$loc().$expression()
        };
        if (($truthy(end_l['$nil?']()) && ($truthy(exc_list_e)))) {
          end_l = exc_list_e.$loc().$expression()
        };
        if ($truthy(end_l['$nil?']())) {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$('Source'), 'Map'), 'RescueBody').$new(self.$loc(keyword_t), self.$loc(assoc_t), self.$loc(then_t), self.$loc(keyword_t).$join(end_l));
      }, 6);
      
      $def(self, '$eh_keyword_map', function $$eh_keyword_map(compstmt_e, keyword_t, body_es, else_t, else_e) {
        var self = this, begin_l = nil, end_l = nil;

        
        if ($truthy(compstmt_e['$nil?']())) {
          if ($truthy(keyword_t['$nil?']())) {
            begin_l = body_es.$first().$loc().$expression()
          } else {
            begin_l = self.$loc(keyword_t)
          }
        } else {
          begin_l = compstmt_e.$loc().$expression()
        };
        if ($truthy(else_t)) {
          if ($truthy(else_e['$nil?']())) {
            end_l = self.$loc(else_t)
          } else {
            end_l = else_e.$loc().$expression()
          }
        } else if ($not(body_es.$last()['$nil?']())) {
          end_l = body_es.$last().$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$('Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), nil, self.$loc(else_t), nil, begin_l.$join(end_l));
      }, 5);
      
      $def(self, '$guard_map', function $$guard_map(keyword_t, guard_body_e) {
        var self = this, keyword_l = nil, guard_body_l = nil;

        
        keyword_l = self.$loc(keyword_t);
        guard_body_l = guard_body_e.$loc().$expression();
        return $$$($$$($$('Source'), 'Map'), 'Keyword').$new(keyword_l, nil, nil, keyword_l.$join(guard_body_l));
      }, 2);
      
      $def(self, '$static_string', function $$static_string(nodes) {try {

        var self = this;

        return $send(nodes, 'map', [], function $$18(node){var self = $$18.$$s == null ? this : $$18.$$s, $ret_or_1 = nil, string = nil;

          
          
          if (node == null) node = nil;;
          if ($eqeqeq("str", ($ret_or_1 = node.$type()))) {
            return node.$children()['$[]'](0)
          } else if ($eqeqeq("begin", $ret_or_1)) {
            if ($truthy((string = self.$static_string(node.$children())))) {
              return string
            } else {
              Opal.ret(nil)
            }
          } else {
            Opal.ret(nil)
          };}, {$$arity: 1, $$s: self}).$join()
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, 1);
      
      $def(self, '$static_regexp', function $$static_regexp(parts, options) {
        var self = this, source = nil;

        
        source = self.$static_string(parts);
        if ($truthy(source['$nil?']())) {
          return nil
        };
        source = ($truthy(options.$children()['$include?']("u")) ? (source.$encode($$$($$('Encoding'), 'UTF_8'))) : ($truthy(options.$children()['$include?']("e")) ? (source.$encode($$$($$('Encoding'), 'EUC_JP'))) : ($truthy(options.$children()['$include?']("s")) ? (source.$encode($$$($$('Encoding'), 'WINDOWS_31J'))) : ($truthy(options.$children()['$include?']("n")) ? (source.$encode($$$($$('Encoding'), 'BINARY'))) : (source)))));
        return $$('Regexp').$new(source, ($truthy(options.$children()['$include?']("x")) ? ($$$($$('Regexp'), 'EXTENDED')) : nil));
      }, 2);
      
      $def(self, '$static_regexp_node', function $$static_regexp_node(node) {
        var $a, self = this, parts = nil, options = nil;

        if ($eqeq(node.$type(), "regexp")) {
          
          $a = [node.$children()['$[]']($range(0, -2, false)), node.$children()['$[]'](-1)], (parts = $a[0]), (options = $a[1]), $a;
          return self.$static_regexp(parts, options);
        } else {
          return nil
        }
      }, 1);
      
      $def(self, '$collapse_string_parts?', function $Default_collapse_string_parts$ques$19(parts) {
        var $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = parts['$one?']()))) {
          return ["str", "dstr"]['$include?'](parts.$first().$type())
        } else {
          return $ret_or_1
        }
      }, 1);
      
      $def(self, '$value', function $$value(token) {
        
        return token['$[]'](0)
      }, 1);
      
      $def(self, '$string_value', function $$string_value(token) {
        var self = this;

        
        if (!$truthy(token['$[]'](0)['$valid_encoding?']())) {
          self.$diagnostic("error", "invalid_encoding", nil, token['$[]'](1))
        };
        return token['$[]'](0);
      }, 1);
      
      $def(self, '$loc', function $$loc(token) {
        
        if (($truthy(token) && ($truthy(token['$[]'](0))))) {
          return token['$[]'](1)
        } else {
          return nil
        }
      }, 1);
      
      $def(self, '$diagnostic', function $$diagnostic(type, reason, arguments$, location, highlights) {
        var self = this;

        
        
        if (highlights == null) highlights = [];;
        self.parser.$diagnostics().$process($$('Diagnostic').$new(type, reason, arguments$, location, highlights));
        if ($eqeq(type, "error")) {
          return self.parser.$send("yyerror")
        } else {
          return nil
        };
      }, -5);
      
      $def(self, '$validate_definee', function $$validate_definee(definee) {
        var self = this, $ret_or_1 = nil;

        if (($eqeqeq("int", ($ret_or_1 = definee.$type())) || (($eqeqeq("str", $ret_or_1) || (($eqeqeq("dstr", $ret_or_1) || (($eqeqeq("sym", $ret_or_1) || (($eqeqeq("dsym", $ret_or_1) || (($eqeqeq("regexp", $ret_or_1) || (($eqeqeq("array", $ret_or_1) || ($eqeqeq("hash", $ret_or_1)))))))))))))))) {
          
          self.$diagnostic("error", "singleton_literal", nil, definee.$loc().$expression());
          return false;
        } else {
          return true
        }
      }, 1);
      
      $def(self, '$rewrite_hash_args_to_kwargs', function $$rewrite_hash_args_to_kwargs(args) {
        var self = this, $writer = nil;

        if (($truthy(args['$any?']()) && ($truthy(self['$kwargs?'](args.$last()))))) {
          
          $writer = [$rb_minus(args.$length(), 1), args['$[]']($rb_minus(args.$length(), 1)).$updated("kwargs")];
          $send(args, '[]=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ((($truthy($rb_gt(args.$length(), 1)) && ($eqeq(args.$last().$type(), "block_pass"))) && ($truthy(self['$kwargs?'](args['$[]']($rb_minus(args.$length(), 2))))))) {
          
          $writer = [$rb_minus(args.$length(), 2), args['$[]']($rb_minus(args.$length(), 2)).$updated("kwargs")];
          $send(args, '[]=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        }
      }, 1);
      return $def(self, '$kwargs?', function $Default_kwargs$ques$20(node) {
        var $ret_or_1 = nil, $ret_or_2 = nil;

        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = node.$type()['$==']("hash"))) ? (node.$loc().$begin()['$nil?']()) : ($ret_or_2))))) {
          return node.$loc().$end()['$nil?']()
        } else {
          return $ret_or_1
        }
      }, 1);
    })($$('Builders'), null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/context"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $rb_gt = Opal.rb_gt, $alias = Opal.alias;

  Opal.add_stubs('attr_reader,freeze,<<,pop,clear,empty?,==,last,include?,rindex,stack,nil?,!,>,in_block?,in_lambda?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super) {
      var self = $klass($base, $super, 'Context');

      var $proto = self.$$prototype;

      $proto.stack = nil;
      
      self.$attr_reader("stack");
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$freeze();
      }, 0);
      
      $def(self, '$push', function $$push(state) {
        var self = this;

        return self.stack['$<<'](state)
      }, 1);
      
      $def(self, '$pop', function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, 0);
      
      $def(self, '$reset', function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, 0);
      
      $def(self, '$empty?', function $Context_empty$ques$1() {
        var self = this;

        return self.stack['$empty?']()
      }, 0);
      
      $def(self, '$in_class?', function $Context_in_class$ques$2() {
        var self = this;

        return self.stack.$last()['$==']("class")
      }, 0);
      
      $def(self, '$indirectly_in_def?', function $Context_indirectly_in_def$ques$3() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.stack['$include?']("def")))) {
          return $ret_or_1
        } else {
          return self.stack['$include?']("defs")
        }
      }, 0);
      
      $def(self, '$class_definition_allowed?', function $Context_class_definition_allowed$ques$4() {
        var self = this, def_index = nil, sclass_index = nil, $ret_or_1 = nil, $ret_or_2 = nil;

        
        def_index = $send(self.$stack(), 'rindex', [], function $$5(item){
          
          
          if (item == null) item = nil;;
          return ["def", "defs"]['$include?'](item);}, 1);
        sclass_index = self.$stack().$rindex("sclass");
        if ($truthy(($ret_or_1 = def_index['$nil?']()))) {
          return $ret_or_1
        } else {
          
          if ($truthy(($ret_or_2 = sclass_index['$nil?']()['$!']()))) {
            return $rb_gt(sclass_index, def_index)
          } else {
            return $ret_or_2
          };
        };
      }, 0);
      $alias(self, "module_definition_allowed?", "class_definition_allowed?");
      $alias(self, "dynamic_const_definition_allowed?", "class_definition_allowed?");
      
      $def(self, '$in_block?', function $Context_in_block$ques$6() {
        var self = this;

        return self.stack.$last()['$==']("block")
      }, 0);
      
      $def(self, '$in_lambda?', function $Context_in_lambda$ques$7() {
        var self = this;

        return self.stack.$last()['$==']("lambda")
      }, 0);
      
      $def(self, '$in_dynamic_block?', function $Context_in_dynamic_block$ques$8() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self['$in_block?']()))) {
          return $ret_or_1
        } else {
          return self['$in_lambda?']()
        }
      }, 0);
      return $def(self, '$in_def_open_args?', function $Context_in_def_open_args$ques$9() {
        var self = this;

        return self.stack.$last()['$==']("def_open_args")
      }, 0);
    })($nesting[0], null)
  })($nesting[0], $nesting)
};

Opal.modules["parser/max_numparam_stack"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $send = Opal.send, $to_a = Opal.to_a;

  Opal.add_stubs('attr_reader,==,size,set,top,>,max,last,push,pop,private,-,length,[]=');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'MaxNumparamStack');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.stack = nil;
      
      self.$attr_reader("stack");
      $const_set($nesting[0], 'ORDINARY_PARAMS', -1);
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        return (self.stack = [])
      }, 0);
      
      $def(self, '$empty?', function $MaxNumparamStack_empty$ques$1() {
        var self = this;

        return self.stack.$size()['$=='](0)
      }, 0);
      
      $def(self, '$has_ordinary_params!', function $MaxNumparamStack_has_ordinary_params$excl$2() {
        var self = this;

        return self.$set($$('ORDINARY_PARAMS'))
      }, 0);
      
      $def(self, '$has_ordinary_params?', function $MaxNumparamStack_has_ordinary_params$ques$3() {
        var self = this;

        return self.$top()['$==']($$('ORDINARY_PARAMS'))
      }, 0);
      
      $def(self, '$has_numparams?', function $MaxNumparamStack_has_numparams$ques$4() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.$top()))) {
          return $rb_gt(self.$top(), 0)
        } else {
          return $ret_or_1
        }
      }, 0);
      
      $def(self, '$register', function $$register(numparam) {
        var self = this;

        return self.$set([self.$top(), numparam].$max())
      }, 1);
      
      $def(self, '$top', function $$top() {
        var self = this;

        return self.stack.$last()
      }, 0);
      
      $def(self, '$push', function $$push() {
        var self = this;

        return self.stack.$push(0)
      }, 0);
      
      $def(self, '$pop', function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, 0);
      self.$private();
      return $def(self, '$set', function $$set(value) {
        var self = this, $writer = nil;

        
        $writer = [$rb_minus(self.stack.$length(), 1), value];
        $send(self.stack, '[]=', $to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, 1);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/current_arg_stack"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $rb_minus = Opal.rb_minus, $send = Opal.send, $to_a = Opal.to_a;

  Opal.add_stubs('attr_reader,freeze,==,size,<<,-,length,[]=,pop,clear,last');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super) {
      var self = $klass($base, $super, 'CurrentArgStack');

      var $proto = self.$$prototype;

      $proto.stack = nil;
      
      self.$attr_reader("stack");
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$freeze();
      }, 0);
      
      $def(self, '$empty?', function $CurrentArgStack_empty$ques$1() {
        var self = this;

        return self.stack.$size()['$=='](0)
      }, 0);
      
      $def(self, '$push', function $$push(value) {
        var self = this;

        return self.stack['$<<'](value)
      }, 1);
      
      $def(self, '$set', function $$set(value) {
        var self = this, $writer = nil;

        
        $writer = [$rb_minus(self.stack.$length(), 1), value];
        $send(self.stack, '[]=', $to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, 1);
      
      $def(self, '$pop', function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, 0);
      
      $def(self, '$reset', function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, 0);
      return $def(self, '$top', function $$top() {
        var self = this;

        return self.stack.$last()
      }, 0);
    })($nesting[0], null)
  })($nesting[0], $nesting)
};

Opal.modules["parser/variables_stack"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('push,empty?,<<,new,pop,clear,last,to_sym,include?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'VariablesStack');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.stack = nil;
      
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$push();
      }, 0);
      
      $def(self, '$empty?', function $VariablesStack_empty$ques$1() {
        var self = this;

        return self.stack['$empty?']()
      }, 0);
      
      $def(self, '$push', function $$push() {
        var self = this;

        return self.stack['$<<']($$('Set').$new())
      }, 0);
      
      $def(self, '$pop', function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, 0);
      
      $def(self, '$reset', function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, 0);
      
      $def(self, '$declare', function $$declare(name) {
        var self = this;

        return self.stack.$last()['$<<'](name.$to_sym())
      }, 1);
      return $def(self, '$declared?', function $VariablesStack_declared$ques$2(name) {
        var self = this;

        return self.stack.$last()['$include?'](name.$to_sym())
      }, 1);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/base"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $defs = Opal.defs, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $gvars = Opal.gvars, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $def = Opal.def, $not = Opal.not, $eqeqeq = Opal.eqeqeq, $to_ary = Opal.to_ary, $hash2 = Opal.hash2;

  Opal.add_stubs('default_parser,setup_source_buffer,default_encoding,parse,parse_with_comments,read,new,all_errors_are_fatal=,diagnostics,-,ignore_warnings=,lambda,puts,render,consumer=,force_encoding,dup,==,name,raw_source=,source=,private_class_method,attr_reader,version,diagnostics=,static_env=,context=,parser=,[],class,reset,source_buffer=,do_parse,comments=,comments,tokens=,!,raise,tokens,private,advance,===,diagnostic,map,process,yyerror,token_to_str');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Base');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.diagnostics = $proto.lexer = $proto.static_env = $proto.context = $proto.builder = $proto.current_arg_stack = $proto.pattern_variables = $proto.pattern_hash_keys = nil;
      
      $defs(self, '$parse', function $$parse(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        
        
        if (file == null) file = "(string)";;
        
        if (line == null) line = 1;;
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse(source_buffer);
      }, -2);
      $defs(self, '$parse_with_comments', function $$parse_with_comments(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        
        
        if (file == null) file = "(string)";;
        
        if (line == null) line = 1;;
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse_with_comments(source_buffer);
      }, -2);
      $defs(self, '$parse_file', function $$parse_file(filename) {
        var self = this;

        return self.$parse($$('File').$read(filename), filename)
      }, 1);
      $defs(self, '$parse_file_with_comments', function $$parse_file_with_comments(filename) {
        var self = this;

        return self.$parse_with_comments($$('File').$read(filename), filename)
      }, 1);
      $defs(self, '$default_parser', function $$default_parser() {
        var self = this, parser = nil, $writer = nil;

        
        parser = self.$new();
        
        $writer = [true];
        $send(parser.$diagnostics(), 'all_errors_are_fatal=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [true];
        $send(parser.$diagnostics(), 'ignore_warnings=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$send(self, 'lambda', [], function $$1(diagnostic){          if ($gvars.stderr == null) $gvars.stderr = nil;

          
          
          if (diagnostic == null) diagnostic = nil;;
          return $gvars.stderr.$puts(diagnostic.$render());}, 1)];
        $send(parser.$diagnostics(), 'consumer=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return parser;
      }, 0);
      $defs(self, '$setup_source_buffer', function $$setup_source_buffer(file, line, string, encoding) {
        var self = this, source_buffer = nil, $writer = nil;

        
        string = string.$dup().$force_encoding(encoding);
        source_buffer = $$$($$('Source'), 'Buffer').$new(file, line);
        if ($eqeq(self.$name(), "Parser::Ruby18")) {
          
          $writer = [string];
          $send(source_buffer, 'raw_source=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [string];
          $send(source_buffer, 'source=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return source_buffer;
      }, 4);
      self.$private_class_method("setup_source_buffer");
      self.$attr_reader("lexer");
      self.$attr_reader("diagnostics");
      self.$attr_reader("builder");
      self.$attr_reader("static_env");
      self.$attr_reader("source_buffer");
      self.$attr_reader("context");
      self.$attr_reader("max_numparam_stack");
      self.$attr_reader("current_arg_stack");
      self.$attr_reader("pattern_variables");
      self.$attr_reader("pattern_hash_keys");
      
      $def(self, '$initialize', function $$initialize(builder) {
        var self = this, $writer = nil;

        
        
        if (builder == null) builder = $$$($$$($$('Parser'), 'Builders'), 'Default').$new();;
        self.diagnostics = $$$($$('Diagnostic'), 'Engine').$new();
        self.static_env = $$('StaticEnvironment').$new();
        self.context = $$('Context').$new();
        self.max_numparam_stack = $$('MaxNumparamStack').$new();
        self.current_arg_stack = $$('CurrentArgStack').$new();
        self.pattern_variables = $$('VariablesStack').$new();
        self.pattern_hash_keys = $$('VariablesStack').$new();
        self.lexer = $$('Lexer').$new(self.$version());
        
        $writer = [self.diagnostics];
        $send(self.lexer, 'diagnostics=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [self.static_env];
        $send(self.lexer, 'static_env=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [self.context];
        $send(self.lexer, 'context=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.builder = builder;
        
        $writer = [self];
        $send(self.builder, 'parser=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.last_token = nil;
        if (($truthy($$$(self.$class(), 'Racc_debug_parser')) && ($truthy($$('ENV')['$[]']("RACC_DEBUG"))))) {
          self.yydebug = true
        };
        return self.$reset();
      }, -1);
      
      $def(self, '$reset', function $$reset() {
        var self = this;

        
        self.source_buffer = nil;
        self.lexer.$reset();
        self.static_env.$reset();
        self.context.$reset();
        self.current_arg_stack.$reset();
        self.pattern_variables.$reset();
        self.pattern_hash_keys.$reset();
        return self;
      }, 0);
      
      $def(self, '$parse', function $$parse(source_buffer) {
        var self = this, $writer = nil, $ret_or_1 = nil;

        return (function() { try {
        
        
        $writer = [source_buffer];
        $send(self.lexer, 'source_buffer=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.source_buffer = source_buffer;
        if ($truthy(($ret_or_1 = self.$do_parse()))) {
          return $ret_or_1
        } else {
          return nil
        };
        } finally {
          ((self.source_buffer = nil), (($writer = [nil]), $send(self.lexer, 'source_buffer=', $to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }; })()
      }, 1);
      
      $def(self, '$parse_with_comments', function $$parse_with_comments(source_buffer) {
        var self = this, $writer = nil;

        return (function() { try {
        
        
        $writer = [[]];
        $send(self.lexer, 'comments=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return [self.$parse(source_buffer), self.lexer.$comments()];
        } finally {
          (($writer = [nil]), $send(self.lexer, 'comments=', $to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
        }; })()
      }, 1);
      
      $def(self, '$tokenize', function $$tokenize(source_buffer, recover) {
        var self = this, $writer = nil, ast = nil;

        
        
        if (recover == null) recover = false;;
        return (function() { try {
        
        
        $writer = [[]];
        $send(self.lexer, 'tokens=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [[]];
        $send(self.lexer, 'comments=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        try {
          ast = self.$parse(source_buffer)
        } catch ($err) {
          if (Opal.rescue($err, [$$$($$('Parser'), 'SyntaxError')])) {
            try {
              if ($not(recover)) {
                self.$raise()
              }
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };;
        return [ast, self.lexer.$comments(), self.lexer.$tokens()];
        } finally {
          ((($writer = [nil]), $send(self.lexer, 'tokens=', $to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), (($writer = [nil]), $send(self.lexer, 'comments=', $to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }; })();
      }, -2);
      self.$private();
      
      $def(self, '$next_token', function $$next_token() {
        var self = this, token = nil;

        
        token = self.lexer.$advance();
        self.last_token = token;
        return token;
      }, 0);
      
      $def(self, '$check_kwarg_name', function $$check_kwarg_name(name_t) {
        var self = this, $ret_or_1 = nil;

        if ($eqeqeq(/^[a-z_]/, ($ret_or_1 = name_t['$[]'](0)))) {
          return nil
        } else if ($eqeqeq(/^[A-Z]/, $ret_or_1)) {
          return self.$diagnostic("error", "argument_const", nil, name_t)
        } else {
          return nil
        }
      }, 1);
      
      $def(self, '$diagnostic', function $$diagnostic(level, reason, arguments$, location_t, highlights_ts) {
        var $a, $b, self = this, _ = nil, location = nil, highlights = nil;

        
        
        if (highlights_ts == null) highlights_ts = [];;
        $b = location_t, $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (location = ($a[1] == null ? nil : $a[1])), $b;
        highlights = $send(highlights_ts, 'map', [], function $$2(token){var $c, $d, range = nil;

          
          
          if (token == null) token = nil;;
          $d = token, $c = $to_ary($d), (_ = ($c[0] == null ? nil : $c[0])), (range = ($c[1] == null ? nil : $c[1])), $d;
          return range;}, 1);
        self.diagnostics.$process($$('Diagnostic').$new(level, reason, arguments$, location, highlights));
        if ($eqeq(level, "error")) {
          return self.$yyerror()
        } else {
          return nil
        };
      }, -5);
      return $def(self, '$on_error', function $$on_error(error_token_id, error_value, value_stack) {
        var $a, $b, self = this, token_name = nil, _ = nil, location = nil;

        
        token_name = self.$token_to_str(error_token_id);
        $b = error_value, $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (location = ($a[1] == null ? nil : $a[1])), $b;
        return self.diagnostics.$process($$('Diagnostic').$new("error", "unexpected_token", $hash2(["token"], {"token": token_name}), location));
      }, 3);
    })($nesting[0], $$$($$('Racc'), 'Parser'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/rewriter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $const_set = Opal.const_set, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs('new,process,include?,type,remove,wrap,insert_before,insert_after,replace,freeze,join,extend,warn_of_deprecation,class,warned_of_deprecation=,-');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.source_rewriter = nil;
      
      
      $def(self, '$rewrite', function $$rewrite(source_buffer, ast) {
        var self = this;

        
        self.source_rewriter = $$$($$('Source'), 'Rewriter').$new(source_buffer);
        self.$process(ast);
        return self.source_rewriter.$process();
      }, 2);
      
      $def(self, '$assignment?', function $Rewriter_assignment$ques$1(node) {
        
        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, 1);
      
      $def(self, '$remove', function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, 1);
      
      $def(self, '$wrap', function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, 3);
      
      $def(self, '$insert_before', function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, 2);
      
      $def(self, '$insert_after', function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, 2);
      
      $def(self, '$replace', function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, 2);
      $const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Rewriter is deprecated.", "Please update your code to use Parser::TreeRewriter instead"].$join("\n").$freeze());
      self.$extend($$('Deprecation'));
      return $def(self, '$initialize', function $$initialize($a) {
        var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this, $writer = nil;

        delete $$initialize.$$p;
        
        
        $post_args = Opal.slice.call(arguments);
        
        $rest_arg = $post_args;;
        self.$class().$warn_of_deprecation();
        
        $writer = [true];
        $send($$$($$('Source'), 'Rewriter'), 'warned_of_deprecation=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
      }, -1);
    })($nesting[0], $$$($$$($$('Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser/tree_rewriter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash, $def = Opal.def;

  Opal.add_stubs('new,process,include?,type,remove,wrap,insert_before,insert_after,replace');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TreeRewriter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.source_rewriter = nil;
      
      
      $def(self, '$rewrite', function $$rewrite(source_buffer, ast, $kwargs) {
        var policy, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        policy = Opal.kwrestargs($kwargs, {});;
        self.source_rewriter = $$$($$$($$('Parser'), 'Source'), 'TreeRewriter').$new(source_buffer, Opal.to_hash(policy));
        self.$process(ast);
        return self.source_rewriter.$process();
      }, -3);
      
      $def(self, '$assignment?', function $TreeRewriter_assignment$ques$1(node) {
        
        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, 1);
      
      $def(self, '$remove', function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, 1);
      
      $def(self, '$wrap', function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, 3);
      
      $def(self, '$insert_before', function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, 2);
      
      $def(self, '$insert_after', function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, 2);
      return $def(self, '$replace', function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, 2);
    })($nesting[0], $$$($$$($$('Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["parser"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs('=~,require,raise');
  
  if ($truthy($$('RUBY_VERSION')['$=~'](/^1\.[89]\./))) {
    
    self.$require("parser/version");
    self.$raise($$('LoadError'), "parser v" + ($$$($$('Parser'), 'VERSION')) + " cannot run on Ruby " + ($$('RUBY_VERSION')) + ".\n" + "Please upgrade to Ruby 2.0.0 or higher, or use an older version of the parser gem.\n");
  };
  self.$require("set");
  self.$require("racc/parser");
  self.$require("ast");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    
    self.$require("parser/version");
    self.$require("parser/messages");
    self.$require("parser/deprecation");
    (function($base) {
      var self = $module($base, 'AST');

      
      
      self.$require("parser/ast/node");
      self.$require("parser/ast/processor");
      return self.$require("parser/meta");
    })($nesting[0]);
    (function($base) {
      var self = $module($base, 'Source');

      
      
      self.$require("parser/source/buffer");
      self.$require("parser/source/range");
      self.$require("parser/source/comment");
      self.$require("parser/source/comment/associator");
      self.$require("parser/source/rewriter");
      self.$require("parser/source/rewriter/action");
      self.$require("parser/source/tree_rewriter");
      self.$require("parser/source/tree_rewriter/action");
      self.$require("parser/source/map");
      self.$require("parser/source/map/operator");
      self.$require("parser/source/map/collection");
      self.$require("parser/source/map/constant");
      self.$require("parser/source/map/variable");
      self.$require("parser/source/map/keyword");
      self.$require("parser/source/map/definition");
      self.$require("parser/source/map/method_definition");
      self.$require("parser/source/map/send");
      self.$require("parser/source/map/index");
      self.$require("parser/source/map/condition");
      self.$require("parser/source/map/ternary");
      self.$require("parser/source/map/for");
      self.$require("parser/source/map/rescue_body");
      self.$require("parser/source/map/heredoc");
      return self.$require("parser/source/map/objc_kwarg");
    })($nesting[0]);
    self.$require("parser/syntax_error");
    self.$require("parser/clobbering_error");
    self.$require("parser/diagnostic");
    self.$require("parser/diagnostic/engine");
    self.$require("parser/static_environment");
    self.$require("parser/lexer");
    self.$require("parser/lexer/literal");
    self.$require("parser/lexer/stack_state");
    self.$require("parser/lexer/dedenter");
    (function($base) {
      var self = $module($base, 'Builders');

      
      return self.$require("parser/builders/default")
    })($nesting[0]);
    self.$require("parser/context");
    self.$require("parser/max_numparam_stack");
    self.$require("parser/current_arg_stack");
    self.$require("parser/variables_stack");
    self.$require("parser/base");
    self.$require("parser/rewriter");
    return self.$require("parser/tree_rewriter");
  })($nesting[0], $nesting);
};

Opal.modules["parser/ruby31"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $not = Opal.not, $send = Opal.send, $eqeq = Opal.eqeq, $rb_gt = Opal.rb_gt, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $hash = Opal.hash, $const_set = Opal.const_set, $to_ary = Opal.to_ary, $hash2 = Opal.hash2, $slice = Opal.slice;

  Opal.add_stubs('require,end_with?,[],!,include?,diagnostic,children,in_dynamic_block?,context,declared?,static_env,=~,expression,loc,has_ordinary_params?,max_numparam_stack,dup,stack,pop,reverse_each,==,>,declare,register,to_i,new,each,split,empty?,[]=,-,+,push,compstmt,<<,preexe,nil?,begin_body,state=,alias,gvar,back_ref,undef_method,condition_mod,loop_mod,rescue_body,postexe,multi_assign,assign,array,op_assign,index,call_method,const_op_assignable,const_fetch,endless_method_name,def_endless_method,cmdarg,cond,unextend,def_endless_singleton,logical_op,not_op,command_start=,in_kwarg,in_kwarg=,match_pattern,match_pattern_p,extend_static,block,keyword_cmd,multi_lhs,begin,splat,concat,assignable,index_asgn,attr_asgn,const_global,const,symbol_internal,range_inclusive,range_exclusive,binary_op,unary_op,match_op,ternary,associate,declared_forward_args?,forwarded_args,block_pass,declared_anonymous_blockarg?,begin_keyword,condition,loop,case,case_match,for,class_definition_allowed?,def_class,def_sclass,module_definition_allowed?,def_module,def_method,def_singleton,in_class?,arg,restarg,size,procarg0,args,has_ordinary_params!,set,shadowarg,extend_dynamic,call_lambda,has_numparams?,numargs,top,any?,when,in_pattern,if_guard,unless_guard,match_with_trailing_comma,array_pattern,find_pattern,hash_pattern,match_as,match_alt,const_pattern,match_rest,match_pair,match_label,match_nil_pattern,accessible,match_var,ident,pin,string_compose,dedent_string,dedent_level,string,character,xstring_compose,regexp_options,regexp_compose,words_compose,word,symbols_compose,string_internal,ivar,cvar,symbol,symbol_compose,respond_to?,negate,unary_num,integer,float,rational,complex,nil,self,true,false,__FILE__,__LINE__,__ENCODING__,nth_ref,declare_forward_args,forward_arg,check_kwarg_name,kwoptarg,kwarg,kwnilarg,kwrestarg,optarg,blockarg,declare_anonymous_blockarg,pair,pair_keyword,pair_label,pair_quoted,kwsplat,yyerrok');
  
  self.$require("racc/parser.rb");
  self.$require("parser");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Ruby31');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil, $proto = self.$$prototype;

      $proto.current_arg_stack = $proto.max_numparam_stack = $proto.builder = $proto.lexer = $proto.static_env = $proto.context = $proto.pattern_variables = $proto.last_token = $proto.pattern_hash_keys = nil;
      
      
      $def(self, '$version', function $$version() {
        
        return 31
      }, 0);
      
      $def(self, '$default_encoding', function $$default_encoding() {
        
        return $$$($$('Encoding'), 'UTF_8')
      }, 0);
      
      $def(self, '$endless_method_name', function $$endless_method_name(name_t) {
        var self = this;

        if (($not(["===", "==", "!=", "<=", ">="]['$include?'](name_t['$[]'](0))) && ($truthy(name_t['$[]'](0)['$end_with?']("="))))) {
          return self.$diagnostic("error", "endless_setter", nil, name_t)
        } else {
          return nil
        }
      }, 1);
      
      $def(self, '$try_declare_numparam', function $$try_declare_numparam(node) {
        var self = this, name = nil, location = nil, raw_context = nil, raw_max_numparam_stack = nil;

        
        name = node.$children()['$[]'](0);
        if ((($truthy(name['$=~'](/^_[1-9]$/)) && ($not(self.$static_env()['$declared?'](name)))) && ($truthy(self.$context()['$in_dynamic_block?']())))) {
          
          location = node.$loc().$expression();
          if ($truthy(self.$max_numparam_stack()['$has_ordinary_params?']())) {
            self.$diagnostic("error", "ordinary_param_defined", nil, [nil, location])
          };
          raw_context = self.$context().$stack().$dup();
          raw_max_numparam_stack = self.$max_numparam_stack().$stack().$dup();
          raw_context.$pop();
          raw_max_numparam_stack.$pop();
          (function(){var $brk = Opal.new_brk(); try {return $send(raw_context, 'reverse_each', [], function $$1(outer_scope){var self = $$1.$$s == null ? this : $$1.$$s, outer_scope_has_numparams = nil;

            
            
            if (outer_scope == null) outer_scope = nil;;
            if (($eqeq(outer_scope, "block") || ($eqeq(outer_scope, "lambda")))) {
              
              outer_scope_has_numparams = $rb_gt(raw_max_numparam_stack.$pop(), 0);
              if ($truthy(outer_scope_has_numparams)) {
                return self.$diagnostic("error", "numparam_used_in_outer_scope", nil, [nil, location])
              } else {
                return nil
              };
            } else {
              
              Opal.brk(nil, $brk)
            };}, {$$arity: 1, $$s: self, $$brk: $brk})
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          self.$static_env().$declare(name);
          self.$max_numparam_stack().$register(name['$[]'](1).$to_i());
          return true;
        } else {
          return false
        };
      }, 1);
      clist = ["-319,308,617,995,597,-117,-116,-319,-319,-319,218,219,308,-319,-319", "919,-319,919,919,-121,-122,617,-725,-118,-319,617,660,624,658,1207,234", "-123,-119,713,943,828,-319,-319,617,-319,-319,-319,-319,-319,-116,-117", "-124,617,617,-124,925,714,942,123,236,921,1142,1143,122,922,237,918", "237,-123,-504,303,-319,-319,-319,-319,-319,-319,-319,-319,-319,-319", "-319,-319,-319,-319,218,219,-319,-319,-319,-713,684,-319,307,-124,-319", "-123,659,-319,657,237,218,219,-319,307,-319,119,-319,-319,237,-319,-319", "-319,-319,-319,-607,-319,994,-319,-108,-107,823,-607,-607,-607,123,-119", "-607,-607,-607,122,-607,-319,-112,-113,-319,-319,-109,-113,-607,-319", "-607,-607,-607,123,-114,-110,-319,123,122,-122,-607,-607,122,-607,-607", "-607,-607,-607,-121,-120,123,-118,-115,984,-109,122,-116,-117,-124,123", "123,-116,-117,-124,122,122,1117,308,237,132,-607,-607,-607,-607,-607", "-607,-607,-607,-607,-607,-607,-607,-607,-607,123,-725,-607,-607,-607", "122,-607,-607,609,215,-607,611,123,-607,-607,-111,-607,122,-607,-123", "-607,230,-607,-607,-123,-607,-607,-607,-607,-607,123,-607,-610,-607", "-621,122,-109,237,-622,-610,-610,-610,-712,-122,-610,-610,-610,-607", "-610,-119,-607,-607,-607,-607,-119,-607,-610,-607,-610,-610,-610,230", "-607,216,1118,-607,-120,-110,-610,-610,307,-610,-610,-610,-610,-610", "-109,-737,217,-109,-712,-111,-121,-120,-112,-118,220,-121,-120,519,-118", "-109,887,-116,624,218,219,-117,-610,-610,-610,-610,-610,-610,-610,-610", "-610,-610,-610,-610,-610,-610,-725,297,-610,-610,-610,-737,-610,-610", "-713,-111,-610,870,-111,-610,-610,645,-610,237,-610,-712,-610,-110,-610", "-610,-111,-610,-610,-610,-610,-610,308,-610,-319,-610,101,102,-124,358", "-112,-319,-319,-319,101,102,-319,-319,-319,-610,-319,-122,-610,-610", "-610,-610,-122,-610,-319,-610,-319,-319,-319,-110,-610,-111,-110,-610", "504,503,-319,-319,-118,-319,-319,-319,-319,-319,-110,237,-112,647,646", "-112,645,-607,630,645,230,887,954,645,-607,630,359,-112,303,631,1057", "828,-319,-319,-319,-319,-319,-319,-319,-319,-319,-319,-319,-319,-319", "-319,103,104,-319,-319,-319,307,916,-319,103,104,-319,913,645,-319,-319", "645,-319,-614,-319,237,-319,428,-319,-319,-614,-319,-319,-319,-319,-319", "-737,-319,914,-319,647,646,-607,647,646,643,645,647,646,643,856,645", "468,-319,645,1029,-319,-319,-319,-319,796,-319,645,-319,1057,-716,679", "230,-319,-628,680,-122,-716,-716,-716,507,-119,-716,-716,-716,224,-716", "647,646,648,647,646,627,-614,-716,-716,-716,-716,-716,679,854,625,-121", "218,219,518,-716,-716,680,-716,-716,-716,-716,-716,520,647,646,661,-110", "-118,647,646,643,647,646,650,645,-622,-737,521,-119,647,646,656,-121", "236,-716,-716,-716,-716,-716,-716,-716,-716,-716,-716,-716,-716,-716", "-716,225,750,-716,-716,-716,-112,915,-716,-119,-102,-716,496,-616,-716", "-716,555,-716,-121,-716,-616,-716,-88,-716,-716,-108,-716,-716,-716", "-716,-716,-319,-716,-716,-716,979,887,-117,-319,-319,-319,647,646,652", "-319,-319,609,-319,-716,611,497,-716,-716,-716,-716,-319,-716,224,-716", "567,123,569,1050,-716,301,122,-120,-319,-319,571,-319,-319,-319,-319", "-319,979,887,132,-616,488,224,485,484,483,493,486,425,1181,-610,630", "-87,427,426,954,496,-610,635,-319,-319,-319,-319,-319,-319,-319,-319", "-319,-319,-319,-319,-319,-319,237,-617,-319,-319,-319,491,684,-319,-617", "582,-319,225,224,-319,501,500,504,503,-319,301,-319,497,-319,-319,583", "-319,-319,-319,-319,-319,123,-319,-716,-319,225,122,590,87,123,-716", "-716,-716,-610,122,312,-716,-716,-319,-716,88,-319,-319,237,-319,230", "-319,-716,-716,230,89,609,482,-319,608,609,-122,-617,611,-716,-716,303", "-716,-716,-716,-716,-716,237,225,594,1190,488,224,485,484,483,493,486", "-618,1157,597,944,945,218,219,-618,496,600,1155,-716,-716,-716,-716", "-716,-716,-716,-716,-716,-716,-716,-716,-716,-716,261,-621,-716,-716", "-716,491,685,-716,237,612,-716,234,-615,-716,501,500,504,503,-716,-615", "-716,497,-716,-716,-114,-716,-716,-716,-716,-716,613,-716,-716,-716", "225,870,-123,571,624,488,-618,485,484,483,493,486,417,-716,-107,-612", "-716,-716,-710,-111,496,-716,-612,-613,-115,-716,-116,482,-716,628,-613", "-120,-716,-716,-716,493,-124,629,-716,-716,637,-716,491,-615,662,496", "665,666,-109,-716,-716,501,500,504,503,-292,224,668,497,669,-118,-716", "-716,672,-716,-716,-716,-716,-716,673,-610,237,670,677,224,678,303,-610", "504,503,-612,633,-710,497,237,691,-610,692,-613,237,635,-716,-716,-716", "-716,-716,-716,-716,-716,-716,-716,-716,-716,-716,-716,-710,694,-716", "-716,-716,697,685,-716,-354,698,-716,700,702,-716,704,-354,225,715,-716", "716,-716,720,-716,-716,-354,-716,-716,-716,-716,-716,-610,-716,-716", "-716,225,722,-619,728,729,261,261,224,-620,-619,750,261,261,-716,589", "-620,-716,-716,-619,-716,496,-716,-320,587,-620,237,784,237,-716,-320", "237,-120,330,77,78,26,11,65,-320,-354,237,71,72,-102,799,237,75,-716", "73,74,76,35,36,79,80,603,810,814,497,237,81,33,32,111,110,112,113,-619", "816,23,1050,819,225,-620,824,10,53,332,12,115,114,116,105,64,107,106", "108,-320,109,117,118,224,101,102,49,50,48,-320,223,-716,825,224,278", "279,-320,829,-716,221,599,853,857,-712,858,-320,-293,-716,45,517,871", "38,555,555,66,67,-310,883,68,887,40,907,908,-310,52,237,-716,911,261", "237,277,276,-310,24,920,937,938,939,99,87,90,91,956,92,94,93,95,958", "225,297,964,88,98,966,-320,968,-716,569,225,82,258,89,103,104,260,259", "46,47,330,77,78,26,11,65,571,810,237,71,72,303,303,-310,75,-709,73,74", "76,35,36,79,80,126,127,128,129,130,81,33,32,111,110,112,113,810,488", "23,485,484,483,261,486,10,53,332,12,115,114,116,105,64,107,106,108,887", "109,117,118,224,101,102,49,50,48,-319,516,-607,981,224,982,237,-319", "706,-607,517,1181,-713,237,-709,992,-319,710,-607,45,635,237,38,-294", "237,66,67,-319,1003,68,1007,40,-292,1011,-319,52,697,-709,714,-713,1014", "848,849,-319,24,850,117,118,1016,99,87,90,91,1018,92,94,93,95,1020,225", "1020,237,88,98,770,-319,237,-607,237,225,82,1048,89,103,104,1051,919", "46,47,330,77,78,26,11,65,966,1063,237,71,72,810,1079,-319,75,1081,73", "74,76,35,36,79,80,253,1086,1087,1092,1093,81,33,32,111,110,112,113,1094", "488,23,485,484,483,-295,486,10,53,332,12,115,114,116,105,64,107,106", "108,1107,109,117,118,1108,101,102,49,50,48,261,265,266,267,268,278,279", "273,274,269,270,1109,254,255,237,237,271,272,237,45,237,252,38,493,237", "66,67,237,919,68,1116,40,258,496,264,52,260,259,237,256,257,277,276", "262,24,263,1122,1123,1125,99,87,90,91,697,92,94,93,95,1128,1131,1133", "1135,88,98,237,275,504,503,1137,1147,82,497,89,103,104,1158,1159,46", "47,330,77,78,26,11,65,1020,1020,1020,71,72,1166,1179,1182,75,1187,73", "74,76,35,36,79,80,126,127,128,129,130,81,33,32,111,110,112,113,1188", "691,23,1108,1198,1198,697,674,10,53,332,12,115,114,116,105,64,107,106", "108,1201,109,117,118,1203,101,102,49,50,48,261,265,266,267,268,278,279", "273,274,269,270,1205,254,255,1207,1207,271,272,237,45,1020,948,38,952", "951,66,67,953,1198,68,-713,40,258,-712,264,52,260,259,1224,256,257,277", "276,262,24,263,1207,1207,1207,99,87,90,91,3,92,94,93,95,950,,,,88,98", ",275,,-264,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75", ",73,74,76,35,36,79,80,126,127,128,129,130,81,33,32,111,110,112,113,", ",23,,,,,884,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118", ",101,102,49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255", ",,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277", "276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89", "103,104,,,46,47,7,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80", "126,127,128,129,130,81,33,32,111,110,112,113,,,23,,,,,674,10,53,9,12", "115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265", "266,267,268,278,279,273,274,269,270,,254,255,,,271,272,,45,,,38,,,66", "67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87", "90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77", "78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110", "112,113,,,23,,,,,912,10,53,332,12,115,114,116,105,64,107,106,108,,109", "117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273,274,269,270", ",254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256", "257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,", ",,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76", "35,36,79,80,,,,,,81,33,32,111,110,112,113,,1152,23,485,484,483,,486", "10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49", "50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,,271,272", ",45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24", "263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104,,", "46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81", "33,32,111,110,112,113,,1152,23,485,484,483,,486,10,53,332,12,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267", "268,278,279,273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68", ",40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,", "92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11", "65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113", ",,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,", "101,102,49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255", ",,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277", "276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,237,275,,,,,82", ",89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36", "79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268", "278,279,273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40", "258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94", "93,95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,", ",,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,", "23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,", "271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276", "262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103", "104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80", ",,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278", "279,273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258", ",264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71", "72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,", ",,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102", "49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,,271", "272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262", "24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104", ",,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,", ",81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64", "107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279", "273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264", "52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,", ",,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72", ",,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,", "10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49", "50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,,271,272", ",45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24", "263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104,,", "46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81", "33,32,111,110,112,113,,488,23,485,484,483,,486,10,53,332,12,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,488,,485,484,483", ",486,,706,,488,,485,484,483,,486,710,,45,,,38,,,66,67,,261,68,,40,,", ",52,,706,,261,,,,,24,,710,706,,99,87,90,91,,92,94,93,95,,,258,,88,98", "260,259,,256,257,,82,258,89,103,104,260,259,46,47,330,77,78,26,11,65", ",,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,", "488,23,485,484,483,,486,10,53,332,12,115,114,116,105,64,107,106,108", ",109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273,706,269", "270,,,,,,271,272,,45,,,38,,,66,67,,261,68,,40,258,,264,52,260,259,,256", "257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,258,,88,98,260", "259,,256,257,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,", "75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,488,23,485,484", "483,,486,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,261,,,,,,,,706,,,,,,,,271,272,,45,,,38,,,66,67,,,68,,40", "258,,264,52,260,259,,256,257,,,262,24,263,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,", ",,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10", "53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50", "48,261,265,266,267,268,278,279,,,269,270,,,,,,271,272,,45,,,38,,,66", "67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87", "90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78", "26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110", "112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117", "118,,101,102,49,50,48,261,265,266,267,268,278,279,273,274,269,270,,-738", "-738,,,271,272,,45,,,334,,,66,67,,,68,,40,258,,264,52,260,259,,256,257", "277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89", "103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79", "80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,-738,-738,-738", "-738,278,279,,,-738,-738,,,,,,271,272,,45,,,38,,,66,67,,,68,,40,258", ",264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72", ",,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,", "10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49", "50,48,261,-738,-738,-738,-738,278,279,,,-738,-738,,,,,,271,272,,45,", ",334,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263", ",,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330", "77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111", "110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109", "117,118,,101,102,49,50,48,261,-738,-738,-738,-738,278,279,,,-738,-738", ",,,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257", "277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89", "103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79", "80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268", "278,279,273,274,269,270,,-738,-738,,,271,272,,45,,,38,,,66,67,,,68,", "40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92", "94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,", ",,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,", "23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,261,-738,-738,-738,-738,278,279,,,-738,-738,,,,,,271,272", ",45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24", "263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46", "47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33", "32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,261,-738,-738,-738,-738,278,279,", ",-738,-738,,,,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259", ",256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,", ",,,,82,,89,103,104,,,46,47,7,77,78,26,11,65,,,,71,72,,,,75,,73,74,76", "35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,9,12,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267", "268,278,279,273,274,269,270,,-738,-738,,,271,272,,45,,,38,,,66,67,,", "68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91", ",92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26,11", "65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113", ",,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,", "101,102,49,50,48,261,,,,,,,,,,,,,,,,271,272,,45,,,334,,,66,67,,,68,", "40,258,,264,52,260,259,,256,257,,,262,24,263,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76", "351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,-738,-738", "-738,-738,278,279,,,-738,-738,,,,,,271,272,,242,,,250,,,66,67,,,68,", ",258,,264,52,260,259,,256,257,277,276,262,247,263,,,,99,87,90,91,,92", "94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73", "74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,", ",115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265", "266,267,268,278,279,273,274,269,270,,-738,-738,,,271,272,,242,,,250", ",,66,67,,,68,,,258,,264,52,260,259,,256,257,277,276,262,247,263,,,,99", "87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46", "47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251", ",,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50", "48,261,,,,,,,,,,,,,,,,271,272,,242,,,250,,,66,67,,,68,,,258,,264,52", "260,259,,256,257,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77", "78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,", "81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,261,,,,,,,,,,,,,,,,271,272,,242,", ",250,,,66,67,,,68,,,258,,264,52,260,259,,256,257,,,,247,,,,,99,87,90", "91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,", "75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,", ",,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48", "261,,,,,,,,,,,,,,,,271,272,,242,,,250,,,66,67,,,68,,,258,,,52,260,259", ",256,257,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82", "65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354", "111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109", "117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68", ",,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78", "26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81", "346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66", "67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,", ",,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80", ",,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64", "107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,", "250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,", ",,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352", "79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351", "352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,", ",242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76", "351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92", "94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73", "74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,", ",115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,", ",,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90", "91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78,26,11,65", ",,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,", ",23,,,,,,10,53,,12,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,", ",,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103", "104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110", "112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118", ",101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52", ",,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65", "89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111", "110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117", "118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,433", ",,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26", "82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346", "354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108", ",109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67", ",,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77", "78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,", "81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66", "67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,", ",,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,", ",,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107", "106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250", ",,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88", "98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80", ",,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107", "106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250", ",,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88", "98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80", ",,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107", "106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250", ",,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88", "98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80", ",,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107", "106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250", ",,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88", "98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79", "80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,", "242,,,250,,,66,67,,,68,,,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92", "94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73", "74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,", ",115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,", ",,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,793,,319,,52,,,325,,,,,,247", ",,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113", ",,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102", "49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24", ",,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112", "113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,", ",,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,-434", ",46,47,,,,-434,-434,-434,,,-434,-434,-434,,-434,,,,,,,,-434,-434,-434", "-434,,,,,,,,,-434,-434,,-434,-434,-434,-434,-434,,,,,,,,,,,,,,,,,,,", ",,,-434,-434,-434,-434,-434,-434,-434,-434,-434,-434,-434,-434,-434", "-434,,,-434,-434,-434,,,-434,,303,-434,,,-434,-434,,-434,,-434,,-434", ",-434,-434,,-434,-434,-434,-434,-434,-326,-434,-434,-434,,,,-326,-326", "-326,,,-326,-326,-326,,-326,-434,,,-434,-434,,-434,-326,-434,-326,-326", ",,,,-434,,,,-326,-326,,-326,-326,-326,-326,-326,,,,,,,,,,,,,,,,,,,,", ",,-326,-326,-326,-326,-326,-326,-326,-326,-326,-326,-326,-326,-326,-326", ",,-326,-326,-326,,,-326,,312,-326,,,-326,-326,,-326,,-326,,-326,,-326", "-326,,-326,-326,-326,-326,-326,,-326,,-326,,,,,,,,,,,,,,-326,,,-326", "-326,,-326,,-326,77,78,26,,65,,-326,,71,72,,,,75,,73,74,76,351,352,79", "80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35", "36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,", ",,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90", "91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78,26,11,65", ",,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,", ",23,,,,,,10,53,,12,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,", ",,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103", "104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112", "113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,", ",,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103", "104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112", "113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118", ",101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319", ",52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78", "26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81", "346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66", "67,,,68,,793,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98", ",,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,", ",,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107", "106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250", ",,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88", "98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79", "80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,862,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78,26,11,65,,,,71,72,,", ",75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10", "53,,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48", ",,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99", "87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46", "47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251", ",,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50", "48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,", ",99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71", "72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251", ",,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49", "50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325", ",,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89", "103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110", "112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117", "118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321", ",319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77", "78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81", "33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108", "324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66", "67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,", ",,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351", "352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,", ",,,,242,,,250,,,66,67,,,68,,,,319,,52,,,325,,,,,,247,,,,,99,322,90,91", ",92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75", ",73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,", ",115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,", ",,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247", ",,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112", "113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,,,52,,", ",,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89", "103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111", "110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109", "117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68", ",,,,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77", "78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,", "81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106", "108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,", ",66,67,,,68,,793,,,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35", "36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,", ",,,88,98,237,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35", "36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,", ",,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36", "79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,", ",,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351", "352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,", ",242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76", "351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92", "94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73", "74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,", ",115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,", ",,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90", "91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,", "75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53", ",,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,", ",,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87", "90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47", ",75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,", "53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48", ",,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247", ",,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47", "77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111", "110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109", "117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40", ",,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,417,82", ",89,103,104,,,46,47,77,78,26,,65,,,,71,72,,,,75,,73,74,76,351,352,79", "80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351", "352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,", ",,,,242,,,250,,,66,67,,,68,,,,319,,52,,,325,,,,,,247,,,,,99,322,90,91", ",92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75", ",73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,", "53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,", ",,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99", "87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46", "47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251", ",,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50", "48,,,,,,,,,,,,,,,,,,,,242,,,250,603,,66,67,,,68,,,,,,52,,,,,,,,,247", ",,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112", "113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118", ",101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,793,,319", ",52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78", "26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81", "346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66", "67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,", ",,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80", ",,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64", "107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,", "250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,", ",,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352", "79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351", "352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,", ",242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76", "351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92", "94,93,95,,,,,88,98,,,,,,,82,,89,103,104,-274,,46,47,,,,-274,-274,-274", ",,-274,-274,-274,488,-274,485,484,483,493,486,,,-274,-274,-274,,,,496", ",,,,,-274,-274,,-274,-274,-274,-274,-274,488,,485,484,483,493,486,,491", "641,,,,,,496,,501,500,504,503,,,,497,,488,,485,484,483,493,486,-274", ",,,491,,,-274,496,,,,303,-274,,504,503,,,,497,,,,,,,,,,491,482,,,,-274", "-274,,,501,500,504,503,,,,497,,,,-274,,,-274,,77,78,26,-274,65,482,", ",71,72,-274,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113", ",,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52", ",,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82", "65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111", "110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117", "118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,", ",52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82", "65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111", "110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117", "118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,", ",52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,123,,,,,122,82", ",89,103,104,,,46,47,77,78,26,,65,,,,71,72,,,,75,,73,74,76,35,36,79,80", ",,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107", "106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250", ",,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88", "98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79", "80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351", "352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,", ",,,,242,,,250,,,66,67,,,68,,,,,,52,,,325,,,,,,247,,,,,99,322,90,91,", "92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,", "73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115", "114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,", ",,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,", "92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,", "73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53", ",,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,", ",,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87", "90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47", ",75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,", ",,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50", "48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,", ",99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71", "72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113", ",,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102", "49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247", ",,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112", "113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118", ",101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,,", "52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,", "89,103,104,,,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79", "80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,,12,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45", ",,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35", "36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,", ",,,88,98,,,,,,,82,,89,103,104,-311,,46,47,,,,-311,-311,-311,,,-311,-311", "-311,,-311,,,,,,,,-311,,-311,-311,-311,,,,,,,,-311,-311,,-311,-311,-311", "-311,-311,,,,,,,,,,,,,,,,,,,,,,,-311,-311,-311,-311,-311,-311,-311,-311", "-311,-311,-311,-311,-311,-311,,,-311,-311,-311,,,-311,,,-311,,,-311", "-311,,-311,,-311,,-311,,-311,-311,,-311,-311,-311,-311,-311,,-311,,-311", ",,,,,,,,,,,,,-311,,,-311,-311,-311,-311,,-311,,-311,,77,78,26,-311,65", ",,,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113", ",,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102", "49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247", ",,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112", "113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,", ",,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103", "104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112", "113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,", ",,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103", "104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110", "112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118", ",101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52", ",,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65", "89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111", "110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117", "118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,", ",52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82", "65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354", "111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324", "109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,", ",68,,793,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88", "98,,,,77,78,26,82,65,89,103,104,71,72,46,557,,75,,73,74,76,35,36,79", "80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64", "107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,", "250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,", ",,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352", "79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351", "352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,", ",242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76", "351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92", "94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73", "74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115", "114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,", ",,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91", ",92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75", ",73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,", ",115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,", ",,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247", ",,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,557,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113", ",,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52", ",,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82", "65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111", "110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109", "117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68", ",321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98", "237,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79", "80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351", "352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,", ",242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76", "351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92", "94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73", "74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,", ",115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,", ",,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90", "91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,", "75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,", ",,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48", ",,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99", "87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46", "47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251", ",,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50", "48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,", ",99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71", "72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113", ",,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102", "49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247", ",,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112", "113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,", ",,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103", "104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110", "112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118", ",101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52", ",,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65", "89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111", "110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117", "118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,", ",52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82", "65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354", "111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109", "117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68", ",,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78", "26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81", "346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66", "67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,", ",,,,,82,,89,103,104,,,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74,76", "35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,,12,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94", "93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74", "76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94", "93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74", "76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94", "93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74", "76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94", "93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74", "76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94", "93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74", "76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,", ",,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94", "93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74", "76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115", "114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,", ",,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91", ",92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75", ",73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,", "115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,", ",,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90", "91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78,26,11,65", ",,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,", ",23,,,,,,10,53,9,12,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,", ",,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,417,82,,89,103,104", ",,46,47,77,78,26,,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33", "32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324", "109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,", ",68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88", "98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80", ",,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107", "106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250", ",,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88", "98,,,,,,,82,,89,103,104,-718,,46,47,,,,-718,-718,-718,,,-718,-718,-718", ",-718,,,,,,,,-718,-718,-718,-718,-718,,,,,,,,-718,-718,,-718,-718,-718", "-718,-718,,,,,,,,,,,,,,,,,,,,,,,-718,-718,-718,-718,-718,-718,-718,-718", "-718,-718,-718,-718,-718,-718,,,-718,-718,-718,,,-718,,,-718,,,-718", "-718,,-718,,-718,,-718,,-718,-718,,-718,-718,-718,-718,-718,,-718,-718", "-718,,,,,,,,,,,,,,-718,,,-718,-718,-718,-718,,-718,-717,-718,,,,,-718", "-717,-717,-717,,,-717,-717,-717,,-717,,,,,,,,-717,-717,-717,-717,-717", ",,,,,,,-717,-717,,-717,-717,-717,-717,-717,,,,,,,,,,,,,,,,,,,,,,,-717", "-717,-717,-717,-717,-717,-717,-717,-717,-717,-717,-717,-717,-717,,,-717", "-717,-717,,,-717,,,-717,,,-717,-717,,-717,,-717,,-717,,-717,-717,,-717", "-717,-717,-717,-717,,-717,-717,-717,,,,,,,,,,,,,,-717,,,-717,-717,-717", "-717,,-717,,-717,,77,78,26,-717,65,,,,71,72,,,,75,,73,74,76,351,352", "79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78,26,11,65,,,,71,72,,,,75", ",73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53", "9,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,", ",,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87", "90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,-274,,46,47,,,,-274", "-274,-274,,,-274,-274,-274,,-274,,,,,,,,-274,-274,-274,-274,,,,,,,,", "-274,-274,,-274,-274,-274,-274,-274,,,,,,,,,,,,,,,,,,,,,,,-274,-274", "-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,,,-274,-274", "-274,,,-274,,303,-274,,,-274,-274,,-274,,-274,,-274,,-274,-274,,-274", "-274,-274,-274,-274,,-274,-274,-274,,,,,,,,,,,,,,-274,,,-274,-274,,-274", ",-274,77,78,26,,65,,-274,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81", "33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108", ",109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67", ",,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77", "78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81", "33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108", ",109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67", ",,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77", "78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,", "81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66", "67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,", ",,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,", ",,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66", "67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,", ",77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,", ",,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106", "108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66", "67,,,68,,433,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98", ",,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80", ",,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64", "107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,", "250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,", ",,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352", "79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242", ",,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35", "36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,", ",242,,,250,,,66,67,,,68,,433,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94", "93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74", "76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115", "114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,", ",,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91", ",92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75", ",73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,", "53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,", ",,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99", "87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46", "47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251", ",,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50", "48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,", ",99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71", "72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113", ",,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102", "49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247", ",,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113", ",,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102", "49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24", ",,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104", "71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113", ",,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101", "102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52", ",,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82", "65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111", "110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117", "118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,", ",52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82", "65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354", "111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109", "117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68,,,", ",,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65", "89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110", "112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118", ",101,102,,,355,,,,,,,,,,,,,,,,,,,,1100,,,250,,,66,67,,,68,,,,,,,,,,", ",,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103", "104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112", "113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118,,101", "102,,,355,,,,,,,,,,,,,,,,,,,,343,,,250,,,66,67,,,68,,,488,,485,484,483", "493,486,,,,,,,,,496,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,585,,491", "82,,89,103,104,77,78,26,,65,504,503,,71,72,497,,,75,,73,74,76,351,352", "79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347,,,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,392", ",,38,,,66,67,,,68,,40,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,", "88,98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79", "80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,105", "64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,1139,", ",250,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88", "98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80", ",,,,,81,346,354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64", "107,106,108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339", ",,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,", ",,77,78,26,82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,", ",81,346,354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107", "106,108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66", "67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77", "78,26,82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346", "354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,397,64,107,106,398", ",109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,404,,,399,,,250,,,66,67", ",,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78", "26,82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346", "354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,397,64,107,106,398", ",109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,399,,,250,,,66,67,,,68", ",,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82", "65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111", "110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117", "118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,250,,,66,67,,,68,,,488,", "485,484,483,493,486,,,,,,,,,496,,99,87,90,91,,92,94,93,95,,,,,88,98", ",,,357,,491,82,,89,103,104,77,78,26,,65,504,503,,71,72,497,,,75,,73", "74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347", ",,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,", ",,,,,,,,,,,,1139,,,250,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,", "92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,,73,74", "76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347,,,115", "114,116,105,64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,", ",,,,,,343,,,339,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93", "95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,,73,74,76,351", "352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347,,,115,114", "116,105,64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,", ",,343,,,339,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,,73,74,76,351,352", "79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347,,,115,114,116", "105,64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343", ",,339,,,66,67,,,68,,338,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,", ",,88,98,,,,,,,82,,89,103,104,182,193,183,206,179,199,189,188,209,210", "204,187,186,181,207,211,212,191,180,194,198,200,192,185,,,,201,208,203", "202,195,205,190,178,197,196,,,,,,177,184,175,176,172,173,174,135,137", ",,136,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169", "155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142", "164,143,,,171,99,,,,,,,,,,,,,,98,182,193,183,206,179,199,189,188,209", "210,204,187,186,181,207,211,212,191,180,194,198,200,192,185,,,,201,208", "203,202,195,205,190,178,197,196,,,,,,177,184,175,176,172,173,174,135", "137,134,,136,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,", ",,168,169,155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170,157,158", "152,150,142,164,143,,,171,99,,,,,,,,,,,,,,98,182,193,183,206,179,199", "189,188,209,210,204,187,186,181,207,211,212,191,180,194,198,200,192", "185,,,,201,208,203,202,195,205,190,178,197,196,,,,,,177,184,175,176", "172,173,174,135,137,,,136,,,,,,,,166,167,,163,145,146,147,154,151,153", ",,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170", "157,158,152,150,142,164,143,,,171,99,,,,,,,,,,,,,,98,182,193,183,206", "179,199,189,188,209,210,204,187,186,181,207,211,212,191,180,194,198", "200,192,185,,,,201,208,203,202,195,205,190,178,197,196,,,,,,177,184", "175,176,172,173,174,135,137,,,136,,,,,,,,166,167,,163,145,146,147,154", "151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160,159,,144,165,162", "161,170,157,158,152,150,142,164,143,,,171,99,111,110,112,113,,,,,,,", ",,98,,,115,114,116,770,,,488,773,485,484,483,493,486,101,102,,,355,", ",,496,,,,,,,,,,,,,,,,772,,,743,,,491,741,,,742,,,,,501,500,504,503,", ",,497,,,,771,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,", ",82,,89,103,104,,,758,759,,115,114,116,770,,,,773,750,,,,,101,102,,", "355,496,,,,,,,,,,,,,,,,,,,772,,,743,,,,741,,,742,,745,,,,,,,497,,,,", ",,771,,,,99,751,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89", "103,104,,,758,759,,115,114,116,770,,,488,773,485,484,483,493,486,101", "102,,,355,,,,496,,,,,,,,,,,,,,,,772,,,743,,,491,741,,,742,,,,,501,500", "504,503,,,,497,,,,771,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110", "112,113,,,82,,89,103,104,,,758,759,,115,114,116,770,,,488,773,485,484", "483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,772,,,743,,,491,741", ",,742,,,,,,,504,503,,,,497,,,,771,,,,99,87,90,91,,92,94,93,95,,,,,88", "98,111,110,112,113,,,82,,89,103,104,,,758,759,,115,114,116,770,,,488", "773,485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,772,,,743", ",,491,741,,,742,,1047,,,,,504,503,,,,497,,,,771,,,,99,87,90,91,,92,94", "93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,758,759,,115,114", "116,770,,,488,773,485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,", ",,,,,,772,,,743,,,491,741,,,742,,,,,,,504,503,,,,497,,,,771,,,,99,87", "90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,758", "759,,115,114,116,770,,,,773,750,,,,,101,102,,,355,496,,,,,,,,,,,,,,", ",,,,772,,,743,,,,741,,,742,,745,,,,,,,497,,,,,,,771,,,,99,751,90,91", ",92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,758,759,,115", "114,116,770,,,,773,750,,,,,101,102,,,355,496,,,,,,,,,,,,,,,,,,,772,", ",743,,,,741,,,742,,745,,,,,,,497,,,,,,,771,,,,99,751,90,91,,92,94,93", "95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,758,759,,115,114,116", "770,,,,773,,,,,,101,102,,,355,,,,,,,,,,,,,,,,,,,,772,,,743,,,,741,,", "742,,,,,,,,,,,,,,,,771,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110", "112,113,,,82,,89,103,104,,,758,759,,115,114,116,770,,,,773,,,,,,101", "102,,,355,,,,,,,,,,,,,,,,,,,,772,,,743,,,,741,,,742,,745,,,,,,,,,,,", ",,771,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89", "103,104,,,758,759,,115,114,116,770,,,,773,,,,,,101,102,,,355,,,,,,,", ",,,,,,,,,,,,772,,,743,,,,741,,,742,,745,,,,,,,,,,,,,,771,,,,99,87,90", "91,,92,94,93,95,,,,,88,98,237,,,,,,82,,89,103,104,,,758,759,182,193", "183,206,179,199,189,188,209,210,204,187,186,181,207,211,212,191,180", "194,198,200,192,185,,,,201,208,203,291,290,292,289,178,197,196,,,,,", "177,184,175,176,286,287,288,284,137,107,106,285,,109,,,,,,166,167,,163", "145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,296,,,,,,", ",160,159,,144,165,162,161,170,157,158,152,150,142,164,143,,,171,111", "110,112,113,,,488,,485,484,483,493,486,,,,115,114,116,770,,496,,773", ",,,,,101,102,,,355,,,,,,,,,,491,,,,,,,,,,772,504,503,743,,,497,741,", ",742,,,,,,,,,,,,,,,,771,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,482,", ",,,82,,89,103,104,,,758,759,182,193,183,206,179,199,189,188,209,210", "204,187,186,181,207,211,212,191,180,194,198,200,192,185,,,,201,208,203", "202,195,205,190,178,197,196,,,,,,177,184,175,176,172,173,174,135,137", ",,136,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169", "155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142", "164,143,,,171,111,110,112,113,,,,,,,,,,,,,115,114,116,770,,,,773,750", ",,,,101,102,,,355,496,,,,,,,,,,,,,,,,,,,772,,,743,,,,741,,,742,,745", ",,,,,,497,,,,,,,771,,,,99,751,90,91,,92,94,93,95,,,,,88,98,111,110,112", "113,,,82,,89,103,104,,,758,759,,115,114,116,770,,,,773,750,,,,,101,102", ",,355,496,,,,,,,,,,,,,,,,,,,772,,,743,,,,741,,,742,,745,,,,,,,497,,", ",,,,771,,,,99,751,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82", ",89,103,104,,,758,759,,115,114,116,770,,,,773,,,,,,101,102,,,355,,,", ",,,,,,,,,,,,,,,,772,,,743,,,,741,,,742,,,,,,,,,,,,,,,,771,,,,99,87,90", "91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,758,759", ",115,114,116,770,,,,773,,,,,,101,102,,,355,,,,,,,,,,,,,,,,,,,,772,,", "743,,,,741,,,742,,,,,,,,,,,,,,,,771,,,,99,87,90,91,,92,94,93,95,,,,", "88,98,111,110,112,113,,,82,,89,103,104,,,758,759,,115,114,116,770,,", ",773,,,,,,101,102,,,355,,,,,,,,111,110,112,113,,,,,,,,,772,,,743,115", "114,116,741,,,742,,745,,,,,101,102,,,355,,,,,771,,,,99,87,90,91,,92", "94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,758,759,,,,,,,,,,,,99,87,90", "91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,,,,115", "114,116,,,,,,,,,,,101,102,,,355,111,110,112,113,,,,,,,,,,,,,115,114", "116,,,,,,,,,,,101,102,,,355,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95", ",,,,88,98,,,,,,,82,,89,103,104,,,,,,,,,99,87,90,91,,92,94,93,95,,,,", "88,98,111,110,112,113,,,82,,89,103,104,,,,,,115,114,116,488,,485,484", "483,493,486,,,,101,102,,,355,496,,,,,,,,,,,488,,485,484,483,493,486", ",,,,491,,,,496,,,,,501,500,504,503,,,,497,,,,,,,,,,491,99,87,90,91,", "92,94,93,95,,504,503,,88,98,497,,,,,,82,,89,103,104,,,488,482,485,484", "483,493,486,,488,,485,484,483,493,486,496,,,,,,,,496,,,488,482,485,484", "483,493,486,,,,,491,,,,496,,,,491,501,500,504,503,,,,497,501,500,504", "503,,,,497,488,491,485,484,483,493,486,,,,,,504,503,,496,,497,488,,485", "484,483,493,486,,,,,,,482,,496,,,,491,,482,,,,,,,,,504,503,,,,497,,491", ",482,,,,,,,501,500,504,503,,,,497,,,,,,,,,,,,1211,466,,,1210,,,,,,482", ",166,167,,163,145,146,147,154,151,153,,,148,149,,,482,168,169,155,156", ",,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164", "143,553,459,171,,554,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148", "149,,,,168,169,155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170,157", "158,152,150,142,164,143,462,466,171,,461,,,,,,,,166,167,,163,145,146", "147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159", ",144,165,162,161,170,157,158,152,150,142,164,143,1195,466,171,,1196", ",,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155", "156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142", "164,143,725,466,171,,726,,,,,,,,166,167,,163,145,146,147,154,151,153", ",,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161", "170,157,158,152,150,142,164,143,1193,459,171,,1194,,,,,,,,166,167,,163", "145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,", ",160,159,,144,165,162,161,170,157,158,152,150,142,164,143,867,466,171", ",866,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169", "155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150", "142,164,143,723,459,171,,724,,,,,,,,166,167,,163,145,146,147,154,151", "153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162", "161,170,157,158,152,150,142,164,143,455,459,171,,456,,,,,,,,166,167", ",163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,", ",,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,803,459", "171,,804,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168", "169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152", "150,142,164,143,806,466,171,,807,,,,,,,,166,167,,163,145,146,147,154", "151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165", "162,161,170,157,158,152,150,142,164,143,832,459,171,,833,,,,,,,,166", "167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303", ",,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,864", "459,171,,865,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,", ",,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158", "152,150,142,164,143,834,466,171,,835,,,,,,,,166,167,,163,145,146,147", "154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144", "165,162,161,170,157,158,152,150,142,164,143,553,459,171,,554,,,,,,,", "166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,", ",,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143", "837,466,171,,838,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149", ",,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157", "158,152,150,142,164,143,723,459,171,,724,,,,,,,,166,167,,163,145,146", "147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159", ",144,165,162,161,170,157,158,152,150,142,164,143,725,466,171,,726,,", ",,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156", ",,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164", "143,,,171"];
      racc_action_table = (arr = $$$('Array').$new(28951, nil));
      idx = 0;
      $send(clist, 'each', [], function $Ruby31$2(str){
        
        
        if (str == null) str = nil;;
        return $send(str.$split(",", -1), 'each', [], function $$3(i){var $writer = nil;

          
          
          if (i == null) i = nil;;
          if (!$truthy(i['$empty?']())) {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, 1);}, 1);
      clist = ["461,348,1010,845,518,390,389,461,461,461,512,512,781,461,461,731,461", "1052,926,833,835,1080,921,986,461,1082,414,622,413,1229,440,628,832", "498,752,622,461,461,830,461,461,461,461,461,1097,1098,1101,381,382,393", "740,498,752,990,23,740,1083,1083,990,740,1052,731,921,518,926,348,461", "461,461,461,461,461,461,461,461,461,461,461,461,461,550,550,461,461", "461,835,461,461,348,440,461,1158,414,461,413,23,638,638,461,781,461", "3,461,461,512,461,461,461,461,461,105,461,845,461,390,389,619,105,105", "105,1010,1193,105,105,105,1010,105,461,833,835,461,461,986,461,105,461", "105,105,105,1080,628,832,461,1082,1080,461,105,105,1082,105,105,105", "105,105,1194,1195,830,1215,393,830,973,830,1097,1098,1101,381,382,1097", "1098,1101,381,382,1047,69,550,9,105,105,105,105,105,105,105,105,105", "105,105,105,105,105,638,922,105,105,105,638,105,105,817,12,105,817,386", "105,105,806,105,386,105,1158,105,19,105,105,1158,105,105,105,105,105", "619,105,108,105,240,619,973,922,241,108,108,108,1195,1196,108,108,108", "105,108,1193,105,105,105,105,1193,105,108,105,108,108,108,20,105,14", "1047,105,834,803,108,108,69,108,108,108,108,108,973,19,15,973,806,806", "1194,1195,804,1215,17,1194,1195,243,1215,973,1085,240,1085,813,813,241", "108,108,108,108,108,108,108,108,108,108,108,108,108,108,742,27,108,108", "108,20,108,108,1196,806,108,1000,806,108,108,1120,108,742,108,834,108", "803,108,108,806,108,108,108,108,108,31,108,726,108,355,355,243,42,804", "726,726,726,48,48,726,726,726,108,726,1196,108,108,108,108,1196,108", "726,108,726,726,726,803,108,834,803,108,697,697,726,726,1000,726,726", "726,726,726,803,813,804,1120,1120,804,655,284,925,573,249,1213,925,941", "284,399,45,804,31,399,1120,1213,726,726,726,726,726,726,726,726,726", "726,726,726,726,726,355,355,726,726,726,31,726,726,48,48,726,723,409", "726,726,653,726,292,726,53,726,213,726,726,292,726,726,726,726,726,249", "726,724,726,655,655,284,573,573,573,415,941,941,941,655,408,226,726", "410,917,726,726,726,726,573,726,412,726,941,725,455,248,726,228,865", "726,725,725,725,232,723,725,725,725,391,725,409,409,409,653,653,391", "292,725,725,725,725,725,864,653,391,724,16,16,242,725,725,456,725,725", "725,725,725,244,415,415,415,455,917,408,408,408,410,410,410,411,44,248", "245,455,412,412,412,865,251,725,725,725,725,725,725,725,725,725,725", "725,725,725,725,391,939,725,725,725,456,725,725,864,798,725,939,287", "725,725,302,725,456,725,287,725,798,725,725,44,725,725,725,725,725,866", "725,725,725,1183,1183,44,866,866,866,411,411,411,866,866,377,866,725", "377,939,725,725,725,725,866,725,283,725,316,5,317,939,725,283,5,725", "866,866,320,866,866,866,866,866,818,818,332,287,231,1180,231,231,231", "231,231,134,1180,285,772,333,134,134,772,231,285,1180,866,866,866,866", "866,866,866,866,866,866,866,866,866,866,335,286,866,866,866,231,866", "866,286,336,866,283,29,866,231,231,231,231,866,29,866,231,866,866,337", "866,866,866,866,866,328,866,462,866,1180,328,343,85,506,462,462,462", "285,506,346,462,462,866,462,85,866,866,347,866,349,866,462,462,350,85", "373,231,866,373,374,866,286,374,462,462,354,462,462,462,462,462,1150", "29,356,1150,641,1099,641,641,641,641,641,288,1099,359,755,755,380,380", "288,641,363,1099,462,462,462,462,462,462,462,462,462,462,462,462,462", "462,365,43,462,462,462,641,462,462,371,375,462,21,289,462,641,641,641", "641,462,289,462,641,462,462,359,462,462,462,462,462,376,462,462,462", "1099,675,359,378,387,966,288,966,966,966,966,966,388,462,43,290,462", "462,398,462,966,462,290,291,21,867,43,641,462,392,291,462,867,867,867", "694,21,394,867,867,403,867,966,289,423,694,429,431,675,867,867,966,966", "966,966,432,439,434,966,437,675,867,867,439,867,867,867,867,867,441", "398,451,439,453,401,454,463,398,694,694,290,401,398,694,966,469,398", "470,291,473,401,867,867,867,867,867,867,867,867,867,867,867,867,867", "867,398,474,867,867,867,475,867,867,54,478,867,479,480,867,490,54,439", "502,867,505,867,508,867,867,54,867,867,867,867,867,398,867,867,867,401", "514,340,522,523,530,531,342,341,340,933,532,533,867,342,341,867,867", "340,867,933,867,631,342,341,558,559,560,867,631,564,867,215,215,215", "215,215,215,631,54,580,215,215,581,584,586,215,837,215,215,215,215,215", "215,215,591,595,604,933,605,215,215,215,215,215,215,215,340,606,215", "933,616,342,341,620,215,215,215,215,215,215,215,215,215,215,215,215", "631,215,215,215,18,215,215,215,215,215,590,18,837,621,360,51,51,590", "623,837,18,360,650,658,837,660,590,667,837,215,360,676,215,681,686,215", "215,344,688,215,690,215,708,709,344,215,711,837,718,529,727,51,51,344", "215,736,744,745,746,215,215,215,215,775,215,215,215,215,778,18,780,786", "215,215,787,590,788,837,790,360,215,529,215,215,215,529,529,215,215", "836,836,836,836,836,836,792,800,802,836,836,805,808,344,836,397,836", "836,836,836,836,836,836,578,578,578,578,578,836,836,836,836,836,836", "836,809,907,836,907,907,907,812,907,836,836,836,836,836,836,836,836", "836,836,836,836,820,836,836,836,239,836,836,836,836,836,838,239,397", "826,1138,827,831,838,907,397,239,1138,838,840,397,844,838,907,397,836", "1138,846,836,861,863,836,836,807,872,836,885,836,888,889,807,836,892", "397,894,807,897,646,646,807,836,646,646,646,898,836,836,836,836,900", "836,836,836,836,901,239,903,906,836,836,919,838,927,397,928,1138,836", "932,836,836,836,935,940,836,836,233,233,233,233,233,233,959,962,963", "233,233,972,977,807,233,980,233,233,233,233,233,233,233,25,987,989,996", "997,233,233,233,233,233,233,233,998,710,233,710,710,710,999,710,233", "233,233,233,233,233,233,233,233,233,233,233,1025,233,233,233,1026,233", "233,233,233,233,25,25,25,25,25,25,25,25,25,25,25,1031,25,25,1036,1037", "25,25,1038,233,1039,25,233,1125,1040,233,233,1041,1045,233,1046,233", "25,1125,25,233,25,25,1049,25,25,25,25,25,233,25,1053,1060,1065,233,233", "233,233,1066,233,233,233,233,1068,1069,1070,1072,233,233,1073,25,1125", "1125,1074,1089,233,1125,233,233,233,1100,1103,233,233,991,991,991,991", "991,991,1104,1105,1106,991,991,1117,1136,1139,991,1148,991,991,991,991", "991,991,991,8,8,8,8,8,991,991,991,991,991,991,991,1149,1154,991,1164", "1165,1167,1170,444,991,991,991,991,991,991,991,991,991,991,991,991,1173", "991,991,991,1174,991,991,991,991,991,444,444,444,444,444,444,444,444", "444,444,444,1175,444,444,1176,1178,444,444,1192,991,1197,771,991,771", "771,991,991,771,1199,991,1210,991,444,1211,444,991,444,444,1217,444", "444,444,444,444,991,444,1218,1219,1220,991,991,991,991,1,991,991,991", "991,771,,,,991,991,,444,,444,,,991,,991,991,991,,,991,991,1096,1096", "1096,1096,1096,1096,,,,1096,1096,,,,1096,,1096,1096,1096,1096,1096,1096", "1096,331,331,331,331,331,1096,1096,1096,1096,1096,1096,1096,,,1096,", ",,,689,1096,1096,1096,1096,1096,1096,1096,1096,1096,1096,1096,1096,", "1096,1096,1096,,1096,1096,1096,1096,1096,689,689,689,689,689,689,689", "689,689,689,689,,689,689,,,689,689,,1096,,,1096,,,1096,1096,,,1096,", "1096,689,,689,1096,689,689,,689,689,689,689,689,1096,689,,,,1096,1096", "1096,1096,,1096,1096,1096,1096,,,,,1096,1096,,689,,,,,1096,,1096,1096", "1096,,,1096,1096,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,370,370,370", "370,370,2,2,2,2,2,2,2,,,2,,,,,450,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2", "2,2,2,2,450,450,450,450,450,450,450,450,450,450,450,,450,450,,,450,450", ",2,,,2,,,2,2,,,2,,2,450,,450,2,450,450,,450,450,450,450,450,2,450,,", ",2,2,2,2,,2,2,2,2,,,,,2,2,,450,,,,,2,,2,2,2,,,2,2,639,639,639,639,639", "639,,,,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639,639", "639,639,639,639,,,639,,,,,719,639,639,639,639,639,639,639,639,639,639", "639,639,,639,639,639,,639,639,639,639,639,719,719,719,719,719,719,719", "719,719,719,719,,719,719,,,719,719,,639,,,639,,,639,639,,,639,,639,719", ",719,639,719,719,,719,719,719,719,719,639,719,,,,639,639,639,639,,639", "639,639,639,,,,,639,639,,719,,,,,639,,639,639,639,,,639,639,1062,1062", "1062,1062,1062,1062,,,,1062,1062,,,,1062,,1062,1062,1062,1062,1062,1062", "1062,,,,,,1062,1062,1062,1062,1062,1062,1062,,1190,1062,1190,1190,1190", ",1190,1062,1062,1062,1062,1062,1062,1062,1062,1062,1062,1062,1062,,1062", "1062,1062,,1062,1062,1062,1062,1062,869,869,869,869,869,869,869,869", "869,869,869,,869,869,,,869,869,,1062,,,1062,,,1062,1062,,,1062,,1062", "869,,869,1062,869,869,,869,869,869,869,869,1062,869,,,,1062,1062,1062", "1062,,1062,1062,1062,1062,,,,,1062,1062,,869,,,,,1062,,1062,1062,1062", ",,1062,1062,967,967,967,967,967,967,,,,967,967,,,,967,,967,967,967,967", "967,967,967,,,,,,967,967,967,967,967,967,967,,1092,967,1092,1092,1092", ",1092,967,967,967,967,967,967,967,967,967,967,967,967,,967,967,967,", "967,967,967,967,967,314,314,314,314,314,314,314,314,314,314,314,,314", "314,,,314,314,,967,,,967,,,967,967,,,967,,967,314,,314,967,314,314,", "314,314,314,314,314,967,314,,,,967,967,967,967,,967,967,967,967,,,,", "967,967,,314,,,,,967,,967,967,967,,,967,967,369,369,369,369,369,369", ",,,369,369,,,,369,,369,369,369,369,369,369,369,,,,,,369,369,369,369", "369,369,369,,,369,,,,,,369,369,369,369,369,369,369,369,369,369,369,369", ",369,369,369,,369,369,369,369,369,547,547,547,547,547,547,547,547,547", "547,547,,547,547,,,547,547,,369,,,369,,,369,369,,,369,,369,547,,547", "369,547,547,,547,547,547,547,547,369,547,,,,369,369,369,369,,369,369", "369,369,,,,,369,369,547,547,,,,,369,,369,369,369,,,369,369,250,250,250", "250,250,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250", "250,250,250,250,250,250,,,250,,,,,,250,250,250,250,250,250,250,250,250", "250,250,250,,250,250,250,,250,250,250,250,250,1061,1061,1061,1061,1061", "1061,1061,1061,1061,1061,1061,,1061,1061,,,1061,1061,,250,,,250,,,250", "250,,,250,,250,1061,,1061,250,1061,1061,,1061,1061,1061,1061,1061,250", "1061,,,,250,250,250,250,,250,250,250,250,,,,,250,250,,1061,,,,,250,", "250,250,250,,,250,250,852,852,852,852,852,852,,,,852,852,,,,852,,852", "852,852,852,852,852,852,,,,,,852,852,852,852,852,852,852,,,852,,,,,", "852,852,852,852,852,852,852,852,852,852,852,852,,852,852,852,,852,852", "852,852,852,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,", "1005,1005,,,1005,1005,,852,,,852,,,852,852,,,852,,852,1005,,1005,852", "1005,1005,,1005,1005,1005,1005,1005,852,1005,,,,852,852,852,852,,852", "852,852,852,,,,,852,852,,1005,,,,,852,,852,852,852,,,852,852,227,227", "227,227,227,227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,,", "227,227,227,227,227,227,227,,,227,,,,,,227,227,227,227,227,227,227,227", "227,227,227,227,,227,227,227,,227,227,227,227,227,602,602,602,602,602", "602,602,602,602,602,602,,602,602,,,602,602,,227,,,227,,,227,227,,,227", ",227,602,,602,227,602,602,,602,602,602,602,602,227,602,,,,227,227,227", "227,,227,227,227,227,,,,,227,227,,602,,,,,227,,227,227,227,,,227,227", "841,841,841,841,841,841,,,,841,841,,,,841,,841,841,841,841,841,841,841", ",,,,,841,841,841,841,841,841,841,,,841,,,,,,841,841,841,841,841,841", "841,841,841,841,841,841,,841,841,841,,841,841,841,841,841,1028,1028", "1028,1028,1028,1028,1028,1028,1028,1028,1028,,1028,1028,,,1028,1028", ",841,,,841,,,841,841,,,841,,841,1028,,1028,841,1028,1028,,1028,1028", "1028,1028,1028,841,1028,,,,841,841,841,841,,841,841,841,841,,,,,841", "841,,1028,,,,,841,,841,841,841,,,841,841,1007,1007,1007,1007,1007,1007", ",,,1007,1007,,,,1007,,1007,1007,1007,1007,1007,1007,1007,,,,,,1007,1007", "1007,1007,1007,1007,1007,,,1007,,,,,,1007,1007,1007,1007,1007,1007,1007", "1007,1007,1007,1007,1007,,1007,1007,1007,,1007,1007,1007,1007,1007,1027", "1027,1027,1027,1027,1027,1027,1027,1027,1027,1027,,1027,1027,,,1027", "1027,,1007,,,1007,,,1007,1007,,,1007,,1007,1027,,1027,1007,1027,1027", ",1027,1027,1027,1027,1027,1007,1027,,,,1007,1007,1007,1007,,1007,1007", "1007,1007,,,,,1007,1007,,1027,,,,,1007,,1007,1007,1007,,,1007,1007,1091", "1091,1091,1091,1091,1091,,,,1091,1091,,,,1091,,1091,1091,1091,1091,1091", "1091,1091,,,,,,1091,1091,1091,1091,1091,1091,1091,,,1091,,,,,,1091,1091", "1091,1091,1091,1091,1091,1091,1091,1091,1091,1091,,1091,1091,1091,,1091", "1091,1091,1091,1091,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004", "1004,,1004,1004,,,1004,1004,,1091,,,1091,,,1091,1091,,,1091,,1091,1004", ",1004,1091,1004,1004,,1004,1004,1004,1004,1004,1091,1004,,,,1091,1091", "1091,1091,,1091,1091,1091,1091,,,,,1091,1091,,1004,,,,,1091,,1091,1091", "1091,,,1091,1091,1140,1140,1140,1140,1140,1140,,,,1140,1140,,,,1140", ",1140,1140,1140,1140,1140,1140,1140,,,,,,1140,1140,1140,1140,1140,1140", "1140,,491,1140,491,491,491,,491,1140,1140,1140,1140,1140,1140,1140,1140", "1140,1140,1140,1140,,1140,1140,1140,,1140,1140,1140,1140,1140,706,,706", "706,706,,706,,491,,1107,,1107,1107,1107,,1107,491,,1140,,,1140,,,1140", "1140,,544,1140,,1140,,,,1140,,706,,528,,,,,1140,,706,1107,,1140,1140", "1140,1140,,1140,1140,1140,1140,,,544,,1140,1140,544,544,,544,544,,1140", "528,1140,1140,1140,528,528,1140,1140,618,618,618,618,618,618,,,,618", "618,,,,618,,618,618,618,618,618,618,618,,,,,,618,618,618,618,618,618", "618,,1108,618,1108,1108,1108,,1108,618,618,618,618,618,618,618,618,618", "618,618,618,,618,618,618,,618,618,618,618,618,546,546,546,546,546,546", "546,546,1108,546,546,,,,,,546,546,,618,,,618,,,618,618,,543,618,,618", "546,,546,618,546,546,,546,546,546,546,546,618,546,,,,618,618,618,618", ",618,618,618,618,,,543,,618,618,543,543,,543,543,,618,,618,618,618,", ",618,618,615,615,615,615,615,615,,,,615,615,,,,615,,615,615,615,615", "615,615,615,,,,,,615,615,615,615,615,615,615,,908,615,908,908,908,,908", "615,615,615,615,615,615,615,615,615,615,615,615,,615,615,615,,615,615", "615,615,615,601,,,,,,,,908,,,,,,,,601,601,,615,,,615,,,615,615,,,615", ",615,601,,601,615,601,601,,601,601,,,601,615,601,,,,615,615,615,615", ",615,615,615,615,,,,,615,615,,,,,,,615,,615,615,615,,,615,615,887,887", "887,887,887,887,,,,887,887,,,,887,,887,887,887,887,887,887,887,,,,,", "887,887,887,887,887,887,887,,,887,,,,,,887,887,887,887,887,887,887,887", "887,887,887,887,,887,887,887,,887,887,887,887,887,545,545,545,545,545", "545,545,,,545,545,,,,,,545,545,,887,,,887,,,887,887,,,887,,887,545,", "545,887,545,545,,545,545,545,545,545,887,545,,,,887,887,887,887,,887", "887,887,887,,,,,887,887,,,,,,,887,,887,887,887,,,887,887,339,339,339", "339,339,339,,,,339,339,,,,339,,339,339,339,339,339,339,339,,,,,,339", "339,339,339,339,339,339,,,339,,,,,,339,339,339,339,339,339,339,339,339", "339,339,339,,339,339,339,,339,339,339,339,339,526,526,526,526,526,526", "526,526,526,526,526,,526,526,,,526,526,,339,,,339,,,339,339,,,339,,339", "526,,526,339,526,526,,526,526,526,526,526,339,526,,,,339,339,339,339", ",339,339,339,339,,,,,339,339,,,,,,,339,,339,339,339,,,339,339,1090,1090", "1090,1090,1090,1090,,,,1090,1090,,,,1090,,1090,1090,1090,1090,1090,1090", "1090,,,,,,1090,1090,1090,1090,1090,1090,1090,,,1090,,,,,,1090,1090,1090", "1090,1090,1090,1090,1090,1090,1090,1090,1090,,1090,1090,1090,,1090,1090", "1090,1090,1090,542,542,542,542,542,542,542,,,542,542,,,,,,542,542,,1090", ",,1090,,,1090,1090,,,1090,,1090,542,,542,1090,542,542,,542,542,542,542", "542,1090,542,,,,1090,1090,1090,1090,,1090,1090,1090,1090,,,,,1090,1090", ",,,,,,1090,,1090,1090,1090,,,1090,1090,38,38,38,38,38,38,,,,38,38,,", ",38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,38,38", "38,38,38,38,38,38,38,38,38,38,,38,38,38,,38,38,38,38,38,541,541,541", "541,541,541,541,,,541,541,,,,,,541,541,,38,,,38,,,38,38,,,38,,38,541", ",541,38,541,541,,541,541,541,541,541,38,541,,,,38,38,38,38,,38,38,38", "38,,,,,38,38,,,,,,,38,,38,38,38,,,38,38,985,985,985,985,985,985,,,,985", "985,,,,985,,985,985,985,985,985,985,985,,,,,,985,985,985,985,985,985", "985,,,985,,,,,,985,985,985,985,985,985,985,985,985,985,985,985,,985", "985,985,,985,985,985,985,985,540,540,540,540,540,540,540,,,540,540,", ",,,,540,540,,985,,,985,,,985,985,,,985,,985,540,,540,985,540,540,,540", "540,540,540,540,985,540,,,,985,985,985,985,,985,985,985,985,,,,,985", "985,,,,,,,985,,985,985,985,,,985,985,1184,1184,1184,1184,1184,1184,", ",,1184,1184,,,,1184,,1184,1184,1184,1184,1184,1184,1184,,,,,,1184,1184", "1184,1184,1184,1184,1184,,,1184,,,,,,1184,1184,1184,1184,1184,1184,1184", "1184,1184,1184,1184,1184,,1184,1184,1184,,1184,1184,1184,1184,1184,361", "361,361,361,361,361,361,361,361,361,361,,361,361,,,361,361,,1184,,,1184", ",,1184,1184,,,1184,,1184,361,,361,1184,361,361,,361,361,361,361,361", "1184,361,,,,1184,1184,1184,1184,,1184,1184,1184,1184,,,,,1184,1184,", ",,,,,1184,,1184,1184,1184,,,1184,1184,385,385,385,385,385,385,,,,385", "385,,,,385,,385,385,385,385,385,385,385,,,,,,385,385,385,385,385,385", "385,,,385,,,,,,385,385,385,385,385,385,385,385,385,385,385,385,,385", "385,385,,385,385,385,385,385,539,539,539,539,539,539,539,,,539,539,", ",,,,539,539,,385,,,385,,,385,385,,,385,,385,539,,539,385,539,539,,539", "539,539,539,539,385,539,,,,385,385,385,385,,385,385,385,385,,,,,385", "385,,,,,,,385,,385,385,385,,,385,385,384,384,384,384,384,384,,,,384", "384,,,,384,,384,384,384,384,384,384,384,,,,,,384,384,384,384,384,384", "384,,,384,,,,,,384,384,384,384,384,384,384,384,384,384,384,384,,384", "384,384,,384,384,384,384,384,538,538,538,538,538,538,538,,,538,538,", ",,,,538,538,,384,,,384,,,384,384,,,384,,384,538,,538,384,538,538,,538", "538,538,538,538,384,538,,,,384,384,384,384,,384,384,384,384,,,,,384", "384,,,,,,,384,,384,384,384,,,384,384,132,132,132,132,132,132,,,,132", "132,,,,132,,132,132,132,132,132,132,132,,,,,,132,132,132,132,132,132", "132,,,132,,,,,,132,132,132,132,132,132,132,132,132,132,132,132,,132", "132,132,,132,132,132,132,132,527,527,527,527,527,527,527,527,527,527", "527,,527,527,,,527,527,,132,,,132,,,132,132,,,132,,132,527,,527,132", "527,527,,527,527,527,527,527,132,527,,,,132,132,132,132,,132,132,132", "132,,,,,132,132,,,,,,,132,,132,132,132,,,132,132,334,334,334,334,334", "334,,,,334,334,,,,334,,334,334,334,334,334,334,334,,,,,,334,334,334", "334,334,334,334,,,334,,,,,,334,334,334,334,334,334,334,334,334,334,334", "334,,334,334,334,,334,334,334,334,334,548,,,,,,,,,,,,,,,,548,548,,334", ",,334,,,334,334,,,334,,334,548,,548,334,548,548,,548,548,,,548,334,548", ",,,334,334,334,334,,334,334,334,334,,,,,334,334,,,,914,914,914,334,914", "334,334,334,914,914,334,334,,914,,914,914,914,914,914,914,914,,,,,,914", "914,914,914,914,914,914,,,914,,,,,,,914,,,914,914,914,914,914,914,914", "914,,914,914,914,,914,914,914,914,914,537,537,537,537,537,537,537,,", "537,537,,,,,,537,537,,914,,,914,,,914,914,,,914,,,537,,537,914,537,537", ",537,537,537,537,537,914,537,,,,914,914,914,914,,914,914,914,914,,,", ",914,914,,,,915,915,915,914,915,914,914,914,915,915,914,914,,915,,915", "915,915,915,915,915,915,,,,,,915,915,915,915,915,915,915,,,915,,,,,", ",915,,,915,915,915,915,915,915,915,915,,915,915,915,,915,915,915,915", "915,362,362,362,362,362,362,362,362,362,362,362,,362,362,,,362,362,", "915,,,915,,,915,915,,,915,,,362,,362,915,362,362,,362,362,362,362,362", "915,362,,,,915,915,915,915,,915,915,915,915,,,,,915,915,,,,916,916,916", "915,916,915,915,915,916,916,915,915,,916,,916,916,916,916,916,916,916", ",,,,,916,916,916,916,916,916,916,,,916,,,,,,,916,,,916,916,916,916,916", "916,916,916,,916,916,916,,916,916,916,916,916,534,,,,,,,,,,,,,,,,534", "534,,916,,,916,,,916,916,,,916,,,534,,534,916,534,534,,534,534,,,,916", ",,,,916,916,916,916,,916,916,916,916,,,,,916,916,,,,261,261,261,916", "261,916,916,916,261,261,916,916,,261,,261,261,261,261,261,261,261,,", ",,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261", "261,261,261,,261,261,261,,261,261,261,261,261,535,,,,,,,,,,,,,,,,535", "535,,261,,,261,,,261,261,,,261,,,535,,535,261,535,535,,535,535,,,,261", ",,,,261,261,261,261,,261,261,261,261,,,,,261,261,,,,729,729,729,261", "729,261,261,261,729,729,261,261,,729,,729,729,729,729,729,729,729,,", ",,,729,729,729,729,729,729,729,,,729,,,,,,,729,,,729,729,729,729,729", "729,729,729,,729,729,729,,729,729,729,729,729,536,,,,,,,,,,,,,,,,536", "536,,729,,,729,,,729,729,,,729,,,536,,,729,536,536,,536,536,,,,729,", ",,,729,729,729,729,,729,729,729,729,,,,,729,729,,,,325,325,325,729,325", "729,729,729,325,325,729,729,,325,,325,325,325,325,325,325,325,,,,,,325", "325,325,325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325", "325,,325,325,325,,325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,", ",325,325,,,325,,,,,,325,,,,,,,,,325,,,,,325,325,325,325,,325,325,325", "325,,,,,325,325,,,,728,728,728,325,728,325,325,325,728,728,325,325,", "728,,728,728,728,728,728,728,728,,,,,,728,728,728,728,728,728,728,,", "728,,,,,,,728,,,728,728,728,728,728,728,728,728,,728,728,728,,728,728", "728,728,728,,,,,,,,,,,,,,,,,,,,728,,,728,,,728,728,,,728,,,,,,728,,", ",,,,,,728,,,,,728,728,728,728,,728,728,728,728,,,,,728,728,,,,260,260", "260,728,260,728,728,728,260,260,728,728,,260,,260,260,260,260,260,260", "260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260", "260,260,260,260,,260,260,260,,260,260,260,260,260,,,,,,,,,,,,,,,,,,", ",260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260,260,260", ",260,260,260,260,,,,,260,260,,,,259,259,259,260,259,260,260,260,259", "259,260,260,,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259", "259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259", ",259,259,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,", ",,,259,,,,,,,,,259,,,,,259,259,259,259,,259,259,259,259,,,,,259,259", ",,,258,258,258,259,258,259,259,259,258,258,259,259,,258,,258,258,258", "258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258", "258,258,258,258,258,258,258,,258,258,258,,258,258,258,258,258,,,,,,", ",,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258", "258,258,258,,258,258,258,258,,,,,258,258,,,,257,257,257,258,257,258", "258,258,257,257,258,258,,257,,257,257,257,257,257,257,257,,,,,,257,257", "257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257", ",257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257", "257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257", ",,,,257,257,,,,256,256,256,257,256,257,257,257,256,256,257,257,,256", ",256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256", ",,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256", "256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,", ",,256,,,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,,,,256,,256", "256,256,,,256,256,330,330,330,330,330,,,,330,330,,,,330,,330,330,330", "330,330,330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,,330,330", ",330,330,330,330,330,330,330,330,330,,330,330,330,,330,330,330,330,330", ",,,,,,,,,,,,,,,,,,,330,,,330,,,330,330,,,330,,330,,,,330,,,,,,,,,330", ",,,,330,330,330,330,,330,330,330,330,,,,,330,330,,,,704,704,704,330", "704,330,330,330,704,704,330,330,,704,,704,704,704,704,704,704,704,,", ",,,704,704,704,704,704,704,704,,,704,,,,,,,704,,,704,704,704,704,704", "704,704,704,,704,704,704,,704,704,704,704,704,,,,,,,,,,,,,,,,,,,,704", ",,704,,,704,704,,,704,,,,,,704,,,,,,,,,704,,,,,704,704,704,704,,704", "704,704,704,,,,,704,704,,,,691,691,691,704,691,704,704,704,691,691,704", "704,,691,,691,691,691,691,691,691,691,,,,,,691,691,691,691,691,691,691", ",,691,,,,,,,691,,,691,691,691,691,691,691,691,691,,691,691,691,,691", "691,691,691,691,,,,,,,,,,,,,,,,,,,,691,,,691,,,691,691,,,691,,691,,", ",691,,,,,,,,,691,,,,,691,691,691,691,,691,691,691,691,,,,,691,691,,", ",255,255,255,691,255,691,691,691,255,255,691,691,,255,,255,255,255,255", "255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255", "255,255,255,255,255,255,,255,255,255,,255,255,255,255,255,,,,,,,,,,", ",,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255", "255,255,,255,255,255,255,,,,,255,255,,,,254,254,254,255,254,255,255", "255,254,254,255,255,,254,,254,254,254,254,254,254,254,,,,,,254,254,254", "254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254", "254,254,,254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254", ",,254,,,,,,254,,,,,,,,,254,,,,,254,254,254,254,,254,254,254,254,,,,", "254,254,,,,685,685,685,254,685,254,254,254,685,685,254,254,,685,,685", "685,685,685,685,685,685,,,,,,685,685,685,685,685,685,685,,,685,,,,,", ",685,,,685,685,685,685,685,685,685,685,,685,685,685,,685,685,685,685", "685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,685,,,685,,,,,,685,,,,,,,,,685", ",,,,685,685,685,685,,685,685,685,685,,,,,685,685,,,,684,684,684,685", "684,685,685,685,684,684,685,685,,684,,684,684,684,684,684,684,684,,", ",,,684,684,684,684,684,684,684,,,684,,,,,,,684,,,684,684,684,684,684", "684,684,684,,684,684,684,,684,684,684,684,684,,,,,,,,,,,,,,,,,,,,684", ",,684,,,684,684,,,684,,,,,,684,,,,,,,,,684,,,,,684,684,684,684,,684", "684,684,684,,,,,684,684,,,,680,680,680,684,680,684,684,684,680,680,684", "684,,680,,680,680,680,680,680,680,680,,,,,,680,680,680,680,680,680,680", ",,680,,,,,,,680,,,680,680,680,680,680,680,680,680,,680,680,680,,680", "680,680,680,680,,,,,,,,,,,,,,,,,,,,680,,,680,,,680,680,,,680,,,,,,680", ",,,,,,,,680,,,,,680,680,680,680,,680,680,680,680,,,,,680,680,,,,679", "679,679,680,679,680,680,680,679,679,680,680,,679,,679,679,679,679,679", "679,679,,,,,,679,679,679,679,679,679,679,,,679,,,,,,,679,,,679,679,679", "679,679,679,679,679,,679,679,679,,679,679,679,679,679,,,,,,,,,,,,,,", ",,,,,679,,,679,,,679,679,,,679,,,,,,679,,,,,,,,,679,,,,,679,679,679", "679,,679,679,679,679,,,,,679,679,,,,678,678,678,679,678,679,679,679", "678,678,679,679,,678,,678,678,678,678,678,678,678,,,,,,678,678,678,678", "678,678,678,,,678,,,,,,,678,,,678,678,678,678,678,678,678,678,678,678", "678,678,,678,678,678,678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678", ",,678,,,,678,,678,,,678,,,,,,678,,,,,678,678,678,678,,678,678,678,678", ",,,,678,678,,,,677,677,677,678,677,678,678,678,677,677,678,678,,677", ",677,677,677,677,677,677,677,,,,,,677,677,677,677,677,677,677,,,677", ",,,,,,677,,,677,677,677,677,677,677,677,677,677,677,677,677,,677,677", "677,677,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,677,,677,", "677,,,677,,,,,,677,,,,,677,677,677,677,,677,677,677,677,,,,,677,677", ",,,950,950,950,677,950,677,677,677,950,950,677,677,,950,,950,950,950", "950,950,950,950,,,,,,950,950,950,950,950,950,950,,,950,,,,,,,950,,,950", "950,950,950,950,950,950,950,,950,950,950,,950,950,950,950,950,,,,,,", ",,,,,,,,,,,,,950,,,950,,,950,950,,,950,,,,,,950,,,,,,,,,950,,,,,950", "950,950,950,,950,950,950,950,,,,,950,950,,,,956,956,956,950,956,950", "950,950,956,956,950,950,,956,,956,956,956,956,956,956,956,,,,,,956,956", "956,956,956,956,956,,,956,,,,,,,956,,,956,956,956,956,956,956,956,956", ",956,956,956,,956,956,956,956,956,,,,,,,,,,,,,,,,,,,,956,,,956,,,956", "956,,,956,,,,,,956,,,,,,,,,956,,,,,956,956,956,956,,956,956,956,956", ",,,,956,956,,,,,,,956,,956,956,956,32,,956,956,,,,32,32,32,,,32,32,32", ",32,,,,,,,,32,32,32,32,,,,,,,,,32,32,,32,32,32,32,32,,,,,,,,,,,,,,,", ",,,,,,,32,32,32,32,32,32,32,32,32,32,32,32,32,32,,,32,32,32,,,32,,32", "32,,,32,32,,32,,32,,32,,32,32,,32,32,32,32,32,33,32,32,32,,,,33,33,33", ",,33,33,33,,33,32,,,32,32,,32,33,32,33,33,,,,,32,,,,33,33,,33,33,33", "33,33,,,,,,,,,,,,,,,,,,,,,,,33,33,33,33,33,33,33,33,33,33,33,33,33,33", ",,33,33,33,,,33,,33,33,,,33,33,,33,,33,,33,,33,33,,33,33,33,33,33,,33", ",33,,,,,,,,,,,,,,33,,,33,33,,33,,33,674,674,674,,674,,33,,674,674,,", ",674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674,", ",674,,,,,,,674,,,674,674,674,674,674,674,674,674,,674,674,674,,674,674", "674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,,,,,674,,", ",,,,,,674,,,,,674,674,674,674,,674,674,674,674,,,,,674,674,,,,34,34", "34,674,34,674,674,674,34,34,674,674,,34,,34,34,34,34,34,34,34,,,,,,34", "34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34", ",34,34,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34", ",,34,,,,,,34,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,,,,34,,34,34", "34,,,34,34,673,673,673,673,673,,,,673,673,,,,673,,673,673,673,673,673", "673,673,,,,,,673,673,673,673,673,673,673,,,673,,,,,,673,673,,673,673", "673,673,673,673,673,673,673,,673,673,673,,673,673,673,673,673,,,,,,", ",,,,,,,,,,,,,673,,,673,,,673,673,,,673,,673,,,,673,,,,,,,,,673,,,,,673", "673,673,673,,673,673,673,673,,,,,673,673,,,,979,979,979,673,979,673", "673,673,979,979,673,673,,979,,979,979,979,979,979,979,979,,,,,,979,979", "979,979,979,979,979,,,979,,,,,,,979,,,979,979,979,979,979,979,979,979", ",979,979,979,,979,979,979,979,979,,,,,,,,,,,,,,,,,,,,979,,,979,,,979", "979,,,979,,,,,,979,,,,,,,,,979,,,,,979,979,979,979,,979,979,979,979", ",,,,979,979,,,,670,670,670,979,670,979,979,979,670,670,979,979,,670", ",670,670,670,670,670,670,670,,,,,,670,670,670,670,670,670,670,,,670", ",,,,,,670,,,670,670,670,670,670,670,670,670,670,670,670,670,,670,670", "670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670,,670,,670,", "670,,,670,,,,,,670,,,,,670,670,670,670,,670,670,670,670,,,,,670,670", ",,,984,984,984,670,984,670,670,670,984,984,670,670,,984,,984,984,984", "984,984,984,984,,,,,,984,984,984,984,984,984,984,,,984,,,,,,,984,,,984", "984,984,984,984,984,984,984,,984,984,984,,984,984,984,984,984,,,,,,", ",,,,,,,,,,,,,984,,,984,,,984,984,,,984,,984,,,,984,,,,,,,,,984,,,,,984", "984,984,984,,984,984,984,984,,,,,984,984,,,,669,669,669,984,669,984", "984,984,669,669,984,984,,669,,669,669,669,669,669,669,669,,,,,,669,669", "669,669,669,669,669,,,669,,,,,,,669,,,669,669,669,669,669,669,669,669", ",669,669,669,,669,669,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669", "669,,,669,,,,,,669,,,,,,,,,669,,,,,669,669,669,669,,669,669,669,669", ",,,,669,669,,,,668,668,668,669,668,669,669,669,668,668,669,669,,668", ",668,668,668,668,668,668,668,,,,,,668,668,668,668,668,668,668,,,668", ",,,,,,668,,,668,668,668,668,668,668,668,668,,668,668,668,,668,668,668", "668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,668,,,,668,,,", ",,,,,668,,,,,668,668,668,668,,668,668,668,668,,,,,668,668,,,,,,,668", ",668,668,668,,,668,668,666,666,666,666,666,,,,666,666,,,,666,,666,666", "666,666,666,666,666,,,,,,666,666,666,666,666,666,666,,,666,,,,,,666", "666,,666,666,666,666,666,666,666,666,666,,666,666,666,,666,666,666,666", "666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,,666,,,,666,,,,,,,", ",666,,,,,666,666,666,666,,666,666,666,666,,,,,666,666,,,,247,247,247", "666,247,666,666,666,247,247,666,666,,247,,247,247,247,247,247,247,247", ",,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247", "247,247,247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247", ",,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247", "247,247,247,,,,,247,247,,,,35,35,35,247,35,247,247,247,35,35,247,247", ",35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,", "35,35,35,35,35,35,35,35,35,35,35,35,,35,35,35,35,35,,,,,,,,,,,,,,,,", ",,,35,,,35,,,35,35,,,35,,35,,35,,35,,,35,,,,,,35,,,,,35,35,35,35,,35", "35,35,35,,,,,35,35,,,,36,36,36,35,36,35,35,35,36,36,35,35,,36,,36,36", "36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36,36", "36,36,36,36,36,36,36,36,,36,36,36,36,36,,,,,,,,,,,,,,,,,,,,36,,,36,", ",36,36,,,36,,36,,36,,36,,,36,,,,,,36,,,,,36,36,36,36,,36,36,36,36,,", ",,36,36,,,,635,635,635,36,635,36,36,36,635,635,36,36,,635,,635,635,635", "635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635", "635,635,635,635,635,635,635,635,635,635,635,,635,635,635,635,635,,,", ",,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,635,,635,,635,,,635,,,,,", "635,,,,,635,635,635,635,,635,635,635,635,,,,,635,635,,,,1003,1003,1003", "635,1003,635,635,635,1003,1003,635,635,,1003,,1003,1003,1003,1003,1003", "1003,1003,,,,,,1003,1003,1003,1003,1003,1003,1003,,,1003,,,,,,,1003", ",,1003,1003,1003,1003,1003,1003,1003,1003,1003,1003,1003,1003,,1003", "1003,1003,1003,1003,,,,,,,,,,,,,,,,,,,,1003,,,1003,,,1003,1003,,,1003", ",,,1003,,1003,,,1003,,,,,,1003,,,,,1003,1003,1003,1003,,1003,1003,1003", "1003,,,,,1003,1003,,,,625,625,625,1003,625,1003,1003,1003,625,625,1003", "1003,,625,,625,625,625,625,625,625,625,,,,,,625,625,625,625,625,625", "625,,,625,,,,,,,625,,,625,625,625,625,625,625,625,625,625,625,625,625", ",625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625,625,,,625,,625", ",625,,625,,,625,,,,,,625,,,,,625,625,625,625,,625,625,625,625,,,,,625", "625,,,,624,624,624,625,624,625,625,625,624,624,625,625,,624,,624,624", "624,624,624,624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,,624", ",,624,624,624,624,624,624,624,624,,624,624,624,,624,624,624,624,624", ",,,,,,,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,624,,,,624,,,,,,,,,624", ",,,,624,624,624,624,,624,624,624,624,,,,,624,624,,,,611,611,611,624", "611,624,624,624,611,611,624,624,,611,,611,611,611,611,611,611,611,,", ",,,611,611,611,611,611,611,611,,,611,,,,,,,611,,,611,611,611,611,611", "611,611,611,611,611,611,611,,611,611,611,611,611,,,,,,,,,,,,,,,,,,,", "611,,,611,,,611,611,,,611,,,,,,611,,,611,,,,,,611,,,,,611,611,611,611", ",611,611,611,611,,,,,611,611,,,,608,608,608,611,608,611,611,611,608", "608,611,611,,608,,608,608,608,608,608,608,608,,,,,,608,608,608,608,608", "608,608,,,608,,,,,,,608,,,608,608,608,608,608,608,608,608,608,608,608", "608,,608,608,608,608,608,,,,,,,,,,,,,,,,,,,,608,,,608,,,608,608,,,608", ",608,,,,608,,,608,,,,,,608,,,,,608,608,608,608,,608,608,608,608,,,,", "608,608,,,,236,236,236,608,236,608,608,608,236,236,608,608,,236,,236", "236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,", ",236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236", "236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236", ",,,,236,236,236,236,,236,236,236,236,,,,,236,236,236,,,235,235,235,236", "235,236,236,236,235,235,236,236,,235,,235,235,235,235,235,235,235,,", ",,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235", "235,235,235,,235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235", ",,235,,,235,235,,,235,,,,,,235,,,,,,,,,235,,,,,235,235,235,235,,235", "235,235,235,,,,,235,235,,,,603,603,603,235,603,235,235,235,603,603,235", "235,,603,,603,603,603,603,603,603,603,,,,,,603,603,603,603,603,603,603", ",,603,,,,,,,603,,,603,603,603,603,603,603,603,603,,603,603,603,,603", "603,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603,,,603,,,,,,603", ",,,,,,,,603,,,,,603,603,603,603,,603,603,603,603,,,,,603,603,,,,1029", "1029,1029,603,1029,603,603,603,1029,1029,603,603,,1029,,1029,1029,1029", "1029,1029,1029,1029,,,,,,1029,1029,1029,1029,1029,1029,1029,,,1029,", ",,,,,1029,,,1029,1029,1029,1029,1029,1029,1029,1029,,1029,1029,1029", ",1029,1029,1029,1029,1029,,,,,,,,,,,,,,,,,,,,1029,,,1029,,,1029,1029", ",,1029,,,,,,1029,,,,,,,,,1029,,,,,1029,1029,1029,1029,,1029,1029,1029", "1029,,,,,1029,1029,,,,600,600,600,1029,600,1029,1029,1029,600,600,1029", "1029,,600,,600,600,600,600,600,600,600,,,,,,600,600,600,600,600,600", "600,,,600,,,,,,,600,,,600,600,600,600,600,600,600,600,,600,600,600,", "600,600,600,600,600,,,,,,,,,,,,,,,,,,,,600,,,600,,,600,600,,,600,,,", ",,600,,,,,,,,,600,,,,,600,600,600,600,,600,600,600,600,,,,,600,600,", ",,597,597,597,600,597,600,600,600,597,597,600,600,,597,,597,597,597", "597,597,597,597,,,,,,597,597,597,597,597,597,597,,,597,,,,,,,597,,,597", "597,597,597,597,597,597,597,,597,597,597,,597,597,597,597,597,,,,,,", ",,,,,,,,,,,,,597,,,597,,,597,597,,,597,,,,,,597,,,,,,,,,597,,,,,597", "597,597,597,,597,597,597,597,,,,,597,597,,,,234,234,234,597,234,597", "597,597,234,234,597,597,,234,,234,234,234,234,234,234,234,,,,,,234,234", "234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234", ",234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234", "234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234,234,,234,234,234,234", ",,,,234,234,,,,587,587,587,234,587,234,234,234,587,587,234,234,,587", ",587,587,587,587,587,587,587,,,,,,587,587,587,587,587,587,587,,,587", ",,,,,,587,,,587,587,587,587,587,587,587,587,587,587,587,587,,587,587", "587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587,,587,,587,", "587,,,587,,,,,,587,,,,,587,587,587,587,,587,587,587,587,,,,,587,587", ",,,,,,587,,587,587,587,,,587,587,577,577,577,577,577,,,,577,577,,,,577", ",577,577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577", ",,,,,577,577,577,577,577,577,577,577,577,577,577,577,,577,577,577,,577", "577,577,577,577,,,,,,,,,,,,,,,,,,,,577,,,577,,,577,577,,,577,,577,,", ",577,,,,,,,,,577,,,,,577,577,577,577,,577,577,577,577,,,,,577,577,,", ",,,577,577,,577,577,577,,,577,577,571,571,571,,571,,,,571,571,,,,571", ",571,571,571,571,571,571,571,,,,,,571,571,571,571,571,571,571,,,571", ",,,,,,571,,,571,571,571,571,571,571,571,571,,571,571,571,,571,571,571", "571,571,,,,,,,,,,,,,,,,,,,,571,,,571,,,571,571,,,571,,,,,,571,,,,,,", ",,571,,,,,571,571,571,571,,571,571,571,571,,,,,571,571,,,,569,569,569", "571,569,571,571,571,569,569,571,571,,569,,569,569,569,569,569,569,569", ",,,,,569,569,569,569,569,569,569,,,569,,,,,,,569,,,569,569,569,569,569", "569,569,569,569,569,569,569,,569,569,569,569,569,,,,,,,,,,,,,,,,,,,", "569,,,569,,,569,569,,,569,,,,569,,569,,,569,,,,,,569,,,,,569,569,569", "569,,569,569,569,569,,,,,569,569,,,,366,366,366,569,366,569,569,569", "366,366,569,569,,366,,366,366,366,366,366,366,366,,,,,,366,366,366,366", "366,366,366,,,366,,,,,,,366,,,366,366,366,366,366,366,366,366,,366,366", "366,,366,366,366,366,366,,,,,,,,,,,,,,,,,,,,366,,,366,,,366,366,,,366", ",,,,,366,,,,,,,,,366,,,,,366,366,366,366,,366,366,366,366,,,,,366,366", ",,,368,368,368,366,368,366,366,366,368,368,366,366,,368,,368,368,368", "368,368,368,368,,,,,,368,368,368,368,368,368,368,,,368,,,,,,,368,,,368", "368,368,368,368,368,368,368,,368,368,368,,368,368,368,368,368,,,,,,", ",,,,,,,,,,,,,368,,,368,368,,368,368,,,368,,,,,,368,,,,,,,,,368,,,,,368", "368,368,368,,368,368,368,368,,,,,368,368,,,,567,567,567,368,567,368", "368,368,567,567,368,368,,567,,567,567,567,567,567,567,567,,,,,,567,567", "567,567,567,567,567,,,567,,,,,,,567,,,567,567,567,567,567,567,567,567", "567,567,567,567,,567,567,567,567,567,,,,,,,,,,,,,,,,,,,,567,,,567,,", "567,567,,,567,,567,,567,,567,,,567,,,,,,567,,,,,567,567,567,567,,567", "567,567,567,,,,,567,567,,,,46,46,46,567,46,567,567,567,46,46,567,567", ",46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,", "46,46,46,46,46,46,46,46,,46,46,46,,46,46,46,46,46,,,,,,,,,,,,,,,,,,", ",46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,,46,,,,,46,46,46,46,,46,46,46,46", ",,,,46,46,,,,557,557,557,46,557,46,46,46,557,557,46,46,,557,,557,557", "557,557,557,557,557,,,,,,557,557,557,557,557,557,557,,,557,,,,,,,557", ",,557,557,557,557,557,557,557,557,,557,557,557,,557,557,557,557,557", ",,,,,,,,,,,,,,,,,,,557,,,557,,,557,557,,,557,,,,,,557,,,,,,,,,557,,", ",,557,557,557,557,,557,557,557,557,,,,,557,557,,,,47,47,47,557,47,557", "557,557,47,47,557,557,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47", "47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,47,47", "47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,,47,,,,,47", "47,47,47,,47,47,47,47,,,,,47,47,,,,280,280,280,47,280,47,47,47,280,280", "47,47,,280,,280,280,280,280,280,280,280,,,,,,280,280,280,280,280,280", "280,,,280,,,,,,,280,,,280,280,280,280,280,280,280,280,,280,280,280,", "280,280,280,280,280,,,,,,,,,,,,,,,,,,,,280,,,280,,,280,280,,,280,,,", ",,280,,,,,,,,,280,,,,,280,280,280,280,,280,280,280,280,,,,,280,280,", ",,275,275,275,280,275,280,280,280,275,275,280,280,,275,,275,275,275", "275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275", "275,275,275,275,275,275,275,,275,275,275,,275,275,275,275,275,,,,,,", ",,,,,,,,,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,,,,275,,,,,275", "275,275,275,,275,275,275,275,,,,,275,275,,,,,,,275,,275,275,275,552", ",275,275,,,,552,552,552,,,552,552,552,406,552,406,406,406,406,406,,", "552,552,552,,,,406,,,,,,552,552,,552,552,552,552,552,1159,,1159,1159", "1159,1159,1159,,406,406,,,,,,1159,,406,406,406,406,,,,406,,1131,,1131", "1131,1131,1131,1131,552,,,,1159,,,552,1131,,,,552,552,,1159,1159,,,", "1159,,,,,,,,,,1131,406,,,,552,552,,,1131,1131,1131,1131,,,,1131,,,,552", ",,552,,221,221,221,552,221,1159,,,221,221,552,,,221,,221,221,221,221", "221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221", "221,221,221,221,221,221,221,221,221,221,,221,221,221,221,221,,,,,,,", ",,,,,,,,,,,,221,,,221,,,221,221,,,221,,221,,221,,221,,,221,,,,,,221", ",,,,221,221,221,221,,221,221,221,221,,,,,221,221,,,,220,220,220,221", "220,221,221,221,220,220,221,221,,220,,220,220,220,220,220,220,220,,", ",,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220,220", "220,220,220,,220,220,220,,220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220", ",,220,,,220,220,,,220,,,,,,220,,,,,,,,,220,,,,,220,220,220,220,,220", "220,220,220,,,,,220,220,,,,75,75,75,220,75,220,220,220,75,75,220,220", ",75,,75,75,75,75,75,75,75,,,,,,75,75,75,75,75,75,75,,,75,,,,,,,75,,", "75,75,75,75,75,75,75,75,,75,75,75,,75,75,75,75,75,,,,,,,,,,,,,,,,,,", ",75,,,75,,,75,75,,,75,,,,,,75,,,,,,,,,75,,,,,75,75,75,75,,75,75,75,75", ",,,,75,75,75,,,,,75,75,,75,75,75,,,75,75,71,71,71,,71,,,,71,71,,,,71", ",71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71", "71,71,71,71,71,71,,71,71,71,,71,71,71,71,71,,,,,,,,,,,,,,,,,,,,71,,", "71,,,71,71,,,71,,,,,,71,,,,,,,,,71,,,,,71,71,71,71,,71,71,71,71,,,,", "71,71,,,,433,433,433,71,433,71,71,71,433,433,71,71,,433,,433,433,433", "433,433,433,433,,,,,,433,433,433,433,433,433,433,,,433,,,,,,,433,,,433", "433,433,433,433,433,433,433,,433,433,433,,433,433,433,433,433,,,,,,", ",,,,,,,,,,,,,433,,,433,,,433,433,,,433,,,,,,433,,,,,,,,,433,,,,,433", "433,433,433,,433,433,433,433,,,,,433,433,,,,68,68,68,433,68,433,433", "433,68,68,433,433,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68", ",,68,,,,,,,68,,,68,68,68,68,68,68,68,68,68,68,68,68,,68,68,68,68,68", ",,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,68,,,,,,68,,,,,68", "68,68,68,,68,68,68,68,,,,,68,68,,,,842,842,842,68,842,68,68,68,842,842", "68,68,,842,,842,842,842,842,842,842,842,,,,,,842,842,842,842,842,842", "842,,,842,,,,,,,842,,,842,842,842,842,842,842,842,842,,842,842,842,", "842,842,842,842,842,,,,,,,,,,,,,,,,,,,,842,,,842,,,842,842,,,842,,,", ",,842,,,,,,,,,842,,,,,842,842,842,842,,842,842,842,842,,,,,842,842,", ",,793,793,793,842,793,842,842,842,793,793,842,842,,793,,793,793,793", "793,793,793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,,,793,,,793", "793,793,793,793,793,793,793,,793,793,793,,793,793,793,793,793,,,,,,", ",,,,,,,,,,,,,793,,,793,,,793,793,,,793,,,,,,793,,,,,,,,,793,,,,,793", "793,793,793,,793,793,793,793,,,,,793,793,,,,272,272,272,793,272,793", "793,793,272,272,793,793,,272,,272,272,272,272,272,272,272,,,,,,272,272", "272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272,272,272,272", ",272,272,272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272", "272,,,272,,,,,,272,,,,,,,,,272,,,,,272,272,272,272,,272,272,272,272", ",,,,272,272,,,,271,271,271,272,271,272,272,272,271,271,272,272,,271", ",271,271,271,271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271", ",,,,,,271,,,271,271,271,271,271,271,271,271,,271,271,271,,271,271,271", "271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,,,,,271,,,,,,", ",,271,,,,,271,271,271,271,,271,271,271,271,,,,,271,271,,,,67,67,67,271", "67,271,271,271,67,67,271,271,,67,,67,67,67,67,67,67,67,,,,,,67,67,67", "67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,67,67,67,67,,67", "67,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,67,,,,67,,,67,", ",,,,67,,,,,67,67,67,67,,67,67,67,67,,,,,67,67,,,,,,,67,,67,67,67,,,67", "67,66,66,66,66,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66", "66,66,66,66,,,66,,,,,,66,66,,66,66,66,66,66,66,66,66,66,,66,66,66,,66", "66,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,66,,,,66,,,,,,", ",,66,,,,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,404,404,404,66,404,66", "66,66,404,404,66,66,,404,,404,404,404,404,404,404,404,,,,,,404,404,404", "404,404,404,404,,,404,,,,,,,404,,,404,404,404,404,404,404,404,404,,404", "404,404,,404,404,404,404,404,,,,,,,,,,,,,,,,,,,,404,,,404,,,404,404", ",,404,,,,,,404,,,,,,,,,404,,,,,404,404,404,404,,404,404,404,404,,,,", "404,404,,,,,,,404,,404,404,404,64,,404,404,,,,64,64,64,,,64,64,64,,64", ",,,,,,,64,,64,64,64,,,,,,,,64,64,,64,64,64,64,64,,,,,,,,,,,,,,,,,,,", ",,,64,64,64,64,64,64,64,64,64,64,64,64,64,64,,,64,64,64,,,64,,,64,,", "64,64,,64,,64,,64,,64,64,,64,64,64,64,64,,64,,64,,,,,,,,,,,,,,64,,,64", "64,64,64,,64,,64,,270,270,270,64,270,,,,270,270,,,,270,,270,270,270", "270,270,270,270,,,,,,270,270,270,270,270,270,270,,,270,,,,,,,270,,,270", "270,270,270,270,270,270,270,,270,270,270,,270,270,270,270,270,,,,,,", ",,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,,,,,,,,,270,,,,,270", "270,270,270,,270,270,270,270,,,,,270,270,,,,862,862,862,270,862,270", "270,270,862,862,270,270,,862,,862,862,862,862,862,862,862,,,,,,862,862", "862,862,862,862,862,,,862,,,,,,,862,,,862,862,862,862,862,862,862,862", ",862,862,862,,862,862,862,862,862,,,,,,,,,,,,,,,,,,,,862,,,862,,,862", "862,,,862,,,,,,862,,,,,,,,,862,,,,,862,862,862,862,,862,862,862,862", ",,,,862,862,,,,296,296,296,862,296,862,862,862,296,296,862,862,,296", ",296,296,296,296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296", ",,,,,,296,,,296,296,296,296,296,296,296,296,,296,296,296,,296,296,296", "296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296,,,,,,296,,,,,,", ",,296,,,,,296,296,296,296,,296,296,296,296,,,,,296,296,,,,269,269,269", "296,269,296,296,296,269,269,296,296,,269,,269,269,269,269,269,269,269", ",,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269", "269,269,269,,269,269,269,,269,269,269,269,269,,,,,,,,,,,,,,,,,,,,269", ",,269,,,269,269,,,269,,,,,,269,,,,,,,,,269,,,,,269,269,269,269,,269", "269,269,269,,,,,269,269,,,,268,268,268,269,268,269,269,269,268,268,269", "269,,268,,268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268,268", ",,268,,,,,,,268,,,268,268,268,268,268,268,268,268,,268,268,268,,268", "268,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268", ",,,,,,,,268,,,,,268,268,268,268,,268,268,268,268,,,,,268,268,,,,784", "784,784,268,784,268,268,268,784,784,268,268,,784,,784,784,784,784,784", "784,784,,,,,,784,784,784,784,784,784,784,,,784,,,,,,,784,,,784,784,784", "784,784,784,784,784,784,784,784,784,,784,784,784,784,784,,,,,,,,,,,", ",,,,,,,,784,,,784,,,784,784,,,784,,784,,784,,784,,,784,,,,,,784,,,,", "784,784,784,784,,784,784,784,784,,,,,784,784,,,,870,870,870,784,870", "784,784,784,870,870,784,784,,870,,870,870,870,870,870,870,870,,,,,,870", "870,870,870,870,870,870,,,870,,,,,,,870,,,870,870,870,870,870,870,870", "870,,870,870,870,,870,870,870,870,870,,,,,,,,,,,,,,,,,,,,870,,,870,", ",870,870,,,870,,,,,,870,,,,,,,,,870,,,,,870,870,870,870,,870,870,870", "870,,,,,870,870,,,,267,267,267,870,267,870,870,870,267,267,870,870,", "267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267,,", "267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,,267,267", "267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,,", ",,,,,,267,,,,,267,267,267,267,,267,267,267,267,,,,,267,267,,,,883,883", "883,267,883,267,267,267,883,883,267,267,,883,,883,883,883,883,883,883", "883,,,,,,883,883,883,883,883,883,883,,,883,,,,,,,883,,,883,883,883,883", "883,883,883,883,,883,883,883,,883,883,883,883,883,,,,,,,,,,,,,,,,,,", ",883,,,883,,,883,883,,,883,,,,,,883,,,,,,,,,883,,,,,883,883,883,883", ",883,883,883,883,,,,,883,883,,,,884,884,884,883,884,883,883,883,884", "884,883,883,,884,,884,884,884,884,884,884,884,,,,,,884,884,884,884,884", "884,884,,,884,,,,,,,884,,,884,884,884,884,884,884,884,884,,884,884,884", ",884,884,884,884,884,,,,,,,,,,,,,,,,,,,,884,,,884,,,884,884,,,884,,", ",,,884,,,,,,,,,884,,,,,884,884,884,884,,884,884,884,884,,,,,884,884", ",,,24,24,24,884,24,884,884,884,24,24,884,884,,24,,24,24,24,24,24,24", "24,,,,,,24,24,24,24,24,24,24,,,24,,,,,,,24,,,24,24,24,24,24,24,24,24", ",24,24,24,,24,24,24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24,,,24,24,,,24,,", ",,,24,,,,,,,,,24,,,,,24,24,24,24,,24,24,24,24,,,,,24,24,,,,303,303,303", "24,303,24,24,24,303,303,24,24,,303,,303,303,303,303,303,303,303,,,,", ",303,303,303,303,303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303", "303,303,303,303,303,303,,303,303,303,303,303,,,,,,,,,,,,,,,,,,,,303", ",,303,,,303,303,,,303,,303,,303,,303,,,303,,,,,,303,,,,,303,303,303", "303,,303,303,303,303,,,,,303,303,,,,304,304,304,303,304,303,303,303", "304,304,303,303,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304", "304,304,304,,,304,,,,,,,304,,,304,304,304,304,304,304,304,304,304,304", "304,304,,304,304,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304", ",,304,,304,,304,,304,,,304,,,,,,304,,,,,304,304,304,304,,304,304,304", "304,,,,,304,304,,,,312,312,312,304,312,304,304,304,312,312,304,304,", "312,,312,312,312,312,312,312,312,,,,,,312,312,312,312,312,312,312,,", "312,,,,,,,312,,,312,312,312,312,312,312,312,312,312,312,312,312,,312", "312,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,312,,,312,,312,,312", ",312,,,312,,,,,,312,,,,,312,312,312,312,,312,312,312,312,,,,,312,312", "312,,,266,266,266,312,266,312,312,312,266,266,312,312,,266,,266,266", "266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266", ",,266,266,266,266,266,266,266,266,,266,266,266,,266,266,266,266,266", ",,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,,266,,", ",,266,266,266,266,,266,266,266,266,,,,,266,266,,,,265,265,265,266,265", "266,266,266,265,265,266,266,,265,,265,265,265,265,265,265,265,,,,,,265", "265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265", "265,,265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,", ",265,265,,,265,,,,,,265,,,,,,,,,265,,,,,265,265,265,265,,265,265,265", "265,,,,,265,265,,,,264,264,264,265,264,265,265,265,264,264,265,265,", "264,,264,264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,", "264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264,264,264,,264,264", "264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,", ",,,,,,264,,,,,264,264,264,264,,264,264,264,264,,,,,264,264,,,,319,319", "319,264,319,264,264,264,319,319,264,264,,319,,319,319,319,319,319,319", "319,,,,,,319,319,319,319,319,319,319,,,319,,,,,,,319,,,319,319,319,319", "319,319,319,319,,319,319,319,,319,319,319,319,319,,,,,,,,,,,,,,,,,,", ",319,,,319,,,319,319,,,319,,,,,,319,,,,,,,,,319,,,,,319,319,319,319", ",319,319,319,319,,,,,319,319,,,,321,321,321,319,321,319,319,319,321", "321,319,319,,321,,321,321,321,321,321,321,321,,,,,,321,321,321,321,321", "321,321,,,321,,,,,,,321,,,321,321,321,321,321,321,321,321,,321,321,321", ",321,321,321,321,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,", ",,,321,,,,,,,,,321,,,,,321,321,321,321,,321,321,321,321,,,,,321,321", ",,,324,324,324,321,324,321,321,321,324,324,321,321,,324,,324,324,324", "324,324,324,324,,,,,,324,324,324,324,324,324,324,,,324,,,,,,,324,,,324", "324,324,324,324,324,324,324,,324,324,324,,324,324,324,324,324,,,,,,", ",,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,,,,324,,,,,,,,,324,,,,,324", "324,324,324,,324,324,324,324,,,,,324,324,,,,263,263,263,324,263,324", "324,324,263,263,324,324,,263,,263,263,263,263,263,263,263,,,,,,263,263", "263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263", ",263,263,263,,263,263,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263", "263,,,263,,,,,,263,,,,,,,,,263,,,,,263,263,263,263,,263,263,263,263", ",,,,263,263,,,,262,262,262,263,262,263,263,263,262,262,263,263,,262", ",262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262", ",,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,262", "262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,", ",,262,,,,,262,262,262,262,,262,262,262,262,,,,,262,262,,,,911,911,911", "262,911,262,262,262,911,911,262,262,,911,,911,911,911,911,911,911,911", ",,,,,911,911,911,911,911,911,911,,,911,,,,,,,911,,,911,911,911,911,911", "911,911,911,,911,911,911,,911,911,911,911,911,,,,,,,,,,,,,,,,,,,,911", ",,911,,,911,911,,,911,,,,,,911,,,,,,,,,911,,,,,911,911,911,911,,911", "911,911,911,,,,,911,911,,,,912,912,912,911,912,911,911,911,912,912,911", "911,,912,,912,912,912,912,912,912,912,,,,,,912,912,912,912,912,912,912", ",,912,,,,,,,912,,,912,912,912,912,912,912,912,912,,912,912,912,,912", "912,912,912,912,,,,,,,,,,,,,,,,,,,,912,,,912,,,912,912,,,912,,,,,,912", ",,,,,,,,912,,,,,912,912,912,912,,912,912,912,912,,,,,912,912,,,,913", "913,913,912,913,912,912,912,913,913,912,912,,913,,913,913,913,913,913", "913,913,,,,,,913,913,913,913,913,913,913,,,913,,,,,,,913,,,913,913,913", "913,913,913,913,913,,913,913,913,,913,913,913,913,913,,,,,,,,,,,,,,", ",,,,,913,,,913,,,913,913,,,913,,,,,,913,,,,,,,,,913,,,,,913,913,913", "913,,913,913,913,913,,,,,913,913,,,,494,494,494,913,494,913,913,913", "494,494,913,913,,494,,494,494,494,494,494,494,494,,,,,,494,494,494,494", "494,494,494,,,494,,,,,,,494,,,494,494,494,494,494,494,494,494,,494,494", "494,,494,494,494,494,494,,,,,,,,,,,,,,,,,,,,494,,,494,,,494,494,,,494", ",,,,,494,,,,,,,,,494,,,,,494,494,494,494,,494,494,494,494,,,,,494,494", ",,,,,,494,,494,494,494,,,494,494,130,130,130,130,130,,,,130,130,,,,130", ",130,130,130,130,130,130,130,,,,,,130,130,130,130,130,130,130,,,130", ",,,,,130,130,,130,130,130,130,130,130,130,130,130,,130,130,130,,130", "130,130,130,130,,,,,,,,,,,,,,,,,,,,130,,,130,,,130,130,,,130,,130,,", ",130,,,,,,,,,130,,,,,130,130,130,130,,130,130,130,130,,,,,130,130,,", ",129,129,129,130,129,130,130,130,129,129,130,130,,129,,129,129,129,129", "129,129,129,,,,,,129,129,129,129,129,129,129,,,129,,,,,,,129,,,129,129", "129,129,129,129,129,129,,129,129,129,,129,129,129,129,129,,,,,,,,,,", ",,,,,,,,,129,,,129,,,129,129,,,129,,,,,,129,,,,,,,,,129,,,,,129,129", "129,129,,129,129,129,129,,,,,129,129,,,,128,128,128,129,128,129,129", "129,128,128,129,129,,128,,128,128,128,128,128,128,128,,,,,,128,128,128", "128,128,128,128,,,128,,,,,,,128,,,128,128,128,128,128,128,128,128,,128", "128,128,,128,128,128,128,128,,,,,,,,,,,,,,,,,,,,128,,,128,,,128,128", ",,128,,,,,,128,,,,,,,,,128,,,,,128,128,128,128,,128,128,128,128,,,,", "128,128,,,,1142,1142,1142,128,1142,128,128,128,1142,1142,128,128,,1142", ",1142,1142,1142,1142,1142,1142,1142,,,,,,1142,1142,1142,1142,1142,1142", "1142,,,1142,,,,,,,1142,,,1142,1142,1142,1142,1142,1142,1142,1142,,1142", "1142,1142,,1142,1142,1142,1142,1142,,,,,,,,,,,,,,,,,,,,1142,,,1142,", ",1142,1142,,,1142,,,,,,1142,,,,,,,,,1142,,,,,1142,1142,1142,1142,,1142", "1142,1142,1142,,,,,1142,1142,,,,1143,1143,1143,1142,1143,1142,1142,1142", "1143,1143,1142,1142,,1143,,1143,1143,1143,1143,1143,1143,1143,,,,,,1143", "1143,1143,1143,1143,1143,1143,,,1143,,,,,,,1143,,,1143,1143,1143,1143", "1143,1143,1143,1143,,1143,1143,1143,,1143,1143,1143,1143,1143,,,,,,", ",,,,,,,,,,,,,1143,,,1143,,,1143,1143,,,1143,,,,,,1143,,,,,,,,,1143,", ",,,1143,1143,1143,1143,,1143,1143,1143,1143,,,,,1143,1143,,,,127,127", "127,1143,127,1143,1143,1143,127,127,1143,1143,,127,,127,127,127,127", "127,127,127,,,,,,127,127,127,127,127,127,127,,,127,,,,,,,127,,,127,127", "127,127,127,127,127,127,,127,127,127,,127,127,127,127,127,,,,,,,,,,", ",,,,,,,,,127,,,127,,,127,127,,,127,,,,,,127,,,,,,,,,127,,,,,127,127", "127,127,,127,127,127,127,,,,,127,127,,,,50,50,50,127,50,127,127,127", "50,50,127,127,,50,,50,50,50,50,50,50,50,,,,,,50,50,50,50,50,50,50,,", "50,,,,,,,50,,,50,50,50,50,50,50,50,50,,50,50,50,,50,50,50,50,50,,,,", ",,,,,,,,,,,,,,,50,,,50,,,50,50,,,50,,,,,,50,,,,,,,,,50,,,,,50,50,50", "50,,50,50,50,50,,,,,50,50,,,,126,126,126,50,126,50,50,50,126,126,50", "50,,126,,126,126,126,126,126,126,126,,,,,,126,126,126,126,126,126,126", ",,126,,,,,,,126,,,126,126,126,126,126,126,126,126,,126,126,126,,126", "126,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,,,,,126", ",,,,,,,,126,,,,,126,126,126,126,,126,126,126,126,,,,,126,126,,,,,,,126", ",126,126,126,,,126,126,121,121,121,121,121,,,,121,121,,,,121,,121,121", "121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,121", "121,121,121,121,121,121,121,121,121,121,121,,121,121,121,,121,121,121", "121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,121,,,,121,,,", ",,,,,121,,,,,121,121,121,121,,121,121,121,121,,,,,121,121,,,,,,121,121", ",121,121,121,,,121,121,1155,1155,1155,,1155,,,,1155,1155,,,,1155,,1155", "1155,1155,1155,1155,1155,1155,,,,,,1155,1155,1155,1155,1155,1155,1155", ",,1155,,,,,,,1155,,,1155,1155,1155,1155,1155,1155,1155,1155,1155,1155", "1155,1155,,1155,1155,1155,1155,1155,,,,,,,,,,,,,,,,,,,,1155,,,1155,", ",1155,1155,,,1155,,1155,,1155,,1155,,,1155,,,,,,1155,,,,,1155,1155,1155", "1155,,1155,1155,1155,1155,,,,,1155,1155,,,,468,468,468,1155,468,1155", "1155,1155,468,468,1155,1155,,468,,468,468,468,468,468,468,468,,,,,,468", "468,468,468,468,468,468,,,468,,,,,,,468,,,468,468,468,468,468,468,468", "468,,468,468,468,,468,468,468,468,468,,,,,,,,,,,,,,,,,,,,468,,,468,", ",468,468,,,468,,,,,,468,,,,,,,,,468,,,,,468,468,468,468,,468,468,468", "468,,,,,468,468,,,,,,,468,,468,468,468,467,,468,468,,,,467,467,467,", ",467,467,467,,467,,,,,,,,467,467,467,467,467,,,,,,,,467,467,,467,467", "467,467,467,,,,,,,,,,,,,,,,,,,,,,,467,467,467,467,467,467,467,467,467", "467,467,467,467,467,,,467,467,467,,,467,,,467,,,467,467,,467,,467,,467", ",467,467,,467,467,467,467,467,,467,467,467,,,,,,,,,,,,,,467,,,467,467", "467,467,,467,466,467,,,,,467,466,466,466,,,466,466,466,,466,,,,,,,,466", "466,466,466,466,,,,,,,,466,466,,466,466,466,466,466,,,,,,,,,,,,,,,,", ",,,,,,466,466,466,466,466,466,466,466,466,466,466,466,466,466,,,466", "466,466,,,466,,,466,,,466,466,,466,,466,,466,,466,466,,466,466,466,466", "466,,466,466,466,,,,,,,,,,,,,,466,,,466,466,466,466,,466,,466,,52,52", "52,466,52,,,,52,52,,,,52,,52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52", "52,,,52,,,,,,,52,,,52,52,52,52,52,52,52,52,,52,52,52,,52,52,52,52,52", ",,,,,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,,52,,,,,52,52", "52,52,,52,52,52,52,,,,,52,52,,,,,,,52,,52,52,52,,,52,52,7,7,7,7,7,,", ",7,7,,,,7,,7,7,7,7,7,7,7,,,,,,7,7,7,7,7,7,7,,,7,,,,,,7,7,7,7,7,7,7,7", "7,7,7,7,,7,7,7,,7,7,7,7,7,,,,,,,,,,,,,,,,,,,,7,,,7,,,7,7,,,7,,7,,,,7", ",,,,,,,,7,,,,,7,7,7,7,,7,7,7,7,,,,,7,7,,,,,,,7,,7,7,7,457,,7,7,,,,457", "457,457,,,457,457,457,,457,,,,,,,,457,457,457,457,,,,,,,,,457,457,,457", "457,457,457,457,,,,,,,,,,,,,,,,,,,,,,,457,457,457,457,457,457,457,457", "457,457,457,457,457,457,,,457,457,457,,,457,,457,457,,,457,457,,457", ",457,,457,,457,457,,457,457,457,457,457,,457,457,457,,,,,,,,,,,,,,457", ",,457,457,,457,,457,72,72,72,,72,,457,,72,72,,,,72,,72,72,72,72,72,72", "72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72", ",72,72,72,,72,72,72,72,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,", ",,,72,,,,,,,,,72,,,,,72,72,72,72,,72,72,72,72,,,,,72,72,,,,219,219,219", "72,219,72,72,72,219,219,72,72,,219,,219,219,219,219,219,219,219,,,,", ",219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219", "219,219,,219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219", ",,219,219,,,219,,,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219", "219,,,,,219,219,,,,274,274,274,219,274,219,219,219,274,274,219,219,", "274,,274,274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,", "274,,,,,,,274,,,274,274,274,274,274,274,274,274,,274,274,274,,274,274", "274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,,,,,274,,", ",,,,,,274,,,,,274,274,274,274,,274,274,274,274,,,,,274,274,,,,218,218", "218,274,218,274,274,274,218,218,274,274,,218,,218,218,218,218,218,218", "218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218", "218,218,218,218,,218,218,218,,218,218,218,218,218,,,,,,,,,,,,,,,,,,", ",218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218,,,,,218,218,218,218", ",218,218,218,218,,,,,218,218,,,,217,217,217,218,217,218,218,218,217", "217,218,218,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217", "217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217", ",217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217", ",,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217,,,,,217,217", ",,,273,273,273,217,273,217,217,217,273,273,217,217,,273,,273,273,273", "273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273", "273,273,273,273,273,273,273,,273,273,273,,273,273,273,273,273,,,,,,", ",,,,,,,,,,,,,273,,,273,,,273,273,,,273,,,,,,273,,,,,,,,,273,,,,,273", "273,273,273,,273,273,273,273,,,,,273,273,,,,49,49,49,273,49,273,273", "273,49,49,273,273,,49,,49,49,49,49,49,49,49,,,,,,49,49,49,49,49,49,49", ",,49,,,,,,,49,,,49,49,49,49,49,49,49,49,,49,49,49,,49,49,49,49,49,,", ",,,,,,,,,,,,,,,,,49,,,49,,,49,49,,,49,,,,,,49,,,,,,,,,49,,,,,49,49,49", "49,,49,49,49,49,,,,,49,49,,,,216,216,216,49,216,49,49,49,216,216,49", "49,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216", ",,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,,216", "216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,216,,", ",216,,,,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216,216,,", ",796,796,796,216,796,216,216,216,796,796,216,216,,796,,796,796,796,796", "796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796,,,796,796", "796,796,796,796,796,796,,796,796,796,,796,796,796,796,796,,,,,,,,,,", ",,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,,796,,,,,796,796", "796,796,,796,796,796,796,,,,,796,796,,,,521,521,521,796,521,796,796", "796,521,521,796,796,,521,,521,521,521,521,521,521,521,,,,,,521,521,521", "521,521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521,521,,521", "521,521,,521,521,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521", ",,521,,,,,,521,,,,,,,,,521,,,,,521,521,521,521,,521,521,521,521,,,,", "521,521,,,,520,520,520,521,520,521,521,521,520,520,521,521,,520,,520", "520,520,520,520,520,520,,,,,,520,520,520,520,520,520,520,,,520,,,,,", ",520,,,520,520,520,520,520,520,520,520,,520,520,520,,520,520,520,520", "520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,,,,,520,,,,,,,,,520", ",,,,520,520,520,520,,520,520,520,520,,,,,520,520,,,,519,519,519,520", "519,520,520,520,519,519,520,520,,519,,519,519,519,519,519,519,519,,", ",,,519,519,519,519,519,519,519,,,519,,,,,,,519,,,519,519,519,519,519", "519,519,519,,519,519,519,,519,519,519,519,519,,,,,,,,,,,,,,,,,,,,519", ",,519,,,519,519,,,519,,,,,,519,,,,,,,,,519,,,,,519,519,519,519,,519", "519,519,519,,,,,519,519,,,,383,383,383,519,383,519,519,519,383,383,519", "519,,383,,383,383,383,383,383,383,383,,,,,,383,383,383,383,383,383,383", ",,383,,,,,,,383,,,383,383,383,383,383,383,383,383,,383,383,383,,383", "383,383,383,383,,,,,,,,,,,,,,,,,,,,383,,,383,,,383,383,,,383,,,,,,383", ",,,,,,,,383,,,,,383,383,383,383,,383,383,383,383,,,,,383,383,,,,517", "517,517,383,517,383,383,383,517,517,383,383,,517,,517,517,517,517,517", "517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517,517,517", "517,517,517,517,517,517,517,517,517,,517,517,517,517,517,,,,,,,,,,,", ",,,,,,,,517,,,517,,,517,517,,,517,,517,,517,,517,,,517,,,,,,517,,,,", "517,517,517,517,,517,517,517,517,,,,,517,517,,,,507,507,507,517,507", "517,517,517,507,507,517,517,,507,,507,507,507,507,507,507,507,,,,,,507", "507,507,507,507,507,507,,,507,,,,,,,507,,,507,507,507,507,507,507,507", "507,,507,507,507,,507,507,507,507,507,,,,,,,,,,,,,,,,,,,,507,,,507,", ",507,507,,,507,,,,,,507,,,,,,,,,507,,,,,507,507,507,507,,507,507,507", "507,,,,,507,507,,,,357,357,357,507,357,507,507,507,357,357,507,507,", "357,,357,357,357,357,357,357,357,,,,,,357,357,357,357,357,357,357,,", "357,,,,,,,357,,,357,357,357,357,357,357,357,357,,357,357,357,,357,357", ",,357,,,,,,,,,,,,,,,,,,,,357,,,357,,,357,357,,,357,,,,,,,,,,,,,,,,,", ",,357,357,357,357,,357,357,357,357,,,,,357,357,,,,1011,1011,1011,357", "1011,357,357,357,1011,1011,,,,1011,,1011,1011,1011,1011,1011,1011,1011", ",,,,,1011,1011,1011,1011,1011,1011,1011,,,1011,,,,,,,1011,,,1011,1011", "1011,1011,1011,1011,1011,1011,,1011,1011,1011,,1011,1011,,,1011,,,,", ",,,,,,,,,,,,,,,1011,,,1011,,,1011,1011,,,1011,,,,,,,,,,,,,,,,,,,,1011", "1011,1011,1011,,1011,1011,1011,1011,,,,,1011,1011,,,,338,338,338,1011", "338,1011,1011,1011,338,338,,,,338,,338,338,338,338,338,338,338,,,,,", "338,338,338,338,338,338,338,,,338,,,,,,,338,,,338,338,338,338,338,338", "338,338,,338,338,338,,338,338,,,338,,,,,,,,,,,,,,,,,,,,338,,,338,,,338", "338,,,338,,,1133,,1133,1133,1133,1133,1133,,,,,,,,,1133,,338,338,338", "338,,338,338,338,338,,,,,338,338,,,,338,,1133,338,,338,338,338,76,76", "76,,76,1133,1133,,76,76,1133,,,76,,76,76,76,76,76,76,76,,,,,,76,76,76", "76,76,76,76,,,76,,,,,,,76,,,76,76,76,76,76,76,76,76,,76,76,76,,76,76", ",,76,,,,,,,,,,,,,,,,,,,,76,,,76,,,76,76,,,76,,76,,,,,,,,,,,,,,,,,,76", "76,76,76,,76,76,76,76,,,,,76,76,,,,1075,1075,1075,76,1075,76,76,76,1075", "1075,,,,1075,,1075,1075,1075,1075,1075,1075,1075,,,,,,1075,1075,1075", "1075,1075,1075,1075,,,1075,,,,,,,1075,,,1075,1075,1075,1075,1075,1075", "1075,1075,,1075,1075,1075,,1075,1075,,,1075,,,,,,,,,,,,,,,,,,,,1075", ",,1075,,,1075,1075,,,1075,,,,,,,,,,,,,,,,,,,,1075,1075,1075,1075,,1075", "1075,1075,1075,,,,,1075,1075,,,,585,585,585,1075,585,1075,1075,1075", "585,585,,,,585,,585,585,585,585,585,585,585,,,,,,585,585,585,585,585", "585,585,,,585,,,,,,,585,,,585,585,585,585,585,585,585,585,,585,585,585", ",585,585,,,585,,,,,,,,,,,,,,,,,,,,585,,,585,,,585,585,,,585,,,,,,,,", ",,,,,,,,,,,585,585,585,585,,585,585,585,585,,,,,585,585,,,,594,594,594", "585,594,585,585,585,594,594,,,,594,,594,594,594,594,594,594,594,,,,", ",594,594,594,594,594,594,594,,,594,,,,,,,594,,,594,594,594,594,594,594", "594,594,,594,594,594,,594,594,,,594,,,,,,,,,,,,,,,,,,,,594,,,594,,,594", "594,,,594,,,,,,,,,,,,,,,,,,,,594,594,594,594,,594,594,594,594,,,,,594", "594,,,,77,77,77,594,77,594,594,594,77,77,,,,77,,77,77,77,77,77,77,77", ",,,,,77,77,77,77,77,77,77,,,77,,,,,,,77,,,77,77,77,77,77,77,77,77,,77", "77,77,,77,77,,,77,,,,,,,,,,,,,,,,,77,,,77,,,77,,,77,77,,,77,,,,,,,,", ",,,,,,,,,,,77,77,77,77,,77,77,77,77,,,,,77,77,,,,78,78,78,77,78,77,77", "77,78,78,,,,78,,78,78,78,78,78,78,78,,,,,,78,78,78,78,78,78,78,,,78", ",,,,,,78,,,78,78,78,78,78,78,78,78,,78,78,78,,78,78,,,78,,,,,,,,,,,", ",,,,,,,,78,,,78,,,78,78,,,78,,,,,,,,,,,,,,,,,,,,78,78,78,78,,78,78,78", "78,,,,,78,78,,,,40,40,40,78,40,78,78,78,40,40,,,,40,,40,40,40,40,40", "40,40,,,,,,40,40,40,40,40,40,40,,,40,,,,,,,40,,,40,40,40,40,40,40,40", "40,,40,40,40,,40,40,,,40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,40,,,40,,,1207", ",1207,1207,1207,1207,1207,,,,,,,,,1207,,40,40,40,40,,40,40,40,40,,,", ",40,40,,,,40,,1207,40,,40,40,40,1137,1137,1137,,1137,1207,1207,,1137", "1137,1207,,,1137,,1137,1137,1137,1137,1137,1137,1137,,,,,,1137,1137", "1137,1137,1137,1137,1137,,,1137,,,,,,,1137,,,1137,1137,1137,1137,1137", "1137,1137,1137,,1137,1137,1137,,1137,1137,,,1137,,,,,,,,,,,,,,,,,,,", "1137,,,1137,,,1137,1137,,,1137,,,,,,,,,,,,,,,,,,,,1137,1137,1137,1137", ",1137,1137,1137,1137,,,,,1137,1137,,,,799,799,799,1137,799,1137,1137", "1137,799,799,,,,799,,799,799,799,799,799,799,799,,,,,,799,799,799,799", "799,799,799,,,799,,,,,,,799,,,799,799,799,799,799,799,799,799,,799,799", "799,,799,799,,,799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799,,,799,,,,", ",,,,,,,,,,,,,,,799,799,799,799,,799,799,799,799,,,,,799,799,,,,810,810", "810,799,810,799,799,799,810,810,,,,810,,810,810,810,810,810,810,810", ",,,,,810,810,810,810,810,810,810,,,810,,,,,,,810,,,810,810,810,810,810", "810,810,810,,810,810,810,,810,810,,,810,,,,,,,,,,,,,,,,,,,,810,,,810", ",,810,810,,,810,,,,,,,,,,,,,,,,,,,,810,810,810,810,,810,810,810,810", ",,,,810,810,,,,39,39,39,810,39,810,810,810,39,39,,,,39,,39,39,39,39", "39,39,39,,,,,,39,39,39,39,39,39,39,,,39,,,,,,,39,,,39,39,39,39,39,39", "39,39,,39,39,39,,39,39,,,39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39", ",39,,,,,,,,,,,,,,,,,,39,39,39,39,,39,39,39,39,,,,,39,39,,,,,,,39,,39", "39,39,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424", "424,424,424,424,424,424,424,424,,,,424,424,424,424,424,424,424,424,424", "424,,,,,,424,424,424,424,424,424,424,424,424,,,424,,,,,,,,424,424,,424", "424,424,424,424,424,424,,,424,424,,,,424,424,424,424,,,,,,,,,,,,,,424", "424,,424,424,424,424,424,424,424,424,424,424,424,424,,,424,424,,,,,", ",,,,,,,,424,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10", "10,10,10,10,10,,,,10,10,10,10,10,10,10,10,10,10,,,,,,10,10,10,10,10", "10,10,10,10,10,,10,,,,,,,,10,10,,10,10,10,10,10,10,10,,,10,10,,,,10", "10,10,10,,,,,,,,,,,,,,10,10,,10,10,10,10,10,10,10,10,10,10,10,10,,,10", "10,,,,,,,,,,,,,,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11", "11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11", "11,11,11,11,11,11,,,11,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,", ",11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,11", ",,11,11,,,,,,,,,,,,,,11,664,664,664,664,664,664,664,664,664,664,664", "664,664,664,664,664,664,664,664,664,664,664,664,664,,,,664,664,664,664", "664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,664,664,,,664", ",,,,,,,664,664,,664,664,664,664,664,664,664,,,664,664,,,,664,664,664", "664,,,,,,,,,,,,,,664,664,,664,664,664,664,664,664,664,664,664,664,664", "664,,,664,664,1118,1118,1118,1118,,,,,,,,,,664,,,1118,1118,1118,1118", ",,1201,1118,1201,1201,1201,1201,1201,1118,1118,,,1118,,,,1201,,,,,,", ",,,,,,,,,1118,,,1118,,,1201,1118,,,1118,,,,,1201,1201,1201,1201,,,,1201", ",,,1118,,,,1118,1118,1118,1118,,1118,1118,1118,1118,,,,,1118,1118,983", "983,983,983,,,1118,,1118,1118,1118,,,1118,1118,,983,983,983,983,,,,983", "983,,,,,983,983,,,983,983,,,,,,,,,,,,,,,,,,,983,,,983,,,,983,,,983,", "983,,,,,,,983,,,,,,,983,,,,983,983,983,983,,983,983,983,983,,,,,983", "983,937,937,937,937,,,983,,983,983,983,,,983,983,,937,937,937,937,,", "1128,937,1128,1128,1128,1128,1128,937,937,,,937,,,,1128,,,,,,,,,,,,", ",,,937,,,937,,,1128,937,,,937,,,,,1128,1128,1128,1128,,,,1128,,,,937", ",,,937,937,937,937,,937,937,937,937,,,,,937,937,936,936,936,936,,,937", ",937,937,937,,,937,937,,936,936,936,936,,,1205,936,1205,1205,1205,1205", "1205,936,936,,,936,,,,1205,,,,,,,,,,,,,,,,936,,,936,,,1205,936,,,936", ",,,,,,1205,1205,,,,1205,,,,936,,,,936,936,936,936,,936,936,936,936,", ",,,936,936,930,930,930,930,,,936,,936,936,936,,,936,936,,930,930,930", "930,,,1203,930,1203,1203,1203,1203,1203,930,930,,,930,,,,1203,,,,,,", ",,,,,,,,,930,,,930,,,1203,930,,,930,,930,,,,,1203,1203,,,,1203,,,,930", ",,,930,930,930,930,,930,930,930,930,,,,,930,930,1198,1198,1198,1198", ",,930,,930,930,930,,,930,930,,1198,1198,1198,1198,,,1224,1198,1224,1224", "1224,1224,1224,1198,1198,,,1198,,,,1224,,,,,,,,,,,,,,,,1198,,,1198,", ",1224,1198,,,1198,,,,,,,1224,1224,,,,1224,,,,1198,,,,1198,1198,1198", "1198,,1198,1198,1198,1198,,,,,1198,1198,924,924,924,924,,,1198,,1198", "1198,1198,,,1198,1198,,924,924,924,924,,,,924,924,,,,,924,924,,,924", "924,,,,,,,,,,,,,,,,,,,924,,,924,,,,924,,,924,,924,,,,,,,924,,,,,,,924", ",,,924,924,924,924,,924,924,924,924,,,,,924,924,923,923,923,923,,,924", ",924,924,924,,,924,924,,923,923,923,923,,,,923,923,,,,,923,923,,,923", "923,,,,,,,,,,,,,,,,,,,923,,,923,,,,923,,,923,,923,,,,,,,923,,,,,,,923", ",,,923,923,923,923,,923,923,923,923,,,,,923,923,920,920,920,920,,,923", ",923,923,923,,,923,923,,920,920,920,920,,,,920,,,,,,920,920,,,920,,", ",,,,,,,,,,,,,,,,,920,,,920,,,,920,,,920,,,,,,,,,,,,,,,,920,,,,920,920", "920,920,,920,920,920,920,,,,,920,920,918,918,918,918,,,920,,920,920", "920,,,920,920,,918,918,918,918,,,,918,,,,,,918,918,,,918,,,,,,,,,,,", ",,,,,,,,918,,,918,,,,918,,,918,,918,,,,,,,,,,,,,,918,,,,918,918,918", "918,,918,918,918,918,,,,,918,918,741,741,741,741,,,918,,918,918,918", ",,918,918,,741,741,741,741,,,,741,,,,,,741,741,,,741,,,,,,,,,,,,,,,", ",,,,741,,,741,,,,741,,,741,,741,,,,,,,,,,,,,,741,,,,741,741,741,741", ",741,741,741,741,,,,,741,741,741,,,,,,741,,741,741,741,,,741,741,26", "26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26", ",,,26,26,26,26,26,26,26,26,26,26,,,,,,26,26,26,26,26,26,26,26,26,26", "26,26,,26,,,,,,26,26,,26,26,26,26,26,26,26,,,26,26,,,,26,26,26,26,,", ",,,26,,,,,,,,26,26,,26,26,26,26,26,26,26,26,26,26,26,26,,,26,749,749", "749,749,,,702,,702,702,702,702,702,,,,749,749,749,749,,702,,749,,,,", ",749,749,,,749,,,,,,,,,,702,,,,,,,,,,749,702,702,749,,,702,749,,,749", ",,,,,,,,,,,,,,,749,,,,749,749,749,749,,749,749,749,749,,,,,749,749,", "702,,,,,749,,749,749,749,,,749,749,776,776,776,776,776,776,776,776,776", "776,776,776,776,776,776,776,776,776,776,776,776,776,776,776,,,,776,776", "776,776,776,776,776,776,776,776,,,,,,776,776,776,776,776,776,776,776", "776,,,776,,,,,,,,776,776,,776,776,776,776,776,776,776,,,776,776,,,,776", "776,776,776,,,,,,,,,,,,,,776,776,,776,776,776,776,776,776,776,776,776", "776,776,776,,,776,525,525,525,525,,,,,,,,,,,,,525,525,525,525,,,,525", "525,,,,,525,525,,,525,525,,,,,,,,,,,,,,,,,,,525,,,525,,,,525,,,525,", "525,,,,,,,525,,,,,,,525,,,,525,525,525,525,,525,525,525,525,,,,,525", "525,524,524,524,524,,,525,,525,525,525,,,525,525,,524,524,524,524,,", ",524,524,,,,,524,524,,,524,524,,,,,,,,,,,,,,,,,,,524,,,524,,,,524,,", "524,,524,,,,,,,524,,,,,,,524,,,,524,524,524,524,,524,524,524,524,,,", ",524,524,1166,1166,1166,1166,,,524,,524,524,524,,,524,524,,1166,1166", "1166,1166,,,,1166,,,,,,1166,1166,,,1166,,,,,,,,,,,,,,,,,,,,1166,,,1166", ",,,1166,,,1166,,,,,,,,,,,,,,,,1166,,,,1166,1166,1166,1166,,1166,1166", "1166,1166,,,,,1166,1166,1109,1109,1109,1109,,,1166,,1166,1166,1166,", ",1166,1166,,1109,1109,1109,1109,,,,1109,,,,,,1109,1109,,,1109,,,,,,", ",,,,,,,,,,,,,1109,,,1109,,,,1109,,,1109,,,,,,,,,,,,,,,,1109,,,,1109", "1109,1109,1109,,1109,1109,1109,1109,,,,,1109,1109,1122,1122,1122,1122", ",,1109,,1109,1109,1109,,,1109,1109,,1122,1122,1122,1122,,,,1122,,,,", ",1122,1122,,,1122,,,,,,,,758,758,758,758,,,,,,,,,1122,,,1122,758,758", "758,1122,,,1122,,1122,,,,,758,758,,,758,,,,,1122,,,,1122,1122,1122,1122", ",1122,1122,1122,1122,,,,,1122,1122,,,,,,,1122,,1122,1122,1122,,,1122", "1122,,,,,,,,,,,,758,758,758,758,,758,758,758,758,,,,,758,758,945,945", "945,945,,,758,,758,758,758,,,,,,945,945,945,,,,,,,,,,,945,945,,,945", "944,944,944,944,,,,,,,,,,,,,944,944,944,,,,,,,,,,,944,944,,,944,,,,", ",,,,,,,,,,,945,945,945,945,,945,945,945,945,,,,,945,945,,,,,,,945,,945", "945,945,,,,,,,,,944,944,944,944,,944,944,944,944,,,,,944,944,759,759", "759,759,,,944,,944,944,944,,,,,,759,759,759,700,,700,700,700,700,700", ",,,759,759,,,759,700,,,,,,,,,,,1020,,1020,1020,1020,1020,1020,,,,,700", ",,,1020,,,,,700,700,700,700,,,,700,,,,,,,,,,1020,759,759,759,759,,759", "759,759,759,,1020,1020,,759,759,1020,,,,,,759,,759,759,759,,,698,700", "698,698,698,698,698,,230,,230,230,230,230,230,698,,,,,,,,230,,,1018", "1020,1018,1018,1018,1018,1018,,,,,698,,,,1018,,,,230,698,698,698,698", ",,,698,230,230,230,230,,,,230,1016,1018,1016,1016,1016,1016,1016,,,", ",,1018,1018,,1016,,1018,1014,,1014,1014,1014,1014,1014,,,,,,,698,,1014", ",,,1016,,230,,,,,,,,,1016,1016,,,,1016,,1014,,1018,,,,,,,1014,1014,1014", "1014,,,,1014,,,,,,,,,,,,1181,1181,,,1181,,,,,,1016,,1181,1181,,1181", "1181,1181,1181,1181,1181,1181,,,1181,1181,,,1014,1181,1181,1181,1181", ",,,,,1181,,,,,,,,1181,1181,,1181,1181,1181,1181,1181,1181,1181,1181", "1181,1181,1181,1181,299,299,1181,,299,,,,,,,,299,299,,299,299,299,299", "299,299,299,,,299,299,,,,299,299,299,299,,,,,,,,,,,,,,299,299,,299,299", "299,299,299,299,299,299,299,299,299,299,223,223,299,,223,,,,,,,,223", "223,,223,223,223,223,223,223,223,,,223,223,,,,223,223,223,223,,,,,,223", ",,,,,,,223,223,,223,223,223,223,223,223,223,223,223,223,223,223,1157", "1157,223,,1157,,,,,,,,1157,1157,,1157,1157,1157,1157,1157,1157,1157", ",,1157,1157,,,,1157,1157,1157,1157,,,,,,1157,,,,,,,,1157,1157,,1157", "1157,1157,1157,1157,1157,1157,1157,1157,1157,1157,1157,516,516,1157", ",516,,,,,,,,516,516,,516,516,516,516,516,516,516,,,516,516,,,,516,516", "516,516,,,,,,516,,,,,,,,516,516,,516,516,516,516,516,516,516,516,516", "516,516,516,1156,1156,516,,1156,,,,,,,,1156,1156,,1156,1156,1156,1156", "1156,1156,1156,,,1156,1156,,,,1156,1156,1156,1156,,,,,,1156,,,,,,,,1156", "1156,,1156,1156,1156,1156,1156,1156,1156,1156,1156,1156,1156,1156,672", "672,1156,,672,,,,,,,,672,672,,672,672,672,672,672,672,672,,,672,672", ",,,672,672,672,672,,,,,,672,,,,,,,,672,672,,672,672,672,672,672,672", "672,672,672,672,672,672,515,515,672,,515,,,,,,,,515,515,,515,515,515", "515,515,515,515,,,515,515,,,,515,515,515,515,,,,,,515,,,,,,,,515,515", ",515,515,515,515,515,515,515,515,515,515,515,515,222,222,515,,222,,", ",,,,,222,222,,222,222,222,222,222,222,222,,,222,222,,,,222,222,222,222", ",,,,,222,,,,,,,,222,222,,222,222,222,222,222,222,222,222,222,222,222", "222,588,588,222,,588,,,,,,,,588,588,,588,588,588,588,588,588,588,,,588", "588,,,,588,588,588,588,,,,,,588,,,,,,,,588,588,,588,588,588,588,588", "588,588,588,588,588,588,588,589,589,588,,589,,,,,,,,589,589,,589,589", "589,589,589,589,589,,,589,589,,,,589,589,589,589,,,,,,589,,,,,,,,589", "589,,589,589,589,589,589,589,589,589,589,589,589,589,626,626,589,,626", ",,,,,,,626,626,,626,626,626,626,626,626,626,,,626,626,,,,626,626,626", "626,,,,,,626,,,,,,,,626,626,,626,626,626,626,626,626,626,626,626,626", "626,626,671,671,626,,671,,,,,,,,671,671,,671,671,671,671,671,671,671", ",,671,671,,,,671,671,671,671,,,,,,671,,,,,,,,671,671,,671,671,671,671", "671,671,671,671,671,671,671,671,627,627,671,,627,,,,,,,,627,627,,627", "627,627,627,627,627,627,,,627,627,,,,627,627,627,627,,,,,,627,,,,,,", ",627,627,,627,627,627,627,627,627,627,627,627,627,627,627,634,634,627", ",634,,,,,,,,634,634,,634,634,634,634,634,634,634,,,634,634,,,,634,634", "634,634,,,,,,634,,,,,,,,634,634,,634,634,634,634,634,634,634,634,634", "634,634,634,633,633,634,,633,,,,,,,,633,633,,633,633,633,633,633,633", "633,,,633,633,,,,633,633,633,633,,,,,,633,,,,,,,,633,633,,633,633,633", "633,633,633,633,633,633,633,633,633,598,598,633,,598,,,,,,,,598,598", ",598,598,598,598,598,598,598,,,598,598,,,,598,598,598,598,,,,,,598,", ",,,,,,598,598,,598,598,598,598,598,598,598,598,598,598,598,598,599,599", "598,,599,,,,,,,,599,599,,599,599,599,599,599,599,599,,,599,599,,,,599", "599,599,599,,,,,,599,,,,,,,,599,599,,599,599,599,599,599,599,599,599", "599,599,599,599,,,599"];
      racc_action_check = (arr = $$$('Array').$new(28951, nil));
      idx = 0;
      $send(clist, 'each', [], function $Ruby31$4(str){
        
        
        if (str == null) str = nil;;
        return $send(str.$split(",", -1), 'each', [], function $$5(i){var $writer = nil;

          
          
          if (i == null) i = nil;;
          if (!$truthy(i['$empty?']())) {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, 1);}, 1);
      racc_action_pointer = [nil, 1530, 1699, 101, nil, 482, nil, 20901, 1396, 63, 25127, 25255, 87, nil, 108, 123, 470, 190, 962, 122, 162, 700, nil, -35, 16902, 1267, 26590, 276, nil, 598, nil, 307, 8439, 8549, 8814, 10017, 10148, nil, 4147, 24860, 24328, nil, 206, 690, 444, 339, 12923, 13185, 283, 21962, 19796, 979, 20758, 303, 845, nil, nil, nil, nil, nil, nil, nil, nil, nil, 15455, nil, 15183, 15040, 14385, 148, nil, 14123, 21176, nil, nil, 13980, 23542, 24066, 24197, nil, nil, nil, nil, nil, nil, 584, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 110, nil, nil, 222, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 20070, nil, nil, nil, nil, 19927, 19665, 19272, 19141, 19010, nil, 4867, nil, 585, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 302, nil, 979, 22093, 21700, 21569, 21307, 13849, 13718, 28287, 27921, nil, nil, 315, 2707, 332, nil, 27662, 580, 338, 1267, 11851, 11196, 11065, nil, nil, 1106, 138, 142, 453, 193, 372, 446, nil, 9886, 386, 299, 2419, 449, nil, nil, 7250, 7119, 6583, 6452, 6321, 6190, 6059, 5535, 18343, 18212, 17688, 17557, 17426, 16509, 16116, 15985, 15592, 14909, 14778, 21831, 21438, 13447, nil, nil, nil, nil, 13316, nil, nil, 532, 308, 563, 587, 488, 673, 710, 747, 755, 354, nil, nil, nil, 15854, nil, nil, 27860, nil, nil, 472, 17033, 17164, nil, nil, nil, nil, nil, nil, nil, 17295, nil, 2131, nil, 478, 480, nil, 17819, 534, 17950, nil, nil, 18081, 5797, nil, nil, 563, nil, 6726, 1540, 517, 497, 5011, 533, 582, 554, 23403, 3859, 873, 879, 878, 644, 995, nil, 618, 585, -24, 628, 632, nil, nil, nil, 644, 275, 608, 23141, nil, 666, 972, 4435, 5273, 693, nil, 709, 12530, nil, 12661, 2275, 1684, 653, nil, 593, 597, 690, 692, 468, 725, nil, 719, 35, 36, 22748, 4723, 4579, 72, 797, 686, -18, -19, 411, 783, 25, 822, nil, nil, 1114, 802, 342, nil, 806, nil, 742, 15314, nil, 13552, nil, 399, 366, 402, 469, 410, -32, -34, 394, nil, nil, nil, nil, nil, nil, nil, 740, 24999, nil, nil, nil, nil, 742, nil, 813, 731, 14254, 733, nil, nil, 723, nil, 788, -56, 835, nil, nil, 1411, nil, nil, nil, nil, nil, 1699, 750, nil, 749, 751, 388, 425, 21042, nil, nil, nil, 0, 695, 796, nil, nil, 20621, 20485, 20344, 887, 887, nil, nil, 768, 782, 786, nil, nil, 790, 792, 793, nil, nil, nil, nil, nil, nil, nil, nil, nil, 783, 3269, nil, nil, 18867, nil, nil, nil, 0, nil, nil, nil, 880, nil, nil, 882, 571, 23010, 926, nil, nil, nil, -26, nil, 859, 28226, 28043, 22879, -82, 22617, 22486, 22355, 806, 807, 26997, 26899, 3859, 4867, 3322, 1018, 887, 888, 893, 894, 5404, 5535, 5666, 5142, 4723, 4579, 4291, 4147, 4003, 3455, 3311, 3715, 3427, 2275, 5011, nil, 44, nil, 13588, nil, nil, nil, nil, 13054, 843, 841, 845, nil, nil, nil, 848, nil, nil, 12792, nil, 12399, nil, 12268, nil, 327, nil, nil, nil, 12125, 1108, nil, 858, 858, nil, nil, 859, 23804, 863, 11982, 28348, 28409, 968, 914, nil, nil, 23935, 871, nil, 11720, 28775, 28836, 11589, 3571, 2707, 11327, 996, 877, 926, nil, 10934, nil, nil, 10803, nil, nil, nil, 3571, 1007, nil, 3427, 90, 1013, 1039, 11, 1044, 10672, 10541, 28470, 28592, 7, nil, nil, 893, nil, 28714, 28653, 10279, nil, nil, 60, 1843, nil, 692, nil, nil, nil, nil, 1177, nil, nil, nil, 938, nil, nil, 369, nil, 324, nil, nil, 924, nil, 926, nil, nil, nil, 25383, nil, 9755, 929, 9612, 9481, 9219, 28531, 28165, 8957, 8683, 724, 972, 8036, 7905, 7774, 7643, 972, nil, nil, 7512, 7381, 973, nil, 1030, 1555, 1061, 6988, nil, nil, 788, nil, nil, 269, 27654, nil, 27562, nil, 26660, nil, 6857, nil, 3298, nil, 944, 945, 1253, 951, nil, nil, nil, nil, nil, nil, 1040, 1843, nil, nil, nil, 339, 360, 473, 334, 955, 5928, 5666, nil, -72, nil, nil, nil, nil, 981, nil, nil, nil, -34, 26447, 189, nil, 958, 1041, 960, nil, nil, 26673, nil, nil, 1, nil, nil, 675, nil, nil, 27332, 27562, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 1447, 590, nil, nil, 966, 26816, nil, 1094, nil, 1078, -13, nil, nil, 16247, nil, 993, 1000, 1102, nil, 980, nil, 1043, 14647, nil, nil, 22224, nil, 429, 24598, 998, nil, 1002, 233, 250, 1046, 181, 1139, 1047, 1026, 24729, nil, 1099, 249, nil, nil, nil, 68, 614, nil, 1165, nil, nil, nil, nil, nil, 1183, 1185, nil, nil, 26, 1065, 8, -5, 232, -4, 1123, 970, 1112, nil, 1072, 2851, 14516, nil, 1195, -25, 1080, nil, nil, nil, nil, nil, 2563, nil, nil, nil, nil, nil, nil, nil, nil, 1079, 15723, 1083, 416, 392, 583, 834, nil, 1987, 16378, nil, 1084, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 16640, 16771, 1211, nil, 3715, 1088, 1135, nil, nil, 1092, nil, 1176, nil, nil, 1096, 1104, nil, 1109, 1114, nil, 1116, nil, nil, 1120, 1109, 3557, nil, nil, 18474, 18605, 18736, 5142, 5273, 5404, 377, 26349, 1202, 26251, -68, 97, 26153, 26055, 335, -69, 1125, 1127, nil, 25859, nil, 1127, 902, nil, 1151, 25761, 25663, nil, 498, 1178, 331, nil, nil, 27464, 27430, nil, nil, nil, nil, 8167, nil, nil, nil, nil, nil, 8298, nil, nil, 1165, nil, nil, 1162, 1146, nil, nil, 763, 2131, nil, nil, nil, nil, 1146, 136, nil, nil, nil, 1271, nil, 9088, 1274, nil, nil, 25565, 9350, 4291, -1, 1283, nil, 1284, -77, 1411, nil, nil, nil, nil, 1159, 1205, 1176, 1176, 227, nil, nil, 10410, 3139, 2563, nil, 2995, nil, nil, -10, 23272, nil, nil, 27734, nil, 27716, nil, 27680, nil, 27588, nil, nil, nil, nil, 1190, 1194, 2995, 2851, 11458, nil, 1211, nil, nil, nil, nil, 1217, 1218, 1221, 1223, 1227, 1230, nil, nil, nil, 1274, 1230, 121, nil, 1241, nil, nil, -70, 1246, nil, nil, nil, nil, nil, nil, 1290, 2419, 1987, nil, nil, 1248, 1253, nil, 1258, 1259, 1260, nil, 1285, 1267, 1256, 23673, nil, nil, nil, nil, 9, nil, 13, 17, nil, 268, nil, nil, nil, 1393, 4003, 3139, 2117, nil, nil, nil, 1555, 32, 33, 667, 1353, 34, nil, 1276, 1285, 1286, 1287, 3308, 3413, 27193, nil, nil, nil, nil, nil, nil, nil, 1290, 25467, nil, 257, nil, 27291, nil, nil, 1300, nil, nil, 25666, nil, nil, 13607, nil, 23450, nil, nil, 1315, 24467, 1116, 1370, 3283, nil, 19403, 19534, nil, nil, nil, nil, 1314, 1438, 609, nil, nil, nil, 1441, 20213, 28104, 27982, 79, 13581, nil, nil, nil, nil, 1317, 1318, 27095, 1319, nil, nil, 1320, nil, nil, 1334, 1338, 1355, 1358, nil, 1359, nil, 555, 27799, nil, 574, 4435, nil, nil, nil, nil, nil, 1973, nil, 1365, 109, 142, 143, 221, 1364, 25957, 1372, nil, 25470, nil, 25862, nil, 25764, nil, 24375, nil, nil, 1418, 1421, nil, 375, nil, 145, nil, 1382, 1390, 1391, 1392, nil, nil, nil, 25960, nil, nil, nil, nil, -104, nil];
      racc_action_default = [-1, -738, -4, -738, -2, -723, -5, -738, -8, -738, -738, -738, -738, -31, -738, -738, -36, -738, -738, -632, -632, -310, -52, -725, -738, -61, -738, -69, -70, -71, -75, -286, -286, -286, -323, -350, -351, -87, -13, -91, -99, -101, -738, -619, -620, -738, -738, -738, -738, -738, -738, -239, -738, -725, -257, -301, -302, -303, -304, -305, -306, -307, -308, -309, -711, -312, -316, -737, -700, -331, -333, -738, -738, -63, -63, -723, -738, -738, -738, -352, -353, -355, -412, -556, -557, -558, -559, -580, -562, -563, -582, -584, -567, -572, -576, -578, -594, -595, -596, -580, -598, -600, -601, -602, -603, -709, -608, -609, -710, -611, -612, -613, -614, -615, -616, -617, -618, -623, -624, 1231, -3, -724, -733, -734, -735, -7, -738, -738, -738, -738, -738, -9, -4, -19, -738, -130, -131, -132, -133, -134, -135, -136, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -24, -137, -13, -738, -738, -738, -738, -738, -276, -738, -738, -721, -722, -738, -13, -631, -629, -655, -655, -738, -13, -738, -738, -725, -726, -56, -738, -619, -620, -738, -310, -738, -738, -245, -738, -632, -632, -13, -738, -57, -59, -222, -223, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -258, -259, -260, -261, -738, -65, -66, -738, -130, -131, -170, -171, -172, -188, -193, -200, -203, -619, -620, -698, -738, -421, -423, -738, -719, -720, -76, -276, -738, -330, -427, -436, -438, -82, -433, -83, -725, -84, -264, -281, -291, -291, -285, -289, -292, -738, -580, -702, -706, -738, -85, -86, -723, -14, -738, -17, -738, -89, -13, -725, -738, -92, -95, -13, -107, -108, -738, -738, -115, -323, -326, -725, -738, -632, -632, -350, -351, -354, -434, -738, -97, -738, -103, -320, -738, -224, -225, -599, -233, -234, -738, -246, -738, -13, -314, -725, -265, -730, -730, -738, -738, -730, -738, -332, -62, -738, -738, -738, -13, -13, -723, -738, -724, -619, -620, -738, -738, -310, -738, -365, -366, -125, -126, -738, -128, -738, -310, -627, -738, -346, -655, -560, -738, -738, -738, -738, -738, -738, -738, -738, -6, -736, -25, -26, -27, -28, -29, -738, -738, -21, -22, -23, -138, -738, -32, -35, -297, -738, -738, -296, -33, -738, -37, -738, -310, -49, -51, -211, -269, -292, -53, -54, -38, -212, -269, -725, -277, -291, -291, -712, -713, -286, -431, -714, -715, -713, -712, -286, -430, -432, -714, -715, -738, -548, -738, -378, -379, -725, -697, -697, -637, -638, -640, -640, -640, -654, -656, -657, -658, -659, -660, -661, -662, -663, -664, -738, -666, -668, -670, -675, -677, -678, -681, -686, -688, -689, -691, -692, -693, -695, -738, -738, -738, -48, -219, -55, -725, -329, -738, -738, -738, -276, -320, -738, -738, -738, -738, -738, -738, -738, -220, -221, -226, -227, -228, -229, -230, -231, -235, -236, -237, -238, -240, -241, -242, -243, -244, -247, -248, -249, -250, -725, -262, -67, -725, -442, -286, -712, -713, -73, -77, -656, -725, -291, -725, -287, -440, -442, -725, -325, -282, -738, -283, -738, -288, -738, -293, -738, -705, -708, -12, -724, -16, -18, -725, -88, -318, -104, -93, -738, -725, -276, -738, -738, -114, -738, -631, -599, -738, -100, -105, -738, -738, -738, -738, -263, -251, -738, -738, -725, -738, -266, -732, -731, -268, -732, -321, -322, -701, -13, -356, -357, -13, -738, -738, -738, -738, -738, -738, -276, -738, -738, -320, -63, -125, -126, -127, -738, -738, -276, -342, -625, -738, -13, -413, -655, -416, -561, -581, -586, -738, -588, -564, -583, -738, -585, -566, -738, -569, -738, -571, -574, -738, -575, -738, -597, -10, -20, -738, -30, -738, -300, -738, -738, -276, -738, -738, -738, -738, -435, -738, -278, -280, -738, -738, -78, -275, -428, -738, -738, -80, -429, -44, -253, -737, -737, -348, -630, -738, -635, -636, -738, -738, -647, -738, -650, -738, -652, -738, -367, -738, -369, -371, -374, -377, -725, -669, -679, -680, -690, -694, -633, -46, -255, -349, -328, -727, -712, -713, -712, -713, -725, -738, -738, -58, -456, -459, -460, -461, -462, -464, -466, -469, -470, -527, -725, -482, -485, -497, -501, -506, -508, -509, -512, -513, -580, -516, -518, -519, -520, -525, -526, -738, -738, -530, -531, -532, -533, -534, -535, -536, -537, -538, -539, -540, -738, -738, -546, -60, -738, -738, -699, -738, -443, -72, -424, -440, -271, -278, -273, -738, -402, -738, -324, -291, -290, -294, -738, -703, -704, -738, -15, -90, -738, -96, -102, -725, -712, -713, -274, -716, -113, -738, -98, -738, -218, -232, -725, -313, -315, -317, -730, -737, -358, -737, -64, -359, -360, -336, -337, -738, -738, -448, -339, -738, -725, -712, -713, -716, -319, -13, -125, -126, -129, -725, -13, -738, -344, -738, -738, -725, -587, -590, -591, -592, -593, -13, -565, -568, -570, -573, -577, -579, -139, -34, -298, -738, -725, -712, -713, -713, -712, -50, -270, -738, -728, -291, -40, -214, -41, -215, -79, -42, -217, -43, -216, -81, -738, -738, -737, -363, -13, -549, -737, -550, -551, -697, -676, -681, -696, -639, -640, -640, -667, -640, -640, -687, -640, -664, -682, -725, -738, -738, -376, -665, -738, -738, -738, -738, -738, -738, -435, -457, -738, -738, -467, -468, -738, -738, -738, -487, -725, -725, -481, -488, -494, -738, -738, -484, -738, -738, -738, -500, -507, -511, -738, -515, -517, -523, -524, -528, -529, -541, -542, -738, -604, -605, -606, -126, -544, -738, -68, -422, -402, -426, -425, -738, -725, -437, -403, -725, -13, -439, -284, -295, -707, -94, -435, -106, -327, -267, -738, -361, -738, -738, -338, -340, -738, -738, -13, -435, -738, -435, -738, -738, -13, -347, -414, -417, -419, -406, -738, -738, -299, -435, -39, -213, -279, -45, -254, -11, -13, -555, -364, -738, -738, -553, -634, -738, -643, -738, -645, -738, -648, -738, -651, -653, -368, -370, -372, -375, -47, -256, -738, -458, -497, -463, -465, -474, -478, -725, -725, -725, -725, -725, -725, -545, -479, -480, -504, -489, -492, -495, -725, -580, -729, -725, -498, -502, -505, -510, -514, -521, -522, -738, -252, -13, -74, -272, -697, -697, -383, -385, -385, -385, -401, -738, -725, -664, -672, -673, -684, -441, -334, -738, -335, -738, -453, -294, -737, -341, -343, -626, -738, -13, -13, -738, -415, -589, -554, -13, -619, -620, -738, -738, -310, -552, -640, -640, -640, -640, -738, -738, -738, -471, -472, -473, -475, -476, -477, -496, -490, -738, -483, -738, -486, -738, -543, -444, -738, -381, -382, -386, -392, -394, -738, -397, -738, -399, -404, -738, -738, -671, -738, -13, -449, -738, -738, -445, -446, -447, -345, -738, -738, -725, -408, -410, -411, -548, -276, -738, -738, -320, -738, -641, -644, -646, -649, -373, -498, -738, -493, -499, -503, -697, -674, -384, -385, -385, -385, -385, -685, -385, -405, -683, -738, -320, -737, -13, -454, -455, -418, -420, -407, -738, -547, -725, -712, -713, -716, -319, -640, -738, -491, -380, -738, -389, -738, -391, -738, -395, -738, -398, -400, -319, -716, -362, -737, -409, -435, -642, -385, -385, -385, -385, -450, -451, -452, -738, -387, -390, -393, -396, -385, -388];
      clist = ["44,138,138,306,310,44,315,315,315,298,408,282,380,380,457,463,380,138", "222,281,690,379,415,451,294,15,827,141,141,300,15,560,632,675,229,229", "44,341,341,470,124,353,353,615,618,508,381,382,384,385,386,623,794,336", "568,899,337,133,214,238,595,15,885,791,44,791,233,380,380,380,380,977", "435,436,390,294,294,705,353,353,353,556,372,730,774,299,490,490,120", "15,902,552,733,733,794,892,699,701,703,395,121,418,419,420,421,558,1053", "235,607,610,124,131,614,448,481,481,317,317,317,44,1024,934,927,363", "333,695,696,509,44,997,44,302,309,311,356,711,1069,368,4,1031,752,752", "8,967,15,1026,335,8,928,374,377,473,506,15,1177,15,786,125,387,446,447", "794,1151,778,1010,946,947,2,313,326,327,403,405,791,791,788,511,512", "1006,1153,797,604,213,316,316,316,396,226,232,1038,1041,568,980,315", "458,592,592,653,655,1049,431,424,524,525,821,283,370,776,782,664,366", "375,781,44,467,442,373,295,442,376,394,636,1046,369,1177,44,605,371", "841,1054,429,44,442,991,639,1025,1071,550,15,515,437,1129,1073,437,1150", "573,640,993,44,1072,15,430,441,406,845,441,15,437,1090,1091,1214,8,490", "229,229,336,839,449,423,441,422,416,8,15,551,315,315,1153,1165,562,791", "510,563,300,315,959,826,1167,800,1144,481,1082,705,1221,983,233,909", "809,1173,1030,1184,1032,1033,923,1036,1039,924,457,463,917,894,933,936", "1055,1056,1062,949,889,1,727,306,1024,407,929,380,409,310,642,44,410", "1037,1040,44,411,412,1199,341,44,413,549,353,414,588,1168,1164,638,847", "852,842,336,906,1058,1059,15,336,341,1136,15,619,353,598,897,15,124", "893,434,434,44,649,651,654,654,1171,,596,,962,899,,,805,,44,44,973,", "317,,,802,805,626,15,,317,,233,,,620,621,1054,,,902,955,,15,15,,1054", "576,,986,1169,138,522,523,805,,333,124,988,577,,333,805,831,1119,682", "593,591,584,,579,687,1212,840,561,671,688,141,580,,,1000,564,586,,,", "844,559,316,,606,,1145,1054,,877,316,,457,463,882,,,,622,578,663,863", ",,,,,,718,,,,,,899,794,458,,315,1169,,985,705,705,,,490,,791,,,972,", "1035,,,467,,1043,1044,,963,,,1015,1017,,1019,1021,,1022,768,768,682", "481,1170,969,,,,,,731,731,676,,,,752,752,717,1083,1013,813,,898,890", "900,752,,733,976,,490,752,490,681,1042,315,458,,846,686,899,,510,,449", ",458,,873,875,,44,,878,880,,467,,,341,,1222,,353,,,467,,341,,,,353,315", "458,752,15,,596,,836,,458,315,,969,,596,855,44,855,,44,1223,467,,,1113", "1114,1115,467,,,,,,818,775,,820,,,,44,15,,,15,315,458,811,,,,,790,,", "780,989,822,138,,,,,,,15,467,44,34,,442,,,34,44,1096,843,941,,,442,442", ",,141,442,442,,,,34,,15,817,,437,705,705,,15,34,34,34,,34,437,437,441", "1191,891,437,437,,,859,,,441,441,1126,1127,,441,441,1160,1161,1162,1163", ",874,876,,34,,879,881,961,34,34,,,34,768,,894,1140,,1141,,,768,,1146", "926,,895,,,895,768,768,940,872,,957,960,1001,,,,138,,281,,,,830,1215", ",,682,,,687,,,380,34,,901,,903,34,34,34,34,34,,34,,341,,,,353,,1089", ",,860,,341,,,676,353,868,1070,1216,596,990,,,,1200,1074,,,676,935,974", ",1075,,,,,44,,,,,44,434,,,,,,,,,,44,987,,,,,,,,15,,,1103,,15,,872,998", "442,,490,1066,,,1124,15,,,34,34,34,34,34,34,34,44,676,,,,34,380,,437", ",,34,34,34,34,1008,,1009,1149,1012,441,,,,,15,,,34,,676,768,1002,768", ",380,768,768,,676,1060,,926,768,,996,,926,926,768,768,,,,,,,768,768", ",1052,,676,805,,,,,,1080,,,1192,,34,874,876,881,879,,44,34,34,,,,,,1120", ",34,1174,,,1175,,768,1078,44,1074,,,1074,1075,44,15,1075,731,34,1075", ",1075,34,,,1085,,34,,,44,676,,15,1098,,676,676,353,15,,,,,,,,1095,,1067", "1088,,,,,15,,34,1066,1102,,1066,,1066,,,,,,,,34,34,34,1217,996,,1068", ",,,,1074,,,44,,,,1075,,1075,34,1075,,1075,,,294,,,1002,353,,,,,,380", "380,15,,1075,44,44,,,,,44,,,,,1156,1104,,1105,,1106,1148,1066,768,1066", ",1066,1154,1066,15,15,,768,1185,1186,15,768,,,676,676,676,,315,458,1066", ",34,,935,,294,,,44,353,,,,,,31,,,467,,31,,,,,1183,,996,,,,,,15,768,", ",31,,,34,,467,,,,,31,31,31,34,31,44,895,,,1067,,,1067,,1067,,,,,768", ",,1213,,,,,,,,15,513,31,,,,,31,31,,1176,31,1178,,,,,,,,,,,,,378,,1189", ",,,,,34,,,,,1197,1130,1132,1134,,34,,,,,,,,,1067,,1067,,1067,31,1067", "34,,,31,31,31,31,31,,31,676,,34,,,34,1067,,565,,,1218,34,1219,,1220", ",,,,,,34,,,,34,,,,,581,,,1229,,,,,,,,,,,,,,,,,,,34,,,34,34,,,34,,,,", ",34,34,,,,34,34,,,1202,1204,1206,1208,,1209,,31,31,31,31,31,31,31,,", "18,,,31,,18,,,,31,31,31,31,432,445,,,,,,,,239,,,,31,,1225,1226,1227", "1228,239,239,239,,18,342,342,,1230,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,239", "239,,31,239,391,401,401,,693,31,31,,,,,,,,31,,,,,,,,,,,,760,760,,,,", "31,,,,31,,,,,31,570,721,572,18,,574,575,,239,239,239,239,18,,18,,34", ",,,,34,34,,,,,,,31,,,34,,,,,,,777,,,,31,31,31,,783,,785,34,,,789,,,", ",,,,,,,31,,,34,,798,,,,,,801,,,,,,,,,,,,,,,,,,,815,,,18,239,439,239", "239,439,239,,,,,,18,,,,,667,18,439,239,239,,,,,,,,,,31,,34,,18,,,,,", ",,,,,,,,,34,,,,,,,,,,,,34,,,,,,34,,31,,,,34,,,,712,,31,239,,,,,,,239", "239,34,,,,,,,239,,,,,,910,760,,,,,,,17,760,,,18,17,,,18,,760,760,342", "18,,,,,,,,,,,,,,,,31,,342,,,34,,17,,,31,792,,378,18,795,,,,769,769,", ",,,,31,,239,18,18,,,34,34,17,,,31,34,,31,,,,,,,31,239,,,792,,,378,,", "31,,,,31,,,975,,,445,,,,,,,,,,,,,,,34,,34,34,,,31,17,,31,31,,,31,,34", "17,,17,31,31,,,,31,31,,,,861,239,,,,,,,,792,378,,,,,34,,,,,,,,888,,", ",,,760,,760,,,760,760,905,,,,239,760,,,,,1023,760,760,,239,,,,,760,760", ",,,,1034,,,,,,,,,,,17,,17,,,17,,,,,,,17,,,,,,17,17,,,760,,,,,,,,,1064", ",,,17,,,18,,,,,,792,,342,,239,,,,769,970,,342,971,,,,769,,,,239,,,,", "769,769,,,,,31,18,,,18,31,31,,,,,239,,,,,31,,,,,239,,,,18,,,,1110,1111", "1112,,,31,,,,,,17,,,,17,1121,,999,,17,,31,18,,,439,239,,,18,,,,,,439", "439,,,,439,439,43,760,763,763,,43,,17,,,760,,,,760,,,,,,,,17,17,293", ",,,,,,,,,,,43,340,340,,,,31,,,,,,,,,,,,,,,,760,31,,,,,43,,,,,,,31,,", "389,293,293,31,,,,,769,31,769,,,769,769,,760,,,,769,,,1084,,31,769,769", ",,,,,,769,769,,,,342,,,378,,,43,,,767,767,342,,,,43,,43,,,,,,,,,,,,", ",,,,769,,,18,,,,31,18,239,,,,,,,,,,18,,,,,,,,,,,,,,,,31,31,439,,,,31", ",,,,,,,,,,,,18,,,,,,,,,,,,43,,17,,,,763,,,,,,43,,763,,,,43,31,,31,31", "763,763,,,,,,,,,,31,43,,,,,17,,,17,,,,761,761,,,239,,,,,,,,,769,,,31", "17,,,,18,769,,,,769,,,,,,,239,,,,,,18,,,,,17,18,,17,,,,17,,,,,,17,17", ",,18,17,17,,1099,,,43,,769,,43,,,,340,43,,767,,,,,,,,767,,,,,,,19,340", "767,767,,19,,,769,,,,,43,,,,,,,,,18,,,,,,43,43,,,,,,1138,19,349,349", ",,,763,,763,,,763,763,,18,18,,,763,,18,,,,763,763,,,19,,,,763,763,,", ",,349,349,349,,,,,,,,,,,,,,,,,,,,,1180,,,18,,239,239,,,,763,,,,,,,,239", ",,,19,17,,,761,,17,,,19,,19,761,,,,,17,,,,761,761,,,18,,,,,,,,,,17,", ",,,,,,767,,767,,,767,767,,,17,,,767,,,,,,767,767,,,,,,,767,767,,,,,", ",,,,,,,,,,,,,,,,,,19,,19,,,19,,,43,,,,19,,767,,340,,19,19,763,,,,,340", ",21,,763,,,21,763,,19,,,17,,,,,,,,43,,,43,,,,,,,17,,,,,,17,21,344,344", ",,,,43,,,,,,,763,17,,,,,,,,,761,,761,,21,761,761,,762,762,43,,761,,393", "402,402,43,761,761,,,763,,,,761,761,19,,,,19,,,,349,19,,,,,,,,,17,,", ",,,,767,,349,20,,,21,,20,767,,,761,767,19,21,,21,,,,17,17,,,,,17,,19", "19,,,,,,,,,20,350,350,,,,,,,,,,,,,,,,767,,,,,,,,,,20,,,,17,,,,,,350", "350,350,,,,,,,,,,767,340,,,,,,,,,,21,340,440,,,440,,,,,,,21,,,17,,,21", "440,,,20,,,,,43,,,,20,43,20,,21,,,761,,,,,43,,,,761,,,,761,,,,,,,,,", ",,,,,,765,765,,,,762,,,,,,43,,762,,,,,,,,,762,762,,,,,761,,,,,,,,,,", ",,,,,,,,,21,20,,20,21,,20,19,344,21,,,761,20,,349,,,,20,20,,,,349,,", "344,,,,,,,,,20,,,21,,,,43,,19,,,19,,,,,,21,21,,,,,,43,,,,,,43,,19,,", ",,,,,,,,,,,43,,,,1097,,766,766,,,,,,19,,,19,,,,19,,,,,,19,19,,,,19,19", "20,,,,20,,,,350,20,,,,,,,,,762,,762,,43,762,762,,,350,,,762,,,,,293", "762,762,,20,,,,,762,762,,,,,43,43,,765,20,20,43,,,,,765,,,,,,,,,765", "765,,,,,,,,,,,,762,,,,,,,,,,,,,,293,,,43,,,,,,,,,,,,,349,,,,,,,,,,,349", ",,,,,,21,,,,,,,,344,,,,,43,,,,344,,19,,,,,19,,,,,,,,,,,19,,,21,,,21", ",,,,,,,,,764,764,19,,,,,,766,,,21,,,,,766,,851,19,,,,,,766,766,762,", ",,,,,,,762,,21,,762,440,,,,21,,,765,,765,440,440,765,765,,440,440,,", "765,,,,,20,765,765,,,,,,350,765,765,,,,,,,350,,762,,,,,,,,,,,,,,,19", ",,,20,,,20,,,,,,,765,,,762,19,,,,,,19,,,,20,,,,,,,,,,,,19,,,,349,,,", ",,,,,,,20,,,20,,,,20,,,,,,20,20,,,344,20,20,,,,,,,,,344,,,766,,766,", ",766,766,,,19,,,766,,,,,,766,766,,,349,21,,,766,766,21,,,,764,,,,,19", "19,21,764,,,19,,,,,,764,764,,,,765,,,440,,,,,,765,,766,,765,,,,,,,21", ",,,,,,,,,349,,,19,,,,,,,,,,,,,,,350,,,,,246,,,,765,,350,,,,314,314,314", ",,,,,,,,,361,362,19,364,365,,367,,,,20,,,,765,20,,,,,,314,314,,,21,20", ",,,,,,,,,,,,,,,,21,20,,,,,21,,,,,,,,,,,,20,766,,,21,,,,1101,,766,,,", "766,,,,,764,,764,,,764,764,,,,,,764,,,,,,764,764,,,,,,,764,764,,,,,", ",,,,,,766,21,,,,,,,,,,,,,402,,,,,,,,20,,,,764,,,21,21,,766,,,21,,,,", "20,,,,,,20,,,,,314,444,,,450,314,,,,,,20,,,,350,,,450,,,,,,,402,,,21", ",,246,,,,,,,526,527,528,529,530,531,532,533,534,535,536,537,538,539", "540,541,542,543,544,545,546,547,,,,,548,,20,,,,,,21,,,,,,,350,,,,,,", ",314,314,,,,,,20,20,314,,,,20,764,,314,,314,,,314,314,764,,,,764,,,", ",,,,,,,,,,,,,,,,,,,,,,,350,,,20,,,,,,601,,602,,,,,,764,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,20,,764,,,,,,,,,,,,,,,,,,,,,,,,,,,314,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,689,,,,,,,,,,,,,,,,,,,,,,,,,,314,,,,,,,,,,,,,719", ",,,,,,,,,314,,450,450,450,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,362,,,", ",,,,,,314,,314,,314,,,,,,,,,,,,,,,,314,,,,,,,,,,450,,,812,,,,,,,,314", ",,314,,,,,,,,,,,,,314,314,,,,,,,,,,314,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,314,450,314,,,,869,,,314,314,450,450,,,,450,450,,,,,,314,,,,,,,,", ",,,,314,,,,,,,,,,,,,,,,,,,,,,,,689,719,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,314,,,,,,,,,314,,,314,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,314,,,,,,,,450,,,,,,,,,", ",,,1004,1005,,,,,,,,,,,,,,,,,,,,,,,,,,,1027,1028,450,450,450,450,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1061,,,,,,,,,,,,,,,,,,,,,,,,,,,", "314,,,,,,,,,,,,,,,,,,,314,,,,,,,,,,,,,,,,,,,,,,,,,,450,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,314"];
      racc_goto_table = (arr = $$$('Array').$new(4695, nil));
      idx = 0;
      $send(clist, 'each', [], function $Ruby31$6(str){
        
        
        if (str == null) str = nil;;
        return $send(str.$split(",", -1), 'each', [], function $$7(i){var $writer = nil;

          
          
          if (i == null) i = nil;;
          if (!$truthy(i['$empty?']())) {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, 1);}, 1);
      clist = ["71,74,74,89,89,71,36,36,36,151,191,46,26,26,54,54,26,74,33,48,12,105", "191,31,71,23,111,76,76,33,23,90,72,32,85,85,71,71,71,10,114,81,81,108", "108,10,19,19,44,44,19,110,232,11,92,224,67,17,17,22,69,23,13,93,71,93", "115,26,26,26,26,109,24,24,71,71,71,123,81,81,81,56,85,41,41,50,223,223", "5,23,228,54,170,170,232,128,221,221,221,23,7,19,19,19,19,31,185,40,87", "87,114,9,87,28,218,218,88,88,88,71,122,180,168,79,63,132,132,28,71,142", "71,55,55,55,68,124,138,40,2,186,193,193,8,140,23,125,64,8,169,88,88", "150,150,23,229,23,57,6,5,26,26,232,144,154,200,195,195,3,62,62,62,73", "73,93,93,154,26,26,14,145,16,10,18,86,86,86,21,35,35,171,171,92,13,36", "89,217,217,207,207,171,25,27,42,43,45,49,8,51,59,77,82,84,91,71,74,20", "86,103,20,104,112,113,184,116,229,71,117,118,119,184,11,71,20,120,121", "126,130,26,23,33,23,135,136,23,143,191,146,147,71,142,23,22,22,148,149", "22,23,23,152,153,144,8,223,85,85,11,72,78,2,22,8,6,8,23,155,36,36,145", "185,157,93,78,158,33,36,161,110,185,69,162,218,163,123,164,165,115,123", "69,138,168,166,173,175,176,168,168,177,54,54,32,193,181,182,188,189", "140,198,199,1,31,89,122,203,32,26,204,89,150,71,205,169,169,71,206,209", "185,71,71,210,50,81,211,33,186,125,26,212,213,216,11,124,195,195,23", "11,71,142,23,19,81,33,222,23,114,226,86,86,71,208,208,208,208,227,,67", ",57,224,,,54,,71,71,32,,88,,,31,54,33,23,,88,,115,,,11,11,184,,,228", "72,,23,23,,184,5,,32,184,74,35,35,54,,63,114,32,7,,63,54,31,180,89,79", "40,68,,9,89,109,31,62,33,36,76,64,,,32,62,64,,,,10,86,86,,40,,13,184", ",56,86,,54,54,56,,,,5,8,17,31,,,,,,,36,,,,,,224,232,89,,36,184,,108", "123,123,,,223,,93,,,69,,32,,,74,,32,32,,90,,,221,221,,221,221,,221,71", "71,89,218,128,92,,,,,,167,167,40,,,,193,193,114,41,132,26,,139,24,139", "193,,170,87,,223,193,223,55,72,36,89,,150,55,224,,78,,78,,89,,28,28", ",71,,28,28,,74,,,71,,13,,81,,,74,,71,,,,81,36,89,193,23,,67,,44,,89", "36,,92,,67,208,71,208,,71,111,74,,,32,32,32,74,,,,,,11,40,,11,,,,71", "23,,,23,36,89,78,,,,,88,,,55,10,114,74,,,,,,,23,74,71,61,,20,,,61,71", "108,114,191,,,20,20,,,76,20,20,,,,61,,23,88,,23,123,123,,23,61,61,61", ",61,23,23,22,12,85,23,23,,,17,,,22,22,132,132,,22,22,221,221,221,221", ",78,78,,61,,78,78,105,61,61,,,61,71,,193,108,,108,,,71,,110,167,,133", ",,133,71,71,167,88,,46,151,28,,,,74,,48,,,,86,32,,,89,,,89,,,26,61,", "137,,137,61,61,61,61,61,,61,,71,,,,81,,10,,,8,,71,,,40,81,8,139,221", "67,19,,,,132,223,,,40,40,67,,225,,,,,71,,,,,71,86,,,,,,,,,,71,11,,,", ",,,,23,,,139,,23,,88,11,20,,223,127,,,10,23,,,61,61,61,61,61,61,61,71", "40,,,,61,26,,23,,,61,61,61,61,85,,11,10,85,22,,,,,23,,,61,,40,71,78", "71,,26,71,71,,40,19,,167,71,,40,,167,167,71,71,,,,,,,71,71,,167,,40", "54,,,,,,19,,,31,,61,78,78,78,78,,71,61,61,,,,,,191,,61,139,,,139,,71", "11,71,223,,,223,225,71,23,225,167,61,225,,225,61,,,11,,61,,,71,40,,23", "71,,40,40,81,23,,,,,,,,11,,133,114,,,,,23,,61,127,23,,127,,127,,,,,", ",,61,61,61,139,40,,137,,,,,223,,,71,,,,225,,225,61,225,,225,,,71,,,78", "81,,,,,,26,26,23,,225,71,71,,,,,71,,,,,33,137,,137,,137,11,127,71,127", ",127,11,127,23,23,,71,19,19,23,71,,,40,40,40,,36,89,127,,61,,40,,71", ",,71,81,,,,,,58,,,74,,58,,,,,11,,40,,,,,,23,71,,,58,,,61,,74,,,,,58", "58,58,61,58,71,133,,,133,,,133,,133,,,,,71,,,11,,,,,,,,23,65,58,,,,", "58,58,,137,58,137,,,,,,,,,,,,,83,,40,,,,,,61,,,,,137,134,134,134,,61", ",,,,,,,,133,,133,,133,58,133,61,,,58,58,58,58,58,,58,40,,61,,,61,133", ",65,,,137,61,137,,137,,,,,,,61,,,,61,,,,,65,,,137,,,,,,,,,,,,,,,,,,", "61,,,61,61,,,61,,,,,,61,61,,,,61,61,,,134,134,134,134,,134,,58,58,58", "58,58,58,58,,,30,,,58,,30,,,,58,58,58,58,83,83,,,,,,,,30,,,,58,,134", "134,134,134,30,30,30,,30,30,30,,134,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,30", "30,,58,30,30,30,30,,65,58,58,,,,,,,,58,,,,,,,,,,,,95,95,,,,,58,,,,58", ",,,,58,83,65,83,30,,83,83,,30,30,30,30,30,,30,,61,,,,,61,61,,,,,,,58", ",,61,,,,,,,65,,,,58,58,58,,65,,65,61,,,65,,,,,,,,,,,58,,,61,,65,,,,", ",65,,,,,,,,,,,,,,,,,,,65,,,30,30,30,30,30,30,30,,,,,,30,,,,,83,30,30", "30,30,,,,,,,,,,58,,61,,30,,,,,,,,,,,,,,,61,,,,,,,,,,,,61,,,,,,61,,58", ",,,61,,,,83,,58,30,,,,,,,30,30,61,,,,,,,30,,,,,,65,95,,,,,,,29,95,,", "30,29,,,30,,95,95,30,30,,,,,,,,,,,,,,,,58,,30,,,61,,29,,,58,83,,83,30", "83,,,,107,107,,,,,,58,,30,30,30,,,61,61,29,,,58,61,,58,,,,,,,58,30,", ",83,,,83,,,58,,,,58,,,65,,,83,,,,,,,,,,,,,,,61,,61,61,,,58,29,,58,58", ",,58,,61,29,,29,58,58,,,,58,58,,,,83,30,,,,,,,,83,83,,,,,61,,,,,,,,83", ",,,,,95,,95,,,95,95,83,,,,30,95,,,,,65,95,95,,30,,,,,95,95,,,,,65,,", ",,,,,,,,29,,29,,,29,,,,,,,29,,,,,,29,29,,,95,,,,,,,,,65,,,,29,,,30,", ",,,,83,,30,,30,,,,107,83,,30,83,,,,107,,,,30,,,,,107,107,,,,,58,30,", ",30,58,58,,,,,30,,,,,58,,,,,30,,,,30,,,,65,65,65,,,58,,,,,,29,,,,29", "65,,83,,29,,58,30,,,30,30,,,30,,,,,,30,30,,,,30,30,70,95,98,98,,70,", "29,,,95,,,,95,,,,,,,,29,29,70,,,,,,,,,,,,70,70,70,,,,58,,,,,,,,,,,,", ",,,95,58,,,,,70,,,,,,,58,,,70,70,70,58,,,,,107,58,107,,,107,107,,95", ",,,107,,,83,,58,107,107,,,,,,,107,107,,,,30,,,83,,,70,,,102,102,30,", ",,70,,70,,,,,,,,,,,,,,,,,107,,,30,,,,58,30,30,,,,,,,,,,30,,,,,,,,,,", ",,,,,58,58,30,,,,58,,,,,,,,,,,,,30,,,,,,,,,,,,70,,29,,,,98,,,,,,70,", "98,,,,70,58,,58,58,98,98,,,,,,,,,,58,70,,,,,29,,,29,,,,96,96,,,30,,", ",,,,,,107,,,58,29,,,,30,107,,,,107,,,,,,,30,,,,,,30,,,,,29,30,,29,,", ",29,,,,,,29,29,,,30,29,29,,30,,,70,,107,,70,,,,70,70,,102,,,,,,,,102", ",,,,,,34,70,102,102,,34,,,107,,,,,70,,,,,,,,,30,,,,,,70,70,,,,,,30,34", "34,34,,,,98,,98,,,98,98,,30,30,,,98,,30,,,,98,98,,,34,,,,98,98,,,,,34", "34,34,,,,,,,,,,,,,,,,,,,,,30,,,30,,30,30,,,,98,,,,,,,,30,,,,34,29,,", "96,,29,,,34,,34,96,,,,,29,,,,96,96,,,30,,,,,,,,,,29,,,,,,,,102,,102", ",,102,102,,,29,,,102,,,,,,102,102,,,,,,,102,102,,,,,,,,,,,,,,,,,,,,", ",,,34,,34,,,34,,,70,,,,34,,102,,70,,34,34,98,,,,,70,,39,,98,,,39,98", ",34,,,29,,,,,,,,70,,,70,,,,,,,29,,,,,,29,39,39,39,,,,,70,,,,,,,98,29", ",,,,,,,,96,,96,,39,96,96,,97,97,70,,96,,39,39,39,70,96,96,,,98,,,,96", "96,34,,,,34,,,,34,34,,,,,,,,,29,,,,,,,102,,34,38,,,39,,38,102,,,96,102", "34,39,,39,,,,29,29,,,,,29,,34,34,,,,,,,,,38,38,38,,,,,,,,,,,,,,,,102", ",,,,,,,,,38,,,,29,,,,,,38,38,38,,,,,,,,,,102,70,,,,,,,,,,39,70,39,,", "39,,,,,,,39,,,29,,,39,39,,,38,,,,,70,,,,38,70,38,,39,,,96,,,,,70,,,", "96,,,,96,,,,,,,,,,,,,,,,100,100,,,,97,,,,,,70,,97,,,,,,,,,97,97,,,,", "96,,,,,,,,,,,,,,,,,,,,39,38,,38,39,,38,34,39,39,,,96,38,,34,,,,38,38", ",,,34,,,39,,,,,,,,,38,,,39,,,,70,,34,,,34,,,,,,39,39,,,,,,70,,,,,,70", ",34,,,,,,,,,,,,,,70,,,,70,,101,101,,,,,,34,,,34,,,,34,,,,,,34,34,,,", "34,34,38,,,,38,,,,38,38,,,,,,,,,97,,97,,70,97,97,,,38,,,97,,,,,70,97", "97,,38,,,,,97,97,,,,,70,70,,100,38,38,70,,,,,100,,,,,,,,,100,100,,,", ",,,,,,,,97,,,,,,,,,,,,,,70,,,70,,,,,,,,,,,,,34,,,,,,,,,,,34,,,,,,,39", ",,,,,,,39,,,,,70,,,,39,,34,,,,,34,,,,,,,,,,,34,,,39,,,39,,,,,,,,,,99", "99,34,,,,,,101,,,39,,,,,101,,39,34,,,,,,101,101,97,,,,,,,,,97,,39,,97", "39,,,,39,,,100,,100,39,39,100,100,,39,39,,,100,,,,,38,100,100,,,,,,38", "100,100,,,,,,,38,,97,,,,,,,,,,,,,,,34,,,,38,,,38,,,,,,,100,,,97,34,", ",,,,34,,,,38,,,,,,,,,,,,34,,,,34,,,,,,,,,,,38,,,38,,,,38,,,,,,38,38", ",,39,38,38,,,,,,,,,39,,,101,,101,,,101,101,,,34,,,101,,,,,,101,101,", ",34,39,,,101,101,39,,,,99,,,,,34,34,39,99,,,34,,,,,,99,99,,,,100,,,39", ",,,,,100,,101,,100,,,,,,,39,,,,,,,,,,34,,,34,,,,,,,,,,,,,,,38,,,,,37", ",,,100,,38,,,,37,37,37,,,,,,,,,,37,37,34,37,37,,37,,,,38,,,,100,38,", ",,,,37,37,,,39,38,,,,,,,,,,,,,,,,,39,38,,,,,39,,,,,,,,,,,,38,101,,,39", ",,,39,,101,,,,101,,,,,99,,99,,,99,99,,,,,,99,,,,,,99,99,,,,,,,99,99", ",,,,,,,,,,,101,39,,,,,,,,,,,,,39,,,,,,,,38,,,,99,,,39,39,,101,,,39,", ",,,38,,,,,,38,,,,,37,37,,,37,37,,,,,,38,,,,38,,,37,,,,,,,39,,,39,,,37", ",,,,,,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37", "37,,,,,37,,38,,,,,,39,,,,,,,38,,,,,,,,37,37,,,,,,38,38,37,,,,38,99,", "37,,37,,,37,37,99,,,,99,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,38,,,,,,37,,37", ",,,,,99,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,99,,,,,,,,,,,,,,,,,,,,,,,,", ",,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,37", ",,,,,,,,,,,,37,,,,,,,,,,37,,37,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,37,,,,,,,,,,37,,37,,37,,,,,,,,,,,,,,,,37,,,,,,,,,,37,,,37,,,,,,", ",37,,,37,,,,,,,,,,,,,37,37,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,37,37,37,,,,37,,,37,37,37,37,,,,37,37,,,,,,37,,,,,,,,,,,,,37,,,,", ",,,,,,,,,,,,,,,,,,,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,37,,,,,,,,,37,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,37,,,,,,,,,,,,,37,37,,,,,,,,,,", ",,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,37,,,,,,,,,", ",,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,37"];
      racc_goto_check = (arr = $$$('Array').$new(4695, nil));
      idx = 0;
      $send(clist, 'each', [], function $Ruby31$8(str){
        
        
        if (str == null) str = nil;;
        return $send(str.$split(",", -1), 'each', [], function $$9(i){var $writer = nil;

          
          
          if (i == null) i = nil;;
          if (!$truthy(i['$empty?']())) {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, 1);}, 1);
      racc_goto_pointer = [nil, 318, 136, 167, nil, 83, 150, 95, 140, 102, -188, 15, -449, -628, -707, nil, -397, 47, 171, -25, -2, 110, 35, 23, -144, -16, -59, 68, -107, 1689, 1365, -198, -418, 0, 2403, 168, -28, 3539, 2759, 2643, 84, -441, -50, -50, -25, -415, -15, nil, -7, 179, 56, -342, nil, nil, -208, 100, -221, -406, 1143, -347, nil, 663, 134, 86, 108, 972, nil, 17, 94, -297, 2049, -2, -367, 94, -9, nil, 17, -219, 47, 75, nil, 2, 159, 1164, 144, 15, 149, -265, 82, -28, -272, -340, -263, -504, nil, 943, 1787, 2189, 1529, 2747, 2401, 2538, 1649, 191, 151, -48, nil, 1215, -338, -747, -336, -596, 144, -182, 35, 46, 158, -144, 161, -408, -610, -171, -787, -414, -356, -763, -672, -95, -599, nil, -730, nil, -349, 58, 178, -827, -724, 86, -830, -152, -644, nil, -717, -848, -930, -913, -160, -598, 171, -386, -79, -18, -736, -736, -388, -23, nil, -28, -26, nil, nil, -494, -796, -692, -920, -534, -841, 9, -619, -593, -432, -734, nil, -618, nil, -618, -437, -434, nil, nil, -621, -431, -431, nil, -708, -831, -779, nil, -626, -625, nil, -77, nil, -384, nil, -593, nil, nil, -455, -374, -725, nil, nil, 237, 235, 238, 241, -214, -41, 241, 244, 246, -300, -300, nil, nil, -289, -154, -116, nil, nil, -382, -337, -144, -643, -137, -330, -753, -610, -977, nil, nil, -517];
      racc_goto_default = [nil, nil, nil, nil, 5, nil, 6, 388, 331, nil, nil, 469, nil, 978, nil, 328, 329, nil, nil, nil, 13, 14, 22, 244, nil, nil, 16, nil, 438, 245, 360, nil, nil, 634, 248, nil, 27, 25, 249, 243, 514, nil, nil, nil, nil, nil, nil, 383, 140, nil, nil, nil, 28, 29, 808, nil, nil, nil, 348, nil, 30, 345, 452, 37, nil, nil, 39, 42, 41, nil, 240, 241, 400, nil, 460, 139, 84, nil, 443, 100, 51, 54, 280, 320, nil, 886, 453, nil, 454, 465, 477, 683, 566, 318, 304, 55, 56, 57, 58, 59, 60, 61, 62, 63, nil, 305, 69, 70, nil, nil, nil, nil, nil, nil, 616, 227, nil, nil, nil, nil, nil, nil, 707, 489, nil, 708, 709, 475, 471, 472, 1172, 1065, nil, 476, nil, nil, nil, 478, nil, 480, nil, 965, nil, nil, nil, 487, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 464, nil, nil, 787, 779, nil, nil, nil, nil, nil, nil, 1045, nil, 732, 931, 734, 735, 739, 736, 737, nil, nil, 738, 740, nil, nil, nil, 930, 932, nil, 744, 746, 747, 748, 749, nil, 753, 498, 754, 755, 756, 757, nil, nil, nil, 83, 85, 86, nil, nil, nil, nil, 644, nil, nil, nil, nil, nil, 96, 97, nil, 228, 896, 231, 474, nil, 479, 904, 492, 494, 495, 1076, 499, 1077, 502, 505, 323];
      racc_reduce_table = [0, 0, "racc_error", 0, 150, "_reduce_1", 2, 148, "_reduce_2", 2, 149, "_reduce_3", 0, 151, "_reduce_4", 1, 151, "_reduce_5", 3, 151, "_reduce_6", 2, 151, "_reduce_7", 1, 153, "_reduce_none", 2, 153, "_reduce_9", 3, 156, "_reduce_10", 4, 157, "_reduce_11", 2, 158, "_reduce_12", 0, 162, "_reduce_13", 1, 162, "_reduce_14", 3, 162, "_reduce_15", 2, 162, "_reduce_16", 1, 163, "_reduce_none", 2, 163, "_reduce_18", 0, 174, "_reduce_19", 4, 155, "_reduce_20", 3, 155, "_reduce_21", 3, 155, "_reduce_22", 3, 155, "_reduce_23", 2, 155, "_reduce_24", 3, 155, "_reduce_25", 3, 155, "_reduce_26", 3, 155, "_reduce_27", 3, 155, "_reduce_28", 3, 155, "_reduce_29", 4, 155, "_reduce_30", 1, 155, "_reduce_none", 3, 155, "_reduce_32", 3, 155, "_reduce_33", 5, 155, "_reduce_34", 3, 155, "_reduce_35", 1, 155, "_reduce_none", 3, 167, "_reduce_37", 3, 167, "_reduce_38", 6, 167, "_reduce_39", 5, 167, "_reduce_40", 5, 167, "_reduce_41", 5, 167, "_reduce_42", 5, 167, "_reduce_43", 4, 167, "_reduce_44", 6, 167, "_reduce_45", 4, 167, "_reduce_46", 6, 167, "_reduce_47", 3, 167, "_reduce_48", 1, 175, "_reduce_none", 3, 175, "_reduce_50", 1, 175, "_reduce_none", 1, 173, "_reduce_none", 3, 173, "_reduce_53", 3, 173, "_reduce_54", 3, 173, "_reduce_55", 2, 173, "_reduce_56", 0, 189, "_reduce_57", 4, 173, "_reduce_58", 0, 190, "_reduce_59", 4, 173, "_reduce_60", 1, 173, "_reduce_none", 1, 166, "_reduce_none", 0, 194, "_reduce_63", 3, 191, "_reduce_64", 1, 193, "_reduce_65", 2, 181, "_reduce_66", 0, 198, "_reduce_67", 5, 185, "_reduce_68", 1, 169, "_reduce_none", 1, 169, "_reduce_none", 1, 199, "_reduce_none", 4, 199, "_reduce_72", 0, 206, "_reduce_73", 4, 203, "_reduce_74", 1, 205, "_reduce_none", 2, 183, "_reduce_76", 3, 183, "_reduce_77", 4, 183, "_reduce_78", 5, 183, "_reduce_79", 4, 183, "_reduce_80", 5, 183, "_reduce_81", 2, 183, "_reduce_82", 2, 183, "_reduce_83", 2, 183, "_reduce_84", 2, 183, "_reduce_85", 2, 183, "_reduce_86", 1, 168, "_reduce_87", 3, 168, "_reduce_88", 1, 211, "_reduce_89", 3, 211, "_reduce_90", 1, 210, "_reduce_none", 2, 210, "_reduce_92", 3, 210, "_reduce_93", 5, 210, "_reduce_94", 2, 210, "_reduce_95", 4, 210, "_reduce_96", 2, 210, "_reduce_97", 4, 210, "_reduce_98", 1, 210, "_reduce_99", 3, 210, "_reduce_100", 1, 214, "_reduce_none", 3, 214, "_reduce_102", 2, 213, "_reduce_103", 3, 213, "_reduce_104", 1, 216, "_reduce_105", 3, 216, "_reduce_106", 1, 215, "_reduce_107", 1, 215, "_reduce_108", 4, 215, "_reduce_109", 3, 215, "_reduce_110", 3, 215, "_reduce_111", 3, 215, "_reduce_112", 3, 215, "_reduce_113", 2, 215, "_reduce_114", 1, 215, "_reduce_115", 1, 170, "_reduce_116", 1, 170, "_reduce_117", 4, 170, "_reduce_118", 3, 170, "_reduce_119", 3, 170, "_reduce_120", 3, 170, "_reduce_121", 3, 170, "_reduce_122", 2, 170, "_reduce_123", 1, 170, "_reduce_124", 1, 219, "_reduce_125", 1, 219, "_reduce_none", 2, 220, "_reduce_127", 1, 220, "_reduce_128", 3, 220, "_reduce_129", 1, 195, "_reduce_none", 1, 195, "_reduce_none", 1, 195, "_reduce_none", 1, 195, "_reduce_none", 1, 195, "_reduce_none", 1, 164, "_reduce_135", 1, 164, "_reduce_none", 1, 165, "_reduce_137", 0, 224, "_reduce_138", 4, 165, "_reduce_139", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 3, 184, "_reduce_211", 3, 184, "_reduce_212", 6, 184, "_reduce_213", 5, 184, "_reduce_214", 5, 184, "_reduce_215", 5, 184, "_reduce_216", 5, 184, "_reduce_217", 4, 184, "_reduce_218", 3, 184, "_reduce_219", 3, 184, "_reduce_220", 3, 184, "_reduce_221", 2, 184, "_reduce_222", 2, 184, "_reduce_223", 2, 184, "_reduce_224", 2, 184, "_reduce_225", 3, 184, "_reduce_226", 3, 184, "_reduce_227", 3, 184, "_reduce_228", 3, 184, "_reduce_229", 3, 184, "_reduce_230", 3, 184, "_reduce_231", 4, 184, "_reduce_232", 2, 184, "_reduce_233", 2, 184, "_reduce_234", 3, 184, "_reduce_235", 3, 184, "_reduce_236", 3, 184, "_reduce_237", 3, 184, "_reduce_238", 1, 184, "_reduce_none", 3, 184, "_reduce_240", 3, 184, "_reduce_241", 3, 184, "_reduce_242", 3, 184, "_reduce_243", 3, 184, "_reduce_244", 2, 184, "_reduce_245", 2, 184, "_reduce_246", 3, 184, "_reduce_247", 3, 184, "_reduce_248", 3, 184, "_reduce_249", 3, 184, "_reduce_250", 3, 184, "_reduce_251", 6, 184, "_reduce_252", 4, 184, "_reduce_253", 6, 184, "_reduce_254", 4, 184, "_reduce_255", 6, 184, "_reduce_256", 1, 184, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 3, 227, "_reduce_262", 3, 227, "_reduce_263", 1, 230, "_reduce_none", 1, 231, "_reduce_none", 2, 231, "_reduce_none", 4, 231, "_reduce_267", 2, 231, "_reduce_268", 1, 225, "_reduce_none", 3, 225, "_reduce_270", 3, 236, "_reduce_271", 5, 236, "_reduce_272", 3, 236, "_reduce_273", 0, 238, "_reduce_274", 1, 238, "_reduce_none", 0, 178, "_reduce_276", 1, 178, "_reduce_none", 2, 178, "_reduce_none", 4, 178, "_reduce_279", 2, 178, "_reduce_280", 1, 209, "_reduce_281", 2, 209, "_reduce_282", 2, 209, "_reduce_283", 4, 209, "_reduce_284", 1, 209, "_reduce_285", 0, 241, "_reduce_286", 2, 202, "_reduce_287", 2, 240, "_reduce_288", 1, 240, "_reduce_289", 2, 239, "_reduce_290", 0, 239, "_reduce_291", 1, 233, "_reduce_292", 2, 233, "_reduce_293", 3, 233, "_reduce_294", 4, 233, "_reduce_295", 1, 172, "_reduce_296", 1, 172, "_reduce_none", 3, 171, "_reduce_298", 4, 171, "_reduce_299", 2, 171, "_reduce_300", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_311", 0, 263, "_reduce_312", 4, 228, "_reduce_313", 0, 264, "_reduce_314", 4, 228, "_reduce_315", 0, 265, "_reduce_316", 4, 228, "_reduce_317", 3, 228, "_reduce_318", 3, 228, "_reduce_319", 2, 228, "_reduce_320", 3, 228, "_reduce_321", 3, 228, "_reduce_322", 1, 228, "_reduce_323", 4, 228, "_reduce_324", 3, 228, "_reduce_325", 1, 228, "_reduce_326", 5, 228, "_reduce_327", 4, 228, "_reduce_328", 3, 228, "_reduce_329", 2, 228, "_reduce_330", 1, 228, "_reduce_none", 2, 228, "_reduce_332", 1, 228, "_reduce_none", 6, 228, "_reduce_334", 6, 228, "_reduce_335", 4, 228, "_reduce_336", 4, 228, "_reduce_337", 5, 228, "_reduce_338", 4, 228, "_reduce_339", 5, 228, "_reduce_340", 6, 228, "_reduce_341", 0, 266, "_reduce_342", 6, 228, "_reduce_343", 0, 267, "_reduce_344", 7, 228, "_reduce_345", 0, 268, "_reduce_346", 5, 228, "_reduce_347", 4, 228, "_reduce_348", 4, 228, "_reduce_349", 1, 228, "_reduce_350", 1, 228, "_reduce_351", 1, 228, "_reduce_352", 1, 228, "_reduce_353", 1, 177, "_reduce_none", 1, 208, "_reduce_355", 1, 255, "_reduce_none", 1, 255, "_reduce_none", 2, 255, "_reduce_358", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 256, "_reduce_none", 5, 256, "_reduce_362", 1, 160, "_reduce_none", 2, 160, "_reduce_364", 1, 259, "_reduce_none", 1, 259, "_reduce_none", 1, 269, "_reduce_367", 3, 269, "_reduce_368", 1, 272, "_reduce_369", 3, 272, "_reduce_370", 1, 271, "_reduce_none", 3, 271, "_reduce_372", 5, 271, "_reduce_373", 1, 271, "_reduce_374", 3, 271, "_reduce_375", 2, 273, "_reduce_376", 1, 273, "_reduce_377", 1, 274, "_reduce_none", 1, 274, "_reduce_none", 4, 277, "_reduce_380", 2, 277, "_reduce_381", 2, 277, "_reduce_382", 1, 277, "_reduce_383", 2, 281, "_reduce_384", 0, 281, "_reduce_385", 1, 282, "_reduce_none", 6, 283, "_reduce_387", 8, 283, "_reduce_388", 4, 283, "_reduce_389", 6, 283, "_reduce_390", 4, 283, "_reduce_391", 2, 283, "_reduce_none", 6, 283, "_reduce_393", 2, 283, "_reduce_394", 4, 283, "_reduce_395", 6, 283, "_reduce_396", 2, 283, "_reduce_397", 4, 283, "_reduce_398", 2, 283, "_reduce_399", 4, 283, "_reduce_400", 1, 283, "_reduce_none", 0, 287, "_reduce_402", 1, 287, "_reduce_403", 3, 288, "_reduce_404", 4, 288, "_reduce_405", 1, 289, "_reduce_406", 4, 289, "_reduce_407", 1, 290, "_reduce_408", 3, 290, "_reduce_409", 1, 291, "_reduce_410", 1, 291, "_reduce_none", 0, 295, "_reduce_412", 0, 296, "_reduce_413", 5, 254, "_reduce_414", 4, 293, "_reduce_415", 1, 293, "_reduce_416", 0, 299, "_reduce_417", 4, 294, "_reduce_418", 0, 300, "_reduce_419", 4, 294, "_reduce_420", 0, 302, "_reduce_421", 4, 298, "_reduce_422", 2, 200, "_reduce_423", 4, 200, "_reduce_424", 5, 200, "_reduce_425", 5, 200, "_reduce_426", 2, 253, "_reduce_427", 4, 253, "_reduce_428", 4, 253, "_reduce_429", 3, 253, "_reduce_430", 3, 253, "_reduce_431", 3, 253, "_reduce_432", 2, 253, "_reduce_433", 1, 253, "_reduce_434", 4, 253, "_reduce_435", 0, 304, "_reduce_436", 4, 252, "_reduce_437", 0, 305, "_reduce_438", 4, 252, "_reduce_439", 0, 306, "_reduce_440", 3, 204, "_reduce_441", 0, 307, "_reduce_442", 0, 308, "_reduce_443", 4, 301, "_reduce_444", 5, 257, "_reduce_445", 1, 309, "_reduce_446", 1, 309, "_reduce_none", 0, 312, "_reduce_448", 0, 313, "_reduce_449", 7, 258, "_reduce_450", 1, 311, "_reduce_451", 1, 311, "_reduce_none", 1, 310, "_reduce_453", 3, 310, "_reduce_454", 3, 310, "_reduce_455", 1, 188, "_reduce_none", 2, 188, "_reduce_457", 3, 188, "_reduce_458", 1, 188, "_reduce_459", 1, 188, "_reduce_460", 1, 188, "_reduce_461", 1, 314, "_reduce_none", 3, 319, "_reduce_463", 1, 319, "_reduce_none", 3, 321, "_reduce_465", 1, 321, "_reduce_none", 1, 323, "_reduce_467", 1, 324, "_reduce_468", 1, 322, "_reduce_none", 1, 322, "_reduce_none", 4, 322, "_reduce_471", 4, 322, "_reduce_472", 4, 322, "_reduce_473", 3, 322, "_reduce_474", 4, 322, "_reduce_475", 4, 322, "_reduce_476", 4, 322, "_reduce_477", 3, 322, "_reduce_478", 3, 322, "_reduce_479", 3, 322, "_reduce_480", 2, 322, "_reduce_481", 0, 328, "_reduce_482", 4, 322, "_reduce_483", 2, 322, "_reduce_484", 0, 329, "_reduce_485", 4, 322, "_reduce_486", 1, 315, "_reduce_487", 1, 315, "_reduce_488", 2, 315, "_reduce_489", 3, 315, "_reduce_490", 5, 315, "_reduce_491", 2, 315, "_reduce_492", 4, 315, "_reduce_493", 1, 315, "_reduce_none", 2, 330, "_reduce_495", 3, 330, "_reduce_496", 1, 317, "_reduce_497", 3, 317, "_reduce_498", 5, 316, "_reduce_499", 2, 333, "_reduce_500", 1, 333, "_reduce_501", 1, 332, "_reduce_502", 3, 332, "_reduce_503", 1, 331, "_reduce_none", 3, 318, "_reduce_505", 1, 318, "_reduce_506", 2, 318, "_reduce_507", 1, 318, "_reduce_508", 1, 334, "_reduce_509", 3, 334, "_reduce_510", 2, 336, "_reduce_511", 1, 336, "_reduce_512", 1, 337, "_reduce_513", 3, 337, "_reduce_514", 2, 339, "_reduce_515", 1, 339, "_reduce_516", 2, 341, "_reduce_517", 1, 335, "_reduce_none", 1, 335, "_reduce_none", 1, 325, "_reduce_none", 3, 325, "_reduce_521", 3, 325, "_reduce_522", 2, 325, "_reduce_523", 2, 325, "_reduce_524", 1, 325, "_reduce_none", 1, 325, "_reduce_none", 1, 325, "_reduce_none", 2, 325, "_reduce_528", 2, 325, "_reduce_529", 1, 342, "_reduce_none", 1, 342, "_reduce_none", 1, 342, "_reduce_none", 1, 342, "_reduce_none", 1, 342, "_reduce_none", 1, 342, "_reduce_none", 1, 342, "_reduce_none", 1, 342, "_reduce_none", 1, 342, "_reduce_538", 1, 342, "_reduce_none", 1, 320, "_reduce_540", 2, 343, "_reduce_541", 2, 343, "_reduce_542", 4, 344, "_reduce_543", 2, 326, "_reduce_544", 3, 326, "_reduce_545", 1, 326, "_reduce_546", 6, 159, "_reduce_547", 0, 159, "_reduce_548", 1, 346, "_reduce_549", 1, 346, "_reduce_none", 1, 346, "_reduce_none", 2, 347, "_reduce_552", 1, 347, "_reduce_none", 2, 161, "_reduce_554", 1, 161, "_reduce_none", 1, 242, "_reduce_none", 1, 242, "_reduce_none", 1, 243, "_reduce_558", 1, 349, "_reduce_559", 2, 349, "_reduce_560", 3, 350, "_reduce_561", 1, 350, "_reduce_562", 1, 350, "_reduce_563", 3, 244, "_reduce_564", 4, 245, "_reduce_565", 3, 246, "_reduce_566", 0, 353, "_reduce_567", 3, 353, "_reduce_568", 1, 354, "_reduce_569", 2, 354, "_reduce_570", 3, 248, "_reduce_571", 0, 356, "_reduce_572", 3, 356, "_reduce_573", 3, 247, "_reduce_574", 3, 249, "_reduce_575", 0, 357, "_reduce_576", 3, 357, "_reduce_577", 0, 358, "_reduce_578", 3, 358, "_reduce_579", 0, 338, "_reduce_580", 2, 338, "_reduce_581", 0, 351, "_reduce_582", 2, 351, "_reduce_583", 0, 352, "_reduce_584", 2, 352, "_reduce_585", 1, 355, "_reduce_586", 2, 355, "_reduce_587", 0, 360, "_reduce_588", 4, 355, "_reduce_589", 1, 359, "_reduce_590", 1, 359, "_reduce_591", 1, 359, "_reduce_592", 1, 359, "_reduce_none", 1, 223, "_reduce_none", 1, 223, "_reduce_none", 1, 361, "_reduce_596", 3, 362, "_reduce_597", 1, 348, "_reduce_598", 2, 348, "_reduce_599", 1, 226, "_reduce_600", 1, 226, "_reduce_601", 1, 226, "_reduce_602", 1, 226, "_reduce_603", 1, 345, "_reduce_604", 1, 345, "_reduce_605", 1, 345, "_reduce_606", 1, 217, "_reduce_607", 1, 217, "_reduce_608", 1, 217, "_reduce_609", 1, 217, "_reduce_610", 1, 217, "_reduce_611", 1, 218, "_reduce_612", 1, 218, "_reduce_613", 1, 218, "_reduce_614", 1, 218, "_reduce_615", 1, 218, "_reduce_616", 1, 218, "_reduce_617", 1, 218, "_reduce_618", 1, 250, "_reduce_619", 1, 250, "_reduce_620", 1, 176, "_reduce_621", 1, 176, "_reduce_622", 1, 186, "_reduce_623", 1, 186, "_reduce_624", 0, 363, "_reduce_625", 4, 260, "_reduce_626", 0, 260, "_reduce_627", 1, 182, "_reduce_none", 1, 182, "_reduce_629", 3, 364, "_reduce_630", 1, 262, "_reduce_none", 0, 366, "_reduce_632", 3, 262, "_reduce_633", 4, 365, "_reduce_634", 2, 365, "_reduce_635", 2, 365, "_reduce_636", 1, 365, "_reduce_637", 1, 365, "_reduce_638", 2, 368, "_reduce_639", 0, 368, "_reduce_640", 6, 297, "_reduce_641", 8, 297, "_reduce_642", 4, 297, "_reduce_643", 6, 297, "_reduce_644", 4, 297, "_reduce_645", 6, 297, "_reduce_646", 2, 297, "_reduce_647", 4, 297, "_reduce_648", 6, 297, "_reduce_649", 2, 297, "_reduce_650", 4, 297, "_reduce_651", 2, 297, "_reduce_652", 4, 297, "_reduce_653", 1, 297, "_reduce_654", 0, 297, "_reduce_655", 1, 237, "_reduce_656", 1, 292, "_reduce_657", 1, 292, "_reduce_658", 1, 292, "_reduce_659", 1, 292, "_reduce_660", 1, 270, "_reduce_none", 1, 270, "_reduce_662", 1, 370, "_reduce_663", 1, 371, "_reduce_664", 3, 371, "_reduce_665", 1, 284, "_reduce_666", 3, 284, "_reduce_667", 1, 372, "_reduce_668", 2, 373, "_reduce_669", 1, 373, "_reduce_670", 2, 374, "_reduce_671", 1, 374, "_reduce_672", 1, 278, "_reduce_673", 3, 278, "_reduce_674", 1, 367, "_reduce_675", 3, 367, "_reduce_676", 1, 340, "_reduce_none", 1, 340, "_reduce_none", 2, 276, "_reduce_679", 2, 275, "_reduce_680", 1, 275, "_reduce_681", 3, 375, "_reduce_682", 3, 376, "_reduce_683", 1, 285, "_reduce_684", 3, 285, "_reduce_685", 1, 369, "_reduce_686", 3, 369, "_reduce_687", 1, 377, "_reduce_none", 1, 377, "_reduce_none", 2, 286, "_reduce_690", 1, 286, "_reduce_691", 1, 378, "_reduce_none", 1, 378, "_reduce_none", 2, 280, "_reduce_694", 1, 280, "_reduce_695", 2, 279, "_reduce_696", 0, 279, "_reduce_697", 1, 196, "_reduce_none", 3, 196, "_reduce_699", 0, 251, "_reduce_700", 2, 251, "_reduce_none", 1, 235, "_reduce_702", 3, 235, "_reduce_703", 3, 379, "_reduce_704", 2, 379, "_reduce_705", 1, 379, "_reduce_706", 4, 379, "_reduce_707", 2, 379, "_reduce_708", 1, 207, "_reduce_none", 1, 207, "_reduce_none", 1, 207, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 303, "_reduce_none", 1, 303, "_reduce_none", 1, 303, "_reduce_none", 1, 197, "_reduce_none", 1, 197, "_reduce_none", 1, 180, "_reduce_721", 1, 180, "_reduce_722", 0, 152, "_reduce_none", 1, 152, "_reduce_none", 0, 187, "_reduce_none", 1, 187, "_reduce_none", 2, 212, "_reduce_727", 2, 179, "_reduce_728", 2, 327, "_reduce_729", 0, 234, "_reduce_none", 1, 234, "_reduce_none", 1, 234, "_reduce_none", 1, 261, "_reduce_733", 1, 261, "_reduce_none", 1, 154, "_reduce_none", 2, 154, "_reduce_none", 0, 232, "_reduce_737"];
      racc_reduce_n = 738;
      racc_shift_n = 1231;
      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kDO_LAMBDA", 28, "kRETURN", 29, "kYIELD", 30, "kSUPER", 31, "kSELF", 32, "kNIL", 33, "kTRUE", 34, "kFALSE", 35, "kAND", 36, "kOR", 37, "kNOT", 38, "kIF_MOD", 39, "kUNLESS_MOD", 40, "kWHILE_MOD", 41, "kUNTIL_MOD", 42, "kRESCUE_MOD", 43, "kALIAS", 44, "kDEFINED", 45, "klBEGIN", 46, "klEND", 47, "k__LINE__", 48, "k__FILE__", 49, "k__ENCODING__", 50, "tIDENTIFIER", 51, "tFID", 52, "tGVAR", 53, "tIVAR", 54, "tCONSTANT", 55, "tLABEL", 56, "tCVAR", 57, "tNTH_REF", 58, "tBACK_REF", 59, "tSTRING_CONTENT", 60, "tINTEGER", 61, "tFLOAT", 62, "tUPLUS", 63, "tUMINUS", 64, "tUNARY_NUM", 65, "tPOW", 66, "tCMP", 67, "tEQ", 68, "tEQQ", 69, "tNEQ", 70, "tGEQ", 71, "tLEQ", 72, "tANDOP", 73, "tOROP", 74, "tMATCH", 75, "tNMATCH", 76, "tDOT", 77, "tDOT2", 78, "tDOT3", 79, "tAREF", 80, "tASET", 81, "tLSHFT", 82, "tRSHFT", 83, "tCOLON2", 84, "tCOLON3", 85, "tOP_ASGN", 86, "tASSOC", 87, "tLPAREN", 88, "tLPAREN2", 89, "tRPAREN", 90, "tLPAREN_ARG", 91, "tLBRACK", 92, "tLBRACK2", 93, "tRBRACK", 94, "tLBRACE", 95, "tLBRACE_ARG", 96, "tSTAR", 97, "tSTAR2", 98, "tAMPER", 99, "tAMPER2", 100, "tTILDE", 101, "tPERCENT", 102, "tDIVIDE", 103, "tDSTAR", 104, "tPLUS", 105, "tMINUS", 106, "tLT", 107, "tGT", 108, "tPIPE", 109, "tBANG", 110, "tCARET", 111, "tLCURLY", 112, "tRCURLY", 113, "tBACK_REF2", 114, "tSYMBEG", 115, "tSTRING_BEG", 116, "tXSTRING_BEG", 117, "tREGEXP_BEG", 118, "tREGEXP_OPT", 119, "tWORDS_BEG", 120, "tQWORDS_BEG", 121, "tSYMBOLS_BEG", 122, "tQSYMBOLS_BEG", 123, "tSTRING_DBEG", 124, "tSTRING_DVAR", 125, "tSTRING_END", 126, "tSTRING_DEND", 127, "tSTRING", 128, "tSYMBOL", 129, "tNL", 130, "tEH", 131, "tCOLON", 132, "tCOMMA", 133, "tSPACE", 134, "tSEMI", 135, "tLAMBDA", 136, "tLAMBEG", 137, "tCHARACTER", 138, "tRATIONAL", 139, "tIMAGINARY", 140, "tLABEL_END", 141, "tANDDOT", 142, "tBDOT2", 143, "tBDOT3", 144, "tEQL", 145, "tLOWEST", 146);
      racc_nt_base = 147;
      racc_use_result_var = true;
      $const_set($nesting[0], 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);
      $const_set($nesting[0], 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kDO_LAMBDA", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "k__ENCODING__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tLABEL", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tUPLUS", "tUMINUS", "tUNARY_NUM", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tLBRACK", "tLBRACK2", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tDSTAR", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tREGEXP_OPT", "tWORDS_BEG", "tQWORDS_BEG", "tSYMBOLS_BEG", "tQSYMBOLS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING_DEND", "tSTRING", "tSYMBOL", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tLAMBDA", "tLAMBEG", "tCHARACTER", "tRATIONAL", "tIMAGINARY", "tLABEL_END", "tANDDOT", "tBDOT2", "tBDOT3", "tEQL", "tLOWEST", "$start", "program", "top_compstmt", "@1", "top_stmts", "opt_terms", "top_stmt", "terms", "stmt", "begin_block", "bodystmt", "compstmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "stmt_or_begin", "fitem", "undef_list", "expr_value", "command_asgn", "mlhs", "command_call", "lhs", "mrhs", "mrhs_arg", "expr", "@2", "command_rhs", "var_lhs", "primary_value", "opt_call_args", "rbracket", "call_op", "defn_head", "f_opt_paren_args", "command", "arg", "defs_head", "backref", "opt_nl", "p_top_expr_body", "@3", "@4", "expr_value_do", "do", "def_name", "@5", "fname", "singleton", "dot_or_colon", "@6", "block_command", "block_call", "operation2", "command_args", "cmd_brace_block", "brace_body", "fcall", "@7", "operation", "k_return", "call_args", "mlhs_basic", "mlhs_inner", "rparen", "mlhs_head", "mlhs_item", "mlhs_node", "mlhs_post", "user_variable", "keyword_variable", "cname", "cpath", "op", "reswords", "symbol", "@8", "arg_rhs", "simple_numeric", "rel_expr", "primary", "relop", "arg_value", "aref_args", "none", "args", "trailer", "assocs", "paren_args", "args_forward", "opt_paren_args", "opt_block_arg", "block_arg", "@9", "literal", "strings", "xstring", "regexp", "words", "qwords", "symbols", "qsymbols", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "case_body", "p_case_body", "for_var", "superclass", "term", "f_arglist", "@10", "@11", "@12", "@13", "@14", "@15", "f_marg", "f_norm_arg", "f_margs", "f_marg_list", "f_rest_marg", "f_any_kwrest", "f_kwrest", "f_no_kwarg", "block_args_tail", "f_block_kwarg", "opt_f_block_arg", "f_block_arg", "opt_block_args_tail", "excessed_comma", "block_param", "f_arg", "f_block_optarg", "f_rest_arg", "opt_block_param", "block_param_def", "opt_bv_decl", "bv_decls", "bvar", "f_bad_arg", "f_larglist", "lambda_body", "@16", "@17", "f_args", "do_block", "@18", "@19", "do_body", "@20", "operation3", "@21", "@22", "@23", "@24", "@25", "cases", "p_top_expr", "p_cases", "@26", "@27", "p_expr", "p_args", "p_find", "p_args_tail", "p_kwargs", "p_as", "p_variable", "p_alt", "p_expr_basic", "p_lparen", "p_lbracket", "p_value", "p_const", "rbrace", "@28", "@29", "p_args_head", "p_arg", "p_args_post", "p_rest", "p_kwarg", "p_any_kwrest", "p_kw", "p_kw_label", "string_contents", "p_kwrest", "kwrest_mark", "p_kwnorest", "p_primitive", "p_var_ref", "p_expr_ref", "nonlocal_var", "exc_list", "exc_var", "numeric", "string", "string1", "xstring_contents", "regexp_contents", "word_list", "word", "string_content", "symbol_list", "qword_list", "qsym_list", "string_dvar", "@30", "ssym", "dsym", "@31", "f_paren_args", "args_tail", "@32", "f_kwarg", "opt_args_tail", "f_optarg", "f_arg_asgn", "f_arg_item", "f_label", "f_kw", "f_block_kw", "f_opt", "f_block_opt", "restarg_mark", "blkarg_mark", "assoc"]);
      $const_set($nesting[0], 'Racc_debug_parser', false);
      
      $def(self, '$_reduce_1', function $$_reduce_1(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$push(nil);
        self.max_numparam_stack.$push();
        return result;
      }, 3);
      
      $def(self, '$_reduce_2', function $$_reduce_2(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        self.current_arg_stack.$pop();
        self.max_numparam_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_3', function $$_reduce_3(val, _values, result) {
        var self = this;

        
        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_4', function $$_reduce_4(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_5', function $$_reduce_5(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_6', function $$_reduce_6(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_7', function $$_reduce_7(val, _values, result) {
        
        
        result = [val['$[]'](1)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_9', function $$_reduce_9(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'preexe', [val['$[]'](0)].concat($to_a(val['$[]'](1))));
        return result;
      }, 3);
      
      $def(self, '$_reduce_10', function $$_reduce_10(val, _values, result) {
        
        
        result = val;
        return result;
      }, 3);
      
      $def(self, '$_reduce_11', function $$_reduce_11(val, _values, result) {
        var $a, $b, self = this, rescue_bodies = nil, else_t = nil, else_ = nil, ensure_t = nil, ensure_ = nil;

        
        rescue_bodies = val['$[]'](1);
        $b = val['$[]'](2), $a = $to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        $b = val['$[]'](3), $a = $to_ary($b), (ensure_t = ($a[0] == null ? nil : $a[0])), (ensure_ = ($a[1] == null ? nil : $a[1])), $b;
        if (($truthy(rescue_bodies['$empty?']()) && ($not(else_t['$nil?']())))) {
          self.$diagnostic("error", "useless_else", nil, else_t)
        };
        result = self.builder.$begin_body(val['$[]'](0), rescue_bodies, else_t, else_, ensure_t, ensure_);
        return result;
      }, 3);
      
      $def(self, '$_reduce_12', function $$_reduce_12(val, _values, result) {
        var self = this;

        
        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_13', function $$_reduce_13(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_14', function $$_reduce_14(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_15', function $$_reduce_15(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_16', function $$_reduce_16(val, _values, result) {
        
        
        result = [val['$[]'](1)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_18', function $$_reduce_18(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "begin_in_method", nil, val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_19', function $$_reduce_19(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_20', function $$_reduce_20(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_21', function $$_reduce_21(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$gvar(val['$[]'](2)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_22', function $$_reduce_22(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$back_ref(val['$[]'](2)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_23', function $$_reduce_23(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "nth_ref_alias", nil, val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_24', function $$_reduce_24(val, _values, result) {
        var self = this;

        
        result = self.builder.$undef_method(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_25', function $$_reduce_25(val, _values, result) {
        var self = this;

        
        result = self.builder.$condition_mod(val['$[]'](0), nil, val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_26', function $$_reduce_26(val, _values, result) {
        var self = this;

        
        result = self.builder.$condition_mod(nil, val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_27', function $$_reduce_27(val, _values, result) {
        var self = this;

        
        result = self.builder.$loop_mod("while", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_28', function $$_reduce_28(val, _values, result) {
        var self = this;

        
        result = self.builder.$loop_mod("until", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_29', function $$_reduce_29(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_30', function $$_reduce_30(val, _values, result) {
        var self = this;

        
        result = self.builder.$postexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_32', function $$_reduce_32(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_33', function $$_reduce_33(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      }, 3);
      
      $def(self, '$_reduce_34', function $$_reduce_34(val, _values, result) {
        var self = this, rescue_body = nil, begin_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](3), nil, nil, nil, nil, val['$[]'](4));
        begin_body = self.builder.$begin_body(val['$[]'](2), [rescue_body]);
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), begin_body);
        return result;
      }, 3);
      
      $def(self, '$_reduce_35', function $$_reduce_35(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_37', function $$_reduce_37(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_38', function $$_reduce_38(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_39', function $$_reduce_39(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_40', function $$_reduce_40(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_41', function $$_reduce_41(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_42', function $$_reduce_42(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_43', function $$_reduce_43(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_44', function $$_reduce_44(val, _values, result) {
        var $a, $b, self = this, _def_t = nil, name_t = nil;

        
        $b = val['$[]'](0), $a = $to_ary($b), (_def_t = ($a[0] == null ? nil : $a[0])), (name_t = ($a[1] == null ? nil : $a[1])), $b;
        self.$endless_method_name(name_t);
        result = $send(self.builder, 'def_endless_method', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), val['$[]'](3)]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_45', function $$_reduce_45(val, _values, result) {
        var $a, $b, self = this, _def_t = nil, name_t = nil, rescue_body = nil, method_body = nil;

        
        $b = val['$[]'](0), $a = $to_ary($b), (_def_t = ($a[0] == null ? nil : $a[0])), (name_t = ($a[1] == null ? nil : $a[1])), $b;
        self.$endless_method_name(name_t);
        rescue_body = self.builder.$rescue_body(val['$[]'](4), nil, nil, nil, nil, val['$[]'](5));
        method_body = self.builder.$begin_body(val['$[]'](3), [rescue_body]);
        result = $send(self.builder, 'def_endless_method', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), method_body]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_46', function $$_reduce_46(val, _values, result) {
        var $a, $b, self = this, _def_t = nil, _recv = nil, _dot_t = nil, name_t = nil;

        
        $b = val['$[]'](0), $a = $to_ary($b), (_def_t = ($a[0] == null ? nil : $a[0])), (_recv = ($a[1] == null ? nil : $a[1])), (_dot_t = ($a[2] == null ? nil : $a[2])), (name_t = ($a[3] == null ? nil : $a[3])), $b;
        self.$endless_method_name(name_t);
        result = $send(self.builder, 'def_endless_singleton', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), val['$[]'](3)]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_47', function $$_reduce_47(val, _values, result) {
        var $a, $b, self = this, _def_t = nil, _recv = nil, _dot_t = nil, name_t = nil, rescue_body = nil, method_body = nil;

        
        $b = val['$[]'](0), $a = $to_ary($b), (_def_t = ($a[0] == null ? nil : $a[0])), (_recv = ($a[1] == null ? nil : $a[1])), (_dot_t = ($a[2] == null ? nil : $a[2])), (name_t = ($a[3] == null ? nil : $a[3])), $b;
        self.$endless_method_name(name_t);
        rescue_body = self.builder.$rescue_body(val['$[]'](4), nil, nil, nil, nil, val['$[]'](5));
        method_body = self.builder.$begin_body(val['$[]'](3), [rescue_body]);
        result = $send(self.builder, 'def_endless_singleton', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), method_body]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_48', function $$_reduce_48(val, _values, result) {
        var self = this;

        
        self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_50', function $$_reduce_50(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_53', function $$_reduce_53(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_54', function $$_reduce_54(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_55', function $$_reduce_55(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](2), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_56', function $$_reduce_56(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_57', function $$_reduce_57(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_beg"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.lexer, 'command_start=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.pattern_variables.$push();
        result = self.lexer.$in_kwarg();
        
        $writer = [true];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_58', function $$_reduce_58(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_variables.$pop();
        
        $writer = [val['$[]'](2)];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$match_pattern(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_59', function $$_reduce_59(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_beg"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.lexer, 'command_start=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.pattern_variables.$push();
        result = self.lexer.$in_kwarg();
        
        $writer = [true];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_60', function $$_reduce_60(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_variables.$pop();
        
        $writer = [val['$[]'](2)];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$match_pattern_p(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_63', function $$_reduce_63(val, _values, result) {
        var self = this;

        
        self.lexer.$cond().$push(true);
        return result;
      }, 3);
      
      $def(self, '$_reduce_64', function $$_reduce_64(val, _values, result) {
        var self = this;

        
        self.lexer.$cond().$pop();
        result = [val['$[]'](1), val['$[]'](2)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_65', function $$_reduce_65(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.current_arg_stack.$push(nil);
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_66', function $$_reduce_66(val, _values, result) {
        var self = this;

        
        self.context.$push("def");
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_67', function $$_reduce_67(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_68', function $$_reduce_68(val, _values, result) {
        var self = this;

        
        self.context.$push("defs");
        result = [val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_72', function $$_reduce_72(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_73', function $$_reduce_73(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, 3);
      
      $def(self, '$_reduce_74', function $$_reduce_74(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat($to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_76', function $$_reduce_76(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_77', function $$_reduce_77(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        $b = val['$[]'](2), $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_78', function $$_reduce_78(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_79', function $$_reduce_79(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_80', function $$_reduce_80(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_81', function $$_reduce_81(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_82', function $$_reduce_82(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("super", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_83', function $$_reduce_83(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_84', function $$_reduce_84(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("return", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_85', function $$_reduce_85(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("break", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_86', function $$_reduce_86(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("next", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_87', function $$_reduce_87(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_88', function $$_reduce_88(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_89', function $$_reduce_89(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_90', function $$_reduce_90(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_92', function $$_reduce_92(val, _values, result) {
        
        
        result = val['$[]'](0).$push(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_93', function $$_reduce_93(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_94', function $$_reduce_94(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_95', function $$_reduce_95(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_96', function $$_reduce_96(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1))).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_97', function $$_reduce_97(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_98', function $$_reduce_98(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))].concat($to_a(val['$[]'](3)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_99', function $$_reduce_99(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_100', function $$_reduce_100(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0))].concat($to_a(val['$[]'](2)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_102', function $$_reduce_102(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_103', function $$_reduce_103(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_104', function $$_reduce_104(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_105', function $$_reduce_105(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_106', function $$_reduce_106(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_107', function $$_reduce_107(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_108', function $$_reduce_108(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_109', function $$_reduce_109(val, _values, result) {
        var self = this;

        
        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_110', function $$_reduce_110(val, _values, result) {
        var self = this;

        
        if ($eqeq(val['$[]'](1)['$[]'](0), "anddot")) {
          self.$diagnostic("error", "csend_in_lhs_of_masgn", nil, val['$[]'](1))
        };
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_111', function $$_reduce_111(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_112', function $$_reduce_112(val, _values, result) {
        var self = this;

        
        if ($eqeq(val['$[]'](1)['$[]'](0), "anddot")) {
          self.$diagnostic("error", "csend_in_lhs_of_masgn", nil, val['$[]'](1))
        };
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_113', function $$_reduce_113(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_114', function $$_reduce_114(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_115', function $$_reduce_115(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_116', function $$_reduce_116(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_117', function $$_reduce_117(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_118', function $$_reduce_118(val, _values, result) {
        var self = this;

        
        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_119', function $$_reduce_119(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_120', function $$_reduce_120(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_121', function $$_reduce_121(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_122', function $$_reduce_122(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_123', function $$_reduce_123(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_124', function $$_reduce_124(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_125', function $$_reduce_125(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "module_name_const", nil, val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_127', function $$_reduce_127(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_128', function $$_reduce_128(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_129', function $$_reduce_129(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_135', function $$_reduce_135(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbol_internal(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_137', function $$_reduce_137(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_138', function $$_reduce_138(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_139', function $$_reduce_139(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_211', function $$_reduce_211(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_212', function $$_reduce_212(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_213', function $$_reduce_213(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_214', function $$_reduce_214(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_215', function $$_reduce_215(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_216', function $$_reduce_216(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_217', function $$_reduce_217(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_218', function $$_reduce_218(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        result = self.builder.$op_assign(const$, val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_219', function $$_reduce_219(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_220', function $$_reduce_220(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_221', function $$_reduce_221(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_222', function $$_reduce_222(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_223', function $$_reduce_223(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_224', function $$_reduce_224(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_225', function $$_reduce_225(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_226', function $$_reduce_226(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_227', function $$_reduce_227(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_228', function $$_reduce_228(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_229', function $$_reduce_229(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_230', function $$_reduce_230(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_231', function $$_reduce_231(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_232', function $$_reduce_232(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(val['$[]'](1), val['$[]'](2), val['$[]'](3)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_233', function $$_reduce_233(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_234', function $$_reduce_234(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_235', function $$_reduce_235(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_236', function $$_reduce_236(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_237', function $$_reduce_237(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_238', function $$_reduce_238(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_240', function $$_reduce_240(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_241', function $$_reduce_241(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_242', function $$_reduce_242(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_243', function $$_reduce_243(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_244', function $$_reduce_244(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_245', function $$_reduce_245(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_246', function $$_reduce_246(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_247', function $$_reduce_247(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_248', function $$_reduce_248(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_249', function $$_reduce_249(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_250', function $$_reduce_250(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_251', function $$_reduce_251(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), nil, [val['$[]'](2)], nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_252', function $$_reduce_252(val, _values, result) {
        var self = this;

        
        result = self.builder.$ternary(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_253', function $$_reduce_253(val, _values, result) {
        var $a, $b, self = this, _def_t = nil, name_t = nil;

        
        $b = val['$[]'](0), $a = $to_ary($b), (_def_t = ($a[0] == null ? nil : $a[0])), (name_t = ($a[1] == null ? nil : $a[1])), $b;
        self.$endless_method_name(name_t);
        result = $send(self.builder, 'def_endless_method', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), val['$[]'](3)]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_254', function $$_reduce_254(val, _values, result) {
        var $a, $b, self = this, _def_t = nil, name_t = nil, rescue_body = nil, method_body = nil;

        
        $b = val['$[]'](0), $a = $to_ary($b), (_def_t = ($a[0] == null ? nil : $a[0])), (name_t = ($a[1] == null ? nil : $a[1])), $b;
        self.$endless_method_name(name_t);
        rescue_body = self.builder.$rescue_body(val['$[]'](4), nil, nil, nil, nil, val['$[]'](5));
        method_body = self.builder.$begin_body(val['$[]'](3), [rescue_body]);
        result = $send(self.builder, 'def_endless_method', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), method_body]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_255', function $$_reduce_255(val, _values, result) {
        var $a, $b, self = this, _def_t = nil, _recv = nil, _dot_t = nil, name_t = nil;

        
        $b = val['$[]'](0), $a = $to_ary($b), (_def_t = ($a[0] == null ? nil : $a[0])), (_recv = ($a[1] == null ? nil : $a[1])), (_dot_t = ($a[2] == null ? nil : $a[2])), (name_t = ($a[3] == null ? nil : $a[3])), $b;
        self.$endless_method_name(name_t);
        result = $send(self.builder, 'def_endless_singleton', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), val['$[]'](3)]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_256', function $$_reduce_256(val, _values, result) {
        var $a, $b, self = this, _def_t = nil, _recv = nil, _dot_t = nil, name_t = nil, rescue_body = nil, method_body = nil;

        
        $b = val['$[]'](0), $a = $to_ary($b), (_def_t = ($a[0] == null ? nil : $a[0])), (_recv = ($a[1] == null ? nil : $a[1])), (_dot_t = ($a[2] == null ? nil : $a[2])), (name_t = ($a[3] == null ? nil : $a[3])), $b;
        self.$endless_method_name(name_t);
        rescue_body = self.builder.$rescue_body(val['$[]'](4), nil, nil, nil, nil, val['$[]'](5));
        method_body = self.builder.$begin_body(val['$[]'](3), [rescue_body]);
        result = $send(self.builder, 'def_endless_singleton', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), method_body]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_262', function $$_reduce_262(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_263', function $$_reduce_263(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_267', function $$_reduce_267(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      }, 3);
      
      $def(self, '$_reduce_268', function $$_reduce_268(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_270', function $$_reduce_270(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_271', function $$_reduce_271(val, _values, result) {
        
        
        result = val;
        return result;
      }, 3);
      
      $def(self, '$_reduce_272', function $$_reduce_272(val, _values, result) {
        var self = this;

        
        if (!$truthy(self.static_env['$declared_forward_args?']())) {
          self.$diagnostic("error", "unexpected_token", $hash2(["token"], {"token": "tBDOT3"}), val['$[]'](3))
        };
        result = [val['$[]'](0), [].concat($to_a(val['$[]'](1))).concat([self.builder.$forwarded_args(val['$[]'](3))]), val['$[]'](4)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_273', function $$_reduce_273(val, _values, result) {
        var self = this;

        
        if (!$truthy(self.static_env['$declared_forward_args?']())) {
          self.$diagnostic("error", "unexpected_token", $hash2(["token"], {"token": "tBDOT3"}), val['$[]'](1))
        };
        result = [val['$[]'](0), [self.builder.$forwarded_args(val['$[]'](1))], val['$[]'](2)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_274', function $$_reduce_274(val, _values, result) {
        
        
        result = [nil, [], nil];
        return result;
      }, 3);
      
      $def(self, '$_reduce_276', function $$_reduce_276(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_279', function $$_reduce_279(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      }, 3);
      
      $def(self, '$_reduce_280', function $$_reduce_280(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_281', function $$_reduce_281(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_282', function $$_reduce_282(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_283', function $$_reduce_283(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        result.$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_284', function $$_reduce_284(val, _values, result) {
        var self = this, assocs = nil;

        
        assocs = self.builder.$associate(nil, val['$[]'](2), nil);
        result = val['$[]'](0)['$<<'](assocs);
        result.$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_285', function $$_reduce_285(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_286', function $$_reduce_286(val, _values, result) {
        var self = this, last_token = nil, lookahead = nil, $ret_or_1 = nil, top = nil;

        
        last_token = self.last_token['$[]'](0);
        lookahead = ($truthy(($ret_or_1 = last_token['$==']("tLBRACK"))) ? ($ret_or_1) : (last_token['$==']("tLPAREN_ARG")));
        if ($truthy(lookahead)) {
          
          top = self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$push(true);
          self.lexer.$cmdarg().$push(top);
        } else {
          self.lexer.$cmdarg().$push(true)
        };
        return result;
      }, 3);
      
      $def(self, '$_reduce_287', function $$_reduce_287(val, _values, result) {
        var self = this, last_token = nil, lookahead = nil, top = nil;

        
        last_token = self.last_token['$[]'](0);
        lookahead = last_token['$==']("tLBRACE_ARG");
        if ($truthy(lookahead)) {
          
          top = self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$push(top);
        } else {
          self.lexer.$cmdarg().$pop()
        };
        result = val['$[]'](1);
        return result;
      }, 3);
      
      $def(self, '$_reduce_288', function $$_reduce_288(val, _values, result) {
        var self = this;

        
        result = self.builder.$block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_289', function $$_reduce_289(val, _values, result) {
        var self = this;

        
        if ($not(self.static_env['$declared_anonymous_blockarg?']())) {
          self.$diagnostic("error", "no_anonymous_blockarg", nil, val['$[]'](0))
        };
        result = self.builder.$block_pass(val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_290', function $$_reduce_290(val, _values, result) {
        
        
        result = [val['$[]'](1)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_291', function $$_reduce_291(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_292', function $$_reduce_292(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_293', function $$_reduce_293(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_294', function $$_reduce_294(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_295', function $$_reduce_295(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_296', function $$_reduce_296(val, _values, result) {
        var self = this;

        
        result = self.builder.$array(nil, val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_298', function $$_reduce_298(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_299', function $$_reduce_299(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_300', function $$_reduce_300(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_311', function $$_reduce_311(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(nil, nil, val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_312', function $$_reduce_312(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, 3);
      
      $def(self, '$_reduce_313', function $$_reduce_313(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        result = self.builder.$begin_keyword(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_314', function $$_reduce_314(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_endarg"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_315', function $$_reduce_315(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_316', function $$_reduce_316(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_endarg"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_317', function $$_reduce_317(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), nil, val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_318', function $$_reduce_318(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_319', function $$_reduce_319(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_320', function $$_reduce_320(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_321', function $$_reduce_321(val, _values, result) {
        var self = this;

        
        result = self.builder.$array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_322', function $$_reduce_322(val, _values, result) {
        var self = this;

        
        result = self.builder.$associate(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_323', function $$_reduce_323(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("return", val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_324', function $$_reduce_324(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_325', function $$_reduce_325(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), [], val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_326', function $$_reduce_326(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_327', function $$_reduce_327(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), val['$[]'](2), [val['$[]'](3)], val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_328', function $$_reduce_328(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_329', function $$_reduce_329(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), nil, val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_330', function $$_reduce_330(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(nil, nil, val['$[]'](0));
        $b = val['$[]'](1), $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_332', function $$_reduce_332(val, _values, result) {
        var $a, $b, self = this, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](1), $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(val['$[]'](0), begin_t, args, body, end_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_334', function $$_reduce_334(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = $to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_335', function $$_reduce_335(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = $to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), else_, else_t, val['$[]'](3), val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_336', function $$_reduce_336(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'loop', ["while", val['$[]'](0)].concat($to_a(val['$[]'](1))).concat([val['$[]'](2), val['$[]'](3)]));
        return result;
      }, 3);
      
      $def(self, '$_reduce_337', function $$_reduce_337(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'loop', ["until", val['$[]'](0)].concat($to_a(val['$[]'](1))).concat([val['$[]'](2), val['$[]'](3)]));
        return result;
      }, 3);
      
      $def(self, '$_reduce_338', function $$_reduce_338(val, _values, result) {
        var $a, $b, $c, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat($to_a(val['$[]'](3))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_bodies = $slice.call($a, 0, $b)), ($c = $to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case(val['$[]'](0), val['$[]'](1), when_bodies, else_t, else_body, val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_339', function $$_reduce_339(val, _values, result) {
        var $a, $b, $c, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat($to_a(val['$[]'](2))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_bodies = $slice.call($a, 0, $b)), ($c = $to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case(val['$[]'](0), nil, when_bodies, else_t, else_body, val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_340', function $$_reduce_340(val, _values, result) {
        var $a, $b, $c, self = this, in_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat($to_a(val['$[]'](3))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (in_bodies = $slice.call($a, 0, $b)), ($c = $to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case_match(val['$[]'](0), val['$[]'](1), in_bodies, else_t, else_body, val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_341', function $$_reduce_341(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'for', [val['$[]'](0), val['$[]'](1), val['$[]'](2)].concat($to_a(val['$[]'](3))).concat([val['$[]'](4), val['$[]'](5)]));
        return result;
      }, 3);
      
      $def(self, '$_reduce_342', function $$_reduce_342(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("class");
        return result;
      }, 3);
      
      $def(self, '$_reduce_343', function $$_reduce_343(val, _values, result) {
        var $a, $b, self = this, lt_t = nil, superclass = nil;

        
        if (!$truthy(self.context['$class_definition_allowed?']())) {
          self.$diagnostic("error", "class_in_def", nil, val['$[]'](0))
        };
        $b = val['$[]'](2), $a = $to_ary($b), (lt_t = ($a[0] == null ? nil : $a[0])), (superclass = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$def_class(val['$[]'](0), val['$[]'](1), lt_t, superclass, val['$[]'](4), val['$[]'](5));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_344', function $$_reduce_344(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("sclass");
        return result;
      }, 3);
      
      $def(self, '$_reduce_345', function $$_reduce_345(val, _values, result) {
        var self = this;

        
        result = self.builder.$def_sclass(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](5), val['$[]'](6));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_346', function $$_reduce_346(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.context.$push("module");
        return result;
      }, 3);
      
      $def(self, '$_reduce_347', function $$_reduce_347(val, _values, result) {
        var self = this;

        
        if (!$truthy(self.context['$module_definition_allowed?']())) {
          self.$diagnostic("error", "module_in_def", nil, val['$[]'](0))
        };
        result = self.builder.$def_module(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        self.lexer.$cmdarg().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_348', function $$_reduce_348(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'def_method', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), val['$[]'](3)]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_349', function $$_reduce_349(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'def_singleton', $to_a(val['$[]'](0)).concat([val['$[]'](1), val['$[]'](2), val['$[]'](3)]));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        self.current_arg_stack.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_350', function $$_reduce_350(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("break", val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_351', function $$_reduce_351(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("next", val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_352', function $$_reduce_352(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("redo", val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_353', function $$_reduce_353(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("retry", val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_355', function $$_reduce_355(val, _values, result) {
        var self = this;

        
        if ($truthy(self.context['$in_class?']())) {
          self.$diagnostic("error", "invalid_return", nil, val['$[]'](0))
        };
        return result;
      }, 3);
      
      $def(self, '$_reduce_358', function $$_reduce_358(val, _values, result) {
        
        
        result = val['$[]'](1);
        return result;
      }, 3);
      
      $def(self, '$_reduce_362', function $$_reduce_362(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = $to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = [val['$[]'](0), self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, nil)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_364', function $$_reduce_364(val, _values, result) {
        
        
        result = val;
        return result;
      }, 3);
      
      $def(self, '$_reduce_367', function $$_reduce_367(val, _values, result) {
        var self = this;

        
        result = self.builder.$arg(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_368', function $$_reduce_368(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_369', function $$_reduce_369(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_370', function $$_reduce_370(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_372', function $$_reduce_372(val, _values, result) {
        
        
        result = val['$[]'](0).$push(val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_373', function $$_reduce_373(val, _values, result) {
        
        
        result = val['$[]'](0).$push(val['$[]'](2)).$concat(val['$[]'](4));
        return result;
      }, 3);
      
      $def(self, '$_reduce_374', function $$_reduce_374(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_375', function $$_reduce_375(val, _values, result) {
        
        
        result = [val['$[]'](0)].concat($to_a(val['$[]'](2)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_376', function $$_reduce_376(val, _values, result) {
        var self = this;

        
        result = self.builder.$restarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_377', function $$_reduce_377(val, _values, result) {
        var self = this;

        
        result = self.builder.$restarg(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_380', function $$_reduce_380(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_381', function $$_reduce_381(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_382', function $$_reduce_382(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_383', function $$_reduce_383(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_384', function $$_reduce_384(val, _values, result) {
        
        
        result = val['$[]'](1);
        return result;
      }, 3);
      
      $def(self, '$_reduce_385', function $$_reduce_385(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_387', function $$_reduce_387(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_388', function $$_reduce_388(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      }, 3);
      
      $def(self, '$_reduce_389', function $$_reduce_389(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_390', function $$_reduce_390(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_391', function $$_reduce_391(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_393', function $$_reduce_393(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_394', function $$_reduce_394(val, _values, result) {
        var self = this;

        
        if (($truthy(val['$[]'](1)['$empty?']()) && ($eqeq(val['$[]'](0).$size(), 1)))) {
          result = [self.builder.$procarg0(val['$[]'](0)['$[]'](0))]
        } else {
          result = val['$[]'](0).$concat(val['$[]'](1))
        };
        return result;
      }, 3);
      
      $def(self, '$_reduce_395', function $$_reduce_395(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_396', function $$_reduce_396(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_397', function $$_reduce_397(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_398', function $$_reduce_398(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_399', function $$_reduce_399(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_400', function $$_reduce_400(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_402', function $$_reduce_402(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(nil, [], nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_403', function $$_reduce_403(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_404', function $$_reduce_404(val, _values, result) {
        var self = this;

        
        self.max_numparam_stack['$has_ordinary_params!']();
        self.current_arg_stack.$set(nil);
        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_405', function $$_reduce_405(val, _values, result) {
        var self = this;

        
        self.max_numparam_stack['$has_ordinary_params!']();
        self.current_arg_stack.$set(nil);
        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_406', function $$_reduce_406(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_407', function $$_reduce_407(val, _values, result) {
        
        
        result = val['$[]'](2);
        return result;
      }, 3);
      
      $def(self, '$_reduce_408', function $$_reduce_408(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_409', function $$_reduce_409(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_410', function $$_reduce_410(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$shadowarg(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_412', function $$_reduce_412(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        self.max_numparam_stack.$push();
        self.context.$push("lambda");
        return result;
      }, 3);
      
      $def(self, '$_reduce_413', function $$_reduce_413(val, _values, result) {
        var self = this;

        
        self.context.$pop();
        self.lexer.$cmdarg().$push(false);
        return result;
      }, 3);
      
      $def(self, '$_reduce_414', function $$_reduce_414(val, _values, result) {
        var $a, $b, self = this, lambda_call = nil, args = nil, begin_t = nil, body = nil, end_t = nil;

        
        lambda_call = self.builder.$call_lambda(val['$[]'](0));
        args = ($truthy(self.max_numparam_stack['$has_numparams?']()) ? (self.builder.$numargs(self.max_numparam_stack.$top())) : (val['$[]'](2)));
        $b = val['$[]'](4), $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
        self.max_numparam_stack.$pop();
        self.static_env.$unextend();
        self.lexer.$cmdarg().$pop();
        result = self.builder.$block(lambda_call, begin_t, args, body, end_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_415', function $$_reduce_415(val, _values, result) {
        var self = this;

        
        self.max_numparam_stack['$has_ordinary_params!']();
        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_416', function $$_reduce_416(val, _values, result) {
        var self = this;

        
        if ($truthy(val['$[]'](0)['$any?']())) {
          self.max_numparam_stack['$has_ordinary_params!']()
        };
        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_417', function $$_reduce_417(val, _values, result) {
        var self = this;

        
        self.context.$push("lambda");
        return result;
      }, 3);
      
      $def(self, '$_reduce_418', function $$_reduce_418(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3)];
        self.context.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_419', function $$_reduce_419(val, _values, result) {
        var self = this;

        
        self.context.$push("lambda");
        return result;
      }, 3);
      
      $def(self, '$_reduce_420', function $$_reduce_420(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3)];
        self.context.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_421', function $$_reduce_421(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, 3);
      
      $def(self, '$_reduce_422', function $$_reduce_422(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat($to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_423', function $$_reduce_423(val, _values, result) {
        var $a, $b, self = this, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](1), $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (block_args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(val['$[]'](0), begin_t, block_args, body, end_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_424', function $$_reduce_424(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = $to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_425', function $$_reduce_425(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil, method_call = nil, begin_t = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](3), $a = $to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        $b = val['$[]'](4), $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_426', function $$_reduce_426(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = $to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_427', function $$_reduce_427(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](1), $a = $to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_428', function $$_reduce_428(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = $to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_429', function $$_reduce_429(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = $to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_430', function $$_reduce_430(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_431', function $$_reduce_431(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](2), $a = $to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_432', function $$_reduce_432(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](2), $a = $to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_433', function $$_reduce_433(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](1), $a = $to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$keyword_cmd("super", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      }, 3);
      
      $def(self, '$_reduce_434', function $$_reduce_434(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("zsuper", val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_435', function $$_reduce_435(val, _values, result) {
        var self = this;

        
        result = self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_436', function $$_reduce_436(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, 3);
      
      $def(self, '$_reduce_437', function $$_reduce_437(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat($to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_438', function $$_reduce_438(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, 3);
      
      $def(self, '$_reduce_439', function $$_reduce_439(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat($to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_440', function $$_reduce_440(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        self.max_numparam_stack.$push();
        return result;
      }, 3);
      
      $def(self, '$_reduce_441', function $$_reduce_441(val, _values, result) {
        var self = this, args = nil;

        
        args = ($truthy(self.max_numparam_stack['$has_numparams?']()) ? (self.builder.$numargs(self.max_numparam_stack.$top())) : (val['$[]'](1)));
        result = [args, val['$[]'](2)];
        self.max_numparam_stack.$pop();
        self.static_env.$unextend();
        return result;
      }, 3);
      
      $def(self, '$_reduce_442', function $$_reduce_442(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        self.max_numparam_stack.$push();
        return result;
      }, 3);
      
      $def(self, '$_reduce_443', function $$_reduce_443(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, 3);
      
      $def(self, '$_reduce_444', function $$_reduce_444(val, _values, result) {
        var self = this, args = nil;

        
        args = ($truthy(self.max_numparam_stack['$has_numparams?']()) ? (self.builder.$numargs(self.max_numparam_stack.$top())) : (val['$[]'](2)));
        result = [args, val['$[]'](3)];
        self.max_numparam_stack.$pop();
        self.static_env.$unextend();
        self.lexer.$cmdarg().$pop();
        return result;
      }, 3);
      
      $def(self, '$_reduce_445', function $$_reduce_445(val, _values, result) {
        var self = this;

        
        result = [self.builder.$when(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3))].concat($to_a(val['$[]'](4)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_446', function $$_reduce_446(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_448', function $$_reduce_448(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_beg"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.lexer, 'command_start=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.pattern_variables.$push();
        self.pattern_hash_keys.$push();
        result = self.lexer.$in_kwarg();
        
        $writer = [true];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_449', function $$_reduce_449(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_variables.$pop();
        self.pattern_hash_keys.$pop();
        
        $writer = [val['$[]'](1)];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_450', function $$_reduce_450(val, _values, result) {
        var self = this;

        
        result = [$send(self.builder, 'in_pattern', [val['$[]'](0)].concat($to_a(val['$[]'](2))).concat([val['$[]'](3), val['$[]'](5)]))].concat($to_a(val['$[]'](6)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_451', function $$_reduce_451(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_453', function $$_reduce_453(val, _values, result) {
        
        
        result = [val['$[]'](0), nil];
        return result;
      }, 3);
      
      $def(self, '$_reduce_454', function $$_reduce_454(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), self.builder.$if_guard(val['$[]'](1), val['$[]'](2))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_455', function $$_reduce_455(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), self.builder.$unless_guard(val['$[]'](1), val['$[]'](2))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_457', function $$_reduce_457(val, _values, result) {
        var self = this, item = nil;

        
        item = self.builder.$match_with_trailing_comma(val['$[]'](0), val['$[]'](1));
        result = self.builder.$array_pattern(nil, [item], nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_458', function $$_reduce_458(val, _values, result) {
        var self = this;

        
        result = self.builder.$array_pattern(nil, [val['$[]'](0)].$concat(val['$[]'](2)), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_459', function $$_reduce_459(val, _values, result) {
        var self = this;

        
        result = self.builder.$find_pattern(nil, val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_460', function $$_reduce_460(val, _values, result) {
        var self = this;

        
        result = self.builder.$array_pattern(nil, val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_461', function $$_reduce_461(val, _values, result) {
        var self = this;

        
        result = self.builder.$hash_pattern(nil, val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_463', function $$_reduce_463(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_as(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_465', function $$_reduce_465(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_alt(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_467', function $$_reduce_467(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        self.pattern_hash_keys.$push();
        return result;
      }, 3);
      
      $def(self, '$_reduce_468', function $$_reduce_468(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        self.pattern_hash_keys.$push();
        return result;
      }, 3);
      
      $def(self, '$_reduce_471', function $$_reduce_471(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$array_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_472', function $$_reduce_472(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$find_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_473', function $$_reduce_473(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$hash_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_474', function $$_reduce_474(val, _values, result) {
        var self = this, pattern = nil;

        
        pattern = self.builder.$array_pattern(val['$[]'](1), nil, val['$[]'](2));
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_475', function $$_reduce_475(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$array_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_476', function $$_reduce_476(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$find_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_477', function $$_reduce_477(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$hash_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_478', function $$_reduce_478(val, _values, result) {
        var self = this, pattern = nil;

        
        pattern = self.builder.$array_pattern(val['$[]'](1), nil, val['$[]'](2));
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_479', function $$_reduce_479(val, _values, result) {
        var self = this;

        
        result = self.builder.$array_pattern(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_480', function $$_reduce_480(val, _values, result) {
        var self = this;

        
        result = self.builder.$find_pattern(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_481', function $$_reduce_481(val, _values, result) {
        var self = this;

        
        result = self.builder.$array_pattern(val['$[]'](0), [], val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_482', function $$_reduce_482(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_hash_keys.$push();
        result = self.lexer.$in_kwarg();
        
        $writer = [false];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_483', function $$_reduce_483(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_hash_keys.$pop();
        
        $writer = [val['$[]'](1)];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$hash_pattern(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_484', function $$_reduce_484(val, _values, result) {
        var self = this;

        
        result = self.builder.$hash_pattern(val['$[]'](0), [], val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_485', function $$_reduce_485(val, _values, result) {
        var self = this;

        
        self.pattern_hash_keys.$push();
        return result;
      }, 3);
      
      $def(self, '$_reduce_486', function $$_reduce_486(val, _values, result) {
        var self = this;

        
        self.pattern_hash_keys.$pop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_487', function $$_reduce_487(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_488', function $$_reduce_488(val, _values, result) {
        
        
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_489', function $$_reduce_489(val, _values, result) {
        
        
        result = [].concat($to_a(val['$[]'](0))).concat([val['$[]'](1)]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_490', function $$_reduce_490(val, _values, result) {
        var self = this, match_rest = nil;

        
        match_rest = self.builder.$match_rest(val['$[]'](1), val['$[]'](2));
        result = [].concat($to_a(val['$[]'](0))).concat([match_rest]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_491', function $$_reduce_491(val, _values, result) {
        var self = this, match_rest = nil;

        
        match_rest = self.builder.$match_rest(val['$[]'](1), val['$[]'](2));
        result = [].concat($to_a(val['$[]'](0))).concat([match_rest]).concat($to_a(val['$[]'](4)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_492', function $$_reduce_492(val, _values, result) {
        var self = this;

        
        result = [].concat($to_a(val['$[]'](0))).concat([self.builder.$match_rest(val['$[]'](1))]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_493', function $$_reduce_493(val, _values, result) {
        var self = this;

        
        result = [].concat($to_a(val['$[]'](0))).concat([self.builder.$match_rest(val['$[]'](1))]).concat($to_a(val['$[]'](3)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_495', function $$_reduce_495(val, _values, result) {
        var self = this, item = nil;

        
        item = self.builder.$match_with_trailing_comma(val['$[]'](0), val['$[]'](1));
        result = [item];
        return result;
      }, 3);
      
      $def(self, '$_reduce_496', function $$_reduce_496(val, _values, result) {
        var self = this, last_item = nil;

        
        last_item = self.builder.$match_with_trailing_comma(val['$[]'](1), val['$[]'](2));
        result = [].concat($to_a(val['$[]'](0))).concat([last_item]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_497', function $$_reduce_497(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_498', function $$_reduce_498(val, _values, result) {
        
        
        result = [val['$[]'](0)].concat($to_a(val['$[]'](2)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_499', function $$_reduce_499(val, _values, result) {
        
        
        result = [val['$[]'](0)].concat($to_a(val['$[]'](2))).concat([val['$[]'](4)]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_500', function $$_reduce_500(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_rest(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_501', function $$_reduce_501(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_rest(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_502', function $$_reduce_502(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_503', function $$_reduce_503(val, _values, result) {
        
        
        result = [].concat($to_a(val['$[]'](0))).concat([val['$[]'](2)]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_505', function $$_reduce_505(val, _values, result) {
        
        
        result = [].concat($to_a(val['$[]'](0))).concat($to_a(val['$[]'](2)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_506', function $$_reduce_506(val, _values, result) {
        
        
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_507', function $$_reduce_507(val, _values, result) {
        
        
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_508', function $$_reduce_508(val, _values, result) {
        
        
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_509', function $$_reduce_509(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_510', function $$_reduce_510(val, _values, result) {
        
        
        result = [].concat($to_a(val['$[]'](0))).concat([val['$[]'](2)]);
        return result;
      }, 3);
      
      $def(self, '$_reduce_511', function $$_reduce_511(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'match_pair', $to_a(val['$[]'](0)).concat([val['$[]'](1)]));
        return result;
      }, 3);
      
      $def(self, '$_reduce_512', function $$_reduce_512(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'match_label', $to_a(val['$[]'](0)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_513', function $$_reduce_513(val, _values, result) {
        
        
        result = ["label", val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_514', function $$_reduce_514(val, _values, result) {
        
        
        result = ["quoted", [val['$[]'](0), val['$[]'](1), val['$[]'](2)]];
        return result;
      }, 3);
      
      $def(self, '$_reduce_515', function $$_reduce_515(val, _values, result) {
        var self = this;

        
        result = [self.builder.$match_rest(val['$[]'](0), val['$[]'](1))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_516', function $$_reduce_516(val, _values, result) {
        var self = this;

        
        result = [self.builder.$match_rest(val['$[]'](0), nil)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_517', function $$_reduce_517(val, _values, result) {
        var self = this;

        
        result = [self.builder.$match_nil_pattern(val['$[]'](0), val['$[]'](1))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_521', function $$_reduce_521(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_522', function $$_reduce_522(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_523', function $$_reduce_523(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_524', function $$_reduce_524(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_528', function $$_reduce_528(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_529', function $$_reduce_529(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_538', function $$_reduce_538(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_540', function $$_reduce_540(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$match_var(val['$[]'](0)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_541', function $$_reduce_541(val, _values, result) {
        var self = this, name = nil, lvar = nil;

        
        name = val['$[]'](1)['$[]'](0);
        if (!$truthy(self.$static_env()['$declared?'](name))) {
          self.$diagnostic("error", "undefined_lvar", $hash2(["name"], {"name": name}), val['$[]'](1))
        };
        lvar = self.builder.$accessible(self.builder.$ident(val['$[]'](1)));
        result = self.builder.$pin(val['$[]'](0), lvar);
        return result;
      }, 3);
      
      $def(self, '$_reduce_542', function $$_reduce_542(val, _values, result) {
        var self = this, non_lvar = nil;

        
        non_lvar = self.builder.$accessible(val['$[]'](1));
        result = self.builder.$pin(val['$[]'](0), non_lvar);
        return result;
      }, 3);
      
      $def(self, '$_reduce_543', function $$_reduce_543(val, _values, result) {
        var self = this, expr = nil;

        
        expr = self.builder.$begin(val['$[]'](1), val['$[]'](2), val['$[]'](3));
        result = self.builder.$pin(val['$[]'](0), expr);
        return result;
      }, 3);
      
      $def(self, '$_reduce_544', function $$_reduce_544(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_545', function $$_reduce_545(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_546', function $$_reduce_546(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_547', function $$_reduce_547(val, _values, result) {
        var $a, $b, self = this, assoc_t = nil, exc_var = nil, exc_list = nil;

        
        $b = val['$[]'](2), $a = $to_ary($b), (assoc_t = ($a[0] == null ? nil : $a[0])), (exc_var = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(val['$[]'](1))) {
          exc_list = self.builder.$array(nil, val['$[]'](1), nil)
        };
        result = [self.builder.$rescue_body(val['$[]'](0), exc_list, assoc_t, exc_var, val['$[]'](3), val['$[]'](4))].concat($to_a(val['$[]'](5)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_548', function $$_reduce_548(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_549', function $$_reduce_549(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_552', function $$_reduce_552(val, _values, result) {
        
        
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_554', function $$_reduce_554(val, _values, result) {
        
        
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_558', function $$_reduce_558(val, _values, result) {
        var self = this;

        
        result = self.builder.$string_compose(nil, val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_559', function $$_reduce_559(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_560', function $$_reduce_560(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_561', function $$_reduce_561(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$string_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, 3);
      
      $def(self, '$_reduce_562', function $$_reduce_562(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$string(val['$[]'](0));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, 3);
      
      $def(self, '$_reduce_563', function $$_reduce_563(val, _values, result) {
        var self = this;

        
        result = self.builder.$character(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_564', function $$_reduce_564(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$xstring_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, 3);
      
      $def(self, '$_reduce_565', function $$_reduce_565(val, _values, result) {
        var self = this, opts = nil;

        
        opts = self.builder.$regexp_options(val['$[]'](3));
        result = self.builder.$regexp_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2), opts);
        return result;
      }, 3);
      
      $def(self, '$_reduce_566', function $$_reduce_566(val, _values, result) {
        var self = this;

        
        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_567', function $$_reduce_567(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_568', function $$_reduce_568(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_569', function $$_reduce_569(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_570', function $$_reduce_570(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_571', function $$_reduce_571(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_572', function $$_reduce_572(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_573', function $$_reduce_573(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_574', function $$_reduce_574(val, _values, result) {
        var self = this;

        
        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_575', function $$_reduce_575(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_576', function $$_reduce_576(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_577', function $$_reduce_577(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$string_internal(val['$[]'](1)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_578', function $$_reduce_578(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_579', function $$_reduce_579(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$symbol_internal(val['$[]'](1)));
        return result;
      }, 3);
      
      $def(self, '$_reduce_580', function $$_reduce_580(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_581', function $$_reduce_581(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_582', function $$_reduce_582(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_583', function $$_reduce_583(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_584', function $$_reduce_584(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_585', function $$_reduce_585(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_586', function $$_reduce_586(val, _values, result) {
        var self = this;

        
        result = self.builder.$string_internal(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_587', function $$_reduce_587(val, _values, result) {
        
        
        result = val['$[]'](1);
        return result;
      }, 3);
      
      $def(self, '$_reduce_588', function $$_reduce_588(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        return result;
      }, 3);
      
      $def(self, '$_reduce_589', function $$_reduce_589(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_590', function $$_reduce_590(val, _values, result) {
        var self = this;

        
        result = self.builder.$gvar(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_591', function $$_reduce_591(val, _values, result) {
        var self = this;

        
        result = self.builder.$ivar(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_592', function $$_reduce_592(val, _values, result) {
        var self = this;

        
        result = self.builder.$cvar(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_596', function $$_reduce_596(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$symbol(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_597', function $$_reduce_597(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$symbol_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_598', function $$_reduce_598(val, _values, result) {
        
        
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_599', function $$_reduce_599(val, _values, result) {
        var self = this;

        
        if ($truthy(self.builder['$respond_to?']("negate"))) {
          result = self.builder.$negate(val['$[]'](0), val['$[]'](1))
        } else {
          result = self.builder.$unary_num(val['$[]'](0), val['$[]'](1))
        };
        return result;
      }, 3);
      
      $def(self, '$_reduce_600', function $$_reduce_600(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$integer(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_601', function $$_reduce_601(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$float(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_602', function $$_reduce_602(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$rational(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_603', function $$_reduce_603(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$complex(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_604', function $$_reduce_604(val, _values, result) {
        var self = this;

        
        result = self.builder.$ivar(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_605', function $$_reduce_605(val, _values, result) {
        var self = this;

        
        result = self.builder.$gvar(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_606', function $$_reduce_606(val, _values, result) {
        var self = this;

        
        result = self.builder.$cvar(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_607', function $$_reduce_607(val, _values, result) {
        var self = this;

        
        result = self.builder.$ident(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_608', function $$_reduce_608(val, _values, result) {
        var self = this;

        
        result = self.builder.$ivar(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_609', function $$_reduce_609(val, _values, result) {
        var self = this;

        
        result = self.builder.$gvar(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_610', function $$_reduce_610(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_611', function $$_reduce_611(val, _values, result) {
        var self = this;

        
        result = self.builder.$cvar(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_612', function $$_reduce_612(val, _values, result) {
        var self = this;

        
        result = self.builder.$nil(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_613', function $$_reduce_613(val, _values, result) {
        var self = this;

        
        result = self.builder.$self(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_614', function $$_reduce_614(val, _values, result) {
        var self = this;

        
        result = self.builder.$true(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_615', function $$_reduce_615(val, _values, result) {
        var self = this;

        
        result = self.builder.$false(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_616', function $$_reduce_616(val, _values, result) {
        var self = this;

        
        result = self.builder.$__FILE__(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_617', function $$_reduce_617(val, _values, result) {
        var self = this;

        
        result = self.builder.$__LINE__(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_618', function $$_reduce_618(val, _values, result) {
        var self = this;

        
        result = self.builder.$__ENCODING__(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_619', function $$_reduce_619(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_620', function $$_reduce_620(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_621', function $$_reduce_621(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_622', function $$_reduce_622(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_623', function $$_reduce_623(val, _values, result) {
        var self = this;

        
        result = self.builder.$nth_ref(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_624', function $$_reduce_624(val, _values, result) {
        var self = this;

        
        result = self.builder.$back_ref(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_625', function $$_reduce_625(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_626', function $$_reduce_626(val, _values, result) {
        
        
        result = [val['$[]'](0), val['$[]'](2)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_627', function $$_reduce_627(val, _values, result) {
        
        
        result = nil;
        return result;
      }, 3);
      
      $def(self, '$_reduce_629', function $$_reduce_629(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(nil, [], nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_630', function $$_reduce_630(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, 3);
      
      $def(self, '$_reduce_632', function $$_reduce_632(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.lexer.$in_kwarg();
        
        $writer = [true];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.context.$push("def_open_args");
        return result;
      }, 3);
      
      $def(self, '$_reduce_633', function $$_reduce_633(val, _values, result) {
        var self = this, $writer = nil;

        
        self.context.$pop();
        
        $writer = [val['$[]'](0)];
        $send(self.lexer, 'in_kwarg=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$args(nil, val['$[]'](1), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_634', function $$_reduce_634(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_635', function $$_reduce_635(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_636', function $$_reduce_636(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_637', function $$_reduce_637(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_638', function $$_reduce_638(val, _values, result) {
        var self = this;

        
        self.static_env.$declare_forward_args();
        result = [self.builder.$forward_arg(val['$[]'](0))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_639', function $$_reduce_639(val, _values, result) {
        
        
        result = val['$[]'](1);
        return result;
      }, 3);
      
      $def(self, '$_reduce_640', function $$_reduce_640(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_641', function $$_reduce_641(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_642', function $$_reduce_642(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      }, 3);
      
      $def(self, '$_reduce_643', function $$_reduce_643(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_644', function $$_reduce_644(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_645', function $$_reduce_645(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_646', function $$_reduce_646(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_647', function $$_reduce_647(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_648', function $$_reduce_648(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_649', function $$_reduce_649(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, 3);
      
      $def(self, '$_reduce_650', function $$_reduce_650(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_651', function $$_reduce_651(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_652', function $$_reduce_652(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_653', function $$_reduce_653(val, _values, result) {
        
        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_654', function $$_reduce_654(val, _values, result) {
        
        
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_655', function $$_reduce_655(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_656', function $$_reduce_656(val, _values, result) {
        
        
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_657', function $$_reduce_657(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_const", nil, val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_658', function $$_reduce_658(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_ivar", nil, val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_659', function $$_reduce_659(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_gvar", nil, val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_660', function $$_reduce_660(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_cvar", nil, val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_662', function $$_reduce_662(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        self.max_numparam_stack['$has_ordinary_params!']();
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_663', function $$_reduce_663(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_664', function $$_reduce_664(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(0);
        result = self.builder.$arg(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_665', function $$_reduce_665(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_666', function $$_reduce_666(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_667', function $$_reduce_667(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_668', function $$_reduce_668(val, _values, result) {
        var self = this;

        
        self.$check_kwarg_name(val['$[]'](0));
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        self.max_numparam_stack['$has_ordinary_params!']();
        self.current_arg_stack.$set(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      }, 3);
      
      $def(self, '$_reduce_669', function $$_reduce_669(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(nil);
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_670', function $$_reduce_670(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(nil);
        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_671', function $$_reduce_671(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_672', function $$_reduce_672(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_673', function $$_reduce_673(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_674', function $$_reduce_674(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_675', function $$_reduce_675(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_676', function $$_reduce_676(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_679', function $$_reduce_679(val, _values, result) {
        var self = this;

        
        result = [self.builder.$kwnilarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_680', function $$_reduce_680(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$kwrestarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_681', function $$_reduce_681(val, _values, result) {
        var self = this;

        
        result = [self.builder.$kwrestarg(val['$[]'](0))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_682', function $$_reduce_682(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(0);
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_683', function $$_reduce_683(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(0);
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_684', function $$_reduce_684(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_685', function $$_reduce_685(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_686', function $$_reduce_686(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_687', function $$_reduce_687(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_690', function $$_reduce_690(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_691', function $$_reduce_691(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      }, 3);
      
      $def(self, '$_reduce_694', function $$_reduce_694(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = self.builder.$blockarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_695', function $$_reduce_695(val, _values, result) {
        var self = this;

        
        self.static_env.$declare_anonymous_blockarg();
        result = self.builder.$blockarg(val['$[]'](0), nil);
        return result;
      }, 3);
      
      $def(self, '$_reduce_696', function $$_reduce_696(val, _values, result) {
        
        
        result = [val['$[]'](1)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_697', function $$_reduce_697(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_699', function $$_reduce_699(val, _values, result) {
        
        
        result = val['$[]'](1);
        return result;
      }, 3);
      
      $def(self, '$_reduce_700', function $$_reduce_700(val, _values, result) {
        
        
        result = [];
        return result;
      }, 3);
      
      $def(self, '$_reduce_702', function $$_reduce_702(val, _values, result) {
        
        
        result = [val['$[]'](0)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_703', function $$_reduce_703(val, _values, result) {
        
        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_704', function $$_reduce_704(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, 3);
      
      $def(self, '$_reduce_705', function $$_reduce_705(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair_keyword(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_706', function $$_reduce_706(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair_label(val['$[]'](0));
        return result;
      }, 3);
      
      $def(self, '$_reduce_707', function $$_reduce_707(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair_quoted(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, 3);
      
      $def(self, '$_reduce_708', function $$_reduce_708(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwsplat(val['$[]'](0), val['$[]'](1));
        return result;
      }, 3);
      
      $def(self, '$_reduce_721', function $$_reduce_721(val, _values, result) {
        
        
        result = ["dot", val['$[]'](0)['$[]'](1)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_722', function $$_reduce_722(val, _values, result) {
        
        
        result = ["anddot", val['$[]'](0)['$[]'](1)];
        return result;
      }, 3);
      
      $def(self, '$_reduce_727', function $$_reduce_727(val, _values, result) {
        
        
        result = val['$[]'](1);
        return result;
      }, 3);
      
      $def(self, '$_reduce_728', function $$_reduce_728(val, _values, result) {
        
        
        result = val['$[]'](1);
        return result;
      }, 3);
      
      $def(self, '$_reduce_729', function $$_reduce_729(val, _values, result) {
        
        
        result = val['$[]'](1);
        return result;
      }, 3);
      
      $def(self, '$_reduce_733', function $$_reduce_733(val, _values, result) {
        var self = this;

        
        self.$yyerrok();
        return result;
      }, 3);
      
      $def(self, '$_reduce_737', function $$_reduce_737(val, _values, result) {
        
        
        result = nil;
        return result;
      }, 3);
      return $def(self, '$_reduce_none', function $$_reduce_none(val, _values, result) {
        
        return val['$[]'](0)
      }, 3);
    })($nesting[0], $$$($$('Parser'), 'Base'), $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/ast/builder"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $Opal = Opal.Opal, $hash2 = Opal.hash2, $def = Opal.def;

  Opal.add_stubs('require,emit_lambda=,-,new');
  
  self.$require("opal/ast/node");
  self.$require("parser/ruby31");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Builder');

        var $writer = nil;

        
        
        $writer = [true];
        $send(self, 'emit_lambda=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return $def(self, '$n', function $$n(type, children, location) {
          
          return $$$($$$($Opal, 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": location}))
        }, 3);
      })($nesting[0], $$$($$$($$$('Parser'), 'Builders'), 'Default'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/base"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $const_set = Opal.const_set, $truthy = Opal.truthy, $Opal = Opal.Opal, $hash2 = Opal.hash2, $defs = Opal.defs, $alias = Opal.alias, $rb_plus = Opal.rb_plus, $eqeqeq = Opal.eqeqeq, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs('require,new,current_node,loc,+,stmts_of,begin_with_stmts,nil?,include?,type,children,===,length,[],s,attr_accessor,current_node=,-,location=,raise');
  
  self.$require("parser");
  self.$require("opal/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DummyLocation');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

          
          
          $def(self, '$node=', function $DummyLocation_node$eq$1($a) {
            var $post_args, $rest_arg;

            
            
            $post_args = Opal.slice.call(arguments);
            
            $rest_arg = $post_args;;
            return nil;
          }, -1);
          
          $def(self, '$expression', function $$expression() {
            var self = this;

            return self
          }, 0);
          
          $def(self, '$begin_pos', function $$begin_pos() {
            
            return 0
          }, 0);
          
          $def(self, '$end_pos', function $$end_pos() {
            
            return 0
          }, 0);
          
          $def(self, '$source', function $$source() {
            
            return ""
          }, 0);
          
          $def(self, '$line', function $$line() {
            
            return 0
          }, 0);
          
          $def(self, '$column', function $$column() {
            
            return 0
          }, 0);
          return $def(self, '$last_line', function $$last_line() {
            
            return $$$($$('Float'), 'INFINITY')
          }, 0);
        })($nesting[0], null, $nesting);
        $const_set($nesting[0], 'DUMMY_LOCATION', $$('DummyLocation').$new());
        
        $def(self, '$s', function $$s(type, $a) {
          var $post_args, children, self = this, loc = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1);
          
          children = $post_args;;
          loc = ($truthy(self.$current_node()) ? (self.$current_node().$loc()) : ($$('DUMMY_LOCATION')));
          return $$$($$$($Opal, 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": loc}));
        }, -2);
        $defs(self, '$s', function $$s(type, $a) {
          var $post_args, children;

          
          
          $post_args = Opal.slice.call(arguments, 1);
          
          children = $post_args;;
          return $$$($$$($Opal, 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": $$('DUMMY_LOCATION')}));
        }, -2);
        $alias(self, "on_iter", "process_regular_node");
        $alias(self, "on_top", "process_regular_node");
        $alias(self, "on_zsuper", "process_regular_node");
        $alias(self, "on_jscall", "on_send");
        $alias(self, "on_jsattr", "process_regular_node");
        $alias(self, "on_jsattrasgn", "process_regular_node");
        $alias(self, "on_kwsplat", "process_regular_node");
        
        $def(self, '$prepend_to_body', function $$prepend_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(node), self.$stmts_of(body));
          return self.$begin_with_stmts(stmts);
        }, 2);
        
        $def(self, '$append_to_body', function $$append_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(body), self.$stmts_of(node));
          return self.$begin_with_stmts(stmts);
        }, 2);
        
        $def(self, '$stmts_of', function $$stmts_of(node) {
          
          if ($truthy(node['$nil?']())) {
            return []
          } else if ($truthy(["begin", "kwbegin"]['$include?'](node.$type()))) {
            return node.$children()
          } else {
            return [node]
          }
        }, 1);
        
        $def(self, '$begin_with_stmts', function $$begin_with_stmts(stmts) {
          var self = this, $ret_or_1 = nil;

          if ($eqeqeq(0, ($ret_or_1 = stmts.$length()))) {
            return nil
          } else if ($eqeqeq(1, $ret_or_1)) {
            return stmts['$[]'](0)
          } else {
            return $send(self, 's', ["begin"].concat($to_a(stmts)))
          }
        }, 1);
        self.$attr_accessor("current_node");
        
        $def(self, '$process', function $$process(node) {
          var $yield = $$process.$$p || nil, self = this, $writer = nil;

          delete $$process.$$p;
          return (function() { try {
          
          
          $writer = [node];
          $send(self, 'current_node=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send2(self, $find_super(self, 'process', $$process, false, true), 'process', [node], $yield);
          } finally {
            (($writer = [nil]), $send(self, 'current_node=', $to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
          }; })()
        }, 1);
        return $def(self, '$error', function $$error(msg) {
          var self = this, error = nil, $writer = nil;

          
          error = $$$($Opal, 'RewritingError').$new(msg);
          if ($truthy(self.$current_node())) {
            
            $writer = [self.$current_node().$loc()];
            $send(error, 'location=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return self.$raise(error);
        }, 1);
      })($nesting[0], $$$($$$($$$('Parser'), 'AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/opal_engine_check"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $to_a = Opal.to_a, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $const_set = Opal.const_set;

  Opal.add_stubs('require,children,skip_check_present?,process,s,skip_check_present_not?,==');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OpalEngineCheck');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        
        $def(self, '$on_if', function $$on_if(node) {
          var $a, $yield = $$on_if.$$p || nil, self = this, test = nil, true_body = nil, false_body = nil, $ret_or_1 = nil;

          delete $$on_if.$$p;
          
          $a = [].concat($to_a(node.$children())), (test = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(self['$skip_check_present?'](test))) {
            return self.$process(($truthy(($ret_or_1 = true_body)) ? ($ret_or_1) : (self.$s("nil"))))
          } else if ($truthy(self['$skip_check_present_not?'](test))) {
            return self.$process(($truthy(($ret_or_1 = false_body)) ? ($ret_or_1) : (self.$s("nil"))))
          } else {
            return $send2(self, $find_super(self, 'on_if', $$on_if, false, true), 'on_if', [node], $yield)
          };
        }, 1);
        
        $def(self, '$skip_check_present?', function $OpalEngineCheck_skip_check_present$ques$1(test) {
          var $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = test['$==']($$('RUBY_ENGINE_CHECK'))))) {
            return $ret_or_1
          } else {
            return test['$==']($$('RUBY_PLATFORM_CHECK'))
          }
        }, 1);
        
        $def(self, '$skip_check_present_not?', function $OpalEngineCheck_skip_check_present_not$ques$2(test) {
          var $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = test['$==']($$('RUBY_ENGINE_CHECK_NOT'))))) {
            return $ret_or_1
          } else {
            return test['$==']($$('RUBY_PLATFORM_CHECK_NOT'))
          }
        }, 1);
        $const_set($nesting[0], 'RUBY_ENGINE_CHECK', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "==", self.$s("str", "opal")));
        $const_set($nesting[0], 'RUBY_ENGINE_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "!=", self.$s("str", "opal")));
        $const_set($nesting[0], 'RUBY_PLATFORM_CHECK', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "==", self.$s("str", "opal")));
        return $const_set($nesting[0], 'RUBY_PLATFORM_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "!=", self.$s("str", "opal")));
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/for_rewriter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $defs = Opal.defs, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $to_a = Opal.to_a, $send = Opal.send, $eqeqeq = Opal.eqeqeq, $def = Opal.def, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs('require,+,find,map,s,next_tmp,class,===,type,updated,<<,prepend_to_body,process,attr_reader,new,to_a,result');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ForRewriter');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        $defs(self, '$reset_tmp_counter!', function $ForRewriter_reset_tmp_counter$excl$1() {
          var self = this;

          return (self.counter = 0)
        }, 0);
        $defs(self, '$next_tmp', function $$next_tmp() {
          var self = this, $ret_or_1 = nil;
          if (self.counter == null) self.counter = nil;

          
          self.counter = ($truthy(($ret_or_1 = self.counter)) ? ($ret_or_1) : (0));
          self.counter = $rb_plus(self.counter, 1);
          return "$for_tmp" + (self.counter);
        }, 0);
        
        $def(self, '$on_for', function $$on_for(node) {
          var $a, self = this, loop_variable = nil, iterating_value = nil, loop_body = nil, iterating_lvars = nil, lvars_declared_in_body = nil, outer_assigns = nil, tmp_loop_variable = nil, get_tmp_loop_variable = nil, loop_variable_assignment = nil, $ret_or_1 = nil;

          
          $a = [].concat($to_a(node)), (loop_variable = ($a[0] == null ? nil : $a[0])), (iterating_value = ($a[1] == null ? nil : $a[1])), (loop_body = ($a[2] == null ? nil : $a[2])), $a;
          iterating_lvars = $$('LocalVariableAssigns').$find(loop_variable);
          lvars_declared_in_body = $$('LocalVariableAssigns').$find(loop_body);
          outer_assigns = $send($rb_plus(iterating_lvars, lvars_declared_in_body), 'map', [], function $$2(lvar_name){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (lvar_name == null) lvar_name = nil;;
            return self.$s("lvdeclare", lvar_name);}, {$$arity: 1, $$s: self});
          tmp_loop_variable = self.$class().$next_tmp();
          get_tmp_loop_variable = self.$s("js_tmp", tmp_loop_variable);
          loop_variable_assignment = ($eqeqeq("mlhs", ($ret_or_1 = loop_variable.$type())) ? (loop_variable.$updated("masgn", [loop_variable, get_tmp_loop_variable])) : (loop_variable['$<<'](get_tmp_loop_variable)));
          loop_body = self.$prepend_to_body(loop_body, loop_variable_assignment);
          node = node.$updated("send", [iterating_value, "each", node.$updated("iter", [self.$s("args", self.$s("arg", tmp_loop_variable)), self.$process(loop_body)])]);
          return node.$updated("begin", [].concat($to_a(outer_assigns)).concat([node]));
        }, 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'LocalVariableAssigns');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

          
          self.$attr_reader("result");
          $defs(self, '$find', function $$find(node) {
            var self = this, processor = nil;

            
            processor = self.$new();
            processor.$process(node);
            return processor.$result().$to_a();
          }, 1);
          
          $def(self, '$initialize', function $$initialize() {
            var self = this;

            return (self.result = $$('Set').$new())
          }, 0);
          return $def(self, '$on_lvasgn', function $$on_lvasgn(node) {
            var $a, $yield = $$on_lvasgn.$$p || nil, self = this, name = nil, _ = nil;

            delete $$on_lvasgn.$$p;
            
            $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            self.$result()['$<<'](name);
            return $send2(self, $find_super(self, 'on_lvasgn', $$on_lvasgn, false, true), 'on_lvasgn', [node], $yield);
          }, 1);
        })($nesting[0], $$('Base'), $nesting);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/explicit_writer_return"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $const_set = Opal.const_set, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $slice = Opal.slice, $eqeq = Opal.eqeq, $regexp = Opal.regexp, $send = Opal.send;

  Opal.add_stubs('require,s,==,to_s,=~,process_all,updated');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ExplicitWriterReturn');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.in_masgn = nil;
        
        
        $def(self, '$initialize', function $$initialize() {
          var self = this;

          return (self.in_masgn = false)
        }, 0);
        $const_set($nesting[0], 'TMP_NAME', "$writer");
        $const_set($nesting[0], 'GET_ARGS_NODE', self.$s("lvar", $$('TMP_NAME')));
        $const_set($nesting[0], 'RETURN_ARGS_NODE', self.$s("jsattr", $$('GET_ARGS_NODE'), self.$s("send", self.$s("jsattr", $$('GET_ARGS_NODE'), self.$s("str", "length")), "-", self.$s("int", 1))));
        
        $def(self, '$on_send', function $$on_send(node) {
          var $a, $yield = $$on_send.$$p || nil, self = this, recv = nil, method_name = nil, args = nil, set_args_node = nil;

          delete $$on_send.$$p;
          
          if ($truthy(self.in_masgn)) {
            return $send2(self, $find_super(self, 'on_send', $$on_send, false, true), 'on_send', [node], $yield)
          };
          $a = [].concat($to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if (($truthy(method_name.$to_s()['$=~']($regexp([$$('REGEXP_START'), "\\w+=", $$('REGEXP_END')]))) || ($eqeq(method_name.$to_s(), "[]=")))) {
            
            set_args_node = self.$s("lvasgn", $$('TMP_NAME'), $send(self, 's', ["array"].concat($to_a(self.$process_all(args)))));
            return self.$s("begin", set_args_node, node.$updated(nil, [recv, method_name, self.$s("splat", $$('GET_ARGS_NODE'))]), $$('RETURN_ARGS_NODE'));
          } else {
            return $send2(self, $find_super(self, 'on_send', $$on_send, false, true), 'on_send', [node], $yield)
          };
        }, 1);
        return $def(self, '$on_masgn', function $$on_masgn(node) {
          var $yield = $$on_masgn.$$p || nil, self = this, result = nil;

          delete $$on_masgn.$$p;
          
          self.in_masgn = true;
          result = $send2(self, $find_super(self, 'on_masgn', $$on_masgn, false, true), 'on_masgn', [node], $yield);
          self.in_masgn = false;
          return result;
        }, 1);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/js_reserved_words"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $regexp = Opal.regexp, $truthy = Opal.truthy, $defs = Opal.defs, $def = Opal.def, $range = Opal.range, $to_a = Opal.to_a, $send2 = Opal.send2, $find_super = Opal.find_super, $hash2 = Opal.hash2, $alias = Opal.alias;

  Opal.add_stubs('require,freeze,=~,!,valid_name?,class,to_sym,valid_ivar_name?,[],to_s,updated,fix_var_name,fix_ivar_name');
  
  self.$require("opal/rewriters/base");
  self.$require("opal/regexp_anchors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsReservedWords');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        $const_set($nesting[0], 'ES51_RESERVED_WORD', $regexp([$$('REGEXP_START'), "(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)", $$('REGEXP_END')]).$freeze());
        $const_set($nesting[0], 'ES3_RESERVED_WORD_EXCLUSIVE', $regexp([$$('REGEXP_START'), "(?:int|byte|char|goto|long|final|float|short|double|native|throws|boolean|abstract|volatile|transient|synchronized)", $$('REGEXP_END')]).$freeze());
        $const_set($nesting[0], 'PROTO_SPECIAL_PROPS', $regexp([$$('REGEXP_START'), "(?:constructor|displayName|__proto__|__parent__|__noSuchMethod__|__count__)", $$('REGEXP_END')]).$freeze());
        $const_set($nesting[0], 'PROTO_SPECIAL_METHODS', $regexp([$$('REGEXP_START'), "(?:hasOwnProperty|valueOf)", $$('REGEXP_END')]).$freeze());
        $const_set($nesting[0], 'IMMUTABLE_PROPS', $regexp([$$('REGEXP_START'), "(?:NaN|Infinity|undefined)", $$('REGEXP_END')]).$freeze());
        $const_set($nesting[0], 'BASIC_IDENTIFIER_RULES', $regexp([$$('REGEXP_START'), "[$_a-z][$_a-z\\d]*", $$('REGEXP_END')], 'i').$freeze());
        $const_set($nesting[0], 'RESERVED_FUNCTION_NAMES', $regexp([$$('REGEXP_START'), "(?:Array)", $$('REGEXP_END')]).$freeze());
        $defs(self, '$valid_name?', function $JsReservedWords_valid_name$ques$1(name) {
          var $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_1 = $$('BASIC_IDENTIFIER_RULES')['$=~'](name)))) {
            return ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = $$('ES51_RESERVED_WORD')['$=~'](name))) ? ($ret_or_3) : ($$('ES3_RESERVED_WORD_EXCLUSIVE')['$=~'](name))))) ? ($ret_or_2) : ($$('IMMUTABLE_PROPS')['$=~'](name)))['$!']()
          } else {
            return $ret_or_1
          }
        }, 1);
        $defs(self, '$valid_ivar_name?', function $JsReservedWords_valid_ivar_name$ques$2(name) {
          var $ret_or_1 = nil;

          return ($truthy(($ret_or_1 = $$('PROTO_SPECIAL_PROPS')['$=~'](name))) ? ($ret_or_1) : ($$('PROTO_SPECIAL_METHODS')['$=~'](name)))['$!']()
        }, 1);
        
        $def(self, '$fix_var_name', function $$fix_var_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_name?'](name))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, 1);
        
        $def(self, '$fix_ivar_name', function $$fix_ivar_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_ivar_name?'](name.$to_s()['$[]']($range(1, -1, false))))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, 1);
        
        $def(self, '$on_lvar', function $$on_lvar(node) {
          var $a, $yield = $$on_lvar.$$p || nil, self = this, name = nil, _ = nil;

          delete $$on_lvar.$$p;
          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_var_name(name)]);
          return $send2(self, $find_super(self, 'on_lvar', $$on_lvar, false, true), 'on_lvar', [node], null);
        }, 1);
        
        $def(self, '$on_lvasgn', function $$on_lvasgn(node) {
          var $a, $yield = $$on_lvasgn.$$p || nil, self = this, name = nil, value = nil;

          delete $$on_lvasgn.$$p;
          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = ($truthy(value) ? (node.$updated(nil, [self.$fix_var_name(name), value])) : (node.$updated(nil, [self.$fix_var_name(name)])));
          return $send2(self, $find_super(self, 'on_lvasgn', $$on_lvasgn, false, true), 'on_lvasgn', [node], null);
        }, 1);
        
        $def(self, '$on_ivar', function $$on_ivar(node) {
          var $a, $yield = $$on_ivar.$$p || nil, self = this, name = nil, _ = nil;

          delete $$on_ivar.$$p;
          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_ivar_name(name)]);
          return $send2(self, $find_super(self, 'on_ivar', $$on_ivar, false, true), 'on_ivar', [node], null);
        }, 1);
        
        $def(self, '$on_ivasgn', function $$on_ivasgn(node) {
          var $a, $yield = $$on_ivasgn.$$p || nil, self = this, name = nil, value = nil;

          delete $$on_ivasgn.$$p;
          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = ($truthy(value) ? (node.$updated(nil, [self.$fix_ivar_name(name), value])) : (node.$updated(nil, [self.$fix_ivar_name(name)])));
          return $send2(self, $find_super(self, 'on_ivasgn', $$on_ivasgn, false, true), 'on_ivasgn', [node], null);
        }, 1);
        
        $def(self, '$on_restarg', function $$on_restarg(node) {
          var $a, self = this, name = nil, _ = nil;

          
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(name)) {
            node = node.$updated(nil, [self.$fix_var_name(name)], $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}))
          };
          return node;
        }, 1);
        $alias(self, "on_kwrestarg", "on_restarg");
        return $def(self, '$on_argument', function $$on_argument(node) {
          var $a, $yield = $$on_argument.$$p || nil, self = this, name = nil, value = nil, fixed_name = nil, new_children = nil;

          delete $$on_argument.$$p;
          
          node = $send2(self, $find_super(self, 'on_argument', $$on_argument, false, true), 'on_argument', [node], null);
          $a = [].concat($to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          fixed_name = self.$fix_var_name(name);
          new_children = ($truthy(value) ? ([fixed_name, value]) : ([fixed_name]));
          return node.$updated(nil, new_children, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}));
        }, 1);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/block_to_iter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $def = Opal.def;

  Opal.add_stubs('require,s,process,updated,+,children');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'BlockToIter');

        
        return $def(self, '$on_block', function $$on_block(node) {
          var $a, self = this, recvr = nil, args = nil, body = nil, iter_node = nil;

          
          $a = [].concat($to_a(node)), (recvr = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          iter_node = self.$s("iter", args, body);
          return self.$process(recvr.$updated(nil, $rb_plus(recvr.$children(), [iter_node])));
        }, 1)
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/dot_js_syntax"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $to_a = Opal.to_a, $slice = Opal.slice, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $neqeq = Opal.neqeq, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('require,==,type,===,!=,size,error,first,to_js_attr_call,to_js_attr_assign_call,to_native_js_call,s');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'DotJsSyntax');

        
        
        
        $def(self, '$on_send', function $$on_send(node) {
          var $a, $yield = $$on_send.$$p || nil, self = this, recv = nil, meth = nil, args = nil, recv_of_recv = nil, meth_of_recv = nil, _ = nil, $ret_or_1 = nil, property = nil, value = nil;

          delete $$on_send.$$p;
          
          $a = [].concat($to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if (($truthy(recv) && ($eqeq(recv.$type(), "send")))) {
            
            $a = [].concat($to_a(recv)), (recv_of_recv = ($a[0] == null ? nil : $a[0])), (meth_of_recv = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $a;
            if ($eqeq(meth_of_recv, "JS")) {
              
              if ($eqeqeq("[]", ($ret_or_1 = meth))) {
                
                if ($neqeq(args.$size(), 1)) {
                  self.$error(".JS[:property] syntax supports only one argument")
                };
                property = args.$first();
                node = self.$to_js_attr_call(recv_of_recv, property);
              } else if ($eqeqeq("[]=", $ret_or_1)) {
                
                if ($neqeq(args.$size(), 2)) {
                  self.$error(".JS[:property]= syntax supports only two arguments")
                };
                $a = [].concat($to_a(args)), (property = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
                node = self.$to_js_attr_assign_call(recv_of_recv, property, value);
              } else {
                node = self.$to_native_js_call(recv_of_recv, meth, args)
              };
              return $send2(self, $find_super(self, 'on_send', $$on_send, false, true), 'on_send', [node], null);
            } else {
              return $send2(self, $find_super(self, 'on_send', $$on_send, false, true), 'on_send', [node], $yield)
            };
          } else {
            return $send2(self, $find_super(self, 'on_send', $$on_send, false, true), 'on_send', [node], $yield)
          };
        }, 1);
        
        $def(self, '$to_native_js_call', function $$to_native_js_call(recv, meth, args) {
          var self = this;

          return $send(self, 's', ["jscall", recv, meth].concat($to_a(args)))
        }, 3);
        
        $def(self, '$to_js_attr_call', function $$to_js_attr_call(recv, property) {
          var self = this;

          return self.$s("jsattr", recv, property)
        }, 2);
        return $def(self, '$to_js_attr_assign_call', function $$to_js_attr_assign_call(recv, property, value) {
          var self = this;

          return self.$s("jsattrasgn", recv, property, value)
        }, 3);
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/pattern_matching"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $slice = Opal.slice, $truthy = Opal.truthy, $send = Opal.send, $eqeqeq = Opal.eqeqeq, $not = Opal.not, $neqeq = Opal.neqeq, $eqeq = Opal.eqeq, $alias = Opal.alias, $Opal = Opal.Opal;

  Opal.add_stubs('require,s,convert_full_pattern,raise_no_matching_pattern_error,+,process,single_case_match,private,shift,===,type,!,empty?,!=,==,class,new,run!,variables,pattern,map,<<,array,on_literal,first,children,to_proc,method,each,to_ast,on_array_pattern,compact,[]');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'PatternMatching');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.depth = nil;
        
        
        $def(self, '$initialize', function $$initialize() {
          var $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          self.depth = 0;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [], $yield);
        }, 0);
        
        $def(self, '$on_match_pattern', function $$on_match_pattern(node) {
          var $a, self = this, from = nil, pat = nil;

          
          $a = [].concat($to_a(node)), (from = ($a[0] == null ? nil : $a[0])), (pat = ($a[1] == null ? nil : $a[1])), $a;
          return self.$s("begin", self.$s("lvasgn", "$pmvar", from), self.$s("if", self.$convert_full_pattern(from, pat), nil, self.$raise_no_matching_pattern_error("$pmvar")));
        }, 1);
        
        $def(self, '$on_match_pattern_p', function $$on_match_pattern_p(node) {
          var $a, self = this, from = nil, pat = nil;

          
          $a = [].concat($to_a(node)), (from = ($a[0] == null ? nil : $a[0])), (pat = ($a[1] == null ? nil : $a[1])), $a;
          return self.$s("if", self.$convert_full_pattern(from, pat), self.$s("true"), self.$s("false"));
        }, 1);
        
        $def(self, '$on_case_match', function $$on_case_match(node) {
          var $a, $b, self = this, cmvar = nil, from = nil, cases = nil, els = nil;

          
          self.depth = $rb_plus(self.depth, 1);
          cmvar = "$cmvar" + (self.depth);
          $a = [].concat($to_a(node)), (from = ($a[0] == null ? nil : $a[0])), $b = $a.length - 1, $b = ($b < 1) ? 1 : $b, (cases = $slice.call($a, 1, $b)), (els = ($a[$b] == null ? nil : $a[$b])), $a;
          if ($truthy(els)) {
            self.$process(els)
          } else {
            els = self.$raise_no_matching_pattern_error(cmvar)
          };
          return self.$s("begin", self.$s("lvasgn", cmvar, from), $send(self, 'single_case_match', [cmvar].concat($to_a(cases)).concat([els])));
        }, 1);
        self.$private();
        
        $def(self, '$raise_no_matching_pattern_error', function $$raise_no_matching_pattern_error(from) {
          var self = this;

          return self.$s("send", nil, "raise", self.$s("const", self.$s("cbase"), "NoMatchingPatternError"), self.$s("lvar", from))
        }, 1);
        
        $def(self, '$single_case_match', function $$single_case_match(from, $a, $b) {
          var $post_args, cases, els, $c, self = this, cas = nil, pat = nil, if_guard = nil, body = nil, guard = nil, $ret_or_1 = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1);
          
          cases = $post_args.splice(0, $post_args.length - 1);;
          
          els = $post_args.shift();
          if (els == null) els = nil;;
          cas = cases.$shift();
          $c = [].concat($to_a(cas)), (pat = ($c[0] == null ? nil : $c[0])), (if_guard = ($c[1] == null ? nil : $c[1])), (body = ($c[2] == null ? nil : $c[2])), $c;
          pat = self.$convert_full_pattern(from, pat);
          if ($truthy(if_guard)) {
            
            $c = [].concat($to_a(if_guard)), (guard = ($c[0] == null ? nil : $c[0])), $c;
            if ($eqeqeq("if_guard", ($ret_or_1 = if_guard.$type()))) {
              pat = self.$s("and", pat, guard)
            } else if ($eqeqeq("unless_guard", $ret_or_1)) {
              pat = self.$s("and", pat, self.$s("send", guard, "!"))
            } else {
              nil
            };
          };
          return self.$s("if", pat, self.$process(body), ($not(cases['$empty?']()) ? ($send(self, 'single_case_match', [from].concat($to_a(cases)).concat([els]))) : ($neqeq(els, self.$s("empty_else")) ? (els) : nil)));
        }, -3);
        
        $def(self, '$convert_full_pattern', function $$convert_full_pattern(from, pat) {
          var self = this, converter = nil;

          
          if ($eqeq(from.$class(), $$('Symbol'))) {
            from = self.$s("lvar", from)
          };
          converter = $$('PatternConverter').$new(pat);
          converter['$run!']();
          return self.$s("masgn", $send(self, 's', ["mlhs"].concat($to_a(converter.$variables()))), self.$s("send", self.$s("const", self.$s("cbase"), "PatternMatching"), "call", from, converter.$pattern()));
        }, 2);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'PatternConverter');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

          $proto.pat = $proto.outpat = $proto.variables = nil;
          
          
          $def(self, '$initialize', function $$initialize(pat) {
            var self = this;

            
            self.pat = pat;
            return (self.variables = []);
          }, 1);
          
          $def(self, '$run!', function $PatternConverter_run$excl$1() {
            var self = this;

            return (self.outpat = self.$process(self.pat))
          }, 0);
          
          $def(self, '$pattern', function $$pattern() {
            var self = this;

            return self.outpat
          }, 0);
          
          $def(self, '$variables', function $$variables() {
            var self = this;

            return $send(self.variables, 'map', [], function $$2(i){var self = $$2.$$s == null ? this : $$2.$$s;

              
              
              if (i == null) i = nil;;
              return self.$s("lvasgn", i);}, {$$arity: 1, $$s: self})
          }, 0);
          
          $def(self, '$on_match_var', function $$on_match_var(node) {
            var $a, self = this, var$ = nil;

            
            $a = [].concat($to_a(node)), (var$ = ($a[0] == null ? nil : $a[0])), $a;
            self.variables['$<<'](var$);
            return self.$s("sym", "var");
          }, 1);
          
          $def(self, '$on_match_as', function $$on_match_as(node) {
            var $a, self = this, pat = nil, save = nil;

            
            $a = [].concat($to_a(node)), (pat = ($a[0] == null ? nil : $a[0])), (save = ($a[1] == null ? nil : $a[1])), $a;
            self.$process(save);
            return self.$array(self.$s("sym", "save"), self.$process(pat));
          }, 1);
          
          $def(self, '$on_literal', function $$on_literal(node) {
            var self = this;

            return self.$array(self.$s("sym", "lit"), node)
          }, 1);
          $alias(self, "on_int", "on_literal");
          $alias(self, "on_float", "on_literal");
          $alias(self, "on_complex", "on_literal");
          $alias(self, "on_rational", "on_literal");
          $alias(self, "on_array", "on_literal");
          $alias(self, "on_str", "on_literal");
          $alias(self, "on_dstr", "on_literal");
          $alias(self, "on_xstr", "on_literal");
          $alias(self, "on_sym", "on_literal");
          $alias(self, "on_irange", "on_literal");
          $alias(self, "on_erange", "on_literal");
          $alias(self, "on_const", "on_literal");
          $alias(self, "on_regexp", "on_literal");
          $alias(self, "on_lambda", "on_literal");
          $alias(self, "on_begin", "on_literal");
          
          $def(self, '$on_pin', function $$on_pin(node) {
            var self = this;

            return self.$on_literal(node.$children().$first())
          }, 1);
          
          $def(self, '$on_match_rest', function $$on_match_rest(node) {
            var self = this;

            if ($truthy(node.$children()['$empty?']())) {
              return self.$array(self.$s("sym", "rest"))
            } else {
              return self.$array(self.$s("sym", "rest"), self.$process(node.$children().$first()))
            }
          }, 1);
          
          $def(self, '$on_match_alt', function $$on_match_alt(node) {
            var self = this;

            return $send(self, 'array', [self.$s("sym", "any")].concat($to_a($send(node.$children(), 'map', [], self.$method("process").$to_proc()))))
          }, 1);
          
          $def(self, '$on_const_pattern', function $$on_const_pattern(node) {
            var self = this;

            return $send(self, 'array', [self.$s("sym", "all")].concat($to_a($send(node.$children(), 'map', [], self.$method("process").$to_proc()))))
          }, 1);
          
          $def(self, '$on_array_pattern', function $$on_array_pattern(node, tail) {
            var self = this, children = nil, fixed_size = nil, array_size = nil;

            
            
            if (tail == null) tail = false;;
            children = [].concat($to_a(node));
            if ($truthy(tail)) {
              children['$<<'](self.$s("match_rest"))
            };
            fixed_size = true;
            array_size = 0;
            children = $send(children, 'each', [], function $$3(i){var $ret_or_1 = nil;

              
              
              if (i == null) i = nil;;
              if ($eqeqeq("match_rest", ($ret_or_1 = i.$type()))) {
                return (fixed_size = false)
              } else {
                return (array_size = $rb_plus(array_size, 1))
              };}, 1);
            return self.$array(self.$s("sym", "array"), self.$to_ast(fixed_size), self.$to_ast(array_size), self.$to_ast($send(children, 'map', [], self.$method("process").$to_proc())));
          }, -2);
          
          $def(self, '$on_array_pattern_with_tail', function $$on_array_pattern_with_tail(node) {
            var self = this;

            return self.$on_array_pattern(node, true)
          }, 1);
          
          $def(self, '$on_hash_pattern', function $$on_hash_pattern(node) {
            var self = this, children = nil, any_size = nil;

            
            children = [].concat($to_a(node));
            any_size = ($truthy(children['$empty?']()) ? (self.$to_ast(false)) : (self.$to_ast(true)));
            children = $send(children, 'map', [], function $$4(i){var self = $$4.$$s == null ? this : $$4.$$s, $ret_or_1 = nil;

              
              
              if (i == null) i = nil;;
              if ($eqeqeq("pair", ($ret_or_1 = i.$type()))) {
                return self.$array(i.$children()['$[]'](0), self.$process(i.$children()['$[]'](1)))
              } else if ($eqeqeq("match_var", $ret_or_1)) {
                return self.$array(self.$s("sym", i.$children()['$[]'](0)), self.$process(i))
              } else if ($eqeqeq("match_nil_pattern", $ret_or_1)) {
                
                any_size = self.$to_ast(false);
                return nil;
              } else if ($eqeqeq("match_rest", $ret_or_1)) {
                
                if ($truthy(i.$children().$first())) {
                  any_size = self.$process(i.$children().$first())
                } else {
                  any_size = self.$to_ast(true)
                };
                return nil;
              } else {
                return nil
              };}, {$$arity: 1, $$s: self}).$compact();
            return self.$array(self.$s("sym", "hash"), any_size, $send(self, 'array', $to_a(children)));
          }, 1);
          
          $def(self, '$on_find_pattern', function $$on_find_pattern(node) {
            var self = this, children = nil;

            
            children = [].concat($to_a(node));
            children = $send(children, 'map', [], self.$method("process").$to_proc());
            return self.$array(self.$s("sym", "find"), $send(self, 'array', $to_a(children)));
          }, 1);
          self.$private();
          
          $def(self, '$array', function $$array($a) {
            var $post_args, args, self = this;

            
            
            $post_args = Opal.slice.call(arguments);
            
            args = $post_args;;
            return self.$to_ast(args);
          }, -1);
          return $def(self, '$to_ast', function $$to_ast(val) {
            var self = this, $ret_or_1 = nil;

            if ($eqeqeq($$('Array'), ($ret_or_1 = val))) {
              return $send(self, 's', ["array"].concat($to_a(val)))
            } else if ($eqeqeq($$('Integer'), $ret_or_1)) {
              return self.$s("int", val)
            } else if ($eqeqeq(true, $ret_or_1)) {
              return self.$s("true")
            } else if ($eqeqeq(false, $ret_or_1)) {
              return self.$s("false")
            } else if ($eqeqeq(nil, $ret_or_1)) {
              return self.$s("nil")
            } else {
              return nil
            }
          }, 1);
        })($nesting[0], $$$($$$($Opal, 'Rewriters'), 'Base'), $nesting);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/logical_operator_assignment"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $defs = Opal.defs, $truthy = Opal.truthy, $class_variable_get = Opal.class_variable_get, $rb_plus = Opal.rb_plus, $const_set = Opal.const_set, $lambda = Opal.lambda, $eqeq = Opal.eqeq, $to_a = Opal.to_a, $slice = Opal.slice, $hash2 = Opal.hash2, $send = Opal.send, $def = Opal.def, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs('require,+,updated,s,==,include?,[],type,new_temp,freeze,call,fetch,error,process');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LogicalOperatorAssignment');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        $defs(self, '$reset_tmp_counter!', function $LogicalOperatorAssignment_reset_tmp_counter$excl$1() {
          
          return $class_variable_set($nesting[0], '@@counter', 0)
        }, 0);
        $defs(self, '$new_temp', function $$new_temp() {
          var $a, $ret_or_1 = nil;

          
          $class_variable_set($nesting[0], '@@counter', ($truthy((($a = $nesting[0].$$cvars['@@counter'], $a != null) ? 'class variable' : nil)) ? (($truthy(($ret_or_1 = $class_variable_get($nesting[0], '@@counter', false))) ? ($ret_or_1) : (0))) : (0)));
          $class_variable_set($nesting[0], '@@counter', $rb_plus($class_variable_get($nesting[0], '@@counter', false), 1));
          return "$logical_op_recvr_tmp_" + ($class_variable_get($nesting[0], '@@counter', false));
        }, 0);
        $const_set($nesting[0], 'GET_SET', $lambda(function $LogicalOperatorAssignment$2(get_type, set_type){var self = $LogicalOperatorAssignment$2.$$s == null ? this : $LogicalOperatorAssignment$2.$$s;

          
          
          if (get_type == null) get_type = nil;;
          
          if (set_type == null) set_type = nil;;
          return $lambda(function $$3(lhs, rhs, root_type){var self = $$3.$$s == null ? this : $$3.$$s, get_node = nil, condition_node = nil, defined_node = nil;

            
            
            if (lhs == null) lhs = nil;;
            
            if (rhs == null) rhs = nil;;
            
            if (root_type == null) root_type = nil;;
            get_node = lhs.$updated(get_type);
            condition_node = self.$s(root_type, get_node, rhs);
            if (($truthy(["const", "cvar"]['$include?'](get_type)) && ($eqeq(root_type, "or")))) {
              
              defined_node = self.$s("defined?", get_node);
              condition_node = self.$s("if", defined_node, self.$s("begin", condition_node), rhs);
            };
            return lhs.$updated(set_type, [].concat($to_a(lhs)).concat([condition_node]));}, {$$arity: 3, $$s: self});}, {$$arity: 2, $$s: self}));
        $const_set($nesting[0], 'LocalVariableHandler', $$('GET_SET')['$[]']("lvar", "lvasgn"));
        $const_set($nesting[0], 'InstanceVariableHandler', $$('GET_SET')['$[]']("ivar", "ivasgn"));
        $const_set($nesting[0], 'ConstantHandler', $$('GET_SET')['$[]']("const", "casgn"));
        $const_set($nesting[0], 'GlobalVariableHandler', $$('GET_SET')['$[]']("gvar", "gvasgn"));
        $const_set($nesting[0], 'ClassVariableHandler', $$('GET_SET')['$[]']("cvar", "cvasgn"));
        (function($base, $super) {
          var self = $klass($base, $super, 'SendHandler');

          
          return $defs(self, '$call', function $$call(lhs, rhs, root_type) {
            var $a, self = this, recvr = nil, reader_method = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, writer_method = nil, call_reader = nil, call_writer = nil, get_or_set = nil;

            
            $a = [].concat($to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (reader_method = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            if (($truthy(recvr) && ($eqeq(recvr.$type(), "send")))) {
              
              recvr_tmp = self.$new_temp();
              cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
              recvr = self.$s("js_tmp", recvr_tmp);
            };
            writer_method = "" + (reader_method) + "=";
            call_reader = lhs.$updated("send", [recvr, reader_method].concat($to_a(args)));
            call_writer = lhs.$updated("send", [recvr, writer_method].concat($to_a(args)).concat([rhs]));
            get_or_set = self.$s(root_type, call_reader, call_writer);
            if ($truthy(cache_recvr)) {
              return self.$s("begin", cache_recvr, get_or_set)
            } else {
              return get_or_set
            };
          }, 3)
        })($nesting[0], self);
        (function($base, $super) {
          var self = $klass($base, $super, 'ConditionalSendHandler');

          
          return $defs(self, '$call', function $$call(lhs, rhs, root_type) {
            var $a, self = this, recvr = nil, meth = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, recvr_is_nil = nil, plain_send = nil, plain_or_asgn = nil;

            
            root_type = "" + (root_type) + "_asgn";
            $a = [].concat($to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            recvr_tmp = self.$new_temp();
            cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
            recvr = self.$s("js_tmp", recvr_tmp);
            recvr_is_nil = self.$s("send", recvr, "nil?");
            plain_send = lhs.$updated("send", [recvr, meth].concat($to_a(args)));
            plain_or_asgn = self.$s(root_type, plain_send, rhs);
            return self.$s("begin", cache_recvr, self.$s("if", recvr_is_nil, self.$s("nil"), plain_or_asgn));
          }, 3)
        })($nesting[0], self);
        $const_set($nesting[0], 'HANDLERS', $hash2(["lvasgn", "ivasgn", "casgn", "gvasgn", "cvasgn", "send", "csend"], {"lvasgn": $$('LocalVariableHandler'), "ivasgn": $$('InstanceVariableHandler'), "casgn": $$('ConstantHandler'), "gvasgn": $$('GlobalVariableHandler'), "cvasgn": $$('ClassVariableHandler'), "send": $$('SendHandler'), "csend": $$('ConditionalSendHandler')}).$freeze());
        
        $def(self, '$on_or_asgn', function $$on_or_asgn(node) {
          var $a, self = this, lhs = nil, rhs = nil, result = nil;

          
          $a = [].concat($to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          result = $send($$('HANDLERS'), 'fetch', [lhs.$type()], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

            return self.$error("cannot handle LHS type: " + (lhs.$type()))}, {$$arity: 0, $$s: self}).$call(lhs, rhs, "or");
          return self.$process(result);
        }, 1);
        
        $def(self, '$on_and_asgn', function $$on_and_asgn(node) {
          var $a, self = this, lhs = nil, rhs = nil, result = nil;

          
          $a = [].concat($to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          result = $send($$('HANDLERS'), 'fetch', [lhs.$type()], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s;

            return self.$error("cannot handle LHS type: " + (lhs.$type()))}, {$$arity: 0, $$s: self}).$call(lhs, rhs, "and");
          return self.$process(result);
        }, 1);
        $const_set($nesting[0], 'ASSIGNMENT_STRING_NODE', self.$s("str", "assignment"));
        return $def(self, '$on_defined?', function $LogicalOperatorAssignment_on_defined$ques$6(node) {
          var $a, $yield = $LogicalOperatorAssignment_on_defined$ques$6.$$p || nil, self = this, inner = nil, _ = nil;

          delete $LogicalOperatorAssignment_on_defined$ques$6.$$p;
          
          $a = [].concat($to_a(node)), (inner = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(["or_asgn", "and_asgn"]['$include?'](inner.$type()))) {
            return $$('ASSIGNMENT_STRING_NODE')
          } else {
            return $send2(self, $find_super(self, 'on_defined?', $LogicalOperatorAssignment_on_defined$ques$6, false, true), 'on_defined?', [node], null)
          };
        }, 1);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/binary_operator_assignment"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $defs = Opal.defs, $truthy = Opal.truthy, $class_variable_get = Opal.class_variable_get, $rb_plus = Opal.rb_plus, $const_set = Opal.const_set, $lambda = Opal.lambda, $to_a = Opal.to_a, $slice = Opal.slice, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $send = Opal.send, $def = Opal.def, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs('require,+,updated,[],==,type,new_temp,s,freeze,call,fetch,error,process');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BinaryOperatorAssignment');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        $defs(self, '$reset_tmp_counter!', function $BinaryOperatorAssignment_reset_tmp_counter$excl$1() {
          
          return $class_variable_set($nesting[0], '@@counter', 0)
        }, 0);
        $defs(self, '$new_temp', function $$new_temp() {
          var $a, $ret_or_1 = nil;

          
          $class_variable_set($nesting[0], '@@counter', ($truthy((($a = $nesting[0].$$cvars['@@counter'], $a != null) ? 'class variable' : nil)) ? (($truthy(($ret_or_1 = $class_variable_get($nesting[0], '@@counter', false))) ? ($ret_or_1) : (0))) : (0)));
          $class_variable_set($nesting[0], '@@counter', $rb_plus($class_variable_get($nesting[0], '@@counter', false), 1));
          return "$binary_op_recvr_tmp_" + ($class_variable_get($nesting[0], '@@counter', false));
        }, 0);
        $const_set($nesting[0], 'GET_SET', $lambda(function $BinaryOperatorAssignment$2(get_type, set_type){
          
          
          if (get_type == null) get_type = nil;;
          
          if (set_type == null) set_type = nil;;
          return $lambda(function $$3(node, lhs, operation, rhs){var get_node = nil, set_node = nil;

            
            
            if (node == null) node = nil;;
            
            if (lhs == null) lhs = nil;;
            
            if (operation == null) operation = nil;;
            
            if (rhs == null) rhs = nil;;
            get_node = lhs.$updated(get_type);
            set_node = node.$updated("send", [get_node, operation, rhs]);
            return lhs.$updated(set_type, [].concat($to_a(lhs)).concat([set_node]));}, 4);}, 2));
        $const_set($nesting[0], 'LocalVariableHandler', $$('GET_SET')['$[]']("lvar", "lvasgn"));
        $const_set($nesting[0], 'InstanceVariableHandler', $$('GET_SET')['$[]']("ivar", "ivasgn"));
        $const_set($nesting[0], 'ConstantHandler', $$('GET_SET')['$[]']("const", "casgn"));
        $const_set($nesting[0], 'GlobalVariableHandler', $$('GET_SET')['$[]']("gvar", "gvasgn"));
        $const_set($nesting[0], 'ClassVariableHandler', $$('GET_SET')['$[]']("cvar", "cvasgn"));
        (function($base, $super) {
          var self = $klass($base, $super, 'SendHandler');

          
          return $defs(self, '$call', function $$call(node, lhs, operation, rhs) {
            var $a, self = this, recvr = nil, reader_method = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, writer_method = nil, call_reader = nil, call_op = nil, call_writer = nil;

            
            $a = [].concat($to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (reader_method = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            if (($truthy(recvr) && ($eqeq(recvr.$type(), "send")))) {
              
              recvr_tmp = self.$new_temp();
              cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
              recvr = self.$s("js_tmp", recvr_tmp);
            };
            writer_method = "" + (reader_method) + "=";
            call_reader = lhs.$updated("send", [recvr, reader_method].concat($to_a(args)));
            call_op = node.$updated("send", [call_reader, operation, rhs]);
            call_writer = lhs.$updated("send", [recvr, writer_method].concat($to_a(args)).concat([call_op]));
            if ($truthy(cache_recvr)) {
              return node.$updated("begin", [cache_recvr, call_writer])
            } else {
              return call_writer
            };
          }, 4)
        })($nesting[0], self);
        (function($base, $super) {
          var self = $klass($base, $super, 'ConditionalSendHandler');

          
          return $defs(self, '$call', function $$call(node, lhs, operation, rhs) {
            var $a, self = this, recvr = nil, meth = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, recvr_is_nil = nil, plain_send = nil, plain_op_asgn = nil;

            
            $a = [].concat($to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            recvr_tmp = self.$new_temp();
            cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
            recvr = self.$s("js_tmp", recvr_tmp);
            recvr_is_nil = self.$s("send", recvr, "nil?");
            plain_send = lhs.$updated("send", [recvr, meth].concat($to_a(args)));
            plain_op_asgn = node.$updated("op_asgn", [plain_send, operation, rhs]);
            return self.$s("begin", cache_recvr, self.$s("if", recvr_is_nil, self.$s("nil"), plain_op_asgn));
          }, 4)
        })($nesting[0], self);
        $const_set($nesting[0], 'HANDLERS', $hash2(["lvasgn", "ivasgn", "casgn", "gvasgn", "cvasgn", "send", "csend"], {"lvasgn": $$('LocalVariableHandler'), "ivasgn": $$('InstanceVariableHandler'), "casgn": $$('ConstantHandler'), "gvasgn": $$('GlobalVariableHandler'), "cvasgn": $$('ClassVariableHandler'), "send": $$('SendHandler'), "csend": $$('ConditionalSendHandler')}).$freeze());
        
        $def(self, '$on_op_asgn', function $$on_op_asgn(node) {
          var $a, self = this, lhs = nil, op = nil, rhs = nil, result = nil;

          
          $a = [].concat($to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (op = ($a[1] == null ? nil : $a[1])), (rhs = ($a[2] == null ? nil : $a[2])), $a;
          result = $send($$('HANDLERS'), 'fetch', [lhs.$type()], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

            return self.$error("cannot handle LHS type: " + (lhs.$type()))}, {$$arity: 0, $$s: self}).$call(node, lhs, op, rhs);
          return self.$process(result);
        }, 1);
        $const_set($nesting[0], 'ASSIGNMENT_STRING_NODE', self.$s("str", "assignment"));
        return $def(self, '$on_defined?', function $BinaryOperatorAssignment_on_defined$ques$5(node) {
          var $a, $yield = $BinaryOperatorAssignment_on_defined$ques$5.$$p || nil, self = this, inner = nil, _ = nil;

          delete $BinaryOperatorAssignment_on_defined$ques$5.$$p;
          
          $a = [].concat($to_a(node)), (inner = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($eqeq(inner.$type(), "op_asgn")) {
            return $$('ASSIGNMENT_STRING_NODE')
          } else {
            return $send2(self, $find_super(self, 'on_defined?', $BinaryOperatorAssignment_on_defined$ques$5, false, true), 'on_defined?', [node], null)
          };
        }, 1);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/hashes/key_duplicates_rewriter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $Opal = Opal.Opal;

  Opal.add_stubs('require,new,include?,type,<<,==,process_regular_node,updated,inspect,warn');
  
  self.$require("opal/rewriters/base");
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Hashes');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'KeyDuplicatesRewriter');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

          $proto.keys = nil;
          
          
          $def(self, '$initialize', function $$initialize() {
            var self = this;

            return (self.keys = $$('UniqKeysSet').$new())
          }, 0);
          
          $def(self, '$on_hash', function $$on_hash(node) {
            var $a, $yield = $$on_hash.$$p || nil, self = this, previous_keys = nil;

            delete $$on_hash.$$p;
            return (function() { try {
            
            $a = [self.keys, $$('UniqKeysSet').$new()], (previous_keys = $a[0]), (self.keys = $a[1]), $a;
            return $send2(self, $find_super(self, 'on_hash', $$on_hash, false, true), 'on_hash', [node], null);
            } finally {
              (self.keys = previous_keys)
            }; })()
          }, 1);
          
          $def(self, '$on_pair', function $$on_pair(node) {
            var $a, $yield = $$on_pair.$$p || nil, self = this, key = nil, _value = nil;

            delete $$on_pair.$$p;
            
            $a = [].concat($to_a(node)), (key = ($a[0] == null ? nil : $a[0])), (_value = ($a[1] == null ? nil : $a[1])), $a;
            if ($truthy(["str", "sym"]['$include?'](key.$type()))) {
              self.keys['$<<'](key)
            };
            return $send2(self, $find_super(self, 'on_pair', $$on_pair, false, true), 'on_pair', [node], null);
          }, 1);
          
          $def(self, '$on_kwsplat', function $$on_kwsplat(node) {
            var $a, self = this, hash = nil, _ = nil;

            
            $a = [].concat($to_a(node)), (hash = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            if ($eqeq(hash.$type(), "hash")) {
              hash = self.$process_regular_node(hash)
            };
            return node.$updated(nil, [hash]);
          }, 1);
          return (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'UniqKeysSet');

            var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

            $proto.set = nil;
            
            
            $def(self, '$initialize', function $$initialize() {
              var self = this;

              return (self.set = $$('Set').$new())
            }, 0);
            return $def(self, '$<<', function $UniqKeysSet_$lt$lt$1(element) {
              var $a, self = this, key = nil, _ = nil;

              if ($truthy(self.set['$include?'](element))) {
                
                $a = [].concat($to_a(element)), (key = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
                key = ($eqeq(element.$type(), "str") ? (key.$inspect()) : (":" + (key)));
                return $$('Kernel').$warn("warning: key " + (key) + " is duplicated and overwritten");
              } else {
                return self.set['$<<'](element)
              }
            }, 1);
          })($nesting[0], null, $nesting);
        })($nesting[0], $$$($$$($Opal, 'Rewriters'), 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/dump_args"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $hash2 = Opal.hash2, $def = Opal.def;

  Opal.add_stubs('require,updated');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'DumpArgs');

        
        
        
        $def(self, '$on_def', function $$on_def(node) {
          var $a, $yield = $$on_def.$$p || nil, self = this, _mid = nil, args = nil, _body = nil;

          delete $$on_def.$$p;
          
          node = $send2(self, $find_super(self, 'on_def', $$on_def, false, true), 'on_def', [node], null);
          $a = [].concat($to_a(node)), (_mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (_body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, 1);
        
        $def(self, '$on_defs', function $$on_defs(node) {
          var $a, $yield = $$on_defs.$$p || nil, self = this, _recv = nil, _mid = nil, args = nil, _body = nil;

          delete $$on_defs.$$p;
          
          node = $send2(self, $find_super(self, 'on_defs', $$on_defs, false, true), 'on_defs', [node], null);
          $a = [].concat($to_a(node)), (_recv = ($a[0] == null ? nil : $a[0])), (_mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (_body = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, 1);
        return $def(self, '$on_iter', function $$on_iter(node) {
          var $a, $yield = $$on_iter.$$p || nil, self = this, args = nil, _body = nil;

          delete $$on_iter.$$p;
          
          node = $send2(self, $find_super(self, 'on_iter', $$on_iter, false, true), 'on_iter', [node], null);
          $a = [].concat($to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (_body = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, 1);
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/mlhs_args"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $truthy = Opal.truthy, $def = Opal.def, $rb_plus = Opal.rb_plus, $send = Opal.send, $eqeq = Opal.eqeq, $hash2 = Opal.hash2;

  Opal.add_stubs('require,new,updated,rewritten,initialization,s,prepend_to_body,attr_reader,split!,+,each,children,==,type,new_mlhs_tmp,process,<<,length,[],empty?');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MlhsArgs');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        
        $def(self, '$on_def', function $$on_def(node) {
          var $a, $yield = $$on_def.$$p || nil, self = this, mid = nil, args = nil, body = nil, arguments$ = nil, $ret_or_1 = nil;

          delete $$on_def.$$p;
          
          node = $send2(self, $find_super(self, 'on_def', $$on_def, false, true), 'on_def', [node], null);
          $a = [].concat($to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          arguments$ = $$('Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
            body = self.$prepend_to_body(body, arguments$.$initialization());
          };
          return node.$updated(nil, [mid, args, body]);
        }, 1);
        
        $def(self, '$on_defs', function $$on_defs(node) {
          var $a, $yield = $$on_defs.$$p || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, arguments$ = nil, $ret_or_1 = nil;

          delete $$on_defs.$$p;
          
          node = $send2(self, $find_super(self, 'on_defs', $$on_defs, false, true), 'on_defs', [node], null);
          $a = [].concat($to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          arguments$ = $$('Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
            body = self.$prepend_to_body(body, arguments$.$initialization());
          };
          return node.$updated(nil, [recv, mid, args, body]);
        }, 1);
        
        $def(self, '$on_iter', function $$on_iter(node) {
          var $a, $yield = $$on_iter.$$p || nil, self = this, args = nil, body = nil, arguments$ = nil, $ret_or_1 = nil;

          delete $$on_iter.$$p;
          
          node = $send2(self, $find_super(self, 'on_iter', $$on_iter, false, true), 'on_iter', [node], null);
          $a = [].concat($to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          arguments$ = $$('Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
            body = self.$prepend_to_body(body, arguments$.$initialization());
          };
          return node.$updated(nil, [args, body]);
        }, 1);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Arguments');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

          $proto.counter = $proto.args = $proto.initialization = nil;
          
          self.$attr_reader("rewritten", "initialization");
          
          $def(self, '$initialize', function $$initialize(args) {
            var self = this;

            
            self.args = args;
            self.rewritten = [];
            self.initialization = [];
            self.rewriter = $$('MlhsRewriter').$new();
            return self['$split!']();
          }, 1);
          
          $def(self, '$reset_tmp_counter!', function $Arguments_reset_tmp_counter$excl$1() {
            var self = this;

            return (self.counter = 0)
          }, 0);
          
          $def(self, '$new_mlhs_tmp', function $$new_mlhs_tmp() {
            var self = this, $ret_or_1 = nil;

            
            self.counter = ($truthy(($ret_or_1 = self.counter)) ? ($ret_or_1) : (0));
            self.counter = $rb_plus(self.counter, 1);
            return "$mlhs_tmp" + (self.counter);
          }, 0);
          return $def(self, '$split!', function $Arguments_split$excl$2() {
            var self = this;

            
            $send(self.args.$children(), 'each', [], function $$3(arg){var self = $$3.$$s == null ? this : $$3.$$s, var_name = nil, rhs = nil, mlhs = nil;
              if (self.rewriter == null) self.rewriter = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.rewritten == null) self.rewritten = nil;

              
              
              if (arg == null) arg = nil;;
              if ($eqeq(arg.$type(), "mlhs")) {
                
                var_name = self.$new_mlhs_tmp();
                rhs = self.$s("lvar", var_name);
                mlhs = self.rewriter.$process(arg);
                self.initialization['$<<'](self.$s("masgn", mlhs, rhs));
                return self.rewritten['$<<'](self.$s("arg", var_name).$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": var_name})})));
              } else {
                return self.rewritten['$<<'](arg)
              };}, {$$arity: 1, $$s: self});
            if ($eqeq(self.initialization.$length(), 1)) {
              return (self.initialization = self.initialization['$[]'](0))
            } else if ($truthy(self.initialization['$empty?']())) {
              return (self.initialization = nil)
            } else {
              return (self.initialization = $send(self, 's', ["begin"].concat($to_a(self.initialization))))
            };
          }, 0);
        })($nesting[0], $$('Base'), $nesting);
        return (function($base, $super) {
          var self = $klass($base, $super, 'MlhsRewriter');

          
          
          
          $def(self, '$on_arg', function $$on_arg(node) {
            
            return node.$updated("lvasgn")
          }, 1);
          return $def(self, '$on_restarg', function $$on_restarg(node) {
            var self = this, name = nil;

            
            name = node.$children()['$[]'](0);
            if ($truthy(name)) {
              return self.$s("splat", node.$updated("lvasgn"))
            } else {
              return self.$s("splat")
            };
          }, 1);
        })($nesting[0], $$('Base'));
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/arguments"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $def = Opal.def;

  Opal.add_stubs('attr_reader,each,===,type,<<,any?,raise,!,nil?,has_any_kwargs?,can_inline_kwargs?,empty?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Arguments');

        var $proto = self.$$prototype;

        $proto.restarg = $proto.postargs = $proto.kwargs = $proto.kwoptargs = $proto.kwrestarg = $proto.optargs = nil;
        
        self.$attr_reader("args", "optargs", "restarg", "postargs", "kwargs", "kwoptargs", "kwrestarg", "kwnilarg", "shadowargs", "blockarg");
        
        $def(self, '$initialize', function $$initialize(args) {
          var self = this;

          
          self.args = [];
          self.optargs = [];
          self.restarg = nil;
          self.postargs = [];
          self.kwargs = [];
          self.kwoptargs = [];
          self.kwrestarg = nil;
          self.kwnilarg = false;
          self.shadowargs = [];
          self.blockarg = nil;
          return $send(args, 'each', [], function $$1(arg){var self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil;
            if (self.optargs == null) self.optargs = nil;
            if (self.restarg == null) self.restarg = nil;
            if (self.postargs == null) self.postargs = nil;
            if (self.args == null) self.args = nil;
            if (self.kwargs == null) self.kwargs = nil;
            if (self.kwoptargs == null) self.kwoptargs = nil;
            if (self.shadowargs == null) self.shadowargs = nil;

            
            
            if (arg == null) arg = nil;;
            if (($eqeqeq("arg", ($ret_or_1 = arg.$type())) || ($eqeqeq("mlhs", $ret_or_1)))) {
              return (($truthy(self.restarg) || ($truthy(self.optargs['$any?']()))) ? (self.postargs) : (self.args))['$<<'](arg)
            } else if ($eqeqeq("optarg", $ret_or_1)) {
              return self.optargs['$<<'](arg)
            } else if ($eqeqeq("restarg", $ret_or_1)) {
              return (self.restarg = arg)
            } else if ($eqeqeq("kwarg", $ret_or_1)) {
              return self.kwargs['$<<'](arg)
            } else if ($eqeqeq("kwoptarg", $ret_or_1)) {
              return self.kwoptargs['$<<'](arg)
            } else if ($eqeqeq("kwnilarg", $ret_or_1)) {
              return (self.kwnilarg = true)
            } else if ($eqeqeq("kwrestarg", $ret_or_1)) {
              return (self.kwrestarg = arg)
            } else if ($eqeqeq("shadowarg", $ret_or_1)) {
              return self.shadowargs['$<<'](arg)
            } else if ($eqeqeq("blockarg", $ret_or_1)) {
              return (self.blockarg = arg)
            } else {
              return self.$raise("Unsupported arg type " + (arg.$type()))
            };}, {$$arity: 1, $$s: self});
        }, 1);
        
        $def(self, '$has_post_args?', function $Arguments_has_post_args$ques$2() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.restarg['$nil?']()['$!']())) ? ($ret_or_2) : (self.postargs['$any?']()))))) {
            return $ret_or_1
          } else {
            
            if ($truthy(($ret_or_2 = self['$has_any_kwargs?']()))) {
              return self['$can_inline_kwargs?']()['$!']()
            } else {
              return $ret_or_2
            };
          }
        }, 0);
        
        $def(self, '$has_any_kwargs?', function $Arguments_has_any_kwargs$ques$3() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.kwargs['$any?']())) ? ($ret_or_2) : (self.kwoptargs['$any?']()))))) {
            return $ret_or_1
          } else {
            return self.kwrestarg['$nil?']()['$!']()
          }
        }, 0);
        return $def(self, '$can_inline_kwargs?', function $Arguments_can_inline_kwargs$ques$4() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.optargs['$empty?']())) ? (self.restarg['$nil?']()) : ($ret_or_2))))) {
            return self.postargs['$empty?']()
          } else {
            return $ret_or_1
          }
        }, 0);
      })($nesting[0], null)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["opal/rewriters/inline_args"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $truthy = Opal.truthy, $hash2 = Opal.hash2, $def = Opal.def, $const_set = Opal.const_set, $send = Opal.send, $eqeq = Opal.eqeq, $Opal = Opal.Opal;

  Opal.add_stubs('require,s,new,updated,inline,prepend_to_body,initialization,attr_reader,freeze,children,each,send,any?,blockarg,<<,shadowargs,args,==,[],has_post_args?,length,has_any_kwargs?,can_inline_kwargs?,kwargs,kwoptargs,kwrestarg,postargs,optargs,args_to_keep,restarg');
  
  self.$require("opal/rewriters/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InlineArgs');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        
        $def(self, '$on_def', function $$on_def(node) {
          var $a, $yield = $$on_def.$$p || nil, self = this, mid = nil, args = nil, body = nil, $ret_or_1 = nil, initializer = nil, inline_args = nil;

          delete $$on_def.$$p;
          
          node = $send2(self, $find_super(self, 'on_def', $$on_def, false, true), 'on_def', [node], null);
          $a = [].concat($to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
          initializer = $$('Initializer').$new(args, $hash2(["type"], {"type": "def"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [mid, inline_args, body]);
        }, 1);
        
        $def(self, '$on_defs', function $$on_defs(node) {
          var $a, $yield = $$on_defs.$$p || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, $ret_or_1 = nil, initializer = nil, inline_args = nil;

          delete $$on_defs.$$p;
          
          node = $send2(self, $find_super(self, 'on_defs', $$on_defs, false, true), 'on_defs', [node], null);
          $a = [].concat($to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
          initializer = $$('Initializer').$new(args, $hash2(["type"], {"type": "defs"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [recv, mid, inline_args, body]);
        }, 1);
        
        $def(self, '$on_iter', function $$on_iter(node) {
          var $a, $yield = $$on_iter.$$p || nil, self = this, args = nil, body = nil, $ret_or_1 = nil, initializer = nil, inline_args = nil;

          delete $$on_iter.$$p;
          
          node = $send2(self, $find_super(self, 'on_iter', $$on_iter, false, true), 'on_iter', [node], null);
          $a = [].concat($to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
          initializer = $$('Initializer').$new(args, $hash2(["type"], {"type": "iter"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [inline_args, body]);
        }, 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Initializer');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

          $proto.initialization = $proto.args = $proto.inline = nil;
          
          self.$attr_reader("inline", "initialization");
          $const_set($nesting[0], 'STEPS', ["extract_blockarg", "initialize_shadowargs", "extract_args", "prepare_post_args", "prepare_kwargs", "extract_optargs", "extract_restarg", "extract_post_args", "extract_kwargs", "extract_kwoptargs", "extract_kwrestarg"].$freeze());
          
          $def(self, '$initialize', function $$initialize(args, $kwargs) {
            var type, self = this;

            
            
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else if (!$kwargs.$$is_hash) {
              throw Opal.ArgumentError.$new('expected kwargs');
            };
            
            if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'type')) {
              throw Opal.ArgumentError.$new('missing keyword: type');
            }
            type = $kwargs.$$smap["type"];;
            self.args = $$('Arguments').$new(args.$children());
            self.inline = [];
            self.initialization = [];
            self.type = type;
            self.underscore_found = false;
            $send($$('STEPS'), 'each', [], function $$1(step){var self = $$1.$$s == null ? this : $$1.$$s;

              
              
              if (step == null) step = nil;;
              return self.$send(step);}, {$$arity: 1, $$s: self});
            if ($truthy(self.initialization['$any?']())) {
              return (self.initialization = $send(self, 's', ["begin"].concat($to_a(self.initialization))))
            } else {
              return (self.initialization = nil)
            };
          }, 2);
          
          $def(self, '$extract_blockarg', function $$extract_blockarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$blockarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_blockarg"))
            } else {
              return nil
            }
          }, 0);
          
          $def(self, '$initialize_shadowargs', function $$initialize_shadowargs() {
            var self = this;

            return $send(self.args.$shadowargs(), 'each', [], function $$2(arg){var self = $$2.$$s == null ? this : $$2.$$s;
              if (self.initialization == null) self.initialization = nil;

              
              
              if (arg == null) arg = nil;;
              return self.initialization['$<<'](arg.$updated("initialize_shadowarg"));}, {$$arity: 1, $$s: self})
          }, 0);
          
          $def(self, '$extract_args', function $$extract_args() {
            var self = this;

            return $send(self.args.$args(), 'each', [], function $$3(arg){var self = $$3.$$s == null ? this : $$3.$$s;
              if (self.type == null) self.type = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.underscore_found == null) self.underscore_found = nil;
              if (self.inline == null) self.inline = nil;

              
              
              if (arg == null) arg = nil;;
              if ($eqeq(self.type, "iter")) {
                
                self.initialization['$<<'](arg.$updated("initialize_iter_arg"));
                if ($eqeq(arg.$children()['$[]'](0), "_")) {
                  
                  if ($truthy(self.underscore_found)) {
                    arg = self.$s("fake_arg")
                  };
                  self.underscore_found = true;
                };
              };
              return self.inline['$<<'](arg);}, {$$arity: 1, $$s: self})
          }, 0);
          
          $def(self, '$prepare_post_args', function $$prepare_post_args() {
            var self = this;

            if ($truthy(self.args['$has_post_args?']())) {
              return self.initialization['$<<'](self.$s("prepare_post_args", self.args.$args().$length()))
            } else {
              return nil
            }
          }, 0);
          
          $def(self, '$prepare_kwargs', function $$prepare_kwargs() {
            var self = this;

            
            if (!$truthy(self.args['$has_any_kwargs?']())) {
              return nil
            };
            if ($truthy(self.args['$can_inline_kwargs?']())) {
              self.inline['$<<'](self.$s("arg", "$kwargs"))
            } else {
              
              self.initialization['$<<'](self.$s("extract_kwargs"));
              self.inline['$<<'](self.$s("fake_arg"));
            };
            return self.initialization['$<<'](self.$s("ensure_kwargs_are_kwargs"));
          }, 0);
          
          $def(self, '$extract_kwargs', function $$extract_kwargs() {
            var self = this;

            return $send(self.args.$kwargs(), 'each', [], function $$4(arg){var self = $$4.$$s == null ? this : $$4.$$s;
              if (self.initialization == null) self.initialization = nil;

              
              
              if (arg == null) arg = nil;;
              return self.initialization['$<<'](arg.$updated("extract_kwarg"));}, {$$arity: 1, $$s: self})
          }, 0);
          
          $def(self, '$extract_kwoptargs', function $$extract_kwoptargs() {
            var self = this;

            return $send(self.args.$kwoptargs(), 'each', [], function $$5(arg){var self = $$5.$$s == null ? this : $$5.$$s;
              if (self.initialization == null) self.initialization = nil;

              
              
              if (arg == null) arg = nil;;
              return self.initialization['$<<'](arg.$updated("extract_kwoptarg"));}, {$$arity: 1, $$s: self})
          }, 0);
          
          $def(self, '$extract_kwrestarg', function $$extract_kwrestarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$kwrestarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_kwrestarg"))
            } else {
              return nil
            }
          }, 0);
          
          $def(self, '$extract_post_args', function $$extract_post_args() {
            var self = this;

            return $send(self.args.$postargs(), 'each', [], function $$6(arg){var self = $$6.$$s == null ? this : $$6.$$s;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

              
              
              if (arg == null) arg = nil;;
              self.initialization['$<<'](arg.$updated("extract_post_arg"));
              return self.inline['$<<'](self.$s("fake_arg"));}, {$$arity: 1, $$s: self})
          }, 0);
          
          $def(self, '$extract_optargs', function $$extract_optargs() {
            var self = this, has_post_args = nil;

            
            has_post_args = self.args['$has_post_args?']();
            return $send(self.args.$optargs(), 'each', [], function $$7(arg){var $a, self = $$7.$$s == null ? this : $$7.$$s, arg_name = nil, default_value = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

              
              
              if (arg == null) arg = nil;;
              if ($truthy(has_post_args)) {
                
                $a = [].concat($to_a(arg)), (arg_name = ($a[0] == null ? nil : $a[0])), (default_value = ($a[1] == null ? nil : $a[1])), $a;
                self.initialization['$<<'](arg.$updated("extract_post_optarg", [arg_name, default_value, self.$args_to_keep()]));
                return self.inline['$<<'](self.$s("fake_arg"));
              } else {
                
                self.inline['$<<'](arg.$updated("arg"));
                return self.initialization['$<<'](arg.$updated("extract_optarg"));
              };}, {$$arity: 1, $$s: self});
          }, 0);
          
          $def(self, '$extract_restarg', function $$extract_restarg() {
            var self = this, arg = nil, arg_name = nil;

            if ($truthy((arg = self.args.$restarg()))) {
              
              arg_name = arg.$children()['$[]'](0);
              self.initialization['$<<'](arg.$updated("extract_restarg", [arg_name, self.$args_to_keep()]));
              return self.inline['$<<'](self.$s("fake_arg"));
            } else {
              return nil
            }
          }, 0);
          return $def(self, '$args_to_keep', function $$args_to_keep() {
            var self = this;

            return self.args.$postargs().$length()
          }, 0);
        })($nesting[0], $$$($$$($Opal, 'Rewriters'), 'Base'), $nesting);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/numblocks"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $to_ary = Opal.to_ary, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def;

  Opal.add_stubs('require,children,s,gen_args,map');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Numblocks');

        
        
        
        $def(self, '$on_numblock', function $$on_numblock(node) {
          var $a, $b, self = this, left = nil, arg_count = nil, right = nil;

          
          $b = node.$children(), $a = $to_ary($b), (left = ($a[0] == null ? nil : $a[0])), (arg_count = ($a[1] == null ? nil : $a[1])), (right = ($a[2] == null ? nil : $a[2])), $b;
          return self.$s("block", left, $send(self, 's', ["args"].concat($to_a(self.$gen_args(arg_count)))), right);
        }, 1);
        return $def(self, '$gen_args', function $$gen_args(arg_count) {
          var self = this;

          return $send(Opal.Range.$new(1, arg_count, false), 'map', [], function $$1(i){var self = $$1.$$s == null ? this : $$1.$$s;

            
            
            if (i == null) i = nil;;
            return self.$s("arg", "_" + (i));}, {$$arity: 1, $$s: self})
        }, 1);
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/returnable_logic"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $def = Opal.def, $rb_minus = Opal.rb_minus, $to_a = Opal.to_a, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super, $slice = Opal.slice, $eqeq = Opal.eqeq;

  Opal.add_stubs('require,+,-,children,[]=,meta,s,next_tmp,build_if_from_when,free_tmp,[],process,updated,==,count,first,delete,private,build_rule_from_parts,empty?,type');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'ReturnableLogic');

        var $proto = self.$$prototype;

        $proto.counter = nil;
        
        
        $def(self, '$next_tmp', function $$next_tmp() {
          var self = this, $ret_or_1 = nil;

          
          self.counter = ($truthy(($ret_or_1 = self.counter)) ? ($ret_or_1) : (0));
          self.counter = $rb_plus(self.counter, 1);
          return "$ret_or_" + (self.counter);
        }, 0);
        
        $def(self, '$free_tmp', function $$free_tmp() {
          var self = this;

          return (self.counter = $rb_minus(self.counter, 1))
        }, 0);
        
        $def(self, '$reset_tmp_counter!', function $ReturnableLogic_reset_tmp_counter$excl$1() {
          var self = this;

          return (self.counter = nil)
        }, 0);
        
        $def(self, '$on_if', function $$on_if(node) {
          var $a, $yield = $$on_if.$$p || nil, self = this, test = nil, $writer = nil;

          delete $$on_if.$$p;
          
          $a = [].concat($to_a(node.$children())), (test = ($a[0] == null ? nil : $a[0])), $a;
          if ($truthy(test)) {
            
            $writer = ["if_test", true];
            $send(test.$meta(), '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return $send2(self, $find_super(self, 'on_if', $$on_if, false, true), 'on_if', [node], $yield);
        }, 1);
        
        $def(self, '$on_case', function $$on_case(node) {
          var $a, $b, self = this, lhs = nil, whens = nil, els = nil, $ret_or_1 = nil, lhs_tmp = nil, out = nil;

          
          $a = [].concat($to_a(node.$children())), (lhs = ($a[0] == null ? nil : $a[0])), $b = $a.length - 1, $b = ($b < 1) ? 1 : $b, (whens = $slice.call($a, 1, $b)), (els = ($a[$b] == null ? nil : $a[$b])), $a;
          els = ($truthy(($ret_or_1 = els)) ? ($ret_or_1) : (self.$s("nil")));
          if ($truthy(lhs)) {
            lhs_tmp = self.$next_tmp()
          };
          out = self.$build_if_from_when(node, lhs, lhs_tmp, whens, els);
          if ($truthy(lhs)) {
            self.$free_tmp()
          };
          return out;
        }, 1);
        
        $def(self, '$on_or', function $$on_or(node) {
          var $a, self = this, lhs = nil, rhs = nil, $writer = nil, out = nil, lhs_tmp = nil;

          
          $a = [].concat($to_a(node.$children())), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(node.$meta()['$[]']("if_test"))) {
            
            
            $writer = ["if_test", (($writer = ["if_test", true]), $send(rhs.$meta(), '[]=', $to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
            $send(lhs.$meta(), '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            out = self.$process(node.$updated("if", [lhs, self.$s("true"), rhs]));
          } else {
            
            lhs_tmp = self.$next_tmp();
            out = self.$process(node.$updated("if", [self.$s("lvasgn", lhs_tmp, lhs), self.$s("js_tmp", lhs_tmp), rhs]));
            self.$free_tmp();
          };
          return out;
        }, 1);
        
        $def(self, '$on_and', function $$on_and(node) {
          var $a, self = this, lhs = nil, rhs = nil, $writer = nil, out = nil, lhs_tmp = nil;

          
          $a = [].concat($to_a(node.$children())), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(node.$meta()['$[]']("if_test"))) {
            
            
            $writer = ["if_test", (($writer = ["if_test", true]), $send(rhs.$meta(), '[]=', $to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
            $send(lhs.$meta(), '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            out = self.$process(node.$updated("if", [lhs, rhs, self.$s("false")]));
          } else {
            
            lhs_tmp = self.$next_tmp();
            out = self.$process(node.$updated("if", [self.$s("lvasgn", lhs_tmp, lhs), rhs, self.$s("js_tmp", lhs_tmp)]));
            self.$free_tmp();
          };
          return out;
        }, 1);
        
        $def(self, '$on_begin', function $$on_begin(node) {
          var $yield = $$on_begin.$$p || nil, self = this, $writer = nil;

          delete $$on_begin.$$p;
          
          if (($truthy(node.$meta()['$[]']("if_test")) && ($eqeq(node.$children().$count(), 1)))) {
            
            $writer = ["if_test", true];
            $send(node.$children().$first().$meta(), '[]=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          node.$meta().$delete("if_test");
          return $send2(self, $find_super(self, 'on_begin', $$on_begin, false, true), 'on_begin', [node], $yield);
        }, 1);
        self.$private();
        
        $def(self, '$build_if_from_when', function $$build_if_from_when(node, lhs, lhs_tmp, whens, els) {
          var $a, $b, self = this, first_when = nil, next_whens = nil, parts = nil, expr = nil, rule = nil;

          
          $a = [].concat($to_a(whens)), (first_when = ($a[0] == null ? nil : $a[0])), (next_whens = $slice.call($a, 1)), $a;
          $a = [].concat($to_a(first_when.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (parts = $slice.call($a, 0, $b)), (expr = ($a[$b] == null ? nil : $a[$b])), $a;
          rule = self.$build_rule_from_parts(node, lhs, lhs_tmp, parts);
          return first_when.$updated("if", [rule, self.$process(expr), ($truthy(next_whens['$empty?']()) ? (self.$process(els)) : (self.$build_if_from_when(nil, nil, lhs_tmp, next_whens, els)))]);
        }, 5);
        return $def(self, '$build_rule_from_parts', function $$build_rule_from_parts(node, lhs, lhs_tmp, parts) {
          var $a, self = this, first_part = nil, next_parts = nil, subrule = nil, splat_on = nil, iter_val = nil, block = nil;

          
          lhs = (($truthy(node) && ($truthy(lhs_tmp))) ? (node.$updated("lvasgn", [lhs_tmp, self.$process(lhs)])) : (self.$s("js_tmp", lhs_tmp)));
          $a = [].concat($to_a(parts)), (first_part = ($a[0] == null ? nil : $a[0])), (next_parts = $slice.call($a, 1)), $a;
          subrule = ($eqeq(first_part.$type(), "splat") ? (((splat_on = first_part.$children().$first()), (iter_val = self.$next_tmp()), (block = self.$s("send", self.$process(splat_on), "any?", self.$s("iter", self.$s("args", self.$s("arg", iter_val)), self.$build_rule_from_parts(nil, nil, lhs_tmp, [self.$s("lvar", iter_val)])))), (($truthy(node) && ($truthy(lhs_tmp))) ? (self.$s("begin", lhs, block)) : (block)))) : ($truthy(lhs_tmp) ? (self.$s("send", self.$process(first_part), "===", lhs)) : (self.$process(first_part))));
          if ($truthy(next_parts['$empty?']())) {
            return subrule
          } else {
            return self.$s("if", subrule, self.$s("true"), self.$build_rule_from_parts(nil, nil, lhs_tmp, next_parts))
          };
        }, 4);
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/forward_args"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $range = Opal.range, $to_a = Opal.to_a, $send2 = Opal.send2, $find_super = Opal.find_super, $neqeq = Opal.neqeq;

  Opal.add_stubs('require,process,s,==,type,last,children,[],updated,!=,class');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ForwardArgs');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        
        $def(self, '$on_forward_args', function $$on_forward_args(_node) {
          var self = this;

          return self.$process(self.$s("args", self.$s("forward_arg", "$")))
        }, 1);
        
        $def(self, '$on_args', function $$on_args(node) {
          var $yield = $$on_args.$$p || nil, self = this, prev_children = nil;

          delete $$on_args.$$p;
          if (($truthy(node.$children().$last()) && ($eqeq(node.$children().$last().$type(), "forward_arg")))) {
            
            prev_children = node.$children()['$[]']($range(0, -2, false));
            return node.$updated(nil, [].concat($to_a(prev_children)).concat([self.$s("restarg", "$fwd_rest"), self.$s("blockarg", "$fwd_block")]));
          } else {
            return $send2(self, $find_super(self, 'on_args', $$on_args, false, true), 'on_args', [node], $yield)
          }
        }, 1);
        return $def(self, '$on_send', function $$on_send(node) {
          var $yield = $$on_send.$$p || nil, self = this, prev_children = nil;

          delete $$on_send.$$p;
          if ((($truthy(node.$children().$last()) && ($neqeq(node.$children().$last().$class(), $$('Symbol')))) && ($eqeq(node.$children().$last().$type(), "forwarded_args")))) {
            
            prev_children = node.$children()['$[]']($range(0, -2, false));
            return node.$updated(nil, [].concat($to_a(prev_children)).concat([self.$s("splat", self.$s("lvar", "$fwd_rest")), self.$s("block_pass", self.$s("lvar", "$fwd_block"))]));
          } else {
            return $send2(self, $find_super(self, 'on_send', $$on_send, false, true), 'on_send', [node], $yield)
          }
        }, 1);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('require,<<,list,delete,use,disabled?,class,each,new,process');
  
  self.$require("opal/rewriters/opal_engine_check");
  self.$require("opal/rewriters/for_rewriter");
  self.$require("opal/rewriters/explicit_writer_return");
  self.$require("opal/rewriters/js_reserved_words");
  self.$require("opal/rewriters/block_to_iter");
  self.$require("opal/rewriters/dot_js_syntax");
  self.$require("opal/rewriters/pattern_matching");
  self.$require("opal/rewriters/logical_operator_assignment");
  self.$require("opal/rewriters/binary_operator_assignment");
  self.$require("opal/rewriters/hashes/key_duplicates_rewriter");
  self.$require("opal/rewriters/dump_args");
  self.$require("opal/rewriters/mlhs_args");
  self.$require("opal/rewriters/inline_args");
  self.$require("opal/rewriters/numblocks");
  self.$require("opal/rewriters/returnable_logic");
  self.$require("opal/rewriters/forward_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.sexp = nil;
      
      (function(self, $parent_nesting) {
        
        
        
        $def(self, '$list', function $$list() {
          var self = this, $ret_or_1 = nil;
          if (self.list == null) self.list = nil;

          return (self.list = ($truthy(($ret_or_1 = self.list)) ? ($ret_or_1) : ([])))
        }, 0);
        
        $def(self, '$use', function $$use(rewriter) {
          var self = this;

          return self.$list()['$<<'](rewriter)
        }, 1);
        
        $def(self, '$delete', function $delete$1(rewriter) {
          var self = this;

          return self.$list().$delete(rewriter)
        }, 1);
        
        $def(self, '$disable', function $$disable() {
          var $yield = $$disable.$$p || nil, self = this;

          delete $$disable.$$p;
          return (function() { try {
          
          self.disabled = true;
          return Opal.yieldX($yield, []);;
          } finally {
            (self.disabled = false)
          }; })()
        }, 0);
        return $def(self, '$disabled?', function $disabled$ques$2() {
          var $a, self = this;
          if (self.disabled == null) self.disabled = nil;

          if ($truthy((($a = self['disabled'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.disabled
          } else {
            return nil
          }
        }, 0);
      })(Opal.get_singleton_class(self), $nesting);
      self.$use($$$($$('Rewriters'), 'OpalEngineCheck'));
      self.$use($$$($$('Rewriters'), 'ForRewriter'));
      self.$use($$$($$('Rewriters'), 'Numblocks'));
      self.$use($$$($$('Rewriters'), 'ForwardArgs'));
      self.$use($$$($$('Rewriters'), 'BlockToIter'));
      self.$use($$$($$('Rewriters'), 'DotJsSyntax'));
      self.$use($$$($$('Rewriters'), 'PatternMatching'));
      self.$use($$$($$('Rewriters'), 'JsReservedWords'));
      self.$use($$$($$('Rewriters'), 'LogicalOperatorAssignment'));
      self.$use($$$($$('Rewriters'), 'BinaryOperatorAssignment'));
      self.$use($$$($$('Rewriters'), 'ExplicitWriterReturn'));
      self.$use($$$($$$($$('Rewriters'), 'Hashes'), 'KeyDuplicatesRewriter'));
      self.$use($$$($$('Rewriters'), 'ReturnableLogic'));
      self.$use($$$($$('Rewriters'), 'DumpArgs'));
      self.$use($$$($$('Rewriters'), 'MlhsArgs'));
      self.$use($$$($$('Rewriters'), 'InlineArgs'));
      
      $def(self, '$initialize', function $$initialize(sexp) {
        var self = this;

        return (self.sexp = sexp)
      }, 1);
      return $def(self, '$process', function $$process() {
        var self = this;

        
        if ($truthy(self.$class()['$disabled?']())) {
          return self.sexp
        };
        $send(self.$class().$list(), 'each', [], function $$3(rewriter_class){var self = $$3.$$s == null ? this : $$3.$$s, rewriter = nil;
          if (self.sexp == null) self.sexp = nil;

          
          
          if (rewriter_class == null) rewriter_class = nil;;
          rewriter = rewriter_class.$new();
          return (self.sexp = rewriter.$process(self.sexp));}, {$$arity: 1, $$s: self});
        return self.sexp;
      }, 0);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/parser/source_buffer"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $defs = Opal.defs;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SourceBuffer');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return $defs(self, '$recognize_encoding', function $$recognize_encoding(string) {
          var $yield = $$recognize_encoding.$$p || nil, self = this, $ret_or_1 = nil;

          delete $$recognize_encoding.$$p;
          if ($truthy(($ret_or_1 = $send2(self, $find_super(self, 'recognize_encoding', $$recognize_encoding, false, true), 'recognize_encoding', [string], $yield)))) {
            return $ret_or_1
          } else {
            return $$$($$('Encoding'), 'UTF_8')
          }
        }, 1)
      })($nesting[0], $$$($$$($$$('Parser'), 'Source'), 'Buffer'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["opal/parser/default_config"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def, $lambda = Opal.lambda, $defs = Opal.defs;

  Opal.add_stubs('attr_accessor,all_errors_are_fatal=,diagnostics,-,ignore_warnings=,diagnostics_consumer,consumer=,extend,diagnostics_consumer=,new,rewrite,process,default_parser,default_parser_class');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $parent_nesting) {
        var self = $module($base, 'DefaultConfig');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        (function($base) {
          var self = $module($base, 'ClassMethods');

          
          
          self.$attr_accessor("diagnostics_consumer");
          return $def(self, '$default_parser', function $$default_parser() {
            var $yield = $$default_parser.$$p || nil, self = this, parser = nil, $writer = nil;

            delete $$default_parser.$$p;
            
            parser = $send2(self, $find_super(self, 'default_parser', $$default_parser, false, true), 'default_parser', [], $yield);
            
            $writer = [true];
            $send(parser.$diagnostics(), 'all_errors_are_fatal=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [false];
            $send(parser.$diagnostics(), 'ignore_warnings=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$diagnostics_consumer()];
            $send(parser.$diagnostics(), 'consumer=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return parser;
          }, 0);
        })($nesting[0]);
        $defs(self, '$included', function $$included(klass) {
          var $writer = nil;

          
          klass.$extend($$('ClassMethods'));
          
          $writer = [$lambda(function $$1(diagnostic){
            
            
            if (diagnostic == null) diagnostic = nil;;
            return nil;}, 1)];
          $send(klass, 'diagnostics_consumer=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, 1);
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [$$$($$$($$('Opal'), 'AST'), 'Builder').$new()], null);
        }, -1);
        
        $def(self, '$parse', function $$parse(source_buffer) {
          var $yield = $$parse.$$p || nil, self = this, parsed = nil, rewriten = nil;

          delete $$parse.$$p;
          
          parsed = $send2(self, $find_super(self, 'parse', $$parse, false, true), 'parse', [source_buffer], $yield);
          rewriten = self.$rewrite(parsed);
          return rewriten;
        }, 1);
        return $def(self, '$rewrite', function $$rewrite(node) {
          
          return $$$($$('Opal'), 'Rewriter').$new(node).$process()
        }, 1);
      })($nesting[0], $nesting);
      return (function(self, $parent_nesting) {
        
        
        self.$attr_accessor("default_parser_class");
        return $def(self, '$default_parser', function $$default_parser() {
          var self = this;

          return self.$default_parser_class().$default_parser()
        }, 0);
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["opal/parser/with_ruby_lexer"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus;

  Opal.add_stubs('include,default_parser_class=,-');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'WithRubyLexer');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $writer = nil;

    
    self.$include($$$($$$($$('Opal'), 'Parser'), 'DefaultConfig'));
    
    $writer = [self];
    $send($$$($$('Opal'), 'Parser'), 'default_parser_class=', $to_a($writer));
    return $writer[$rb_minus($writer["length"], 1)];;
  })($$$($$('Opal'), 'Parser'), $$$($$('Parser'), 'Ruby31'), $nesting)
};

Opal.modules["opal/parser/patch"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $rb_plus = Opal.rb_plus, $send = Opal.send, $hash2 = Opal.hash2, $eqeqeq = Opal.eqeqeq, $eqeq = Opal.eqeq, $not = Opal.not, $rb_le = Opal.rb_le, $rb_minus = Opal.rb_minus, $rb_gt = Opal.rb_gt, $rb_times = Opal.rb_times, $rb_divide = Opal.rb_divide, $to_a = Opal.to_a, $module = Opal.module;

  Opal.add_stubs('source,unpack,+,to_a,lines,end_with?,<<,map,chomp,=~,diagnostic,nil?,new,===,type,updated,dedent,first,children,==,empty?,interrupt,compact,encoding,split,force_encoding,length,map!,each_with_index,!,each_char,<=,-,>,*,/,[],[]=,join,respond_to?,send,value');
  
  
  (function($base, $super) {
    var self = $klass($base, $super, 'Lexer');

    var $proto = self.$$prototype;

    $proto.source_buffer = nil;
    return $def(self, '$source_buffer=', function $Lexer_source_buffer$eq$1(source_buffer) {
      var self = this, source = nil;

      
      self.source_buffer = source_buffer;
      if ($truthy(self.source_buffer)) {
        
        source = self.source_buffer.$source();
        return (self.source_pts = source.$unpack("U*"));
      } else {
        return (self.source_pts = nil)
      };
    }, 1)
  })($$('Parser'), null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Literal');

    var $proto = self.$$prototype;

    $proto.buffer_s = $proto.buffer = nil;
    
    
    Opal.udef(self, '$' + "extend_string");;
    return $def(self, '$extend_string', function $$extend_string(string, ts, te) {
      var self = this, $ret_or_1 = nil;

      
      self.buffer_s = ($truthy(($ret_or_1 = self.buffer_s)) ? ($ret_or_1) : (ts));
      self.buffer_e = te;
      return (self.buffer = $rb_plus(self.buffer, string));
    }, 3);
  })($$$($$('Parser'), 'Lexer'), null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Buffer');

    var $proto = self.$$prototype;

    $proto.lines = $proto.source = nil;
    return $def(self, '$source_lines', function $$source_lines() {
      var self = this, $ret_or_1 = nil, lines = nil;

      return (self.lines = ($truthy(($ret_or_1 = self.lines)) ? ($ret_or_1) : (((lines = self.source.$lines().$to_a()), ($truthy(self.source['$end_with?']("\n")) ? (lines['$<<']("")) : nil), $send(lines, 'map', [], function $$2(line){
        
        
        if (line == null) line = nil;;
        return line.$chomp("\n");}, 1)))))
    }, 0)
  })($$$($$('Parser'), 'Source'), null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Default');

    
    
    
    $def(self, '$check_lvar_name', function $$check_lvar_name(name, loc) {
      var self = this;

      if ($truthy(name['$=~'](new RegExp('^[\\p{Ll}|_][\\p{L}\\p{Nl}\\p{Nd}_]*$', 'u')))) {
        return nil
      } else {
        return self.$diagnostic("error", "lvar_name", $hash2(["name"], {"name": name}), loc)
      }
    }, 2);
    return $def(self, '$dedent_string', function $$dedent_string(node, dedent_level) {
      var dedenter = nil, $ret_or_1 = nil, children = nil;

      
      if (!$truthy(dedent_level['$nil?']())) {
        
        dedenter = $$$($$$($$$('Parser'), 'Lexer'), 'Dedenter').$new(dedent_level);
        if ($eqeqeq("str", ($ret_or_1 = node.$type()))) {
          node = node.$updated(nil, [dedenter.$dedent(node.$children().$first())])
        } else if (($eqeqeq("dstr", $ret_or_1) || ($eqeqeq("xstr", $ret_or_1)))) {
          
          children = $send(node.$children(), 'map', [], function $$3(str_node){
            
            
            if (str_node == null) str_node = nil;;
            if ($eqeq(str_node.$type(), "str")) {
              
              str_node = str_node.$updated(nil, [dedenter.$dedent(str_node.$children().$first())]);
              if ($truthy(str_node.$children().$first()['$empty?']())) {
                return nil;
              };
            } else {
              dedenter.$interrupt()
            };
            return str_node;}, 1);
          node = node.$updated(nil, children.$compact());
        } else {
          nil
        };
      };
      return node;
    }, 2);
  })($$$($$('Parser'), 'Builders'), null);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Dedenter');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$dedent', function $$dedent(string) {
      var self = this, original_encoding = nil, lines = nil;

      
      original_encoding = string.$encoding();
      lines = string.$force_encoding($$$($$('Encoding'), 'BINARY')).$split("\\\n");
      if ($eqeq(lines.$length(), 1)) {
        lines = [string.$force_encoding(original_encoding)]
      } else {
        $send(lines, 'map!', [], function $$4(s){
          
          
          if (s == null) s = nil;;
          return s.$force_encoding(original_encoding);}, 1)
      };
      (function(){var $brk = Opal.new_brk(); try {return $send(lines, 'each_with_index', [], function $$5(line, index){var self = $$5.$$s == null ? this : $$5.$$s, left_to_remove = nil, remove = nil, $writer = nil;
        if (self.at_line_begin == null) self.at_line_begin = nil;
        if (self.dedent_level == null) self.dedent_level = nil;

        
        
        if (line == null) line = nil;;
        
        if (index == null) index = nil;;
        if (($eqeq(index, 0) && ($not(self.at_line_begin)))) {
          return nil;
        };
        left_to_remove = self.dedent_level;
        remove = 0;
        (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_char', [], function $$6(char$){var self = $$6.$$s == null ? this : $$6.$$s, $ret_or_1 = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

          
          
          if (char$ == null) char$ = nil;;
          if ($truthy($rb_le(left_to_remove, 0))) {
            
            Opal.brk(nil, $brk)
          };
          if ($eqeqeq(" ", ($ret_or_1 = char$))) {
            
            remove = $rb_plus(remove, 1);
            return (left_to_remove = $rb_minus(left_to_remove, 1));
          } else if ($eqeqeq("\t", $ret_or_1)) {
            
            if ($truthy($rb_gt($rb_times($$('TAB_WIDTH'), $rb_plus($rb_divide(remove, $$('TAB_WIDTH')), 1)), self.dedent_level))) {
              
              Opal.brk(nil, $brk)
            };
            remove = $rb_plus(remove, 1);
            return (left_to_remove = $rb_minus(left_to_remove, $$('TAB_WIDTH')));
          } else {
            
            Opal.brk(nil, $brk)
          };}, {$$arity: 1, $$s: self, $$brk: $brk})
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        
        $writer = [index, line['$[]'](Opal.Range.$new(remove, -1, false))];
        $send(lines, '[]=', $to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;}, {$$arity: 2, $$s: self, $$brk: $brk})
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      string = lines.$join();
      self.at_line_begin = string['$end_with?']("\n");
      return string;
    }, 1)
  })($$$($$('Parser'), 'Lexer'), null, $nesting);;
  (function($base) {
    var self = $module($base, 'Mixin');

    
    
    
    Opal.udef(self, '$' + "process");;
    return $def(self, '$process', function $$process(node) {
      var self = this, $ret_or_1 = nil, type = nil, on_handler = nil, $writer = nil, handler = nil;
      if (self._on_handler_cache == null) self._on_handler_cache = nil;

      
      if ($truthy(node['$nil?']())) {
        return nil
      };
      self._on_handler_cache = ($truthy(($ret_or_1 = self._on_handler_cache)) ? ($ret_or_1) : ($hash2([], {})));
      type = node.$type();
      on_handler = ($truthy(($ret_or_1 = self._on_handler_cache['$[]'](type))) ? ($ret_or_1) : ((($writer = [type, ((handler = "on_" + (type)), ($truthy(self['$respond_to?'](handler)) ? (nil) : ((handler = "handler_missing"))), handler)]), $send(self._on_handler_cache, '[]=', $to_a($writer)), $writer[$rb_minus($writer["length"], 1)])));
      if ($truthy(($ret_or_1 = self.$send(on_handler, node)))) {
        return $ret_or_1
      } else {
        return node
      };
    }, 1);
  })($$$($$('AST'), 'Processor'));
  return (function($base, $super) {
    var self = $klass($base, $super, 'Default');

    
    
    
    Opal.udef(self, '$' + "string_value");;
    return $def(self, '$string_value', function $$string_value(token) {
      var self = this;

      return self.$value(token)
    }, 1);
  })($$$($$('Parser'), 'Builders'), null);
};

Opal.modules["opal/parser"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("opal/ast/builder");
  self.$require("opal/rewriter");
  self.$require("opal/parser/source_buffer");
  self.$require("opal/parser/default_config");
  self.$require("opal/parser/with_ruby_lexer");
  return self.$require("opal/parser/patch");
};

Opal.modules["opal/fragment"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt, $to_a = Opal.to_a, $not = Opal.not, $send = Opal.send;

  Opal.add_stubs('attr_reader,to_s,inspect,===,type,[],meta,source_map_name_for,sexp,==,class,+,parent,>,!,first,children,loc,respond_to?,dot,selector,operator,begin,line,location,column');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Fragment');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.code = $proto.scope = $proto.sexp = nil;
      
      self.$attr_reader("code");
      
      $def(self, '$initialize', function $$initialize(code, scope, sexp) {
        var self = this;

        
        
        if (sexp == null) sexp = nil;;
        self.code = code.$to_s();
        self.sexp = sexp;
        return (self.scope = scope);
      }, -3);
      
      $def(self, '$inspect', function $$inspect() {
        var self = this;

        return "f(" + (self.code.$inspect()) + ")"
      }, 0);
      
      $def(self, '$source_map_name_for', function $$source_map_name_for(sexp) {
        var $a, self = this, $ret_or_1 = nil, $ret_or_2 = nil, scope = nil, iters = nil, level = nil, const$ = nil, name = nil;

        if ($eqeqeq("top", ($ret_or_1 = sexp.$type()))) {
          if ($eqeqeq("require", ($ret_or_2 = sexp.$meta()['$[]']("kind")))) {
            return "<top (required)>"
          } else if ($eqeqeq("eval", $ret_or_2)) {
            return "(eval)"
          } else if ($eqeqeq("main", $ret_or_2)) {
            return "<main>"
          } else {
            return nil
          }
        } else if (($eqeqeq("begin", $ret_or_1) || (($eqeqeq("newline", $ret_or_1) || ($eqeqeq("js_return", $ret_or_1)))))) {
          if ($truthy(self.scope)) {
            return self.$source_map_name_for(self.scope.$sexp())
          } else {
            return nil
          }
        } else if ($eqeqeq("iter", $ret_or_1)) {
          
          scope = self.scope;
          iters = 1;
          while ($truthy(scope)) {
            if ($eqeq(scope.$class(), $$$($$('Nodes'), 'IterNode'))) {
              
              iters = $rb_plus(iters, 1);
              scope = scope.$parent();
            } else {
              break;
            }
          };
          if ($truthy($rb_gt(iters, 1))) {
            level = " (" + (iters) + " levels)"
          };
          return "block" + (level) + " in " + (self.$source_map_name_for(scope.$sexp()));
        } else if ($eqeqeq("self", $ret_or_1)) {
          return "self"
        } else if ($eqeqeq("module", $ret_or_1)) {
          
          $a = [].concat($to_a(sexp)), (const$ = ($a[0] == null ? nil : $a[0])), $a;
          return "<module:" + (self.$source_map_name_for(const$)) + ">";
        } else if ($eqeqeq("class", $ret_or_1)) {
          
          $a = [].concat($to_a(sexp)), (const$ = ($a[0] == null ? nil : $a[0])), $a;
          return "<class:" + (self.$source_map_name_for(const$)) + ">";
        } else if ($eqeqeq("const", $ret_or_1)) {
          
          $a = [].concat($to_a(sexp)), (scope = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $a;
          if (($not(scope) || ($eqeq(scope.$type(), "cbase")))) {
            return name.$to_s()
          } else {
            return "" + (self.$source_map_name_for(scope)) + "::" + (name)
          };
        } else if ($eqeqeq("int", $ret_or_1)) {
          return sexp.$children().$first()
        } else if ($eqeqeq("def", $ret_or_1)) {
          return sexp.$children().$first()
        } else if ($eqeqeq("defs", $ret_or_1)) {
          return sexp.$children()['$[]'](1)
        } else if ($eqeqeq("send", $ret_or_1)) {
          return sexp.$children()['$[]'](1)
        } else if (($eqeqeq("lvar", $ret_or_1) || (($eqeqeq("lvasgn", $ret_or_1) || (($eqeqeq("lvdeclare", $ret_or_1) || (($eqeqeq("ivar", $ret_or_1) || (($eqeqeq("ivasgn", $ret_or_1) || (($eqeqeq("gvar", $ret_or_1) || (($eqeqeq("cvar", $ret_or_1) || (($eqeqeq("cvasgn", $ret_or_1) || (($eqeqeq("gvars", $ret_or_1) || (($eqeqeq("gvasgn", $ret_or_1) || ($eqeqeq("arg", $ret_or_1)))))))))))))))))))))) {
          return sexp.$children().$first()
        } else if (($eqeqeq("str", $ret_or_1) || ($eqeqeq("xstr", $ret_or_1)))) {
          return self.$source_map_name_for(self.scope.$sexp())
        } else {
          return nil
        }
      }, 1);
      
      $def(self, '$source_map_name', function $$source_map_name() {
        var self = this;

        
        if (!$truthy(self.sexp)) {
          return nil
        };
        return self.$source_map_name_for(self.sexp);
      }, 0);
      
      $def(self, '$location', function $$location() {
        var self = this, loc = nil, $ret_or_1 = nil;

        if ($not(self.sexp)) {
          return nil
        } else if ($eqeq(self.sexp.$type(), "send")) {
          
          loc = self.sexp.$loc();
          if ($truthy(loc['$respond_to?']("dot"))) {
            if ($truthy(($ret_or_1 = loc.$dot()))) {
              return $ret_or_1
            } else {
              return loc.$selector()
            }
          } else if ($truthy(loc['$respond_to?']("operator"))) {
            return loc.$operator()
          } else {
            return self.sexp
          };
        } else if ($eqeq(self.sexp.$type(), "iter")) {
          if ($truthy(loc['$respond_to?']("begin"))) {
            return self.sexp.$loc().$begin()
          } else {
            return self.sexp
          }
        } else {
          return self.sexp
        }
      }, 0);
      
      $def(self, '$line', function $$line() {
        var $a, self = this;

        return ($a = self.$location(), ($a === nil || $a == null) ? nil : $send($a, 'line', []))
      }, 0);
      
      $def(self, '$column', function $$column() {
        var $a, self = this;

        return ($a = self.$location(), ($a === nil || $a == null) ? nil : $send($a, 'column', []))
      }, 0);
      return $def(self, '$skip_source_map?', function $Fragment_skip_source_map$ques$1() {
        var self = this;

        return self.sexp['$=='](false)
      }, 0);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["opal/nodes/helpers"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $truthy = Opal.truthy, $def = Opal.def, $rb_plus = Opal.rb_plus, $send = Opal.send, $hash2 = Opal.hash2, $to_a = Opal.to_a, $eqeqeq = Opal.eqeqeq, $slice = Opal.slice, $eqeq = Opal.eqeq, $rb_minus = Opal.rb_minus;

  Opal.add_stubs('require,valid_name?,inspect,=~,to_s,+,indent,compiler,to_proc,parser_indent,push,fragment,current_indent,js_truthy_optimize,helper,expr,===,type,[],handlers,include?,truthy_optimize?,==,count,<<,method_calls,first,children,s,[]=,meta,-,new_temp,scope,wrap');
  
  self.$require("opal/regexp_anchors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Helpers');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        
        $def(self, '$property', function $$property(name) {
          var self = this;

          if ($truthy(self['$valid_name?'](name))) {
            return "." + (name)
          } else {
            return "[" + (name.$inspect()) + "]"
          }
        }, 1);
        
        $def(self, '$valid_name?', function $Helpers_valid_name$ques$1(name) {
          
          return $$$($$$($$('Opal'), 'Rewriters'), 'JsReservedWords')['$valid_name?'](name)
        }, 1);
        
        $def(self, '$mid_to_jsid', function $$mid_to_jsid(mid) {
          
          if ($truthy(/\=|\+|\-|\*|\/|\!|\?|<|\>|\&|\||\^|\%|\~|\[|`/['$=~'](mid.$to_s()))) {
            return "['$" + (mid) + "']"
          } else {
            return $rb_plus(".$", mid)
          }
        }, 1);
        
        $def(self, '$indent', function $$indent() {
          var block = $$indent.$$p || nil, self = this;

          delete $$indent.$$p;
          
          ;
          return $send(self.$compiler(), 'indent', [], block.$to_proc());
        }, 0);
        
        $def(self, '$current_indent', function $$current_indent() {
          var self = this;

          return self.$compiler().$parser_indent()
        }, 0);
        
        $def(self, '$line', function $$line($a) {
          var $post_args, strs, self = this;

          
          
          $post_args = Opal.slice.call(arguments);
          
          strs = $post_args;;
          self.$push(self.$fragment("\n" + (self.$current_indent()), $hash2(["loc"], {"loc": false})));
          return $send(self, 'push', $to_a(strs));
        }, -1);
        
        $def(self, '$empty_line', function $$empty_line() {
          var self = this;

          return self.$push(self.$fragment("\n", $hash2(["loc"], {"loc": false})))
        }, 0);
        
        $def(self, '$js_truthy', function $$js_truthy(sexp) {
          var self = this, optimize = nil;

          
          if ($truthy((optimize = self.$js_truthy_optimize(sexp)))) {
            return optimize
          };
          self.$helper("truthy");
          return [self.$fragment("$truthy("), self.$expr(sexp), self.$fragment(")")];
        }, 1);
        
        $def(self, '$js_truthy_optimize', function $$js_truthy_optimize(sexp) {
          var $a, self = this, $ret_or_1 = nil, receiver = nil, mid = nil, args = nil, receiver_handler_class = nil, $ret_or_2 = nil, allow_optimization_on_type = nil, $ret_or_3 = nil, _test = nil, true_body = nil, false_body = nil, $writer = nil;

          if ($eqeqeq("send", ($ret_or_1 = sexp.$type()))) {
            
            $a = [].concat($to_a(sexp)), (receiver = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            receiver_handler_class = ($truthy(($ret_or_2 = receiver)) ? (self.$compiler().$handlers()['$[]'](receiver.$type())) : ($ret_or_2));
            allow_optimization_on_type = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = $$$($$('Compiler'), 'COMPARE')['$include?'](mid.$to_s()))) ? (receiver_handler_class) : ($ret_or_3)))) ? (receiver_handler_class['$truthy_optimize?']()) : ($ret_or_2));
            if (($truthy(allow_optimization_on_type) || ($eqeq(mid, "block_given?")))) {
              return self.$expr(sexp)
            } else if ($eqeq(args.$count(), 1)) {
              if ($eqeqeq("==", ($ret_or_2 = mid))) {
                
                self.$helper("eqeq");
                self.$compiler().$method_calls()['$<<'](mid);
                return [self.$fragment("$eqeq("), self.$expr(receiver), self.$fragment(", "), self.$expr(args.$first()), self.$fragment(")")];
              } else if ($eqeqeq("===", $ret_or_2)) {
                
                self.$helper("eqeqeq");
                self.$compiler().$method_calls()['$<<'](mid);
                return [self.$fragment("$eqeqeq("), self.$expr(receiver), self.$fragment(", "), self.$expr(args.$first()), self.$fragment(")")];
              } else if ($eqeqeq("!=", $ret_or_2)) {
                
                self.$helper("neqeq");
                self.$compiler().$method_calls()['$<<'](mid);
                return [self.$fragment("$neqeq("), self.$expr(receiver), self.$fragment(", "), self.$expr(args.$first()), self.$fragment(")")];
              } else {
                return nil
              }
            } else if ($eqeq(args.$count(), 0)) {
              if ($eqeqeq("!", ($ret_or_2 = mid))) {
                
                self.$helper("not");
                self.$compiler().$method_calls()['$<<'](mid);
                return [self.$fragment("$not("), self.$expr(receiver), self.$fragment(")")];
              } else {
                return nil
              }
            } else {
              return nil
            };
          } else if ($eqeqeq("begin", $ret_or_1)) {
            if ($eqeq(sexp.$children().$count(), 1)) {
              return self.$js_truthy_optimize(sexp.$children().$first())
            } else {
              return nil
            }
          } else if ($eqeqeq("if", $ret_or_1)) {
            
            $a = [].concat($to_a(sexp)), (_test = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
            if ($eqeq(true_body, self.$s("true"))) {
              
              
              $writer = ["do_js_truthy_on_false_body", true];
              $send(sexp.$meta(), '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return self.$expr(sexp);
            } else if ($eqeq(false_body, self.$s("false"))) {
              
              
              $writer = ["do_js_truthy_on_true_body", true];
              $send(sexp.$meta(), '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return self.$expr(sexp);
            } else {
              return nil
            };
          } else {
            return nil
          }
        }, 1);
        return $def(self, '$conditional_send', function $$conditional_send(recvr) {
          var $yield = $$conditional_send.$$p || nil, self = this, receiver_temp = nil;

          delete $$conditional_send.$$p;
          
          receiver_temp = self.$scope().$new_temp();
          self.$push("" + (receiver_temp) + " = ", recvr);
          self.$push(", (" + (receiver_temp) + " === nil || " + (receiver_temp) + " == null) ? nil : ");
          Opal.yield1($yield, receiver_temp);
          return self.$wrap("(", ")");
        }, 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/base"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $defs = Opal.defs, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def, $Opal = Opal.Opal, $rb_plus = Opal.rb_plus;

  Opal.add_stubs('require,include,each,[]=,handlers,-,each_with_index,define_method,[],children,attr_reader,type,top_scope,top_scope=,compile,raise,is_a?,fragment,<<,reverse_each,unshift,push,new,scope,error,loc,==,process,expr,add_scope_local,to_sym,add_scope_ivar,add_scope_gvar,add_scope_temp,helper,with_temp,to_proc,in_while?,instance_variable_get,has_rescue_else?,in_ensure,in_ensure?,in_resbody,in_resbody?,in_rescue,!,class_scope?,sclass?,+,parent,nesting,class_variable_owner_nesting_level,comments,compiler,name,source_buffer,expression,start_with?,end_with?,line');
  
  self.$require("opal/nodes/helpers");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.compiler = $proto.sexp = $proto.fragments = $proto.level = nil;
        
        self.$include($$('Helpers'));
        $defs(self, '$handlers', function $$handlers() {
          var self = this, $ret_or_1 = nil;
          if (self.handlers == null) self.handlers = nil;

          return (self.handlers = ($truthy(($ret_or_1 = self.handlers)) ? ($ret_or_1) : ($hash2([], {}))))
        }, 0);
        $defs(self, '$handle', function $$handle($a) {
          var $post_args, types, self = this;

          
          
          $post_args = Opal.slice.call(arguments);
          
          types = $post_args;;
          return $send(types, 'each', [], function $$1(type){var self = $$1.$$s == null ? this : $$1.$$s, $writer = nil;

            
            
            if (type == null) type = nil;;
            $writer = [type, self];
            $send($$('Base').$handlers(), '[]=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, {$$arity: 1, $$s: self});
        }, -1);
        $defs(self, '$children', function $$children($a) {
          var $post_args, names, self = this;

          
          
          $post_args = Opal.slice.call(arguments);
          
          names = $post_args;;
          return $send(names, 'each_with_index', [], function $$2(name, idx){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (name == null) name = nil;;
            
            if (idx == null) idx = nil;;
            return $send(self, 'define_method', [name], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;
              if (self.sexp == null) self.sexp = nil;

              return self.sexp.$children()['$[]'](idx)}, {$$arity: 0, $$s: self});}, {$$arity: 2, $$s: self});
        }, -1);
        $defs(self, '$truthy_optimize?', function $Base_truthy_optimize$ques$4() {
          
          return false
        }, 0);
        self.$attr_reader("compiler", "type", "sexp");
        
        $def(self, '$initialize', function $$initialize(sexp, level, compiler) {
          var self = this, $ret_or_1 = nil, $writer = nil;

          
          self.sexp = sexp;
          self.type = sexp.$type();
          self.level = level;
          self.compiler = compiler;
          if ($truthy(($ret_or_1 = self.compiler.$top_scope()))) {
            return $ret_or_1
          } else {
            
            $writer = [self];
            $send(self.compiler, 'top_scope=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          };
        }, 3);
        
        $def(self, '$children', function $$children() {
          var self = this;

          return self.sexp.$children()
        }, 0);
        
        $def(self, '$compile_to_fragments', function $$compile_to_fragments() {
          var $a, self = this;

          
          if ($truthy((($a = self['fragments'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.fragments
          };
          self.fragments = [];
          self.$compile();
          return self.fragments;
        }, 0);
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$raise("Not Implemented")
        }, 0);
        
        $def(self, '$push', function $$push($a) {
          var $post_args, strs, self = this;

          
          
          $post_args = Opal.slice.call(arguments);
          
          strs = $post_args;;
          return $send(strs, 'each', [], function $$5(str){var self = $$5.$$s == null ? this : $$5.$$s;
            if (self.fragments == null) self.fragments = nil;

            
            
            if (str == null) str = nil;;
            if ($truthy(str['$is_a?']($$('String')))) {
              str = self.$fragment(str)
            };
            return self.fragments['$<<'](str);}, {$$arity: 1, $$s: self});
        }, -1);
        
        $def(self, '$unshift', function $$unshift($a) {
          var $post_args, strs, self = this;

          
          
          $post_args = Opal.slice.call(arguments);
          
          strs = $post_args;;
          return $send(strs, 'reverse_each', [], function $$6(str){var self = $$6.$$s == null ? this : $$6.$$s;
            if (self.fragments == null) self.fragments = nil;

            
            
            if (str == null) str = nil;;
            if ($truthy(str['$is_a?']($$('String')))) {
              str = self.$fragment(str)
            };
            return self.fragments.$unshift(str);}, {$$arity: 1, $$s: self});
        }, -1);
        
        $def(self, '$wrap', function $$wrap(pre, post) {
          var self = this;

          
          self.$unshift(pre);
          return self.$push(post);
        }, 2);
        
        $def(self, '$fragment', function $$fragment(str, $kwargs) {
          var loc, self = this, $ret_or_1 = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          loc = $kwargs.$$smap["loc"];
          if (loc == null) loc = true;
          return $$$($$('Opal'), 'Fragment').$new(str, self.$scope(), ($truthy(($ret_or_1 = loc)) ? (self.sexp) : ($ret_or_1)));
        }, -2);
        
        $def(self, '$error', function $$error(msg) {
          var self = this;

          return self.compiler.$error(msg)
        }, 1);
        
        $def(self, '$scope', function $$scope() {
          var self = this;

          return self.compiler.$scope()
        }, 0);
        
        $def(self, '$top_scope', function $$top_scope() {
          var self = this;

          return self.compiler.$top_scope()
        }, 0);
        
        $def(self, '$s', function $$s(type, $a) {
          var $post_args, children, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1);
          
          children = $post_args;;
          return $$$($$$($Opal, 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": self.sexp.$loc()}));
        }, -2);
        
        $def(self, '$expr?', function $Base_expr$ques$7() {
          var self = this;

          return self.level['$==']("expr")
        }, 0);
        
        $def(self, '$recv?', function $Base_recv$ques$8() {
          var self = this;

          return self.level['$==']("recv")
        }, 0);
        
        $def(self, '$stmt?', function $Base_stmt$ques$9() {
          var self = this;

          return self.level['$==']("stmt")
        }, 0);
        
        $def(self, '$process', function $$process(sexp, level) {
          var self = this;

          
          
          if (level == null) level = "expr";;
          return self.compiler.$process(sexp, level);
        }, -2);
        
        $def(self, '$expr', function $$expr(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "expr")
        }, 1);
        
        $def(self, '$recv', function $$recv(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "recv")
        }, 1);
        
        $def(self, '$stmt', function $$stmt(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "stmt")
        }, 1);
        
        $def(self, '$expr_or_nil', function $$expr_or_nil(sexp) {
          var self = this;

          if ($truthy(sexp)) {
            return self.$expr(sexp)
          } else {
            return "nil"
          }
        }, 1);
        
        $def(self, '$add_local', function $$add_local(name) {
          var self = this;

          return self.$scope().$add_scope_local(name.$to_sym())
        }, 1);
        
        $def(self, '$add_ivar', function $$add_ivar(name) {
          var self = this;

          return self.$scope().$add_scope_ivar(name)
        }, 1);
        
        $def(self, '$add_gvar', function $$add_gvar(name) {
          var self = this;

          return self.$scope().$add_scope_gvar(name)
        }, 1);
        
        $def(self, '$add_temp', function $$add_temp(temp) {
          var self = this;

          return self.$scope().$add_scope_temp(temp)
        }, 1);
        
        $def(self, '$helper', function $$helper(name) {
          var self = this;

          return self.compiler.$helper(name)
        }, 1);
        
        $def(self, '$with_temp', function $$with_temp() {
          var block = $$with_temp.$$p || nil, self = this;

          delete $$with_temp.$$p;
          
          ;
          return $send(self.compiler, 'with_temp', [], block.$to_proc());
        }, 0);
        
        $def(self, '$in_while?', function $Base_in_while$ques$10() {
          var self = this;

          return self.compiler['$in_while?']()
        }, 0);
        
        $def(self, '$while_loop', function $$while_loop() {
          var self = this;

          return self.compiler.$instance_variable_get("@while_loop")
        }, 0);
        
        $def(self, '$has_rescue_else?', function $Base_has_rescue_else$ques$11() {
          var self = this;

          return self.$scope()['$has_rescue_else?']()
        }, 0);
        
        $def(self, '$in_ensure', function $$in_ensure() {
          var block = $$in_ensure.$$p || nil, self = this;

          delete $$in_ensure.$$p;
          
          ;
          return $send(self.$scope(), 'in_ensure', [], block.$to_proc());
        }, 0);
        
        $def(self, '$in_ensure?', function $Base_in_ensure$ques$12() {
          var self = this;

          return self.$scope()['$in_ensure?']()
        }, 0);
        
        $def(self, '$in_resbody', function $$in_resbody() {
          var block = $$in_resbody.$$p || nil, self = this;

          delete $$in_resbody.$$p;
          
          ;
          return $send(self.$scope(), 'in_resbody', [], block.$to_proc());
        }, 0);
        
        $def(self, '$in_resbody?', function $Base_in_resbody$ques$13() {
          var self = this;

          return self.$scope()['$in_resbody?']()
        }, 0);
        
        $def(self, '$in_rescue', function $$in_rescue(node) {
          var block = $$in_rescue.$$p || nil, self = this;

          delete $$in_rescue.$$p;
          
          ;
          return $send(self.$scope(), 'in_rescue', [node], block.$to_proc());
        }, 1);
        
        $def(self, '$class_variable_owner_nesting_level', function $$class_variable_owner_nesting_level() {
          var $a, self = this, cvar_scope = nil, nesting_level = nil, $ret_or_1 = nil;

          
          cvar_scope = self.$scope();
          nesting_level = 0;
          while ($truthy(($truthy(($ret_or_1 = cvar_scope)) ? (cvar_scope['$class_scope?']()['$!']()) : ($ret_or_1)))) {
            
            if ($truthy(cvar_scope['$sclass?']())) {
              nesting_level = $rb_plus(nesting_level, 1)
            };
            cvar_scope = cvar_scope.$parent();
          };
          return nesting_level;
        }, 0);
        
        $def(self, '$class_variable_owner', function $$class_variable_owner() {
          var self = this;

          if ($truthy(self.$scope())) {
            return "" + (self.$scope().$nesting()) + "[" + (self.$class_variable_owner_nesting_level()) + "]"
          } else {
            return "Opal.Object"
          }
        }, 0);
        
        $def(self, '$comments', function $$comments() {
          var self = this;

          return self.$compiler().$comments()['$[]'](self.sexp.$loc())
        }, 0);
        return $def(self, '$source_location', function $$source_location() {
          var self = this, file = nil, line = nil;

          
          file = self.sexp.$loc().$expression().$source_buffer().$name();
          if ($truthy(file['$start_with?']("corelib/"))) {
            file = "<internal:" + (file) + ">"
          };
          if ($truthy(file['$end_with?'](".js"))) {
            file = "<js:" + (file) + ">"
          };
          line = self.sexp.$loc().$line();
          return "['" + (file) + "', " + (line) + "]";
        }, 0);
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/literal"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $eqeq = Opal.eqeq, $def = Opal.def, $defs = Opal.defs, $truthy = Opal.truthy, $const_set = Opal.const_set, $hash2 = Opal.hash2, $regexp = Opal.regexp, $send = Opal.send, $rb_plus = Opal.rb_plus, $lambda = Opal.lambda, $rb_le = Opal.rb_le, $rb_minus = Opal.rb_minus, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $eqeqeq = Opal.eqeqeq, $slice = Opal.slice, $Opal = Opal.Opal, $rb_gt = Opal.rb_gt;

  Opal.add_stubs('require,handle,==,type,push,self,scope,to_s,children,value,recv?,wrap,freeze,join,keys,gsub,even?,length,last_match,+,chop,[],inspect,to_i,to_utf16,translate_escape_chars,valid_encoding?,helper,upcase,<=,call,-,>>,&,attr_accessor,extract_flags_and_value,select!,flags,=~,warning,compiler,compile_static_regexp,compile_dynamic_regexp,each_with_index,zero?,expr,any?,===,new,map,to_proc,flags=,empty?,s,single_line?,value=,include?,is_a?,updated,delete,source,expression,loc,private,>,!=,!,regexp,first,each,compile_inline?,compile_inline,compile_range_initialize,start,finish,raise,expr_or_nil,numerator,denominator,real,imag');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'ValueNode');

        
        
        self.$handle("true", "false", "self", "nil");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($eqeq(self.$type(), "self")) {
            return self.$push(self.$scope().$self())
          } else {
            return self.$push(self.$type().$to_s())
          }
        }, 0);
        return $defs(self, '$truthy_optimize?', function $ValueNode_truthy_optimize$ques$1() {
          
          return true
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'NumericNode');

        
        
        self.$handle("int", "float");
        self.$children("value");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$push(self.$value().$to_s());
          if ($truthy(self['$recv?']())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, 0);
        return $defs(self, '$truthy_optimize?', function $NumericNode_truthy_optimize$ques$2() {
          
          return true
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StringNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("str");
        self.$children("value");
        $const_set($nesting[0], 'ESCAPE_CHARS', $hash2(["a", "e"], {"a": "\\u0007", "e": "\\u001b"}).$freeze());
        $const_set($nesting[0], 'ESCAPE_REGEX', $regexp(["(\\\\+)([", $$('ESCAPE_CHARS').$keys().$join(""), "])"]).$freeze());
        
        $def(self, '$translate_escape_chars', function $$translate_escape_chars(inspect_string) {
          
          return $send(inspect_string, 'gsub', [$$('ESCAPE_REGEX')], function $$3(original){
            
            
            if (original == null) original = nil;;
            if ($truthy($$('Regexp').$last_match(1).$length()['$even?']())) {
              return original
            } else {
              return $rb_plus($$('Regexp').$last_match(1).$chop(), $$('ESCAPE_CHARS')['$[]']($$('Regexp').$last_match(2)))
            };}, 1)
        }, 1);
        
        $def(self, '$compile', function $$compile() {
          var self = this, string_value = nil, sanitized_value = nil;

          
          string_value = self.$value();
          sanitized_value = $send(string_value.$inspect(), 'gsub', [/\\u\{([0-9a-f]+)\}/], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s, code_point = nil;

            
            code_point = $$('Regexp').$last_match(1).$to_i(16);
            return self.$to_utf16(code_point);}, {$$arity: 0, $$s: self});
          self.$push(self.$translate_escape_chars(sanitized_value));
          nil;
          if ($truthy(self.$value()['$valid_encoding?']())) {
            return nil
          } else {
            
            self.$helper("binary");
            return self.$wrap("$binary(", ")");
          };
        }, 0);
        return $def(self, '$to_utf16', function $$to_utf16(code_point) {
          var ten_bits = nil, u = nil, lead_surrogate = nil, tail_surrogate = nil;

          
          ten_bits = 1023;
          u = $lambda(function $$5(code_unit){
            
            
            if (code_unit == null) code_unit = nil;;
            return $rb_plus("\\u", code_unit.$to_s(16).$upcase());}, 1);
          if ($truthy($rb_le(code_point, 65535))) {
            return u.$call(code_point)
          };
          code_point = $rb_minus(code_point, 65536);
          lead_surrogate = $rb_plus(55296, code_point['$>>'](10));
          tail_surrogate = $rb_plus(56320, code_point['$&'](ten_bits));
          return $rb_plus(u.$call(lead_surrogate), u.$call(tail_surrogate));
        }, 1);
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'SymbolNode');

        
        
        self.$handle("sym");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s().$inspect())
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RegexpNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.sexp = nil;
        
        self.$handle("regexp");
        self.$attr_accessor("value", "flags");
        $const_set($nesting[0], 'SUPPORTED_FLAGS', /[gimuy]/.$freeze());
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          return self.$extract_flags_and_value();
        }, -1);
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          $send(self.$flags(), 'select!', [], function $$6(flag){var self = $$6.$$s == null ? this : $$6.$$s;

            
            
            if (flag == null) flag = nil;;
            if ($truthy($$('SUPPORTED_FLAGS')['$=~'](flag))) {
              return true
            } else {
              
              self.$compiler().$warning("Skipping the '" + (flag) + "' Regexp flag as it's not widely supported by JavaScript vendors.");
              return false;
            };}, {$$arity: 1, $$s: self});
          if ($eqeq(self.$value().$type(), "str")) {
            return self.$compile_static_regexp()
          } else {
            return self.$compile_dynamic_regexp()
          };
        }, 0);
        
        $def(self, '$compile_dynamic_regexp', function $$compile_dynamic_regexp() {
          var self = this;

          
          self.$helper("regexp");
          self.$push("$regexp([");
          $send(self.$value().$children(), 'each_with_index', [], function $$7(v, index){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (v == null) v = nil;;
            
            if (index == null) index = nil;;
            if (!$truthy(index['$zero?']())) {
              self.$push(", ")
            };
            return self.$push(self.$expr(v));}, {$$arity: 2, $$s: self});
          self.$push("]");
          if ($truthy(self.$flags()['$any?']())) {
            self.$push(", '" + (self.$flags().$join()) + "'")
          };
          return self.$push(")");
        }, 0);
        
        $def(self, '$compile_static_regexp', function $$compile_static_regexp() {
          var self = this, value = nil, $ret_or_1 = nil;

          
          value = self.$value().$children()['$[]'](0);
          if ($eqeqeq("", ($ret_or_1 = value))) {
            return self.$push("/(?:)/")
          } else {
            return self.$push("" + ($$('Regexp').$new(value).$inspect()) + (self.$flags().$join()))
          };
        }, 0);
        
        $def(self, '$extract_flags_and_value', function $$extract_flags_and_value() {
          var $a, $b, self = this, values = nil, flags_sexp = nil, $writer = nil, parts = nil;

          
          $a = [].concat($to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (values = $slice.call($a, 0, $b)), (flags_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
          
          $writer = [$send(flags_sexp.$children(), 'map', [], "to_s".$to_proc())];
          $send(self, 'flags=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [($truthy(values['$empty?']()) ? (self.$s("str", "")) : ($truthy(self['$single_line?'](values)) ? (values['$[]'](0)) : ($send(self, 's', ["dstr"].concat($to_a(values))))))];
          $send(self, 'value=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$flags()['$include?']("x"))) {
            
            parts = $send(self.$value().$children(), 'map', [], function $$8(part){var self = $$8.$$s == null ? this : $$8.$$s, trimmed_value = nil;

              
              
              if (part == null) part = nil;;
              if (($truthy(part['$is_a?']($$$($$$($Opal, 'AST'), 'Node'))) && ($eqeq(part.$type(), "str")))) {
                
                trimmed_value = part.$children()['$[]'](0).$gsub(/^\s*\#.*/, "").$gsub(/\s/, "");
                return self.$s("str", trimmed_value);
              } else {
                return part
              };}, {$$arity: 1, $$s: self});
            
            $writer = [self.$value().$updated(nil, parts)];
            $send(self, 'value=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$flags().$delete("x");
          };
          if ($eqeq(self.$value().$type(), "str")) {
            
            $writer = [self.$s("str", self.$value().$children()['$[]'](0).$gsub("\\A", "^").$gsub("\\z", "$"))];
            $send(self, 'value=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };
        }, 0);
        
        $def(self, '$raw_value', function $$raw_value() {
          var self = this, $writer = nil;

          
          $writer = [self.sexp.$loc().$expression().$source()];
          $send(self, 'value=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, 0);
        self.$private();
        return $def(self, '$single_line?', function $RegexpNode_single_line$ques$9(values) {
          var value = nil, $ret_or_1 = nil;

          
          if ($truthy($rb_gt(values.$length(), 1))) {
            return false
          };
          value = values['$[]'](0);
          if ($truthy(($ret_or_1 = value.$type()['$!=']("str")))) {
            return $ret_or_1
          } else {
            return value.$children()['$[]'](0)['$include?']("\n")['$!']()
          };
        }, 1);
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'MatchCurrentLineNode');

        
        
        self.$handle("match_current_line");
        self.$children("regexp");
        return $def(self, '$compile', function $$compile() {
          var self = this, gvar_sexp = nil, send_node = nil;

          
          gvar_sexp = self.$s("gvar", "$_");
          send_node = self.$s("send", gvar_sexp, "=~", self.$regexp());
          return self.$push(self.$expr(send_node));
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'DynamicStringNode');

        
        
        self.$handle("dstr");
        return $def(self, '$compile', function $$compile() {
          var self = this, skip_empty = nil;

          
          if (($truthy($rb_gt(self.$children().$length(), 1)) && ($eqeq(self.$children().$first().$type(), "str")))) {
            skip_empty = true
          } else {
            self.$push("\"\"")
          };
          return $send(self.$children(), 'each', [], function $$10(part){var self = $$10.$$s == null ? this : $$10.$$s;

            
            
            if (part == null) part = nil;;
            if ($truthy(skip_empty)) {
              skip_empty = false
            } else {
              self.$push(" + ")
            };
            if ($eqeq(part.$type(), "str")) {
              self.$push(self.$expr(part))
            } else {
              self.$push("(", self.$expr(part), ")")
            };
            if ($truthy(self['$recv?']())) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };}, {$$arity: 1, $$s: self});
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'DynamicSymbolNode');

        
        return self.$handle("dsym")
      })($nesting[0], $$('DynamicStringNode'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$children("start", "finish");
        $const_set($nesting[0], 'SIMPLE_CHILDREN_TYPES', ["int", "float", "str", "sym"].$freeze());
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$compile_inline?']())) {
            
            self.$helper("range");
            return self.$compile_inline();
          } else {
            return self.$compile_range_initialize()
          }
        }, 0);
        
        $def(self, '$compile_inline?', function $RangeNode_compile_inline$ques$11() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$start()['$!']())) ? ($ret_or_2) : (($truthy(($ret_or_3 = self.$start().$type())) ? ($$('SIMPLE_CHILDREN_TYPES')['$include?'](self.$start().$type())) : ($ret_or_3))))))) {
            
            if ($truthy(($ret_or_2 = self.$finish()['$!']()))) {
              return $ret_or_2
            } else {
              
              if ($truthy(($ret_or_3 = self.$finish().$type()))) {
                return $$('SIMPLE_CHILDREN_TYPES')['$include?'](self.$finish().$type())
              } else {
                return $ret_or_3
              };
            };
          } else {
            return $ret_or_1
          }
        }, 0);
        
        $def(self, '$compile_inline', function $$compile_inline() {
          var self = this;

          return self.$raise($$('NotImplementedError'))
        }, 0);
        return $def(self, '$compile_range_initialize', function $$compile_range_initialize() {
          var self = this;

          return self.$raise($$('NotImplementedError'))
        }, 0);
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'InclusiveRangeNode');

        
        
        self.$handle("irange");
        
        $def(self, '$compile_inline', function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr_or_nil(self.$start()), ", ", self.$expr_or_nil(self.$finish()), ", false)")
        }, 0);
        return $def(self, '$compile_range_initialize', function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr_or_nil(self.$start()), ", ", self.$expr_or_nil(self.$finish()), ", false)")
        }, 0);
      })($nesting[0], $$('RangeNode'));
      (function($base, $super) {
        var self = $klass($base, $super, 'ExclusiveRangeNode');

        
        
        self.$handle("erange");
        
        $def(self, '$compile_inline', function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr_or_nil(self.$start()), ", ", self.$expr_or_nil(self.$finish()), ", true)")
        }, 0);
        return $def(self, '$compile_range_initialize', function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr_or_nil(self.$start()), ",", self.$expr_or_nil(self.$finish()), ", true)")
        }, 0);
      })($nesting[0], $$('RangeNode'));
      (function($base, $super) {
        var self = $klass($base, $super, 'RationalNode');

        
        
        self.$handle("rational");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push("Opal.Rational.$new(" + (self.$value().$numerator()) + ", " + (self.$value().$denominator()) + ")")
        }, 0);
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'ComplexNode');

        
        
        self.$handle("complex");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push("Opal.Complex.$new(" + (self.$value().$real()) + ", " + (self.$value().$imag()) + ")")
        }, 0);
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/variables"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $range = Opal.range, $eqeqeq = Opal.eqeqeq, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs('require,handle,children,irb?,compiler,top?,scope,using_irb?,push,to_s,var_name,with_temp,property,wrap,add_local,expr,value,expr?,recv?,[],name,add_ivar,self,helper,add_gvar,===,handle_global_match,handle_post_match,handle_pre_match,raise,index,stmt?,class_variable_owner,inspect');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'LocalVariableNode');

        
        
        self.$handle("lvar");
        self.$children("var_name");
        
        $def(self, '$using_irb?', function $LocalVariableNode_using_irb$ques$1() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$compiler()['$irb?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_1
          }
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          if (!$truthy(self['$using_irb?']())) {
            return self.$push(self.$var_name().$to_s())
          };
          return $send(self, 'with_temp', [], function $$2(tmp){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (tmp == null) tmp = nil;;
            self.$push(self.$property(self.$var_name().$to_s()));
            return self.$wrap("((" + (tmp) + " = Opal.irb_vars", ") == null ? nil : " + (tmp) + ")");}, {$$arity: 1, $$s: self});
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'LocalAssignNode');

        
        
        self.$handle("lvasgn");
        self.$children("var_name", "value");
        
        $def(self, '$using_irb?', function $LocalAssignNode_using_irb$ques$3() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$compiler()['$irb?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_1
          }
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          if ($truthy(self['$using_irb?']())) {
            self.$push("Opal.irb_vars" + (self.$property(self.$var_name().$to_s())) + " = ")
          } else {
            
            self.$add_local(self.$var_name().$to_s());
            self.$push("" + (self.$var_name()) + " = ");
          };
          self.$push(self.$expr(self.$value()));
          if ((($truthy(self['$recv?']()) || ($truthy(self['$expr?']()))) && ($truthy(self.$value())))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'LocalDeclareNode');

        
        
        self.$handle("lvdeclare");
        self.$children("var_name");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$add_local(self.$var_name().$to_s());
          return nil;
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'InstanceVariableNode');

        
        
        self.$handle("ivar");
        self.$children("name");
        
        $def(self, '$var_name', function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$add_ivar(name);
          return self.$push("" + (self.$scope().$self()) + (name));
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'InstanceAssignNode');

        
        
        self.$handle("ivasgn");
        self.$children("name", "value");
        
        $def(self, '$var_name', function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$push("" + (self.$scope().$self()) + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ((($truthy(self['$recv?']()) || ($truthy(self['$expr?']()))) && ($truthy(self.$value())))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'GlobalVariableNode');

        
        
        self.$handle("gvar");
        self.$children("name");
        
        $def(self, '$var_name', function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$add_gvar(name);
          return self.$push("$gvars" + (name));
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BackRefNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("back_ref");
        
        $def(self, '$compile', function $$compile() {
          var $yield = $$compile.$$p || nil, self = this, $ret_or_1 = nil;

          delete $$compile.$$p;
          
          self.$helper("gvars");
          if ($eqeqeq("&", ($ret_or_1 = self.$var_name()))) {
            return self.$handle_global_match()
          } else if ($eqeqeq("'", $ret_or_1)) {
            return self.$handle_post_match()
          } else if ($eqeqeq("`", $ret_or_1)) {
            return self.$handle_pre_match()
          } else if ($eqeqeq("+", $ret_or_1)) {
            return $send2(self, $find_super(self, 'compile', $$compile, false, true), 'compile', [], $yield)
          } else {
            return self.$raise($$('NotImplementedError'))
          };
        }, 0);
        
        $def(self, '$handle_global_match', function $$handle_global_match() {
          var self = this;

          return $send(self, 'with_temp', [], function $$4(tmp){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (tmp == null) tmp = nil;;
            return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](0))");}, {$$arity: 1, $$s: self})
        }, 0);
        
        $def(self, '$handle_pre_match', function $$handle_pre_match() {
          var self = this;

          return $send(self, 'with_temp', [], function $$5(tmp){var self = $$5.$$s == null ? this : $$5.$$s;

            
            
            if (tmp == null) tmp = nil;;
            return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$pre_match())");}, {$$arity: 1, $$s: self})
        }, 0);
        return $def(self, '$handle_post_match', function $$handle_post_match() {
          var self = this;

          return $send(self, 'with_temp', [], function $$6(tmp){var self = $$6.$$s == null ? this : $$6.$$s;

            
            
            if (tmp == null) tmp = nil;;
            return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$post_match())");}, {$$arity: 1, $$s: self})
        }, 0);
      })($nesting[0], $$('GlobalVariableNode'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'GlobalAssignNode');

        
        
        self.$handle("gvasgn");
        self.$children("name", "value");
        
        $def(self, '$var_name', function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$push("$gvars" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ((($truthy(self['$recv?']()) || ($truthy(self['$expr?']()))) && ($truthy(self.$value())))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'NthrefNode');

        
        
        self.$handle("nth_ref");
        self.$children("index");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$helper("gvars");
          return $send(self, 'with_temp', [], function $$7(tmp){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (tmp == null) tmp = nil;;
            return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](" + (self.$index()) + "))");}, {$$arity: 1, $$s: self});
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'ClassVariableNode');

        
        
        self.$handle("cvar");
        self.$children("name");
        return $def(self, '$compile', function $$compile() {
          var self = this, tolerant = nil;

          
          self.$helper("class_variable_get");
          tolerant = false;
          if ($truthy(self['$stmt?']())) {
            tolerant = true
          };
          return self.$push("$class_variable_get(" + (self.$class_variable_owner()) + ", '" + (self.$name()) + "', " + (tolerant.$inspect()) + ")");
        }, 0);
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'ClassVarAssignNode');

        
        
        self.$handle("cvasgn");
        self.$children("name", "value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$helper("class_variable_set");
          return self.$push("$class_variable_set(" + (self.$class_variable_owner()) + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), ")");
        }, 0);
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/constants"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $def = Opal.def, $const_set = Opal.const_set;

  Opal.add_stubs('require,handle,children,magical_data_const?,push,optimized_access?,helper,name,==,const_scope,s,absolute_const,top_scope,recv,eval?,compiler,relative_access,scope,nil?,eof_content,freeze,include?,base,expr,value,nesting');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("const");
        self.$children("const_scope", "name");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$magical_data_const?']())) {
            return self.$push("$__END__")
          } else if ($truthy(self['$optimized_access?']())) {
            
            self.$helper("" + (self.$name()));
            return self.$push("$" + (self.$name()));
          } else if ($eqeq(self.$const_scope(), self.$s("cbase"))) {
            return self.$push("" + (self.$top_scope().$absolute_const()) + "('" + (self.$name()) + "')")
          } else if ($truthy(self.$const_scope())) {
            return self.$push("" + (self.$top_scope().$absolute_const()) + "(", self.$recv(self.$const_scope()), ", '" + (self.$name()) + "')")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$push("" + (self.$scope().$relative_access()) + "('" + (self.$name()) + "')")
          } else {
            return self.$push("" + (self.$scope().$relative_access()) + "('" + (self.$name()) + "')")
          }
        }, 0);
        
        $def(self, '$magical_data_const?', function $ConstNode_magical_data_const$ques$1() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$const_scope()['$nil?']())) ? (self.$name()['$==']("DATA")) : ($ret_or_2))))) {
            return self.$compiler().$eof_content()
          } else {
            return $ret_or_1
          }
        }, 0);
        $const_set($nesting[0], 'OPTIMIZED_ACCESS_CONSTS', ["BasicObject", "Object", "Module", "Class", "Opal", "Kernel", "NilClass"].$freeze());
        return $def(self, '$optimized_access?', function $ConstNode_optimized_access$ques$2() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$const_scope()['$=='](self.$s("cbase"))))) {
            return $$('OPTIMIZED_ACCESS_CONSTS')['$include?'](self.$name())
          } else {
            return $ret_or_1
          }
        }, 0);
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'CbaseNode');

        
        
        self.$handle("cbase");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push("'::'")
        }, 0);
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'ConstAssignNode');

        
        
        self.$handle("casgn");
        self.$children("base", "name", "value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$helper("const_set");
          if ($truthy(self.$base())) {
            return self.$push("$const_set(", self.$expr(self.$base()), ", '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          } else {
            return self.$push("$const_set(" + (self.$scope().$nesting()) + "[0], '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          };
        }, 0);
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/rewriters/break_finder"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $alias = Opal.alias;

  Opal.add_stubs('require');
  
  self.$require("opal/rewriter");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'BreakFinder');

        var $proto = self.$$prototype;

        $proto.found_break = nil;
        
        
        $def(self, '$initialize', function $$initialize() {
          var self = this;

          return (self.found_break = false)
        }, 0);
        
        $def(self, '$found_break?', function $BreakFinder_found_break$ques$1() {
          var self = this;

          return self.found_break
        }, 0);
        
        $def(self, '$on_break', function $$on_break(node) {
          var self = this;

          
          self.found_break = true;
          return node;
        }, 1);
        
        $def(self, '$stop_lookup', function $$stop_lookup(node) {
          
          return nil
        }, 1);
        $alias(self, "on_for", "stop_lookup");
        $alias(self, "on_while", "stop_lookup");
        $alias(self, "on_while_post", "stop_lookup");
        $alias(self, "on_until", "stop_lookup");
        $alias(self, "on_until_post", "stop_lookup");
        return $alias(self, "on_block", "stop_lookup");
      })($nesting[0], $$$($$$($$('Opal'), 'Rewriters'), 'Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/call"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $hash2 = Opal.hash2, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $defs = Opal.defs, $send2 = Opal.send2, $find_super = Opal.find_super, $slice = Opal.slice, $truthy = Opal.truthy, $def = Opal.def, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $not = Opal.not, $neqeq = Opal.neqeq, $eqeqeq = Opal.eqeqeq, $to_ary = Opal.to_ary, $Opal = Opal.Opal, $range = Opal.range;

  Opal.add_stubs('require,handle,attr_reader,freeze,[]=,-,define_method,to_proc,include?,type,s,handle_special,record_method?,<<,method_calls,compiler,to_sym,meth,using_eval?,compile_eval_var,using_irb?,compile_irb_var,default_compile,private,iter,new,process,found_break?,splat?,!,empty?,collect_refinements_temps,scope,auto_await?,push,await_encountered=,invoke_using_refinement?,compile_using_refined_send,invoke_using_send?,compile_using_send,compile_simple_call_chain,compile_break_catcher,helper,compile_receiver,compile_method_name,compile_arguments,compile_block_pass,compile_refinements,recv,receiver_sexp,expr,arglist,children,map,iter_has_break?,unshift,line,method_jsid,any?,==,recvr,mid_to_jsid,to_s,with_temp,intern,irb?,top?,variable_like?,eval?,scope_variables,nil?,updated,async_await,!=,match?,method,arity,[],each,add_special,call,inline_operators?,fragment,resolve,requires,file,dirname,cleanpath,join,Pathname,self,inspect,length,warning,autoloads,required_trees,force_encoding,encoding,+,handle_block_given_call,def?,mid,module_name,count,accepts_using?,using_refinement,first,refinements_temp,arity_check?,defines_lambda,push_nesting?,nesting,new_temp,scope_locals,source_location,size,last,dynamic_require_severity,handle_part,===,is_a?,expand_path,split,error,each_with_object,pop');
  
  self.$require("set");
  self.$require("pathname");
  self.$require("opal/nodes/base");
  self.$require("opal/rewriters/break_finder");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CallNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.sexp = $proto.compiler = nil;
        
        self.$handle("send");
        self.$attr_reader("recvr", "meth", "arglist", "iter");
        $const_set($nesting[0], 'SPECIALS', $hash2([], {}));
        $const_set($nesting[0], 'OPERATORS', $hash2(["+", "-", "*", "/", "<", "<=", ">", ">="], {"+": "plus", "-": "minus", "*": "times", "/": "divide", "<": "lt", "<=": "le", ">": "gt", ">=": "ge"}).$freeze());
        $defs(self, '$add_special', function $$add_special(name, options) {
          var handler = $$add_special.$$p || nil, self = this, $writer = nil;

          delete $$add_special.$$p;
          
          ;
          
          if (options == null) options = $hash2([], {});;
          
          $writer = [name, options];
          $send($$('SPECIALS'), '[]=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send(self, 'define_method', ["handle_" + (name)], handler.$to_proc());
        }, -2);
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $b, $c, $yield = $$initialize.$$p || nil, self = this, args = nil, rest = nil, last_arg = nil;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          $b = [].concat($to_a(self.sexp)), (self.recvr = ($b[0] == null ? nil : $b[0])), (self.meth = ($b[1] == null ? nil : $b[1])), (args = $slice.call($b, 2)), $b;
          $b = [].concat($to_a(args)), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_arg = ($b[$c] == null ? nil : $b[$c])), $b;
          if (($truthy(last_arg) && ($truthy(["iter", "block_pass"]['$include?'](last_arg.$type()))))) {
            
            self.iter = last_arg;
            args = rest;
          } else {
            self.iter = nil
          };
          return (self.arglist = $send(self, 's', ["arglist"].concat($to_a(args))));
        }, -1);
        
        $def(self, '$compile', function $$compile() {try {

          var self = this;

          return $send(self, 'handle_special', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

            
            if ($truthy(self['$record_method?']())) {
              self.$compiler().$method_calls()['$<<'](self.$meth().$to_sym())
            };
            if ($truthy(self['$using_eval?']())) {
              Opal.ret(self.$compile_eval_var())
            };
            if ($truthy(self['$using_irb?']())) {
              Opal.ret(self.$compile_irb_var())
            };
            return self.$default_compile();}, {$$arity: 0, $$s: self})
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, 0);
        self.$private();
        
        $def(self, '$iter_has_break?', function $CallNode_iter_has_break$ques$2() {
          var self = this, finder = nil;

          
          if (!$truthy(self.$iter())) {
            return false
          };
          finder = $$$($$$($$('Opal'), 'Rewriters'), 'BreakFinder').$new();
          finder.$process(self.$iter());
          return finder['$found_break?']();
        }, 0);
        
        $def(self, '$invoke_using_send?', function $CallNode_invoke_using_send$ques$3() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$iter()))) {
            return $ret_or_1
          } else {
            return self['$splat?']()
          }
        }, 0);
        
        $def(self, '$invoke_using_refinement?', function $CallNode_invoke_using_refinement$ques$4() {
          var self = this;

          return self.$scope().$scope().$collect_refinements_temps()['$empty?']()['$!']()
        }, 0);
        
        $def(self, '$default_compile', function $$default_compile() {
          var self = this, $writer = nil;

          
          if ($truthy(self['$auto_await?']())) {
            
            self.$push("await ");
            
            $writer = [true];
            $send(self.$scope(), 'await_encountered=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          };
          if ($truthy(self['$invoke_using_refinement?']())) {
            self.$compile_using_refined_send()
          } else if ($truthy(self['$invoke_using_send?']())) {
            self.$compile_using_send()
          } else {
            self.$compile_simple_call_chain()
          };
          return self.$compile_break_catcher();
        }, 0);
        
        $def(self, '$compile_using_send', function $$compile_using_send() {
          var self = this;

          
          self.$helper("send");
          self.$push("$send(");
          self.$compile_receiver();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, 0);
        
        $def(self, '$compile_using_refined_send', function $$compile_using_refined_send() {
          var self = this;

          
          self.$helper("refined_send");
          self.$push("$refined_send(");
          self.$compile_refinements();
          self.$compile_receiver();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, 0);
        
        $def(self, '$compile_receiver', function $$compile_receiver() {
          var self = this;

          return self.$push(self.$recv(self.$receiver_sexp()))
        }, 0);
        
        $def(self, '$compile_method_name', function $$compile_method_name() {
          var self = this;

          return self.$push(", '" + (self.$meth()) + "'")
        }, 0);
        
        $def(self, '$compile_arguments', function $$compile_arguments() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self['$splat?']())) {
            return self.$push(self.$expr(self.$arglist()))
          } else if ($truthy(self.$arglist().$children()['$empty?']())) {
            return self.$push("[]")
          } else {
            return self.$push("[", self.$expr(self.$arglist()), "]")
          };
        }, 0);
        
        $def(self, '$compile_block_pass', function $$compile_block_pass() {
          var self = this;

          if ($truthy(self.$iter())) {
            return self.$push(", ", self.$expr(self.$iter()))
          } else {
            return nil
          }
        }, 0);
        
        $def(self, '$compile_refinements', function $$compile_refinements() {
          var self = this, refinements = nil;

          
          refinements = $send(self.$scope().$collect_refinements_temps(), 'map', [], function $$5(i){var self = $$5.$$s == null ? this : $$5.$$s;

            
            
            if (i == null) i = nil;;
            return self.$s("js_tmp", i);}, {$$arity: 1, $$s: self});
          return self.$push(self.$expr($send(self, 's', ["array"].concat($to_a(refinements)))), ", ");
        }, 0);
        
        $def(self, '$compile_break_catcher', function $$compile_break_catcher() {
          var self = this;

          if ($truthy(self['$iter_has_break?']())) {
            
            self.$unshift("return ");
            self.$unshift("(function(){var $brk = Opal.new_brk(); try {");
            return self.$line("} catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()");
          } else {
            return nil
          }
        }, 0);
        
        $def(self, '$compile_simple_call_chain', function $$compile_simple_call_chain() {
          var self = this;

          return self.$push(self.$recv(self.$receiver_sexp()), self.$method_jsid(), "(", self.$expr(self.$arglist()), ")")
        }, 0);
        
        $def(self, '$splat?', function $CallNode_splat$ques$6() {
          var self = this;

          return $send(self.$arglist().$children(), 'any?', [], function $$7(a){
            
            
            if (a == null) a = nil;;
            return a.$type()['$==']("splat");}, 1)
        }, 0);
        
        $def(self, '$receiver_sexp', function $$receiver_sexp() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$recvr()))) {
            return $ret_or_1
          } else {
            return self.$s("self")
          }
        }, 0);
        
        $def(self, '$method_jsid', function $$method_jsid() {
          var self = this;

          return self.$mid_to_jsid(self.$meth().$to_s())
        }, 0);
        
        $def(self, '$record_method?', function $CallNode_record_method$ques$8() {
          
          return true
        }, 0);
        
        $def(self, '$compile_irb_var', function $$compile_irb_var() {
          var self = this;

          return $send(self, 'with_temp', [], function $$9(tmp){var self = $$9.$$s == null ? this : $$9.$$s, lvar = nil, call = nil;

            
            
            if (tmp == null) tmp = nil;;
            lvar = self.$meth();
            call = self.$s("send", self.$s("self"), self.$meth().$intern(), self.$s("arglist"));
            return self.$push("((" + (tmp) + " = Opal.irb_vars." + (lvar) + ") == null ? ", self.$expr(call), " : " + (tmp) + ")");}, {$$arity: 1, $$s: self})
        }, 0);
        
        $def(self, '$compile_eval_var', function $$compile_eval_var() {
          var self = this;

          return self.$push(self.$meth().$to_s())
        }, 0);
        
        $def(self, '$using_irb?', function $CallNode_using_irb$ques$10() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.compiler['$irb?']())) ? (self.$scope()['$top?']()) : ($ret_or_2))))) {
            return self['$variable_like?']()
          } else {
            return $ret_or_1
          }
        }, 0);
        
        $def(self, '$using_eval?', function $CallNode_using_eval$ques$11() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.compiler['$eval?']())) ? (self.$scope()['$top?']()) : ($ret_or_2))))) {
            return self.compiler.$scope_variables()['$include?'](self.$meth())
          } else {
            return $ret_or_1
          }
        }, 0);
        
        $def(self, '$variable_like?', function $CallNode_variable_like$ques$12() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$arglist()['$=='](self.$s("arglist")))) ? (self.$recvr()['$nil?']()) : ($ret_or_2))))) {
            return self.$iter()['$nil?']()
          } else {
            return $ret_or_1
          }
        }, 0);
        
        $def(self, '$sexp_with_arglist', function $$sexp_with_arglist() {
          var self = this;

          return self.sexp.$updated(nil, [self.$recvr(), self.$meth(), self.$arglist()])
        }, 0);
        
        $def(self, '$auto_await?', function $CallNode_auto_await$ques$13() {
          var self = this, awaited_set = nil, $ret_or_1 = nil, $ret_or_2 = nil;

          
          awaited_set = self.$compiler().$async_await();
          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = awaited_set)) ? (awaited_set['$!='](true)) : ($ret_or_2))))) {
            return awaited_set['$match?'](self.$meth().$to_s())
          } else {
            return $ret_or_1
          };
        }, 0);
        
        $def(self, '$handle_special', function $$handle_special() {
          var compile_default = $$handle_special.$$p || nil, self = this, method = nil;

          delete $$handle_special.$$p;
          
          ;
          if ($truthy($$('SPECIALS')['$include?'](self.$meth()))) {
            
            method = self.$method("handle_" + (self.$meth()));
            if ($eqeq(method.$arity(), 1)) {
              return method['$[]'](compile_default)
            } else {
              return method['$[]']()
            };
          } else {
            return Opal.yieldX(compile_default, []);
          };
        }, 0);
        $send($$('OPERATORS'), 'each', [], function $CallNode$14(operator, name){var self = $CallNode$14.$$s == null ? this : $CallNode$14.$$s;

          
          
          if (operator == null) operator = nil;;
          
          if (name == null) name = nil;;
          return $send(self, 'add_special', [operator.$to_sym()], function $$15(compile_default){var $a, self = $$15.$$s == null ? this : $$15.$$s, lhs = nil, rhs = nil;

            
            
            if (compile_default == null) compile_default = nil;;
            if ($truthy(self['$invoke_using_refinement?']())) {
              return compile_default.$call()
            } else if ($truthy(self.$compiler()['$inline_operators?']())) {
              
              if ($truthy(self['$record_method?']())) {
                self.$compiler().$method_calls()['$<<'](operator.$to_sym())
              };
              self.$helper("rb_" + (name));
              $a = [self.$expr(self.$recvr()), self.$expr(self.$arglist())], (lhs = $a[0]), (rhs = $a[1]), $a;
              self.$push(self.$fragment("$rb_" + (name) + "("));
              self.$push(lhs);
              self.$push(self.$fragment(", "));
              self.$push(rhs);
              return self.$push(self.$fragment(")"));
            } else {
              return compile_default.$call()
            };}, {$$arity: 1, $$s: self});}, {$$arity: 2, $$s: self});
        $send(self, 'add_special', ["require"], function $CallNode$16(compile_default){var self = $CallNode$16.$$s == null ? this : $CallNode$16.$$s, str = nil;

          
          
          if (compile_default == null) compile_default = nil;;
          str = $$('DependencyResolver').$new(self.$compiler(), self.$arglist().$children()['$[]'](0)).$resolve();
          if (!$truthy(str['$nil?']())) {
            self.$compiler().$requires()['$<<'](str)
          };
          return compile_default.$call();}, {$$arity: 1, $$s: self});
        $send(self, 'add_special', ["require_relative"], function $CallNode$17(){var self = $CallNode$17.$$s == null ? this : $CallNode$17.$$s, arg = nil, file = nil, dir = nil;

          
          arg = self.$arglist().$children()['$[]'](0);
          file = self.$compiler().$file();
          if ($eqeq(arg.$type(), "str")) {
            
            dir = $$('File').$dirname(file);
            self.$compiler().$requires()['$<<'](self.$Pathname(dir).$join(arg.$children()['$[]'](0)).$cleanpath().$to_s());
          };
          self.$push(self.$fragment("" + (self.$scope().$self()) + ".$require(" + (file.$inspect()) + "+ '/../' + "));
          self.$push(self.$process(self.$arglist()));
          return self.$push(self.$fragment(")"));}, {$$arity: 0, $$s: self});
        $send(self, 'add_special', ["autoload"], function $CallNode$18(compile_default){var self = $CallNode$18.$$s == null ? this : $CallNode$18.$$s, args = nil, str = nil;

          
          
          if (compile_default == null) compile_default = nil;;
          args = self.$arglist().$children();
          if (($eqeq(args.$length(), 2) && ($eqeq(args['$[]'](0).$type(), "sym")))) {
            
            str = $$('DependencyResolver').$new(self.$compiler(), args['$[]'](1), "ignore").$resolve();
            if ($truthy(str['$nil?']())) {
              self.$compiler().$warning("File for autoload of constant '" + (args['$[]'](0).$children()['$[]'](0)) + "' could not be bundled!")
            } else {
              
              self.$compiler().$requires()['$<<'](str);
              self.$compiler().$autoloads()['$<<'](str);
            };
          };
          return compile_default.$call();}, {$$arity: 1, $$s: self});
        $send(self, 'add_special', ["require_tree"], function $CallNode$19(compile_default){var $a, self = $CallNode$19.$$s == null ? this : $CallNode$19.$$s, first_arg = nil, rest = nil, relative_path = nil, dir = nil, full_path = nil;

          
          
          if (compile_default == null) compile_default = nil;;
          $a = [].concat($to_a(self.$arglist().$children())), (first_arg = ($a[0] == null ? nil : $a[0])), (rest = $slice.call($a, 1)), $a;
          if ($eqeq(first_arg.$type(), "str")) {
            
            relative_path = first_arg.$children()['$[]'](0);
            self.$compiler().$required_trees()['$<<'](relative_path);
            dir = $$('File').$dirname(self.$compiler().$file());
            full_path = self.$Pathname(dir).$join(relative_path).$cleanpath().$to_s();
            full_path.$force_encoding(relative_path.$encoding());
            first_arg = first_arg.$updated(nil, [full_path]);
          };
          self.arglist = self.$arglist().$updated(nil, $rb_plus([first_arg], rest));
          return compile_default.$call();}, {$$arity: 1, $$s: self});
        $send(self, 'add_special', ["block_given?"], function $CallNode$20(){var self = $CallNode$20.$$s == null ? this : $CallNode$20.$$s;
          if (self.sexp == null) self.sexp = nil;

          return self.$push(self.$compiler().$handle_block_given_call(self.sexp))}, {$$arity: 0, $$s: self});
        $send(self, 'add_special', ["__callee__"], function $CallNode$21(){var self = $CallNode$21.$$s == null ? this : $CallNode$21.$$s;

          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, {$$arity: 0, $$s: self});
        $send(self, 'add_special', ["__method__"], function $CallNode$22(){var self = $CallNode$22.$$s == null ? this : $CallNode$22.$$s;

          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, {$$arity: 0, $$s: self});
        $send(self, 'add_special', ["__dir__"], function $CallNode$23(){var self = $CallNode$23.$$s == null ? this : $CallNode$23.$$s;

          return self.$push($$('File').$dirname($$$($$('Opal'), 'Compiler').$module_name(self.$compiler().$file())).$inspect())}, {$$arity: 0, $$s: self});
        $send(self, 'add_special', ["using"], function $CallNode$24(compile_default){var self = $CallNode$24.$$s == null ? this : $CallNode$24.$$s;

          
          
          if (compile_default == null) compile_default = nil;;
          if (($truthy(self.$scope()['$accepts_using?']()) && ($eqeq(self.$arglist().$children().$count(), 1)))) {
            return self.$using_refinement(self.$arglist().$children().$first())
          } else {
            return compile_default.$call()
          };}, {$$arity: 1, $$s: self});
        
        $def(self, '$using_refinement', function $$using_refinement(arg) {
          var $a, self = this, prev = nil, curr = nil;

          
          $a = [].concat($to_a(self.$scope().$refinements_temp())), (prev = ($a[0] == null ? nil : $a[0])), (curr = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(prev)) {
            return self.$push("(" + (curr) + " = " + (prev) + ".slice(), " + (curr) + ".push(", self.$expr(arg), "), " + (self.$scope().$self()) + ")")
          } else {
            return self.$push("(" + (curr) + " = [", self.$expr(arg), "], " + (self.$scope().$self()) + ")")
          };
        }, 1);
        $send(self, 'add_special', ["debugger"], function $CallNode$25(){var self = $CallNode$25.$$s == null ? this : $CallNode$25.$$s;

          return self.$push(self.$fragment("debugger"))}, {$$arity: 0, $$s: self});
        $send(self, 'add_special', ["__OPAL_COMPILER_CONFIG__"], function $CallNode$26(){var self = $CallNode$26.$$s == null ? this : $CallNode$26.$$s;

          return self.$push(self.$fragment("Opal.hash({ arity_check: " + (self.$compiler()['$arity_check?']()) + " })"))}, {$$arity: 0, $$s: self});
        $send(self, 'add_special', ["lambda"], function $CallNode$27(compile_default){var self = $CallNode$27.$$s == null ? this : $CallNode$27.$$s;

          
          
          if (compile_default == null) compile_default = nil;;
          return $send(self.$scope(), 'defines_lambda', [], function $$28(){
            return compile_default.$call()}, 0);}, {$$arity: 1, $$s: self});
        $send(self, 'add_special', ["nesting"], function $CallNode$29(compile_default){var self = $CallNode$29.$$s == null ? this : $CallNode$29.$$s, push_nesting = nil;

          
          
          if (compile_default == null) compile_default = nil;;
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = " + (self.$scope().$nesting()) + ", ")
          };
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
        $send(self, 'add_special', ["constants"], function $CallNode$30(compile_default){var self = $CallNode$30.$$s == null ? this : $CallNode$30.$$s, push_nesting = nil;

          
          
          if (compile_default == null) compile_default = nil;;
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = " + (self.$scope().$nesting()) + ", ")
          };
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
        $send(self, 'add_special', ["eval"], function $CallNode$31(compile_default){var self = $CallNode$31.$$s == null ? this : $CallNode$31.$$s, temp = nil, scope_variables = nil;

          
          
          if (compile_default == null) compile_default = nil;;
          if (($neqeq(self.$arglist().$children().$length(), 1) || ($not([self.$s("self"), nil]['$include?'](self.$recvr()))))) {
            return compile_default.$call();
          };
          self.$scope().$nesting();
          temp = self.$scope().$new_temp();
          scope_variables = $send(self.$scope().$scope_locals(), 'map', [], "to_s".$to_proc()).$inspect();
          self.$push("(" + (temp) + " = ", self.$expr(self.$arglist()));
          self.$push(", typeof Opal.compile === 'function' ? eval(Opal.compile(" + (temp));
          self.$push(", {scope_variables: ", scope_variables);
          self.$push(", arity_check: " + (self.$compiler()['$arity_check?']()) + ", file: '(eval)', eval: true})) : ");
          return self.$push("" + (self.$scope().$self()) + ".$eval(" + (temp) + "))");}, {$$arity: 1, $$s: self});
        $send(self, 'add_special', ["local_variables"], function $CallNode$32(compile_default){var self = $CallNode$32.$$s == null ? this : $CallNode$32.$$s, scope_variables = nil;

          
          
          if (compile_default == null) compile_default = nil;;
          if (!$truthy([self.$s("self"), nil]['$include?'](self.$recvr()))) {
            return compile_default.$call();
          };
          scope_variables = $send(self.$scope().$scope_locals(), 'map', [], "to_s".$to_proc()).$inspect();
          return self.$push(scope_variables);}, {$$arity: 1, $$s: self});
        $send(self, 'add_special', ["binding"], function $CallNode$33(compile_default){var self = $CallNode$33.$$s == null ? this : $CallNode$33.$$s;

          
          
          if (compile_default == null) compile_default = nil;;
          if (!$truthy(self.$recvr()['$nil?']())) {
            return compile_default.$call();
          };
          self.$scope().$nesting();
          self.$push("Opal.Binding.$new(");
          self.$push("  function($code, $value) {");
          self.$push("    if (typeof $value === 'undefined') {");
          self.$push("      return eval($code);");
          self.$push("    }");
          self.$push("    else {");
          self.$push("      return eval($code + ' = $value');");
          self.$push("    }");
          self.$push("  },");
          self.$push("  ", $send(self.$scope().$scope_locals(), 'map', [], "to_s".$to_proc()).$inspect(), ",");
          self.$push("  ", self.$scope().$self(), ",");
          self.$push("  ", self.$source_location());
          return self.$push(")");}, {$$arity: 1, $$s: self});
        $send(self, 'add_special', ["__await__"], function $CallNode$34(compile_default){var self = $CallNode$34.$$s == null ? this : $CallNode$34.$$s, $writer = nil;

          
          
          if (compile_default == null) compile_default = nil;;
          if ($truthy(self.$compiler().$async_await())) {
            
            self.$push(self.$fragment("(await ("));
            self.$push(self.$process(self.$recvr()));
            self.$push(self.$fragment("))"));
            
            $writer = [true];
            $send(self.$scope(), 'await_encountered=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          } else {
            return compile_default.$call()
          };}, {$$arity: 1, $$s: self});
        
        $def(self, '$push_nesting?', function $CallNode_push_nesting$ques$35() {
          var self = this, recv = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          
          recv = self.$children().$first();
          if ($truthy(($ret_or_1 = self.$children().$size()['$=='](2)))) {
            
            if ($truthy(($ret_or_2 = recv['$nil?']()))) {
              return $ret_or_2
            } else {
              
              if ($truthy(($ret_or_3 = recv.$type()['$==']("const")))) {
                return recv.$children().$last()['$==']("Module")
              } else {
                return $ret_or_3
              };
            };
          } else {
            return $ret_or_1
          };
        }, 0);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DependencyResolver');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

          $proto.compiler = $proto.sexp = $proto.missing_dynamic_require = nil;
          
          
          $def(self, '$initialize', function $$initialize(compiler, sexp, missing_dynamic_require) {
            var self = this, $ret_or_1 = nil;

            
            
            if (missing_dynamic_require == null) missing_dynamic_require = nil;;
            self.compiler = compiler;
            self.sexp = sexp;
            return (self.missing_dynamic_require = ($truthy(($ret_or_1 = missing_dynamic_require)) ? ($ret_or_1) : (self.compiler.$dynamic_require_severity())));
          }, -3);
          
          $def(self, '$resolve', function $$resolve() {
            var self = this;

            return self.$handle_part(self.sexp)
          }, 0);
          
          $def(self, '$handle_part', function $$handle_part(sexp, missing_dynamic_require) {
            var $a, $b, self = this, $ret_or_1 = nil, recv = nil, meth = nil, args = nil, parts = nil;

            
            
            if (missing_dynamic_require == null) missing_dynamic_require = self.missing_dynamic_require;;
            if ($truthy(sexp)) {
              if ($eqeqeq("str", ($ret_or_1 = sexp.$type()))) {
                return sexp.$children()['$[]'](0)
              } else if ($eqeqeq("dstr", $ret_or_1)) {
                return $send(sexp.$children(), 'map', [], function $$36(i){var self = $$36.$$s == null ? this : $$36.$$s;

                  
                  
                  if (i == null) i = nil;;
                  return self.$handle_part(i);}, {$$arity: 1, $$s: self}).$join()
              } else if ($eqeqeq("begin", $ret_or_1)) {
                if ($eqeq(sexp.$children().$length(), 1)) {
                  return self.$handle_part(sexp.$children()['$[]'](0))
                }
              } else if ($eqeqeq("send", $ret_or_1)) {
                
                $b = sexp.$children(), $a = $to_ary($b), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $b;
                parts = $send(args, 'map', [], function $$37(s){var self = $$37.$$s == null ? this : $$37.$$s;

                  
                  
                  if (s == null) s = nil;;
                  return self.$handle_part(s, "ignore");}, {$$arity: 1, $$s: self});
                if ($truthy(parts['$include?'](nil))) {
                  return nil
                };
                if ((($truthy(recv['$is_a?']($$$($$$($Opal, 'AST'), 'Node'))) && ($eqeq(recv.$type(), "const"))) && ($eqeq(recv.$children().$last(), "File")))) {
                  if ($eqeq(meth, "expand_path")) {
                    return $send(self, 'expand_path', $to_a(parts))
                  } else if ($eqeq(meth, "join")) {
                    return self.$expand_path(parts.$join("/"))
                  } else if ($eqeq(meth, "dirname")) {
                    return self.$expand_path(parts['$[]'](0).$split("/")['$[]']($range(0, -1, true)).$join("/"))
                  }
                } else if ($eqeq(meth, "__dir__")) {
                  return $$('File').$dirname($$$($$('Opal'), 'Compiler').$module_name(self.compiler.$file()))
                };
              } else {
                nil
              }
            };
            if ($eqeqeq("error", ($ret_or_1 = missing_dynamic_require))) {
              return self.compiler.$error("Cannot handle dynamic require", self.sexp.$line())
            } else if ($eqeqeq("warning", $ret_or_1)) {
              return self.compiler.$warning("Cannot handle dynamic require", self.sexp.$line())
            } else {
              return nil
            };
          }, -2);
          return $def(self, '$expand_path', function $$expand_path(path, base) {
            
            
            
            if (base == null) base = "";;
            return $send(((("" + (base)) + "/") + (path)).$split("/"), 'each_with_object', [[]], function $$38(part, p){
              
              
              if (part == null) part = nil;;
              
              if (p == null) p = nil;;
              if ($eqeq(part, "")) {
                return nil
              } else if ($eqeq(part, "..")) {
                return p.$pop()
              } else {
                return p['$<<'](part)
              };}, 2).$join("/");
          }, -2);
        })($nesting[0], null, $nesting);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/csend"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $def = Opal.def;

  Opal.add_stubs('require,handle,helper,conditional_send,recv,receiver_sexp,push,compile_method_name,compile_arguments,compile_block_pass');
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'CSendNode');

        
        
        self.$handle("csend");
        return $def(self, '$default_compile', function $$default_compile() {
          var self = this;

          
          self.$helper("send");
          return $send(self, 'conditional_send', [self.$recv(self.$receiver_sexp())], function $$1(receiver_temp){var self = $$1.$$s == null ? this : $$1.$$s;

            
            
            if (receiver_temp == null) receiver_temp = nil;;
            self.$push("$send(", receiver_temp);
            self.$compile_method_name();
            self.$compile_arguments();
            self.$compile_block_pass();
            return self.$push(")");}, {$$arity: 1, $$s: self});
        }, 0);
      })($nesting[0], $$('CallNode'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/call_special"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $send = Opal.send;

  Opal.add_stubs('require,handle,children,push,recv,recvr,expr,property,value,<<,default_compile,meth,receiver_sexp,method_jsid,compile_arguments,iter,s,lhs,rhs,==,type,first,map,flatten,scan,to_proc,empty?,stmt?,process');
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'JsAttrNode');

        
        
        self.$handle("jsattr");
        self.$children("recvr", "property");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "]")
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'JsAttrAsgnNode');

        
        
        self.$handle("jsattrasgn");
        self.$children("recvr", "property", "value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "] = ", self.$expr(self.$value()))
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'JsCallNode');

        var $proto = self.$$prototype;

        $proto.iter = $proto.arglist = nil;
        
        self.$handle("jscall");
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          if ($truthy(self.iter)) {
            self.arglist = self.arglist['$<<'](self.iter)
          };
          return (self.iter = nil);
        }, -1);
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$default_compile()
        }, 0);
        
        $def(self, '$method_jsid', function $$method_jsid() {
          var self = this;

          return "." + (self.$meth())
        }, 0);
        return $def(self, '$compile_using_send', function $$compile_using_send() {
          var self = this;

          
          self.$push(self.$recv(self.$receiver_sexp()), self.$method_jsid(), ".apply(null");
          self.$compile_arguments();
          if ($truthy(self.$iter())) {
            self.$push(".concat(", self.$expr(self.$iter()), ")")
          };
          return self.$push(")");
        }, 0);
      })($nesting[0], $$('CallNode'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'Match3Node');

        var $proto = self.$$prototype;

        $proto.level = nil;
        
        self.$handle("match_with_lvasgn");
        self.$children("lhs", "rhs");
        return $def(self, '$compile', function $$compile() {
          var self = this, sexp = nil, re = nil, names = nil, names_def = nil;

          
          sexp = self.$s("send", self.$lhs(), "=~", self.$rhs());
          if (($eqeq(self.$lhs().$type(), "regexp") && ($eqeq(self.$lhs().$children().$first().$type(), "str")))) {
            
            re = self.$lhs().$children().$first().$children().$first();
            names = $send(re.$scan(/\(\?<([^>]*)>/).$flatten(), 'map', [], "to_sym".$to_proc());
            if (!$truthy(names['$empty?']())) {
              
              names_def = self.$s("lvasgn", "$m3names", self.$s("if", self.$s("gvar", "$~"), self.$s("send", self.$s("gvar", "$~"), "named_captures"), self.$s("hash")));
              names = $send(names, 'map', [], function $$1(name){var self = $$1.$$s == null ? this : $$1.$$s;

                
                
                if (name == null) name = nil;;
                return self.$s("lvasgn", name, self.$s("send", self.$s("lvar", "$m3names"), "[]", self.$s("sym", name)));}, {$$arity: 1, $$s: self});
              if ($truthy(self['$stmt?']())) {
                sexp = $send(self, 's', ["begin", sexp, names_def].concat($to_a(names)))
              } else {
                sexp = $send(self, 's', ["begin", self.$s("lvasgn", "$m3tmp", sexp), names_def].concat($to_a(names)).concat([self.$s("lvar", "$m3tmp")]))
              };
            };
          };
          return self.$push(self.$process(sexp, self.level));
        }, 0);
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/scope"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $def = Opal.def, $send = Opal.send, $rb_minus = Opal.rb_minus, $truthy = Opal.truthy, $not = Opal.not, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $hash2 = Opal.hash2;

  Opal.add_stubs('require,attr_accessor,attr_reader,indent,scope,compiler,scope=,-,==,iter?,!,class?,dup,push,map,ivars,gvars,empty?,<<,parser_indent,join,+,fragment,def_in_class?,add_proto_ivar,include?,has_local?,|,scope_locals,reject,start_with?,to_s,has_temp?,pop,next_temp,loop,succ,uses_block!,identify!,valid_name?,mid,compact,parent,name,scope_name,unique_temp,lambda?,def?,type,nil?,rescue_else_sexp,last,class,collect_refinements_temps,add_scope_local,new_refinements_temp,identity,block_name=,add_temp,block_name,line');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ScopeNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.type = $proto.is_lambda = $proto.lambda_definition = $proto.defs = $proto.parent = $proto.temps = $proto.locals = $proto.proto_ivars = $proto.compiler = $proto.ivars = $proto.gvars = $proto.args = $proto.queue = $proto.while_stack = $proto.identity = $proto.uses_block = $proto.rescues = $proto.in_resbody = $proto.in_ensure = $proto.next_retry_id = $proto.refinements_temp = $proto.block_prepared = nil;
        
        self.$attr_accessor("parent");
        self.$attr_accessor("name");
        self.$attr_accessor("block_name");
        self.$attr_reader("scope_name");
        self.$attr_reader("locals");
        self.$attr_reader("ivars");
        self.$attr_reader("gvars");
        self.$attr_accessor("mid");
        self.$attr_accessor("defs");
        self.$attr_reader("methods");
        self.$attr_accessor("catch_return", "has_break", "has_retry");
        self.$attr_accessor("rescue_else_sexp");
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          self.locals = [];
          self.temps = [];
          self.args = [];
          self.ivars = [];
          self.gvars = [];
          self.parent = nil;
          self.queue = [];
          self.unique = "a";
          self.while_stack = [];
          self.identity = nil;
          self.defs = nil;
          self.methods = [];
          self.uses_block = false;
          self.in_ensure = false;
          return (self.proto_ivars = []);
        }, -1);
        
        $def(self, '$in_scope', function $$in_scope() {
          var $yield = $$in_scope.$$p || nil, self = this;

          delete $$in_scope.$$p;
          return $send(self, 'indent', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, $writer = nil;
            if (self.parent == null) self.parent = nil;

            
            self.parent = self.$compiler().$scope();
            
            $writer = [self];
            $send(self.$compiler(), 'scope=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            Opal.yield1($yield, self);
            
            $writer = [self.parent];
            $send(self.$compiler(), 'scope=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, {$$arity: 0, $$s: self})
        }, 0);
        
        $def(self, '$class_scope?', function $ScopeNode_class_scope$ques$2() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.type['$==']("class")))) {
            return $ret_or_1
          } else {
            return self.type['$==']("module")
          }
        }, 0);
        
        $def(self, '$class?', function $ScopeNode_class$ques$3() {
          var self = this;

          return self.type['$==']("class")
        }, 0);
        
        $def(self, '$module?', function $ScopeNode_module$ques$4() {
          var self = this;

          return self.type['$==']("module")
        }, 0);
        
        $def(self, '$sclass?', function $ScopeNode_sclass$ques$5() {
          var self = this;

          return self.type['$==']("sclass")
        }, 0);
        
        $def(self, '$top?', function $ScopeNode_top$ques$6() {
          var self = this;

          return self.type['$==']("top")
        }, 0);
        
        $def(self, '$iter?', function $ScopeNode_iter$ques$7() {
          var self = this;

          return self.type['$==']("iter")
        }, 0);
        
        $def(self, '$def?', function $ScopeNode_def$ques$8() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.type['$==']("def")))) {
            return $ret_or_1
          } else {
            return self.type['$==']("defs")
          }
        }, 0);
        
        $def(self, '$lambda?', function $ScopeNode_lambda$ques$9() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$iter?']()))) {
            return self.is_lambda
          } else {
            return $ret_or_1
          }
        }, 0);
        
        $def(self, '$is_lambda!', function $ScopeNode_is_lambda$excl$10() {
          var self = this;

          return (self.is_lambda = true)
        }, 0);
        
        $def(self, '$defines_lambda', function $$defines_lambda() {
          var $yield = $$defines_lambda.$$p || nil, self = this;

          delete $$defines_lambda.$$p;
          
          self.lambda_definition = true;
          Opal.yieldX($yield, []);
          return (self.lambda_definition = false);
        }, 0);
        
        $def(self, '$lambda_definition?', function $ScopeNode_lambda_definition$ques$11() {
          var self = this;

          return self.lambda_definition
        }, 0);
        
        $def(self, '$def_in_class?', function $ScopeNode_def_in_class$ques$12() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = self.defs['$!']())) ? (self.type['$==']("def")) : ($ret_or_3)))) ? (self.parent) : ($ret_or_2))))) {
            return self.parent['$class?']()
          } else {
            return $ret_or_1
          }
        }, 0);
        
        $def(self, '$to_vars', function $$to_vars() {
          var self = this, vars = nil, iv = nil, gv = nil, indent = nil, str = nil, pvars = nil;

          
          vars = self.temps.$dup();
          $send(vars, 'push', $to_a($send(self.locals, 'map', [], function $$13(l){
            
            
            if (l == null) l = nil;;
            return "" + (l) + " = nil";}, 1)));
          iv = $send(self.$ivars(), 'map', [], function $$14(ivar){
            
            
            if (ivar == null) ivar = nil;;
            return "if (self" + (ivar) + " == null) self" + (ivar) + " = nil;\n";}, 1);
          gv = $send(self.$gvars(), 'map', [], function $$15(gvar){
            
            
            if (gvar == null) gvar = nil;;
            return "if ($gvars" + (gvar) + " == null) $gvars" + (gvar) + " = nil;\n";}, 1);
          if (($truthy(self['$class?']()) && ($not(self.proto_ivars['$empty?']())))) {
            vars['$<<']("$proto = self.$$prototype")
          };
          indent = self.compiler.$parser_indent();
          str = ($truthy(vars['$empty?']()) ? ("") : ("var " + (vars.$join(", ")) + ";\n"));
          if (!$truthy(self.$ivars()['$empty?']())) {
            str = $rb_plus(str, "" + (indent) + (iv.$join(indent)))
          };
          if (!$truthy(self.$gvars()['$empty?']())) {
            str = $rb_plus(str, "" + (indent) + (gv.$join(indent)))
          };
          if (($truthy(self['$class?']()) && ($not(self.proto_ivars['$empty?']())))) {
            
            pvars = $send(self.proto_ivars, 'map', [], function $$16(i){
              
              
              if (i == null) i = nil;;
              return "$proto" + (i);}, 1).$join(" = ");
            str = "" + (str) + "\n" + (indent) + (pvars) + " = nil;";
          };
          return self.$fragment(str);
        }, 0);
        
        $def(self, '$add_scope_ivar', function $$add_scope_ivar(ivar) {
          var self = this;

          if ($truthy(self['$def_in_class?']())) {
            return self.parent.$add_proto_ivar(ivar)
          } else if ($truthy(self.ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.ivars['$<<'](ivar)
          }
        }, 1);
        
        $def(self, '$add_scope_gvar', function $$add_scope_gvar(gvar) {
          var self = this;

          if ($truthy(self.gvars['$include?'](gvar))) {
            return nil
          } else {
            return self.gvars['$<<'](gvar)
          }
        }, 1);
        
        $def(self, '$add_proto_ivar', function $$add_proto_ivar(ivar) {
          var self = this;

          if ($truthy(self.proto_ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.proto_ivars['$<<'](ivar)
          }
        }, 1);
        
        $def(self, '$add_arg', function $$add_arg(arg) {
          var self = this;

          
          if (!$truthy(self.args['$include?'](arg))) {
            self.args['$<<'](arg)
          };
          return arg;
        }, 1);
        
        $def(self, '$add_scope_local', function $$add_scope_local(local) {
          var self = this;

          
          if ($truthy(self['$has_local?'](local))) {
            return nil
          };
          return self.locals['$<<'](local);
        }, 1);
        
        $def(self, '$has_local?', function $ScopeNode_has_local$ques$17(local) {
          var self = this;

          
          if ((($truthy(self.locals['$include?'](local)) || ($truthy(self.args['$include?'](local)))) || ($truthy(self.temps['$include?'](local))))) {
            return true
          };
          if (($truthy(self.parent) && ($eqeq(self.type, "iter")))) {
            return self.parent['$has_local?'](local)
          };
          return false;
        }, 1);
        
        $def(self, '$scope_locals', function $$scope_locals() {
          var self = this, locals = nil;

          
          locals = self.locals['$|'](self.args)['$|']((($truthy(self.parent) && ($eqeq(self.type, "iter"))) ? (self.parent.$scope_locals()) : ([])));
          return $send(locals, 'reject', [], function $$18(i){
            
            
            if (i == null) i = nil;;
            return i.$to_s()['$start_with?']("$");}, 1);
        }, 0);
        
        $def(self, '$add_scope_temp', function $$add_scope_temp(tmp) {
          var self = this;

          
          if ($truthy(self['$has_temp?'](tmp))) {
            return nil
          };
          return self.temps.$push(tmp);
        }, 1);
        
        $def(self, '$has_temp?', function $ScopeNode_has_temp$ques$19(tmp) {
          var self = this;

          return self.temps['$include?'](tmp)
        }, 1);
        
        $def(self, '$new_temp', function $$new_temp() {
          var self = this, tmp = nil;

          
          if (!$truthy(self.queue['$empty?']())) {
            return self.queue.$pop()
          };
          tmp = self.$next_temp();
          self.temps['$<<'](tmp);
          return tmp;
        }, 0);
        
        $def(self, '$next_temp', function $$next_temp() {
          var self = this, tmp = nil;

          
          tmp = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s;
            if (self.unique == null) self.unique = nil;

            
            tmp = "$" + (self.unique);
            self.unique = self.unique.$succ();
            if ($truthy(self['$has_local?'](tmp))) {
              return nil
            } else {
              
              Opal.brk(nil, $brk)
            };}, {$$arity: 0, $$s: self, $$brk: $brk})
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return tmp;
        }, 0);
        
        $def(self, '$queue_temp', function $$queue_temp(name) {
          var self = this;

          return self.queue['$<<'](name)
        }, 1);
        
        $def(self, '$push_while', function $$push_while() {
          var self = this, info = nil;

          
          info = $hash2([], {});
          self.while_stack.$push(info);
          return info;
        }, 0);
        
        $def(self, '$pop_while', function $$pop_while() {
          var self = this;

          return self.while_stack.$pop()
        }, 0);
        
        $def(self, '$in_while?', function $ScopeNode_in_while$ques$21() {
          var self = this;

          return self.while_stack['$empty?']()['$!']()
        }, 0);
        
        $def(self, '$uses_block!', function $ScopeNode_uses_block$excl$22() {
          var self = this;

          if (($eqeq(self.type, "iter") && ($truthy(self.parent)))) {
            return self.parent['$uses_block!']()
          } else {
            
            self.uses_block = true;
            return self['$identify!']();
          }
        }, 0);
        
        $def(self, '$identify!', function $ScopeNode_identify$excl$23(name) {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          
          
          if (name == null) name = nil;;
          if ($truthy(self.identity)) {
            return self.identity
          };
          if ($truthy(self['$valid_name?'](self.$mid()))) {
            self.identity = "$$" + (self.$mid())
          } else {
            
            name = ($truthy(($ret_or_1 = name)) ? ($ret_or_1) : ([($truthy(($ret_or_2 = self.$parent())) ? (($truthy(($ret_or_3 = self.$parent().$name())) ? ($ret_or_3) : (self.$parent().$scope_name()))) : ($ret_or_2)), self.$mid()].$compact().$join("_")));
            self.identity = self.compiler.$unique_temp(name);
          };
          return self.identity;
        }, -1);
        self.$attr_reader("identity");
        
        $def(self, '$find_parent_def', function $$find_parent_def() {
          var $a, self = this, scope = nil;

          
          scope = self;
          while ($truthy((scope = scope.$parent()))) {
            if (($truthy(scope['$def?']()) || ($truthy(scope['$lambda?']())))) {
              return scope
            }
          };
          return nil;
        }, 0);
        
        $def(self, '$super_chain', function $$super_chain() {
          var $a, self = this, chain = nil, scope = nil, defn = nil, mid = nil;

          
          $a = [[], self, "null", "null"], (chain = $a[0]), (scope = $a[1]), (defn = $a[2]), (mid = $a[3]), $a;
          while ($truthy(scope)) {
            if ($eqeq(scope.$type(), "iter")) {
              
              chain['$<<'](scope['$identify!']());
              if ($truthy(scope.$parent())) {
                scope = scope.$parent()
              };
            } else if ($truthy(["def", "defs"]['$include?'](scope.$type()))) {
              
              defn = scope['$identify!']();
              mid = "'" + (scope.$mid()) + "'";
              break;;
            } else {
              break;
            }
          };
          return [chain, defn, mid];
        }, 0);
        
        $def(self, '$uses_block?', function $ScopeNode_uses_block$ques$24() {
          var self = this;

          return self.uses_block
        }, 0);
        
        $def(self, '$has_rescue_else?', function $ScopeNode_has_rescue_else$ques$25() {
          var self = this;

          return self.$rescue_else_sexp()['$nil?']()['$!']()
        }, 0);
        
        $def(self, '$in_rescue', function $$in_rescue(node) {
          var $yield = $$in_rescue.$$p || nil, self = this, $ret_or_1 = nil, result = nil;

          delete $$in_rescue.$$p;
          
          self.rescues = ($truthy(($ret_or_1 = self.rescues)) ? ($ret_or_1) : ([]));
          self.rescues.$push(node);
          result = Opal.yieldX($yield, []);
          self.rescues.$pop();
          return result;
        }, 1);
        
        $def(self, '$current_rescue', function $$current_rescue() {
          var self = this;

          return self.rescues.$last()
        }, 0);
        
        $def(self, '$in_resbody', function $$in_resbody() {
          var $yield = $$in_resbody.$$p || nil, self = this, result = nil;

          delete $$in_resbody.$$p;
          
          if (!($yield !== nil)) {
            return nil
          };
          self.in_resbody = true;
          result = Opal.yieldX($yield, []);
          self.in_resbody = false;
          return result;
        }, 0);
        
        $def(self, '$in_resbody?', function $ScopeNode_in_resbody$ques$26() {
          var self = this;

          return self.in_resbody
        }, 0);
        
        $def(self, '$in_ensure', function $$in_ensure() {
          var $yield = $$in_ensure.$$p || nil, self = this, result = nil;

          delete $$in_ensure.$$p;
          
          if (!($yield !== nil)) {
            return nil
          };
          self.in_ensure = true;
          result = Opal.yieldX($yield, []);
          self.in_ensure = false;
          return result;
        }, 0);
        
        $def(self, '$in_ensure?', function $ScopeNode_in_ensure$ques$27() {
          var self = this;

          return self.in_ensure
        }, 0);
        
        $def(self, '$gen_retry_id', function $$gen_retry_id() {
          var self = this, $ret_or_1 = nil;

          
          self.next_retry_id = ($truthy(($ret_or_1 = self.next_retry_id)) ? ($ret_or_1) : ("retry_0"));
          return (self.next_retry_id = self.next_retry_id.$succ());
        }, 0);
        
        $def(self, '$accepts_using?', function $ScopeNode_accepts_using$ques$28() {
          var self = this;

          return [$$('TopNode'), $$('ModuleNode'), $$('ClassNode'), $$('IterNode')]['$include?'](self.$class())
        }, 0);
        
        $def(self, '$collect_refinements_temps', function $$collect_refinements_temps(temps) {
          var self = this;

          
          
          if (temps == null) temps = [];;
          if ($truthy(self.refinements_temp)) {
            temps['$<<'](self.refinements_temp)
          };
          if ($truthy(self.$parent())) {
            return self.$parent().$collect_refinements_temps(temps)
          };
          return temps;
        }, -1);
        
        $def(self, '$new_refinements_temp', function $$new_refinements_temp() {
          var self = this, var$ = nil;

          
          var$ = self.$compiler().$unique_temp("$refn");
          self.$add_scope_local(var$);
          return var$;
        }, 0);
        
        $def(self, '$refinements_temp', function $$refinements_temp() {
          var $a, self = this, prev = nil, curr = nil;

          
          $a = [self.refinements_temp, self.$new_refinements_temp()], (prev = $a[0]), (curr = $a[1]), $a;
          self.refinements_temp = curr;
          return [prev, curr];
        }, 0);
        
        $def(self, '$self', function $$self() {
          var self = this;

          
          self.define_self = true;
          return "self";
        }, 0);
        
        $def(self, '$nesting', function $$nesting() {
          var self = this;

          
          self.define_nesting = true;
          return "$nesting";
        }, 0);
        
        $def(self, '$relative_access', function $$relative_access() {
          var self = this;

          
          self.define_relative_access = (self.define_nesting = true);
          return "$$";
        }, 0);
        
        $def(self, '$prepare_block', function $$prepare_block(block_name) {
          var self = this, scope_name = nil, $writer = nil;

          
          
          if (block_name == null) block_name = nil;;
          scope_name = self.$scope().$identity();
          if ($truthy(block_name)) {
            
            $writer = [block_name];
            $send(self, 'block_name=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          self.$add_temp("" + (self.$block_name()) + " = " + (scope_name) + ".$$p || nil");
          if ($truthy(self.block_prepared)) {
            return nil
          } else {
            
            self.$line("delete " + (scope_name) + ".$$p;");
            return (self.block_prepared = true);
          };
        }, -1);
        return self.$attr_accessor("await_encountered");
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/module"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $to_ary = Opal.to_ary, $truthy = Opal.truthy, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $def = Opal.def;

  Opal.add_stubs('require,handle,children,name_and_base,helper,nil?,body,stmt?,unshift,line,in_scope,name=,scope,-,compile_body,await_encountered,await_encountered=,parent,+,nesting,private,cid,expr,stmt,returns,compiler,empty_line,add_temp,to_vars');
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'ModuleNode');

        var $proto = self.$$prototype;

        $proto.define_nesting = $proto.define_relative_access = nil;
        
        self.$handle("module");
        self.$children("cid", "body");
        
        $def(self, '$compile', function $$compile() {
          var $a, $b, self = this, name = nil, base = nil, await_begin = nil, await_end = nil, async = nil, $writer = nil;

          
          $b = self.$name_and_base(), $a = $to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("module");
          if ($truthy(self.$body()['$nil?']())) {
            if ($truthy(self['$stmt?']())) {
              return self.$unshift("$module(", base, ", '" + (name) + "')")
            } else {
              return self.$unshift("($module(", base, ", '" + (name) + "'), nil)")
            }
          } else {
            
            self.$line("  var self = $module($base, '" + (name) + "');");
            $send(self, 'in_scope', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, $writer = nil;

              
              
              $writer = [name];
              $send(self.$scope(), 'name=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return self.$compile_body();}, {$$arity: 0, $$s: self});
            if ($truthy(self.$await_encountered())) {
              
              await_begin = "(await ";
              await_end = ")";
              async = "async ";
              
              $writer = [true];
              $send(self.$parent(), 'await_encountered=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            } else {
              $a = ["", "", ""], (await_begin = $a[0]), (await_end = $a[1]), (async = $a[2]), $a
            };
            self.$unshift("" + (await_begin) + "(" + (async) + "function($base" + (($truthy(self.define_nesting) ? (", $parent_nesting") : nil)) + ") {");
            return self.$line("})(", base, "" + (($truthy(self.define_nesting) ? ($rb_plus(", ", self.$scope().$nesting())) : nil)) + ")" + (await_end));
          };
        }, 0);
        self.$private();
        
        $def(self, '$name_and_base', function $$name_and_base() {
          var $a, $b, self = this, base = nil, name = nil;

          
          $b = self.$cid().$children(), $a = $to_ary($b), (base = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(base['$nil?']())) {
            return [name, "" + (self.$scope().$nesting()) + "[0]"]
          } else {
            return [name, self.$expr(base)]
          };
        }, 0);
        return $def(self, '$compile_body', function $$compile_body() {
          var self = this, body_code = nil;

          
          body_code = self.$stmt(self.$compiler().$returns(self.$body()));
          self.$empty_line();
          if ($truthy(self.define_nesting)) {
            self.$add_temp("$nesting = [self].concat($parent_nesting)")
          };
          if ($truthy(self.define_relative_access)) {
            self.$add_temp("$$ = Opal.$r($nesting)")
          };
          self.$line(self.$scope().$to_vars());
          return self.$line(body_code);
        }, 0);
      })($nesting[0], $$('ScopeNode'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/class"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $to_ary = Opal.to_ary, $truthy = Opal.truthy, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $def = Opal.def;

  Opal.add_stubs('require,handle,children,name_and_base,helper,nil?,body,stmt?,unshift,super_code,line,in_scope,name=,scope,-,compile_body,await_encountered,await_encountered=,parent,+,nesting,sup,expr');
  
  self.$require("opal/nodes/module");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'ClassNode');

        var $proto = self.$$prototype;

        $proto.define_nesting = nil;
        
        self.$handle("class");
        self.$children("cid", "sup", "body");
        
        $def(self, '$compile', function $$compile() {
          var $a, $b, self = this, name = nil, base = nil, await_begin = nil, await_end = nil, async = nil, $writer = nil;

          
          $b = self.$name_and_base(), $a = $to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("klass");
          if ($truthy(self.$body()['$nil?']())) {
            if ($truthy(self['$stmt?']())) {
              return self.$unshift("$klass(", base, ", ", self.$super_code(), ", '" + (name) + "')")
            } else {
              return self.$unshift("($klass(", base, ", ", self.$super_code(), ", '" + (name) + "'), nil)")
            }
          } else {
            
            self.$line("  var self = $klass($base, $super, '" + (name) + "');");
            $send(self, 'in_scope', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, $writer = nil;

              
              
              $writer = [name];
              $send(self.$scope(), 'name=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return self.$compile_body();}, {$$arity: 0, $$s: self});
            if ($truthy(self.$await_encountered())) {
              
              await_begin = "(await ";
              await_end = ")";
              async = "async ";
              
              $writer = [true];
              $send(self.$parent(), 'await_encountered=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            } else {
              $a = ["", "", ""], (await_begin = $a[0]), (await_end = $a[1]), (async = $a[2]), $a
            };
            self.$unshift("" + (await_begin) + "(" + (async) + "function($base, $super" + (($truthy(self.define_nesting) ? (", $parent_nesting") : nil)) + ") {");
            return self.$line("})(", base, ", ", self.$super_code(), "" + (($truthy(self.define_nesting) ? ($rb_plus(", ", self.$scope().$nesting())) : nil)) + ")" + (await_end));
          };
        }, 0);
        return $def(self, '$super_code', function $$super_code() {
          var self = this;

          if ($truthy(self.$sup())) {
            return self.$expr(self.$sup())
          } else {
            return "null"
          }
        }, 0);
      })($nesting[0], $$('ModuleNode'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/singleton_class"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def;

  Opal.add_stubs('require,handle,children,push,in_scope,stmt,returns,compiler,body,add_temp,line,to_vars,scope,recv,object,nesting');
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'SingletonClassNode');

        
        
        self.$handle("sclass");
        self.$children("object", "body");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$push("(function(self, $parent_nesting) {");
          $send(self, 'in_scope', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, body_stmt = nil;
            if (self.define_nesting == null) self.define_nesting = nil;
            if (self.define_relative_access == null) self.define_relative_access = nil;

            
            body_stmt = self.$stmt(self.$compiler().$returns(self.$body()));
            if ($truthy(self.define_nesting)) {
              self.$add_temp("$nesting = [self].concat($parent_nesting)")
            };
            if ($truthy(self.define_relative_access)) {
              self.$add_temp("$$ = Opal.$r($nesting)")
            };
            self.$line(self.$scope().$to_vars());
            return self.$line(body_stmt);}, {$$arity: 0, $$s: self});
          return self.$line("})(Opal.get_singleton_class(", self.$recv(self.$object()), "), " + (self.$scope().$nesting()) + ")");
        }, 0);
      })($nesting[0], $$('ScopeNode'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/arg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,children,add_arg,scope,name,push,to_s');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ArgNode');

          
          
          self.$handle("arg");
          self.$children("name");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$scope().$add_arg(self.$name());
            return self.$push(self.$name().$to_s());
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/arity_check"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $def = Opal.def, $send = Opal.send, $rb_minus = Opal.rb_minus, $truthy = Opal.truthy, $not = Opal.not, $rb_lt = Opal.rb_lt, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt;

  Opal.add_stubs('require,handle,children,new,args_node,args,optargs,restarg,postargs,kwargs,kwoptargs,kwrestarg,kwnilarg,arity,arity=,scope,-,arity_check?,compiler,empty?,arity_checks,helper,inspect,to_s,mid,line,push,join,compact,size,all_args,!,-@,<,+,>,<<,has_only_optional_kwargs?,any?,negative_arity,positive_arity,select,include?,type,has_required_kwargs?,all?,==,def?,class_scope?,top?,parent,class?,name,module?,identity');
  
  self.$require("opal/nodes/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.kwargs = $proto.kwoptargs = $proto.kwrestarg = $proto.all_args = $proto.args = $proto.optargs = $proto.restarg = $proto.postargs = $proto.arity_checks = nil;
        
        self.$handle("arity_check");
        self.$children("args_node");
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this, arguments$ = nil;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          arguments$ = $$$($$('Rewriters'), 'Arguments').$new(self.$args_node().$children());
          self.args = arguments$.$args();
          self.optargs = arguments$.$optargs();
          self.restarg = arguments$.$restarg();
          self.postargs = arguments$.$postargs();
          self.kwargs = arguments$.$kwargs();
          self.kwoptargs = arguments$.$kwoptargs();
          self.kwrestarg = arguments$.$kwrestarg();
          return (self.kwnilarg = arguments$.$kwnilarg());
        }, -1);
        
        $def(self, '$compile', function $$compile() {
          var self = this, $writer = nil, meth = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if (!$truthy(self.$compiler()['$arity_check?']())) {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            self.$helper("ac");
            meth = self.$scope().$mid().$to_s().$inspect();
            self.$line("var $arity = arguments.length;");
            return self.$push(" if (" + (self.$arity_checks().$join(" || ")) + ") { $ac($arity, " + (self.$arity()) + ", this, " + (meth) + "); }");
          };
        }, 0);
        
        $def(self, '$kwargs', function $$kwargs() {
          var self = this;

          return [].concat($to_a(self.kwargs)).concat($to_a(self.kwoptargs)).concat([self.kwrestarg]).$compact()
        }, 0);
        
        $def(self, '$all_args', function $$all_args() {
          var self = this, $ret_or_1 = nil;

          return (self.all_args = ($truthy(($ret_or_1 = self.all_args)) ? ($ret_or_1) : ([].concat($to_a(self.args)).concat($to_a(self.optargs)).concat([self.restarg]).concat($to_a(self.postargs)).concat($to_a(self.$kwargs())).$compact())))
        }, 0);
        
        $def(self, '$arity_checks', function $$arity_checks() {
          var $a, self = this, arity = nil, min_arity = nil, max_arity = nil;

          
          if ($truthy((($a = self['arity_checks'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.arity_checks
          };
          arity = self.$all_args().$size();
          arity = $rb_minus(arity, self.optargs.$size());
          if ($truthy(self.restarg)) {
            arity = $rb_minus(arity, 1)
          };
          arity = $rb_minus(arity, self.$kwargs().$size());
          if ((($not(self.optargs['$empty?']()) || ($not(self.$kwargs()['$empty?']()))) || ($truthy(self.restarg)))) {
            arity = $rb_minus(arity['$-@'](), 1)
          };
          self.arity_checks = [];
          if ($truthy($rb_lt(arity, 0))) {
            
            min_arity = $rb_plus(arity, 1)['$-@']();
            max_arity = self.$all_args().$size();
            if ($truthy($rb_gt(min_arity, 0))) {
              self.arity_checks['$<<']("$arity < " + (min_arity))
            };
            if (!$truthy(self.restarg)) {
              self.arity_checks['$<<']("$arity > " + (max_arity))
            };
          } else {
            self.arity_checks['$<<']("$arity !== " + (arity))
          };
          return self.arity_checks;
        }, 0);
        
        $def(self, '$arity', function $$arity() {
          var self = this;

          if ((($truthy(self.restarg) || ($truthy(self.optargs['$any?']()))) || ($truthy(self['$has_only_optional_kwargs?']())))) {
            return self.$negative_arity()
          } else {
            return self.$positive_arity()
          }
        }, 0);
        
        $def(self, '$negative_arity', function $$negative_arity() {
          var self = this, required_plain_args = nil, result = nil;

          
          required_plain_args = $send(self.$all_args(), 'select', [], function $$1(arg){
            
            
            if (arg == null) arg = nil;;
            return ["arg", "mlhs"]['$include?'](arg.$type());}, 1);
          result = required_plain_args.$size();
          if ($truthy(self['$has_required_kwargs?']())) {
            result = $rb_plus(result, 1)
          };
          result = $rb_minus(result['$-@'](), 1);
          return result;
        }, 0);
        
        $def(self, '$positive_arity', function $$positive_arity() {
          var self = this, result = nil;

          
          result = self.$all_args().$size();
          result = $rb_minus(result, self.$kwargs().$size());
          if ($truthy(self.$kwargs()['$any?']())) {
            result = $rb_plus(result, 1)
          };
          return result;
        }, 0);
        
        $def(self, '$has_only_optional_kwargs?', function $ArityCheckNode_has_only_optional_kwargs$ques$2() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$kwargs()['$any?']()))) {
            return $send(self.$kwargs(), 'all?', [], function $$3(arg){
              
              
              if (arg == null) arg = nil;;
              return ["kwoptarg", "kwrestarg"]['$include?'](arg.$type());}, 1)
          } else {
            return $ret_or_1
          }
        }, 0);
        return $def(self, '$has_required_kwargs?', function $ArityCheckNode_has_required_kwargs$ques$4() {
          var self = this;

          return $send(self.$kwargs(), 'any?', [], function $$5(arg){
            
            
            if (arg == null) arg = nil;;
            return arg.$type()['$==']("kwarg");}, 1)
        }, 0);
      })($nesting[0], $$('Base'), $nesting);
      return (function($base, $super) {
        var self = $klass($base, $super, 'IterArityCheckNode');

        
        
        self.$handle("iter_arity_check");
        return $def(self, '$compile', function $$compile() {
          var $a, self = this, $writer = nil, parent_scope = nil, $ret_or_1 = nil, $ret_or_2 = nil, context = nil, identity = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if (!$truthy(self.$compiler()['$arity_check?']())) {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            parent_scope = self.$scope();
            while (!($truthy(($truthy(($ret_or_1 = ($truthy(($ret_or_2 = parent_scope['$def?']())) ? ($ret_or_2) : (parent_scope['$class_scope?']())))) ? ($ret_or_1) : (parent_scope['$top?']()))))) {
              parent_scope = parent_scope.$parent()
            };
            context = ($truthy(parent_scope['$top?']()) ? ("'<main>'") : ($truthy(parent_scope['$def?']()) ? ("'" + (parent_scope.$mid()) + "'") : ($truthy(parent_scope['$class?']()) ? ("'<class:" + (parent_scope.$name()) + ">'") : ($truthy(parent_scope['$module?']()) ? ("'<module:" + (parent_scope.$name()) + ">'") : nil))));
            identity = self.$scope().$identity();
            self.$line("if (" + (identity) + ".$$is_lambda || " + (identity) + ".$$define_meth) {");
            self.$line("  var $arity = arguments.length;");
            self.$line("  if (" + (self.$arity_checks().$join(" || ")) + ") { Opal.block_ac($arity, " + (self.$arity()) + ", " + (context) + "); }");
            return self.$line("}");
          };
        }, 0);
      })($nesting[0], $$('ArityCheckNode'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/ensure_kwargs_are_kwargs"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,helper,line');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'EnsureKwargsAreKwargs');

          
          
          self.$handle("ensure_kwargs_are_kwargs");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$helper("hash2");
            self.$line("if ($kwargs == null) {");
            self.$line("  $kwargs = $hash2([], {});");
            self.$line("} else if (!$kwargs.$$is_hash) {");
            self.$line("  throw Opal.ArgumentError.$new('expected kwargs');");
            return self.$line("}");
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/extract_block_arg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,children,uses_block!,scope,add_arg,name,prepare_block');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractBlockarg');

          
          
          self.$handle("extract_blockarg");
          self.$children("name");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$scope()['$uses_block!']();
            self.$scope().$add_arg(self.$name());
            return self.$scope().$prepare_block(self.$name());
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/extract_kwarg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,children,[],meta,<<,used_kwargs,scope,add_temp,lvar_name,line,inspect,to_s');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractKwarg');

          var $proto = self.$$prototype;

          $proto.sexp = nil;
          
          self.$handle("extract_kwarg");
          self.$children("lvar_name");
          return $def(self, '$compile', function $$compile() {
            var self = this, key_name = nil;

            
            key_name = self.sexp.$meta()['$[]']("arg_name");
            self.$scope().$used_kwargs()['$<<'](key_name);
            self.$add_temp(self.$lvar_name());
            self.$line("if (!Opal.hasOwnProperty.call($kwargs.$$smap, '" + (key_name) + "')) {");
            self.$line("  throw Opal.ArgumentError.$new('missing keyword: " + (key_name) + "');");
            self.$line("}");
            return self.$line("" + (self.$lvar_name()) + " = $kwargs.$$smap[" + (key_name.$to_s().$inspect()) + "];");
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/extract_kwargs"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,add_temp,line');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractKwargs');

          
          
          self.$handle("extract_kwargs");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$add_temp("$kwargs");
            return self.$line("$kwargs = Opal.extract_kwargs($post_args)");
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/extract_kwoptarg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $eqeq = Opal.eqeq, $def = Opal.def;

  Opal.add_stubs('require,handle,children,[],meta,<<,used_kwargs,scope,add_temp,lvar_name,line,inspect,to_s,==,default_value,expr');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractKwoptarg');

          var $proto = self.$$prototype;

          $proto.sexp = nil;
          
          self.$handle("extract_kwoptarg");
          self.$children("lvar_name", "default_value");
          return $def(self, '$compile', function $$compile() {
            var self = this, key_name = nil;

            
            key_name = self.sexp.$meta()['$[]']("arg_name");
            self.$scope().$used_kwargs()['$<<'](key_name);
            self.$add_temp(self.$lvar_name());
            self.$line("" + (self.$lvar_name()) + " = $kwargs.$$smap[" + (key_name.$to_s().$inspect()) + "];");
            if ($eqeq(self.$default_value().$children()['$[]'](1), "undefined")) {
              return nil
            };
            return self.$line("if (" + (self.$lvar_name()) + " == null) " + (self.$lvar_name()) + " = ", self.$expr(self.$default_value()));
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/extract_kwrestarg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('require,handle,children,name,add_temp,line,used_kwargs,map,scope,join');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractKwrestarg');

          
          
          self.$handle("extract_kwrestarg");
          self.$children("name");
          
          $def(self, '$compile', function $$compile() {
            var self = this, name = nil, $ret_or_1 = nil;

            
            name = ($truthy(($ret_or_1 = self.$name())) ? ($ret_or_1) : ("$kw_rest_arg"));
            self.$add_temp(name);
            return self.$line("" + (name) + " = Opal.kwrestargs($kwargs, " + (self.$used_kwargs()) + ");");
          }, 0);
          return $def(self, '$used_kwargs', function $$used_kwargs() {
            var self = this, args = nil;

            
            args = $send(self.$scope().$used_kwargs(), 'map', [], function $$1(arg_name){
              
              
              if (arg_name == null) arg_name = nil;;
              return "'" + (arg_name) + "': true";}, 1);
            return "{" + (args.$join(",")) + "}";
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/extract_optarg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $eqeq = Opal.eqeq, $def = Opal.def;

  Opal.add_stubs('require,handle,children,==,[],default_value,line,name,expr');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractOptargNode');

          
          
          self.$handle("extract_optarg");
          self.$children("name", "default_value");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            if ($eqeq(self.$default_value().$children()['$[]'](1), "undefined")) {
              return nil
            };
            return self.$line("if (" + (self.$name()) + " == null) " + (self.$name()) + " = ", self.$expr(self.$default_value()), ";");
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/extract_post_arg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,children,add_temp,name,line');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractPostArg');

          
          
          self.$handle("extract_post_arg");
          self.$children("name");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("" + (self.$name()) + " = $post_args.shift();");
            return self.$line("if (" + (self.$name()) + " == null) " + (self.$name()) + " = nil;");
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/extract_post_optarg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $eqeq = Opal.eqeq, $def = Opal.def;

  Opal.add_stubs('require,handle,children,add_temp,name,line,args_to_keep,==,[],default_value,expr');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractPostOptarg');

          
          
          self.$handle("extract_post_optarg");
          self.$children("name", "default_value", "args_to_keep");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("if ($post_args.length > " + (self.$args_to_keep()) + ") " + (self.$name()) + " = $post_args.shift();");
            if ($eqeq(self.$default_value().$children()['$[]'](1), "undefined")) {
              return nil
            };
            return self.$line("if (" + (self.$name()) + " == null) " + (self.$name()) + " = ", self.$expr(self.$default_value()), ";");
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/extract_restarg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $def = Opal.def;

  Opal.add_stubs('require,handle,children,name,add_temp,==,args_to_keep,line');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractRestarg');

          
          
          self.$handle("extract_restarg");
          self.$children("name", "args_to_keep");
          return $def(self, '$compile', function $$compile() {
            var self = this, name = nil, $ret_or_1 = nil;

            
            name = ($truthy(($ret_or_1 = self.$name())) ? ($ret_or_1) : ("$rest_arg"));
            self.$add_temp(name);
            if ($eqeq(self.$args_to_keep(), 0)) {
              return self.$line("" + (name) + " = $post_args;")
            } else {
              return self.$line("" + (name) + " = $post_args.splice(0, $post_args.length - " + (self.$args_to_keep()) + ");")
            };
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/fake_arg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,next_temp,scope,add_arg,push');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'FakeArgNode');

          
          
          self.$handle("fake_arg");
          return $def(self, '$compile', function $$compile() {
            var self = this, name = nil;

            
            name = self.$scope().$next_temp();
            self.$scope().$add_arg(name);
            return self.$push(name);
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/initialize_iterarg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,children,line,name');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'InitializeIterarg');

          
          
          self.$handle("initialize_iter_arg");
          self.$children("name");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            return self.$line("if (" + (self.$name()) + " == null) " + (self.$name()) + " = nil;")
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/initialize_shadowarg"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,children,<<,locals,scope,name,add_arg,line');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'InitializeShadowarg');

          
          
          self.$handle("initialize_shadowarg");
          self.$children("name");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$scope().$locals()['$<<'](self.$name());
            self.$scope().$add_arg(self.$name());
            return self.$line("" + (self.$name()) + " = nil;");
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args/parameters"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $send = Opal.send, $to_a = Opal.to_a, $truthy = Opal.truthy, $eqeq = Opal.eqeq;

  Opal.add_stubs('children,map,public_send,type,join,compact,==');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'Parameters');

          var $proto = self.$$prototype;

          $proto.args = nil;
          
          
          $def(self, '$initialize', function $$initialize(args) {
            var self = this;

            return (self.args = args.$children())
          }, 1);
          
          $def(self, '$to_code', function $$to_code() {
            var self = this, stringified_parameters = nil;

            
            stringified_parameters = $send(self.args, 'map', [], function $$1(arg){var self = $$1.$$s == null ? this : $$1.$$s;

              
              
              if (arg == null) arg = nil;;
              return $send(self, 'public_send', ["on_" + (arg.$type())].concat($to_a(arg)));}, {$$arity: 1, $$s: self});
            return "[" + (stringified_parameters.$compact().$join(", ")) + "]";
          }, 0);
          
          $def(self, '$on_arg', function $$on_arg(arg_name) {
            
            return "['req', '" + (arg_name) + "']"
          }, 1);
          
          $def(self, '$on_mlhs', function $$on_mlhs($a) {
            var $post_args, $rest_arg;

            
            
            $post_args = Opal.slice.call(arguments);
            
            $rest_arg = $post_args;;
            return "['req']";
          }, -1);
          
          $def(self, '$on_optarg', function $$on_optarg(arg_name, _default_value) {
            
            return "['opt', '" + (arg_name) + "']"
          }, 2);
          
          $def(self, '$on_restarg', function $$on_restarg(arg_name) {
            
            
            
            if (arg_name == null) arg_name = nil;;
            if ($truthy(arg_name)) {
              
              if ($eqeq(arg_name, "fwd_rest_arg")) {
                arg_name = "*"
              };
              return "['rest', '" + (arg_name) + "']";
            } else {
              return "['rest']"
            };
          }, -1);
          
          $def(self, '$on_kwarg', function $$on_kwarg(arg_name) {
            
            return "['keyreq', '" + (arg_name) + "']"
          }, 1);
          
          $def(self, '$on_kwoptarg', function $$on_kwoptarg(arg_name, _default_value) {
            
            return "['key', '" + (arg_name) + "']"
          }, 2);
          
          $def(self, '$on_kwrestarg', function $$on_kwrestarg(arg_name) {
            
            
            
            if (arg_name == null) arg_name = nil;;
            if ($truthy(arg_name)) {
              return "['keyrest', '" + (arg_name) + "']"
            } else {
              return "['keyrest']"
            };
          }, -1);
          
          $def(self, '$on_blockarg', function $$on_blockarg(arg_name) {
            
            
            if ($eqeq(arg_name, "fwd_block_arg")) {
              arg_name = "&"
            };
            return "['block', '" + (arg_name) + "']";
          }, 1);
          
          $def(self, '$on_kwnilarg', function $$on_kwnilarg() {
            
            return "['nokey']"
          }, 0);
          return $def(self, '$on_shadowarg', function $$on_shadowarg(_arg_name) {
            
            return nil
          }, 1);
        })($nesting[0], null)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["opal/nodes/args/prepare_post_args"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $eqeq = Opal.eqeq, $def = Opal.def;

  Opal.add_stubs('require,handle,children,add_temp,==,offset,line');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'PreparePostArgs');

          
          
          self.$handle("prepare_post_args");
          self.$children("offset");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$add_temp("$post_args");
            if ($eqeq(self.$offset(), 0)) {
              return self.$line("$post_args = Opal.slice.call(arguments)")
            } else {
              return self.$line("$post_args = Opal.slice.call(arguments, " + (self.$offset()) + ")")
            };
          }, 0);
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/args"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt, $neqeq = Opal.neqeq, $def = Opal.def;

  Opal.add_stubs('require,handle,each_with_index,children,multiple_underscore?,[],[]=,-,+,>,s,type,!=,push,process,==,count,start_with?,to_s,first');
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/args/arg");
  self.$require("opal/nodes/args/arity_check");
  self.$require("opal/nodes/args/ensure_kwargs_are_kwargs");
  self.$require("opal/nodes/args/extract_block_arg");
  self.$require("opal/nodes/args/extract_kwarg");
  self.$require("opal/nodes/args/extract_kwargs");
  self.$require("opal/nodes/args/extract_kwoptarg");
  self.$require("opal/nodes/args/extract_kwrestarg");
  self.$require("opal/nodes/args/extract_optarg");
  self.$require("opal/nodes/args/extract_post_arg");
  self.$require("opal/nodes/args/extract_post_optarg");
  self.$require("opal/nodes/args/extract_restarg");
  self.$require("opal/nodes/args/fake_arg");
  self.$require("opal/nodes/args/initialize_iterarg");
  self.$require("opal/nodes/args/initialize_shadowarg");
  self.$require("opal/nodes/args/parameters");
  self.$require("opal/nodes/args/prepare_post_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'ArgsNode');

        
        
        self.$handle("args");
        
        $def(self, '$compile', function $$compile() {
          var self = this, same_arg_counter = nil;

          
          same_arg_counter = $hash2([], {});
          return $send(self.$children(), 'each_with_index', [], function $$1(arg, idx){var self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil, $writer = nil;

            
            
            if (arg == null) arg = nil;;
            
            if (idx == null) idx = nil;;
            if ($truthy(self['$multiple_underscore?'](arg))) {
              
              if ($truthy(($ret_or_1 = same_arg_counter['$[]'](arg)))) {
                $ret_or_1
              } else {
                
                $writer = [arg, 0];
                $send(same_arg_counter, '[]=', $to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              
              $writer = [arg, $rb_plus(same_arg_counter['$[]'](arg), 1)];
              $send(same_arg_counter, '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy($rb_gt(same_arg_counter['$[]'](arg), 1))) {
                arg = self.$s(arg.$type(), "" + (arg.$children()['$[]'](0)) + "_$" + (same_arg_counter['$[]'](arg)))
              };
            };
            if ($neqeq(idx, 0)) {
              self.$push(", ")
            };
            return self.$push(self.$process(arg));}, {$$arity: 2, $$s: self});
        }, 0);
        return $def(self, '$multiple_underscore?', function $ArgsNode_multiple_underscore$ques$2(arg) {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = arg.$type()['$==']("arg"))) ? (arg.$children().$count()['$=='](1)) : ($ret_or_3)))) ? (arg.$children().$first().$to_s()['$start_with?']("_")) : ($ret_or_2))))) {
            return $rb_gt(self.$children().$count(arg), 1)
          } else {
            return $ret_or_1
          }
        }, 1);
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/node_with_args"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $def = Opal.def, $truthy = Opal.truthy;

  Opal.add_stubs('require,attr_reader,attr_accessor,[],meta,s,original_args,push,process,arity_check_node,uses_block?,scope,prepare_block,to_code,new');
  
  self.$require("opal/nodes/scope");
  self.$require("opal/nodes/args/parameters");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NodeWithArgs');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.sexp = nil;
        
        self.$attr_reader("used_kwargs");
        self.$attr_accessor("arity");
        self.$attr_reader("original_args");
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          self.original_args = self.sexp.$meta()['$[]']("original_args");
          self.used_kwargs = [];
          return (self.arity = 0);
        }, -1);
        
        $def(self, '$arity_check_node', function $$arity_check_node() {
          var self = this;

          return self.$s("arity_check", self.$original_args())
        }, 0);
        
        $def(self, '$compile_arity_check', function $$compile_arity_check() {
          var self = this;

          return self.$push(self.$process(self.$arity_check_node()))
        }, 0);
        
        $def(self, '$compile_block_arg', function $$compile_block_arg() {
          var self = this;

          if ($truthy(self.$scope()['$uses_block?']())) {
            return self.$scope().$prepare_block()
          } else {
            return nil
          }
        }, 0);
        return $def(self, '$parameters_code', function $$parameters_code() {
          var self = this;

          return $$$($$('Args'), 'Parameters').$new(self.$original_args()).$to_code()
        }, 0);
      })($nesting[0], $$('ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/iter"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $eqeq = Opal.eqeq, $rb_gt = Opal.rb_gt, $def = Opal.def;

  Opal.add_stubs('require,handle,children,lambda_definition?,scope,is_lambda!,in_scope,identify!,process,inline_args,compile_arity_check,stmt,returned_body,add_temp,to_vars,line,catch_return,unshift,push,await_encountered,<<,arity,self,contains_break?,arity_check?,compiler,parameters_code,has_top_level_mlhs_arg?,has_trailing_comma_in_args?,==,length,>,join,nesting,relative_access,block_arg,prepare_block,each,args,first,updated,body,returns,s,any?,original_args,type,expression,loc,source,match,new,found_break?');
  
  self.$require("opal/nodes/node_with_args");
  self.$require("opal/rewriters/break_finder");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IterNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.define_self = $proto.define_nesting = $proto.define_relative_access = $proto.sexp = nil;
        
        self.$handle("iter");
        self.$children("inline_args", "body");
        
        $def(self, '$compile', function $$compile() {
          var self = this, inline_params = nil, to_vars = nil, identity = nil, body_code = nil, blockopts = nil;

          
          if ($truthy(self.$scope()['$lambda_definition?']())) {
            self['$is_lambda!']()
          };
          inline_params = nil;
          to_vars = (identity = (body_code = nil));
          $send(self, 'in_scope', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;
            if (self.define_self == null) self.define_self = nil;

            
            identity = self.$scope()['$identify!']();
            inline_params = self.$process(self.$inline_args());
            self.$compile_arity_check();
            body_code = self.$stmt(self.$returned_body());
            if ($truthy(self.define_self)) {
              self.$add_temp("self = " + (identity) + ".$$s == null ? this : " + (identity) + ".$$s")
            };
            to_vars = self.$scope().$to_vars();
            self.$line(body_code);
            if ($truthy(self.$scope().$catch_return())) {
              
              self.$unshift("try {\n");
              self.$line("} catch ($returner) { if ($returner === Opal.returner) { return $returner.$v }");
              return self.$push(" throw $returner; }");
            } else {
              return nil
            };}, {$$arity: 0, $$s: self});
          self.$unshift(to_vars);
          if ($truthy(self.$await_encountered())) {
            self.$unshift("async function " + (identity) + "(", inline_params, "){")
          } else {
            self.$unshift("function " + (identity) + "(", inline_params, "){")
          };
          self.$push("}");
          blockopts = [];
          blockopts['$<<']("$$arity: " + (self.$arity()));
          if ($truthy(self.define_self)) {
            blockopts['$<<']("$$s: " + (self.$scope().$self()))
          };
          if ($truthy(self['$contains_break?']())) {
            blockopts['$<<']("$$brk: $brk")
          };
          if ($truthy(self.$compiler()['$arity_check?']())) {
            blockopts['$<<']("$$parameters: " + (self.$parameters_code()))
          };
          if ($truthy(self['$has_top_level_mlhs_arg?']())) {
            blockopts['$<<']("$$has_top_level_mlhs_arg: true")
          };
          if ($truthy(self['$has_trailing_comma_in_args?']())) {
            blockopts['$<<']("$$has_trailing_comma_in_args: true")
          };
          if ($eqeq(blockopts.$length(), 1)) {
            self.$push(", " + (self.$arity()))
          } else if ($truthy($rb_gt(blockopts.$length(), 1))) {
            self.$push(", {", blockopts.$join(", "), "}")
          };
          if ($truthy(self.define_nesting)) {
            self.$scope().$nesting()
          };
          if ($truthy(self.define_relative_access)) {
            return self.$scope().$relative_access()
          } else {
            return nil
          };
        }, 0);
        
        $def(self, '$compile_block_arg', function $$compile_block_arg() {
          var self = this;

          if ($truthy(self.$block_arg())) {
            return self.$scope().$prepare_block()
          } else {
            return nil
          }
        }, 0);
        
        $def(self, '$extract_underscore_args', function $$extract_underscore_args() {
          var self = this, valid_args = nil, caught_blank_argument = nil;

          
          valid_args = [];
          caught_blank_argument = false;
          $send(self.$args().$children(), 'each', [], function $$2(arg){var arg_name = nil;

            
            
            if (arg == null) arg = nil;;
            arg_name = arg.$children().$first();
            if ($eqeq(arg_name, "_")) {
              if ($truthy(caught_blank_argument)) {
                return nil
              } else {
                
                caught_blank_argument = true;
                return valid_args['$<<'](arg);
              }
            } else {
              return valid_args['$<<'](arg)
            };}, 1);
          return (self.sexp = self.sexp.$updated(nil, [self.$args().$updated(nil, valid_args), self.$body()]));
        }, 0);
        
        $def(self, '$returned_body', function $$returned_body() {
          var self = this, $ret_or_1 = nil;

          return self.$compiler().$returns(($truthy(($ret_or_1 = self.$body())) ? ($ret_or_1) : (self.$s("nil"))))
        }, 0);
        
        $def(self, '$has_top_level_mlhs_arg?', function $IterNode_has_top_level_mlhs_arg$ques$3() {
          var self = this;

          return $send(self.$original_args().$children(), 'any?', [], function $$4(arg){
            
            
            if (arg == null) arg = nil;;
            return arg.$type()['$==']("mlhs");}, 1)
        }, 0);
        
        $def(self, '$has_trailing_comma_in_args?', function $IterNode_has_trailing_comma_in_args$ques$5() {
          var self = this, args_source = nil;

          if (($truthy(self.$original_args().$loc()) && ($truthy(self.$original_args().$loc().$expression())))) {
            
            args_source = self.$original_args().$loc().$expression().$source();
            return args_source.$match(/,\s*\|/);
          } else {
            return nil
          }
        }, 0);
        
        $def(self, '$arity_check_node', function $$arity_check_node() {
          var self = this;

          return self.$s("iter_arity_check", self.$original_args())
        }, 0);
        return $def(self, '$contains_break?', function $IterNode_contains_break$ques$6() {
          var self = this, finder = nil;

          
          finder = $$$($$$($$('Opal'), 'Rewriters'), 'BreakFinder').$new();
          finder.$process(self.sexp);
          return finder['$found_break?']();
        }, 0);
      })($nesting[0], $$('NodeWithArgs'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/def"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $def = Opal.def, $rb_plus = Opal.rb_plus;

  Opal.add_stubs('require,handle,children,in_scope,mid,mid=,scope,-,==,type,defs=,identify!,identity,block_name=,process,inline_args,stmt,returns,compiler,stmts,compile_block_arg,add_temp,compile_arity_check,unshift,current_indent,to_vars,line,catch_return,push,await_encountered,<<,arity,arity_check?,parameters_code,parse_comments?,comments_code,enable_source_location?,source_location,length,>,join,wrap_with_definition,nesting,relative_access,helper,wrap,self,expr?,+,map,comments,inspect,text');
  
  self.$require("opal/nodes/node_with_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'DefNode');

        var $proto = self.$$prototype;

        $proto.define_nesting = $proto.define_relative_access = nil;
        
        self.$handle("def");
        self.$children("mid", "inline_args", "stmts");
        
        $def(self, '$compile', function $$compile() {
          var self = this, inline_params = nil, scope_name = nil, blockopts = nil;

          
          inline_params = nil;
          scope_name = nil;
          $send(self, 'in_scope', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, $writer = nil, stmt_code = nil;
            if (self.sexp == null) self.sexp = nil;
            if (self.define_self == null) self.define_self = nil;

            
            
            $writer = [self.$mid()];
            $send(self.$scope(), 'mid=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($eqeq(self.sexp.$type(), "defs")) {
              
              $writer = [true];
              $send(self.$scope(), 'defs=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            self.$scope()['$identify!']();
            scope_name = self.$scope().$identity();
            
            $writer = ["$yield"];
            $send(self.$scope(), 'block_name=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            inline_params = self.$process(self.$inline_args());
            stmt_code = self.$stmt(self.$compiler().$returns(self.$stmts()));
            self.$compile_block_arg();
            if ($truthy(self.define_self)) {
              self.$add_temp("self = this")
            };
            self.$compile_arity_check();
            self.$unshift("\n" + (self.$current_indent()), self.$scope().$to_vars());
            self.$line(stmt_code);
            if ($truthy(self.$scope().$catch_return())) {
              
              self.$unshift("try {\n");
              self.$line("} catch ($returner) { if ($returner === Opal.returner) { return $returner.$v }");
              return self.$push(" throw $returner; }");
            } else {
              return nil
            };}, {$$arity: 0, $$s: self});
          self.$unshift(") {");
          self.$unshift(inline_params);
          self.$unshift("function " + (scope_name) + "(");
          if ($truthy(self.$await_encountered())) {
            self.$unshift("async ")
          };
          self.$line("}");
          blockopts = [];
          blockopts['$<<']("$$arity: " + (self.$arity()));
          if ($truthy(self.$compiler()['$arity_check?']())) {
            blockopts['$<<']("$$parameters: " + (self.$parameters_code()))
          };
          if ($truthy(self.$compiler()['$parse_comments?']())) {
            blockopts['$<<']("$$comments: " + (self.$comments_code()))
          };
          if ($truthy(self.$compiler()['$enable_source_location?']())) {
            blockopts['$<<']("$$source_location: " + (self.$source_location()))
          };
          if ($eqeq(blockopts.$length(), 1)) {
            self.$push(", " + (self.$arity()))
          } else if ($truthy($rb_gt(blockopts.$length(), 1))) {
            self.$push(", {", blockopts.$join(", "), "}")
          };
          self.$wrap_with_definition();
          if ($truthy(self.define_nesting)) {
            self.$scope().$nesting()
          };
          if ($truthy(self.define_relative_access)) {
            return self.$scope().$relative_access()
          } else {
            return nil
          };
        }, 0);
        
        $def(self, '$wrap_with_definition', function $$wrap_with_definition() {
          var self = this;

          
          self.$helper("def");
          self.$wrap("$def(" + (self.$scope().$self()) + ", '$" + (self.$mid()) + "', ", ")");
          if ($truthy(self['$expr?']())) {
            return nil
          } else {
            return self.$unshift("\n" + (self.$current_indent()))
          };
        }, 0);
        return $def(self, '$comments_code', function $$comments_code() {
          var self = this;

          return $rb_plus($rb_plus("[", $send(self.$comments(), 'map', [], function $$2(comment){
            
            
            if (comment == null) comment = nil;;
            return comment.$text().$inspect();}, 1).$join(", ")), "]")
        }, 0);
      })($nesting[0], $$('NodeWithArgs'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/defs"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $def = Opal.def;

  Opal.add_stubs('require,handle,children,helper,unshift,expr,recvr,mid,push');
  
  self.$require("opal/nodes/def");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'DefsNode');

        
        
        self.$handle("defs");
        self.$children("recvr", "mid", "inline_args", "stmts");
        return $def(self, '$wrap_with_definition', function $$wrap_with_definition() {
          var self = this;

          
          self.$helper("defs");
          self.$unshift("$defs(", self.$expr(self.$recvr()), ", '$" + (self.$mid()) + "', ");
          return self.$push(")");
        }, 0);
      })($nesting[0], $$('DefNode'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/if"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $def = Opal.def, $not = Opal.not, $send = Opal.send, $eqeqeq = Opal.eqeqeq;

  Opal.add_stubs('require,handle,children,should_compile_as_simple_expression?,==,true_body,s,compile_with_binary_or,false_body,compile_with_binary_and,compile_with_ternary,compile_with_if,truthy,falsy,!,push,js_truthy,test,indent,line,stmt,type,expects_expression?,await_encountered,scope,wrap,returnify,returns,compiler,expr?,recv?,simple?,expr,[],meta,sexp,===,single_line?,strip_empty_children,all?,helper,new_temp,top_scope,excl,from,to');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IfNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("if");
        self.$children("test", "true_body", "false_body");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$should_compile_as_simple_expression?']())) {
            if ($eqeq(self.$true_body(), self.$s("true"))) {
              return self.$compile_with_binary_or()
            } else if ($eqeq(self.$false_body(), self.$s("false"))) {
              return self.$compile_with_binary_and()
            } else {
              return self.$compile_with_ternary()
            }
          } else {
            return self.$compile_with_if()
          }
        }, 0);
        
        $def(self, '$compile_with_if', function $$compile_with_if() {
          var $a, self = this, truthy = nil, falsy = nil;

          
          truthy = self.$truthy();
          falsy = self.$falsy();
          if (($truthy(falsy) && ($not(truthy)))) {
            
            self.$push("if (!", self.$js_truthy(self.$test()), ") {");
            $a = [truthy, falsy], (falsy = $a[0]), (truthy = $a[1]), $a;
          } else {
            self.$push("if (", self.$js_truthy(self.$test()), ") {")
          };
          if ($truthy(truthy)) {
            $send(self, 'indent', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

              return self.$line(self.$stmt(truthy))}, {$$arity: 0, $$s: self})
          };
          if ($truthy(falsy)) {
            if ($eqeq(falsy.$type(), "if")) {
              self.$line("} else ", self.$stmt(falsy))
            } else {
              
              self.$line("} else {");
              $send(self, 'indent', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

                return self.$line(self.$stmt(falsy))}, {$$arity: 0, $$s: self});
              self.$line("}");
            }
          } else {
            
            self.$line("}");
            if ($truthy(self['$expects_expression?']())) {
              self.$line("return nil;")
            };
          };
          if ($truthy(self['$expects_expression?']())) {
            if ($truthy(self.$scope().$await_encountered())) {
              return self.$wrap("(await (async function() {", "})())")
            } else {
              return self.$wrap("(function() {", "})()")
            }
          } else {
            return nil
          };
        }, 0);
        
        $def(self, '$truthy', function $$truthy() {
          var self = this;

          return self.$returnify(self.$true_body())
        }, 0);
        
        $def(self, '$falsy', function $$falsy() {
          var self = this;

          return self.$returnify(self.$false_body())
        }, 0);
        
        $def(self, '$returnify', function $$returnify(body) {
          var self = this;

          if (($truthy(self['$expects_expression?']()) && ($truthy(body)))) {
            return self.$compiler().$returns(body)
          } else {
            return body
          }
        }, 1);
        
        $def(self, '$expects_expression?', function $IfNode_expects_expression$ques$3() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$expr?']()))) {
            return $ret_or_1
          } else {
            return self['$recv?']()
          }
        }, 0);
        
        $def(self, '$should_compile_as_simple_expression?', function $IfNode_should_compile_as_simple_expression$ques$4() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self['$expects_expression?']())) ? (self['$simple?'](self.$true_body())) : ($ret_or_2))))) {
            return self['$simple?'](self.$false_body())
          } else {
            return $ret_or_1
          }
        }, 0);
        
        $def(self, '$compile_with_ternary', function $$compile_with_ternary() {
          var self = this, truthy = nil, falsy = nil, $ret_or_1 = nil;

          
          truthy = self.$true_body();
          falsy = self.$false_body();
          self.$push("(");
          self.$push(self.$js_truthy(self.$test()), " ? ");
          self.$push("(", self.$expr(($truthy(($ret_or_1 = truthy)) ? ($ret_or_1) : (self.$s("nil")))), ") : ");
          if (($not(falsy) || ($eqeq(falsy.$type(), "if")))) {
            self.$push(self.$expr(($truthy(($ret_or_1 = falsy)) ? ($ret_or_1) : (self.$s("nil")))))
          } else {
            self.$push("(", self.$expr(($truthy(($ret_or_1 = falsy)) ? ($ret_or_1) : (self.$s("nil")))), ")")
          };
          return self.$push(")");
        }, 0);
        
        $def(self, '$compile_with_binary_and', function $$compile_with_binary_and() {
          var self = this, truthy = nil, $ret_or_1 = nil;

          
          if ($truthy(self.$sexp().$meta()['$[]']("do_js_truthy_on_true_body"))) {
            truthy = self.$js_truthy(($truthy(($ret_or_1 = self.$true_body())) ? ($ret_or_1) : (self.$s("nil"))))
          } else {
            truthy = self.$expr(($truthy(($ret_or_1 = self.$true_body())) ? ($ret_or_1) : (self.$s("nil"))))
          };
          self.$push("(");
          self.$push(self.$js_truthy(self.$test()), " && ");
          self.$push("(", truthy, ")");
          return self.$push(")");
        }, 0);
        
        $def(self, '$compile_with_binary_or', function $$compile_with_binary_or() {
          var self = this, falsy = nil, $ret_or_1 = nil;

          
          if ($truthy(self.$sexp().$meta()['$[]']("do_js_truthy_on_false_body"))) {
            falsy = self.$js_truthy(($truthy(($ret_or_1 = self.$false_body())) ? ($ret_or_1) : (self.$s("nil"))))
          } else {
            falsy = self.$expr(($truthy(($ret_or_1 = self.$false_body())) ? ($ret_or_1) : (self.$s("nil"))))
          };
          self.$push("(");
          self.$push(self.$js_truthy(self.$test()), " || ");
          self.$push("(", falsy, ")");
          return self.$push(")");
        }, 0);
        return $def(self, '$simple?', function $IfNode_simple$ques$5(body) {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($eqeqeq($$$($$('AST'), 'Node'), ($ret_or_1 = body))) {
            if (($eqeqeq("return", ($ret_or_2 = body.$type())) || (($eqeqeq("js_return", $ret_or_2) || (($eqeqeq("break", $ret_or_2) || (($eqeqeq("next", $ret_or_2) || (($eqeqeq("redo", $ret_or_2) || ($eqeqeq("retry", $ret_or_2)))))))))))) {
              return false
            } else if ($eqeqeq("xstr", $ret_or_2)) {
              return $$('XStringNode')['$single_line?']($$('XStringNode').$strip_empty_children(body.$children()))
            } else {
              return $send(body.$children(), 'all?', [], function $$6(i){var self = $$6.$$s == null ? this : $$6.$$s;

                
                
                if (i == null) i = nil;;
                return self['$simple?'](i);}, {$$arity: 1, $$s: self})
            }
          } else {
            return true
          }
        }, 1);
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'IFlipFlop');

        
        
        self.$handle("iflipflop");
        self.$children("from", "to");
        
        $def(self, '$excl', function $$excl() {
          
          return ""
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this, fun_name = nil, ff = nil;

          
          self.$helper("truthy");
          fun_name = self.$top_scope().$new_temp();
          ff = "" + (fun_name) + ".$$ff";
          self.$push("(typeof " + (fun_name) + " === 'undefined' ? (" + (fun_name) + " = function(from, to){");
          self.$push("  if (typeof " + (ff) + " === 'undefined') " + (ff) + " = false;");
          self.$push("  var retval = " + (ff) + ";");
          self.$push("  if (!" + (ff) + ") {");
          self.$push("    " + (ff) + " = retval = $truthy(from());");
          self.$push("  }");
          self.$push("  " + (self.$excl()) + "if (" + (ff) + ") {");
          self.$push("    if ($truthy(to())) " + (ff) + " = false;");
          self.$push("  }");
          self.$push("  return retval;");
          self.$push("}) : " + (fun_name) + ")(");
          self.$push("  function() { ", self.$stmt(self.$compiler().$returns(self.$from())), " },");
          self.$push("  function() { ", self.$stmt(self.$compiler().$returns(self.$to())), " }");
          return self.$push(")");
        }, 0);
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'EFlipFlop');

        
        
        self.$handle("eflipflop");
        return $def(self, '$excl', function $$excl() {
          
          return "else "
        }, 0);
      })($nesting[0], $$('IFlipFlop'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/logic"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $rb_gt = Opal.rb_gt, $not = Opal.not;

  Opal.add_stubs('require,handle,in_while?,push,iter?,scope,expr_or_nil,value,error,===,size,children,s,first,compile_while,compile_iter,[],while_loop,stmt?,line,break_val,nil?,expr,[]=,-,helper,identity,==,empty_splat?,recv,>,find_parent_def,!,lambda?,def?,expr?,return_in_iter?,return_expr_in_def?,scope_to_catch_return,catch_return=,return_val,to_s');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'NextNode');

        
        
        self.$handle("next");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$push("continue;")
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$push("return ", self.$expr_or_nil(self.$value()), ";")
          } else {
            return self.$error("Invalid next")
          }
        }, 0);
        return $def(self, '$value', function $$value() {
          var self = this, $ret_or_1 = nil;

          if ($eqeqeq(0, ($ret_or_1 = self.$children().$size()))) {
            return self.$s("nil")
          } else if ($eqeqeq(1, $ret_or_1)) {
            return self.$children().$first()
          } else {
            return $send(self, 's', ["array"].concat($to_a(self.$children())))
          }
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'BreakNode');

        
        
        self.$handle("break");
        self.$children("value");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$error("void value expression: cannot use break outside of iter/while")
          }
        }, 0);
        
        $def(self, '$compile_while', function $$compile_while() {
          var self = this;

          if ($truthy(self.$while_loop()['$[]']("closure"))) {
            return self.$push("return ", self.$expr_or_nil(self.$value()))
          } else {
            return self.$push("break;")
          }
        }, 0);
        
        $def(self, '$compile_iter', function $$compile_iter() {
          var self = this;

          
          if (!$truthy(self['$stmt?']())) {
            self.$error("break must be used as a statement")
          };
          return self.$line("Opal.brk(", self.$break_val(), ", $brk)");
        }, 0);
        return $def(self, '$break_val', function $$break_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else {
            return self.$expr(self.$value())
          }
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'RedoNode');

        
        
        self.$handle("redo");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$push("REDO()")
          }
        }, 0);
        
        $def(self, '$compile_while', function $$compile_while() {
          var self = this, $writer = nil;

          
          
          $writer = ["use_redo", true];
          $send(self.$while_loop(), '[]=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return self.$push("" + (self.$while_loop()['$[]']("redo_var")) + " = true; continue;");
        }, 0);
        return $def(self, '$compile_iter', function $$compile_iter() {
          var self = this;

          
          self.$helper("slice");
          return self.$push("return " + (self.$scope().$identity()) + ".apply(null, $slice.call(arguments))");
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'SplatNode');

        
        
        self.$handle("splat");
        self.$children("value");
        
        $def(self, '$empty_splat?', function $SplatNode_empty_splat$ques$1() {
          var self = this;

          return self.$value()['$=='](self.$s("array"))
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$empty_splat?']())) {
            return self.$push("[]")
          } else {
            
            self.$helper("to_a");
            return self.$push("$to_a(", self.$recv(self.$value()), ")");
          }
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'ReturnNode');

        
        
        self.$handle("return");
        self.$children("value");
        
        $def(self, '$return_val', function $$return_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else if ($truthy($rb_gt(self.$children().$size(), 1))) {
            return self.$expr($send(self, 's', ["array"].concat($to_a(self.$children()))))
          } else {
            return self.$expr(self.$value())
          }
        }, 0);
        
        $def(self, '$return_in_iter?', function $ReturnNode_return_in_iter$ques$2() {
          var self = this, parent_def = nil;

          if ((($truthy(self.$scope()['$iter?']()) && ($not(self.$scope()['$lambda?']()))) && ($truthy((parent_def = self.$scope().$find_parent_def()))))) {
            return parent_def
          } else {
            return nil
          }
        }, 0);
        
        $def(self, '$return_expr_in_def?', function $ReturnNode_return_expr_in_def$ques$3() {
          var self = this;

          if (($truthy(self['$expr?']()) && (($truthy(self.$scope()['$def?']()) || ($truthy(self.$scope()['$lambda?']())))))) {
            return self.$scope()
          } else {
            return nil
          }
        }, 0);
        
        $def(self, '$scope_to_catch_return', function $$scope_to_catch_return() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$return_in_iter?']()))) {
            return $ret_or_1
          } else {
            return self['$return_expr_in_def?']()
          }
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this, def_scope = nil, $writer = nil;

          if ($truthy((def_scope = self.$scope_to_catch_return()))) {
            
            
            $writer = [true];
            $send(def_scope, 'catch_return=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$push("Opal.ret(", self.$return_val(), ")");
          } else if ($truthy(self['$stmt?']())) {
            return self.$push("return ", self.$return_val())
          } else {
            return self.$error("void value expression: cannot return as an expression")
          }
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'JSReturnNode');

        
        
        self.$handle("js_return");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$push("return ");
          return self.$push(self.$expr(self.$value()));
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'JSTempNode');

        
        
        self.$handle("js_tmp");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s())
        }, 0);
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'BlockPassNode');

        
        
        self.$handle("block_pass");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push(self.$expr(self.$s("send", self.$value(), "to_proc", self.$s("arglist"))))
        }, 0);
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/definitions"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $range = Opal.range, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $eqeq = Opal.eqeq, $to_a = Opal.to_a, $slice = Opal.slice, $rb_plus = Opal.rb_plus, $hash2 = Opal.hash2, $const_set = Opal.const_set;

  Opal.add_stubs('require,handle,children,each,line,self,scope,expr,===,type,new_name,helper,inspect,[],to_s,first,old_name,push,error,empty?,stmt?,compile_children,simple_children?,compile_inline_children,>,size,wrap,==,returned_children,await_encountered,parent,+,returns,compiler,s,process,fragment,freeze,none?,include?,map,each_with_index,reject,to_proc');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'UndefNode');

        
        
        self.$handle("undef");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return $send(self.$children(), 'each', [], function $$1(child){var self = $$1.$$s == null ? this : $$1.$$s;

            
            
            if (child == null) child = nil;;
            return self.$line("Opal.udef(" + (self.$scope().$self()) + ", '$' + ", self.$expr(child), ");");}, {$$arity: 1, $$s: self})
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'AliasNode');

        
        
        self.$handle("alias");
        self.$children("new_name", "old_name");
        return $def(self, '$compile', function $$compile() {
          var self = this, $ret_or_1 = nil, new_name_str = nil, old_name_str = nil;

          if ($eqeqeq("gvar", ($ret_or_1 = self.$new_name().$type()))) {
            
            self.$helper("alias_gvar");
            new_name_str = self.$new_name().$children().$first().$to_s()['$[]']($range(1, -1, false)).$inspect();
            old_name_str = self.$old_name().$children().$first().$to_s()['$[]']($range(1, -1, false)).$inspect();
            return self.$push("$alias_gvar(", new_name_str, ", ", old_name_str, ")");
          } else if (($eqeqeq("dsym", $ret_or_1) || ($eqeqeq("sym", $ret_or_1)))) {
            
            self.$helper("alias");
            return self.$push("$alias(" + (self.$scope().$self()) + ", ", self.$expr(self.$new_name()), ", ", self.$expr(self.$old_name()), ")");
          } else {
            return self.$error("Opal doesn't know yet how to alias with " + (self.$new_name().$type()))
          }
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BeginNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.level = $proto.returned_children = nil;
        
        self.$handle("begin");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("nil")
          };
          if ($truthy(self['$stmt?']())) {
            return self.$compile_children(self.$children(), self.level)
          } else if ($truthy(self['$simple_children?']())) {
            
            self.$compile_inline_children(self.$children(), self.level);
            if ($truthy($rb_gt(self.$children().$size(), 1))) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };
          } else if ($eqeq(self.$children().$size(), 1)) {
            return self.$compile_inline_children(self.$returned_children(), self.level)
          } else {
            
            self.$compile_children(self.$returned_children(), self.level);
            if ($truthy(self.$scope().$parent().$await_encountered())) {
              return self.$wrap("(await (async function() {", "})())")
            } else {
              return self.$wrap("(function() {", "})()")
            };
          };
        }, 0);
        
        $def(self, '$returned_children', function $$returned_children() {
          var $a, $b, self = this, $ret_or_1 = nil, rest = nil, last_child = nil;

          return (self.returned_children = ($truthy(($ret_or_1 = self.returned_children)) ? ($ret_or_1) : (($a = [].concat($to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (rest = $slice.call($a, 0, $b)), (last_child = ($a[$b] == null ? nil : $a[$b])), $a, ($truthy(last_child) ? ($rb_plus(rest, [self.$compiler().$returns(last_child)])) : ([self.$s("nil")]))))))
        }, 0);
        
        $def(self, '$compile_children', function $$compile_children(children, level) {
          var self = this;

          return $send(children, 'each', [], function $$2(child){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (child == null) child = nil;;
            return self.$line(self.$process(child, level), self.$fragment(";", $hash2(["loc"], {"loc": false})));}, {$$arity: 1, $$s: self})
        }, 2);
        $const_set($nesting[0], 'COMPLEX_CHILDREN', ["while", "while_post", "until", "until_post", "js_return"].$freeze());
        
        $def(self, '$simple_children?', function $BeginNode_simple_children$ques$3() {
          var self = this;

          return $send(self.$children(), 'none?', [], function $$4(child){
            
            
            if (child == null) child = nil;;
            return $$('COMPLEX_CHILDREN')['$include?'](child.$type());}, 1)
        }, 0);
        return $def(self, '$compile_inline_children', function $$compile_inline_children(children, level) {
          var self = this, processed_children = nil;

          
          processed_children = $send(children, 'map', [], function $$5(child){var self = $$5.$$s == null ? this : $$5.$$s;

            
            
            if (child == null) child = nil;;
            return self.$process(child, level);}, {$$arity: 1, $$s: self});
          return $send($send(processed_children, 'reject', [], "empty?".$to_proc()), 'each_with_index', [], function $$6(child, idx){var self = $$6.$$s == null ? this : $$6.$$s;

            
            
            if (child == null) child = nil;;
            
            if (idx == null) idx = nil;;
            if (!$eqeq(idx, 0)) {
              self.$push(self.$fragment(", ", $hash2(["loc"], {"loc": false})))
            };
            return self.$push(child);}, {$$arity: 2, $$s: self});
        }, 2);
      })($nesting[0], $$('ScopeNode'), $nesting);
      return (function($base, $super) {
        var self = $klass($base, $super, 'KwBeginNode');

        
        return self.$handle("kwbegin")
      })($nesting[0], $$('BeginNode'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/yield"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def;

  Opal.add_stubs('require,find_yielding_scope,uses_block!,block_name,block_name=,-,yields_single_arg?,children,push,expr,first,wrap,s,uses_splat?,scope,def?,parent,!,==,size,any?,type,handle,compile_call');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'BaseYieldNode');

        
        
        
        $def(self, '$compile_call', function $$compile_call() {
          var self = this, yielding_scope = nil, $ret_or_1 = nil, $writer = nil, block_name = nil;

          
          yielding_scope = self.$find_yielding_scope();
          yielding_scope['$uses_block!']();
          if ($truthy(($ret_or_1 = yielding_scope.$block_name()))) {
            $ret_or_1
          } else {
            
            $writer = ["$yield"];
            $send(yielding_scope, 'block_name=', $to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          block_name = yielding_scope.$block_name();
          if ($truthy(self['$yields_single_arg?'](self.$children()))) {
            
            self.$push(self.$expr(self.$children().$first()));
            return self.$wrap("Opal.yield1(" + (block_name) + ", ", ")");
          } else {
            
            self.$push(self.$expr($send(self, 's', ["arglist"].concat($to_a(self.$children())))));
            if ($truthy(self['$uses_splat?'](self.$children()))) {
              return self.$wrap("Opal.yieldX(" + (block_name) + ", ", ")")
            } else {
              return self.$wrap("Opal.yieldX(" + (block_name) + ", [", "])")
            };
          };
        }, 0);
        
        $def(self, '$find_yielding_scope', function $$find_yielding_scope() {
          var $a, self = this, working = nil;

          
          working = self.$scope();
          while ($truthy(working)) {
            
            if (($truthy(working.$block_name()) || ($truthy(working['$def?']())))) {
              break;
            };
            working = working.$parent();
          };
          return working;
        }, 0);
        
        $def(self, '$yields_single_arg?', function $BaseYieldNode_yields_single_arg$ques$1(children) {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$uses_splat?'](children)['$!']()))) {
            return children.$size()['$=='](1)
          } else {
            return $ret_or_1
          }
        }, 1);
        return $def(self, '$uses_splat?', function $BaseYieldNode_uses_splat$ques$2(children) {
          
          return $send(children, 'any?', [], function $$3(child){
            
            
            if (child == null) child = nil;;
            return child.$type()['$==']("splat");}, 1)
        }, 1);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'YieldNode');

        
        
        self.$handle("yield");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$compile_call()
        }, 0);
      })($nesting[0], $$('BaseYieldNode'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'ReturnableYieldNode');

        
        
        self.$handle("returnable_yield");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$compile_call();
          return self.$wrap("return ", ";");
        }, 0);
      })($nesting[0], $$('BaseYieldNode'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/rescue"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $range = Opal.range, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $eqeq = Opal.eqeq;

  Opal.add_stubs('require,handle,children,push,in_ensure,line,stmt,body_sexp,indent,has_rescue_else?,unshift,rescue_else_code,process,compiler,ensr_sexp,wrap_in_closure?,await_encountered,scope,wrap,returns,begn,ensr,s,recv?,expr?,rescue_else_sexp,stmt?,detect,[],!=,type,rescue_else_sexp=,-,handle_rescue_else_manually?,in_rescue,body_code,each_with_index,==,retry_id,body,nil?,!,in_ensure?,gen_retry_id,attr_reader,expr,klasses,lvar,updated,in_resbody,rescue_body,klasses_sexp,in_resbody?,error,current_rescue');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'EnsureNode');

        
        
        self.$handle("ensure");
        self.$children("begn", "ensr");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$push("try {");
          $send(self, 'in_ensure', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

            return self.$line(self.$stmt(self.$body_sexp()))}, {$$arity: 0, $$s: self});
          self.$line("} finally {");
          $send(self, 'indent', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;
            if (self.level == null) self.level = nil;

            if ($truthy(self['$has_rescue_else?']())) {
              
              self.$unshift("var $no_errors = true; ");
              self.$line("var $rescue_else_result;");
              self.$line("if ($no_errors) { ");
              $send(self, 'indent', [], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

                
                self.$line("$rescue_else_result = (function() {");
                $send(self, 'indent', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

                  return self.$line(self.$stmt(self.$rescue_else_code()))}, {$$arity: 0, $$s: self});
                return self.$line("})();");}, {$$arity: 0, $$s: self});
              self.$line("}");
              self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level));
              return self.$line("if ($no_errors) { return $rescue_else_result; }");
            } else {
              return self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level))
            }}, {$$arity: 0, $$s: self});
          self.$line("}");
          if ($truthy(self['$wrap_in_closure?']())) {
            if ($truthy(self.$scope().$await_encountered())) {
              return self.$wrap("(await (async function() { ", "; })())")
            } else {
              return self.$wrap("(function() { ", "; })()")
            }
          } else {
            return nil
          };
        }, 0);
        
        $def(self, '$body_sexp', function $$body_sexp() {
          var self = this;

          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$compiler().$returns(self.$begn())
          } else {
            return self.$begn()
          }
        }, 0);
        
        $def(self, '$ensr_sexp', function $$ensr_sexp() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$ensr()))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }
        }, 0);
        
        $def(self, '$wrap_in_closure?', function $EnsureNode_wrap_in_closure$ques$5() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self['$recv?']())) ? ($ret_or_2) : (self['$expr?']()))))) {
            return $ret_or_1
          } else {
            return self['$has_rescue_else?']()
          }
        }, 0);
        return $def(self, '$rescue_else_code', function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if (!$truthy(self['$stmt?']())) {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'RescueNode');

        var $proto = self.$$prototype;

        $proto.retry_id = nil;
        
        self.$handle("rescue");
        self.$children("body");
        
        $def(self, '$compile', function $$compile() {
          var self = this, $writer = nil, _has_rescue_handlers = nil;

          
          
          $writer = [$send(self.$children()['$[]']($range(1, -1, false)), 'detect', [], function $$6(sexp){var $ret_or_1 = nil;

            
            
            if (sexp == null) sexp = nil;;
            if ($truthy(($ret_or_1 = sexp))) {
              return sexp.$type()['$!=']("resbody")
            } else {
              return $ret_or_1
            };}, 1)];
          $send(self.$scope(), 'rescue_else_sexp=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _has_rescue_handlers = false;
          if ($truthy(self['$handle_rescue_else_manually?']())) {
            self.$line("var $no_errors = true;")
          };
          $send(self, 'in_rescue', [self], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

            
            self.$push("try {");
            $send(self, 'indent', [], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;

              return self.$line(self.$stmt(self.$body_code()))}, {$$arity: 0, $$s: self});
            self.$line("} catch ($err) {");
            $send(self, 'indent', [], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s;

              
              if ($truthy(self['$has_rescue_else?']())) {
                self.$line("$no_errors = false;")
              };
              $send(self.$children()['$[]']($range(1, -1, false)), 'each_with_index', [], function $$10(child, idx){var self = $$10.$$s == null ? this : $$10.$$s;
                if (self.level == null) self.level = nil;

                
                
                if (child == null) child = nil;;
                
                if (idx == null) idx = nil;;
                if (!($truthy(child) && ($eqeq(child.$type(), "resbody")))) {
                  return nil;
                };
                _has_rescue_handlers = true;
                if (!$eqeq(idx, 0)) {
                  self.$push(" else ")
                };
                return self.$line(self.$process(child, self.level));}, {$$arity: 2, $$s: self});
              return self.$push(" else { throw $err; }");}, {$$arity: 0, $$s: self});
            self.$line("}");
            if ($truthy(self['$handle_rescue_else_manually?']())) {
              
              self.$push("finally {");
              $send(self, 'indent', [], function $$11(){var self = $$11.$$s == null ? this : $$11.$$s;

                
                self.$line("if ($no_errors) { ");
                $send(self, 'indent', [], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s;

                  return self.$line(self.$stmt(self.$rescue_else_code()))}, {$$arity: 0, $$s: self});
                return self.$line("}");}, {$$arity: 0, $$s: self});
              self.$push("}");
            };
            if ($truthy(self.$retry_id())) {
              return self.$wrap("" + (self.$retry_id()) + ": do { ", " break; } while(1)")
            } else {
              return nil
            };}, {$$arity: 0, $$s: self});
          if (($truthy(self['$expr?']()) || ($truthy(self['$recv?']())))) {
            if ($truthy(self.$scope().$await_encountered())) {
              return self.$wrap("(await (async function() { ", "})())")
            } else {
              return self.$wrap("(function() { ", "})()")
            }
          } else {
            return nil
          };
        }, 0);
        
        $def(self, '$body_code', function $$body_code() {
          var self = this, body_code = nil;

          
          body_code = (($truthy(self.$body()['$nil?']()) || ($eqeq(self.$body().$type(), "resbody"))) ? (self.$s("nil")) : (self.$body()));
          if (!$truthy(self['$stmt?']())) {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, 0);
        
        $def(self, '$rescue_else_code', function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if (!$truthy(self['$stmt?']())) {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, 0);
        
        $def(self, '$handle_rescue_else_manually?', function $RescueNode_handle_rescue_else_manually$ques$13() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$in_ensure?']()['$!']()))) {
            return self['$has_rescue_else?']()
          } else {
            return $ret_or_1
          }
        }, 0);
        
        $def(self, '$gen_retry_id', function $$gen_retry_id() {
          var self = this, $ret_or_1 = nil;

          return (self.retry_id = ($truthy(($ret_or_1 = self.retry_id)) ? ($ret_or_1) : (self.$scope().$gen_retry_id())))
        }, 0);
        return self.$attr_reader("retry_id");
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'ResBodyNode');

        
        
        self.$handle("resbody");
        self.$children("klasses_sexp", "lvar", "body");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$push("if (Opal.rescue($err, ", self.$expr(self.$klasses()), ")) {");
          $send(self, 'indent', [], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;

            
            if ($truthy(self.$lvar())) {
              self.$push(self.$expr(self.$lvar().$updated(nil, [].concat($to_a(self.$lvar().$children())).concat([self.$s("js_tmp", "$err")]))))
            };
            self.$line("try {");
            $send(self, 'indent', [], function $$15(){var self = $$15.$$s == null ? this : $$15.$$s;

              return $send(self, 'in_resbody', [], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;

                return self.$line(self.$stmt(self.$rescue_body()))}, {$$arity: 0, $$s: self})}, {$$arity: 0, $$s: self});
            return self.$line("} finally { Opal.pop_exception(); }");}, {$$arity: 0, $$s: self});
          return self.$line("}");
        }, 0);
        
        $def(self, '$klasses', function $$klasses() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$klasses_sexp()))) {
            return $ret_or_1
          } else {
            return self.$s("array", self.$s("const", nil, "StandardError"))
          }
        }, 0);
        return $def(self, '$rescue_body', function $$rescue_body() {
          var self = this, body_code = nil, $ret_or_1 = nil;

          
          body_code = ($truthy(($ret_or_1 = self.$body())) ? ($ret_or_1) : (self.$s("nil")));
          if (!$truthy(self['$stmt?']())) {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, 0);
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'RetryNode');

        
        
        self.$handle("retry");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          if (!$truthy(self['$in_resbody?']())) {
            self.$error("Invalid retry")
          };
          return self.$push("continue " + (self.$scope().$current_rescue().$gen_retry_id()));
        }, 0);
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/super"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $slice = Opal.slice, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $to_ary = Opal.to_ary, $eqeq = Opal.eqeq, $not = Opal.not, $eqeqeq = Opal.eqeqeq, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_gt = Opal.rb_gt;

  Opal.add_stubs('require,include?,type,s,helper,push,compile_receiver,compile_method_body,compile_method_name,compile_arguments,compile_block_pass,private,def?,scope,find_parent_def,to_s,mid,def_scope,identify!,self,method_id,def_scope_identity,defined_check_param,allow_stubs,super_chain,join,map,implicit_arguments_param,super_method_invocation,iter?,super_block_invocation,raise,handle,wrap,uses_block!,compile_using_send,==,iter,block_name,implicit_arglist,!,<<,new,each,children,original_args,[],meta,===,+,[]=,-,>,empty?');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'BaseSuperNode');

        var $proto = self.$$prototype;

        $proto.sexp = $proto.def_scope = nil;
        
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $b, $c, $yield = $$initialize.$$p || nil, self = this, args = nil, rest = nil, last_child = nil;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          args = [].concat($to_a(self.sexp));
          $b = [].concat($to_a(args)), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_child = ($b[$c] == null ? nil : $b[$c])), $b;
          if (($truthy(last_child) && ($truthy(["iter", "block_pass"]['$include?'](last_child.$type()))))) {
            
            self.iter = last_child;
            args = rest;
          } else {
            self.iter = self.$s("js_tmp", "null")
          };
          self.arglist = $send(self, 's', ["arglist"].concat($to_a(args)));
          return (self.recvr = self.$s("self"));
        }, -1);
        
        $def(self, '$compile_using_send', function $$compile_using_send() {
          var self = this;

          
          self.$helper("send2");
          self.$push("$send2(");
          self.$compile_receiver();
          self.$compile_method_body();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, 0);
        self.$private();
        
        $def(self, '$def_scope', function $$def_scope() {
          var self = this, $ret_or_1 = nil;

          return (self.def_scope = ($truthy(($ret_or_1 = self.def_scope)) ? ($ret_or_1) : ($truthy(self.$scope()['$def?']()) ? (self.$scope()) : (self.$scope().$find_parent_def()))))
        }, 0);
        
        $def(self, '$defined_check_param', function $$defined_check_param() {
          
          return "false"
        }, 0);
        
        $def(self, '$implicit_arguments_param', function $$implicit_arguments_param() {
          
          return "false"
        }, 0);
        
        $def(self, '$method_id', function $$method_id() {
          var self = this;

          return self.$def_scope().$mid().$to_s()
        }, 0);
        
        $def(self, '$def_scope_identity', function $$def_scope_identity() {
          var self = this;

          return self.$def_scope()['$identify!'](self.$def_scope().$mid())
        }, 0);
        
        $def(self, '$allow_stubs', function $$allow_stubs() {
          
          return "true"
        }, 0);
        
        $def(self, '$super_method_invocation', function $$super_method_invocation() {
          var self = this;

          
          self.$helper("find_super");
          return "$find_super(" + (self.$scope().$self()) + ", '" + (self.$method_id()) + "', " + (self.$def_scope_identity()) + ", " + (self.$defined_check_param()) + ", " + (self.$allow_stubs()) + ")";
        }, 0);
        
        $def(self, '$super_block_invocation', function $$super_block_invocation() {
          var $a, $b, self = this, chain = nil, cur_defn = nil, mid = nil, trys = nil;

          
          self.$helper("find_block_super");
          $b = self.$scope().$super_chain(), $a = $to_ary($b), (chain = ($a[0] == null ? nil : $a[0])), (cur_defn = ($a[1] == null ? nil : $a[1])), (mid = ($a[2] == null ? nil : $a[2])), $b;
          trys = $send(chain, 'map', [], function $$1(c){
            
            
            if (c == null) c = nil;;
            return "" + (c) + ".$$def";}, 1).$join(" || ");
          return "$find_block_super(" + (self.$scope().$self()) + ", " + (mid) + ", (" + (trys) + " || " + (cur_defn) + "), " + (self.$defined_check_param()) + ", " + (self.$implicit_arguments_param()) + ")";
        }, 0);
        
        $def(self, '$compile_method_body', function $$compile_method_body() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$super_method_invocation())
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$push(self.$super_block_invocation())
          } else {
            return self.$raise("super must be called from method body or block")
          };
        }, 0);
        return $def(self, '$compile_method_name', function $$compile_method_name() {
          var $a, $b, self = this, _chain = nil, _cur_defn = nil, mid = nil;

          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(", '" + (self.$method_id()) + "'")
          } else if ($truthy(self.$scope()['$iter?']())) {
            
            $b = self.$scope().$super_chain(), $a = $to_ary($b), (_chain = ($a[0] == null ? nil : $a[0])), (_cur_defn = ($a[1] == null ? nil : $a[1])), (mid = ($a[2] == null ? nil : $a[2])), $b;
            return self.$push(", " + (mid));
          } else {
            return nil
          }
        }, 0);
      })($nesting[0], $$('CallNode'));
      (function($base, $super) {
        var self = $klass($base, $super, 'DefinedSuperNode');

        
        
        self.$handle("defined_super");
        
        $def(self, '$allow_stubs', function $$allow_stubs() {
          
          return "false"
        }, 0);
        
        $def(self, '$defined_check_param', function $$defined_check_param() {
          
          return "true"
        }, 0);
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$compile_receiver();
          self.$compile_method_body();
          return self.$wrap("((", ") != null ? \"super\" : nil)");
        }, 0);
      })($nesting[0], $$('BaseSuperNode'));
      (function($base, $super) {
        var self = $klass($base, $super, 'SuperNode');

        
        
        self.$handle("super");
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          if ($truthy(self.$scope()['$def?']())) {
            return self.$scope()['$uses_block!']()
          } else {
            return nil
          };
        }, -1);
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$compile_using_send()
        }, 0);
      })($nesting[0], $$('BaseSuperNode'));
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ZsuperNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("zsuper");
        
        $def(self, '$implicit_arguments_param', function $$implicit_arguments_param() {
          
          return "true"
        }, 0);
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          if ($eqeq(self.$iter().$type(), "iter")) {
            return nil
          } else {
            
            self.$scope()['$uses_block!']();
            return (self.iter = self.$s("js_tmp", ($truthy(($ret_or_1 = self.$scope().$block_name())) ? ($ret_or_1) : ("$yield"))));
          };
        }, -1);
        
        $def(self, '$compile', function $$compile() {
          var self = this, implicit_args = nil, block_pass = nil;

          
          if ($truthy(self.$def_scope())) {
            
            implicit_args = self.$implicit_arglist();
            if (($truthy(self.$block_name()) && ($not(self.$iter())))) {
              
              block_pass = self.$s("block_pass", self.$s("lvar", self.$block_name()));
              implicit_args['$<<'](block_pass);
            };
            self.arglist = $send(self, 's', ["arglist"].concat($to_a(implicit_args)));
          };
          return self.$compile_using_send();
        }, 0);
        
        $def(self, '$implicit_arglist', function $$implicit_arglist() {
          var self = this, args = nil, kwargs = nil, same_arg_counter = nil;

          
          args = [];
          kwargs = [];
          same_arg_counter = $$('Hash').$new(0);
          $send(self.$def_scope().$original_args().$children(), 'each', [], function $$2(sexp){var self = $$2.$$s == null ? this : $$2.$$s, arg_name = nil, $ret_or_1 = nil, arg_node = nil, $writer = nil;

            
            
            if (sexp == null) sexp = nil;;
            arg_name = sexp.$meta()['$[]']("arg_name");
            if (($eqeqeq("arg", ($ret_or_1 = sexp.$type())) || ($eqeqeq("optarg", $ret_or_1)))) {
              
              arg_node = self.$s("lvar", arg_name);
              if ($eqeq(arg_name['$[]'](0), "_")) {
                
                
                $writer = [arg_name, $rb_plus(same_arg_counter['$[]'](arg_name), 1)];
                $send(same_arg_counter, '[]=', $to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy($rb_gt(same_arg_counter['$[]'](arg_name), 1))) {
                  arg_node = self.$s("js_tmp", "" + (arg_name) + "_$" + (same_arg_counter['$[]'](arg_name)))
                };
              };
              return args['$<<'](arg_node);
            } else if ($eqeqeq("restarg", $ret_or_1)) {
              
              arg_node = ($truthy(arg_name) ? (self.$s("lvar", arg_name)) : (self.$s("js_tmp", "$rest_arg")));
              return args['$<<'](self.$s("splat", arg_node));
            } else if (($eqeqeq("kwarg", $ret_or_1) || ($eqeqeq("kwoptarg", $ret_or_1)))) {
              return kwargs['$<<'](self.$s("pair", self.$s("sym", arg_name), self.$s("lvar", arg_name)))
            } else if ($eqeqeq("kwrestarg", $ret_or_1)) {
              
              arg_node = ($truthy(arg_name) ? (self.$s("lvar", arg_name)) : (self.$s("js_tmp", "$kw_rest_arg")));
              return kwargs['$<<'](self.$s("kwsplat", arg_node));
            } else {
              return nil
            };}, {$$arity: 1, $$s: self});
          if (!$truthy(kwargs['$empty?']())) {
            args['$<<']($send(self, 's', ["hash"].concat($to_a(kwargs))))
          };
          return args;
        }, 0);
        return $def(self, '$block_name', function $$block_name() {
          var self = this, $ret_or_1 = nil;

          if ($eqeqeq($$$($$$($$('Opal'), 'Nodes'), 'IterNode'), ($ret_or_1 = self.$def_scope()))) {
            return self.$def_scope().$block_name()
          } else if ($eqeqeq($$$($$$($$('Opal'), 'Nodes'), 'DefNode'), $ret_or_1)) {
            return self.$def_scope().$block_name()
          } else {
            return self.$raise("Don't know what to do with super in the scope " + (self.$def_scope()))
          }
        }, 0);
      })($nesting[0], $$('SuperNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/version"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $const_set = Opal.const_set;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return $const_set($nesting[0], 'VERSION', "1.4.0")
  })($nesting[0], $nesting)
};

Opal.modules["opal/nodes/top"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $def = Opal.def;

  Opal.add_stubs('require,handle,children,top_scope=,compiler,-,push,version_comment,in_scope,==,body,s,line,use_strict?,stmt,stmts,is_a?,eval?,add_temp,add_used_helpers,to_vars,scope,compile_method_stubs,compile_irb_vars,compile_end_construct,opening,closing,await_encountered,requirable?,unshift,inspect,module_name,file,esm?,returns,irb?,each,to_a,helpers,method_missing?,method_calls,join,map,to_proc,empty?,eof_content');
  
  self.$require("pathname");
  self.$require("opal/version");
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TopNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("top");
        self.$children("body");
        
        $def(self, '$compile', function $$compile() {
          var self = this, $writer = nil;

          
          
          $writer = [self];
          $send(self.$compiler(), 'top_scope=', $to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.$push(self.$version_comment());
          $send(self, 'in_scope', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, body_code = nil;
            if (self.define_nesting == null) self.define_nesting = nil;
            if (self.define_self == null) self.define_self = nil;
            if (self.define_relative_access == null) self.define_relative_access = nil;
            if (self.define_absolute_const == null) self.define_absolute_const = nil;

            if ($eqeq(self.$body(), self.$s("nil"))) {
              return self.$line("return Opal.nil;")
            } else {
              
              if ($truthy(self.$compiler()['$use_strict?']())) {
                self.$line("\"use strict\";")
              };
              body_code = self.$stmt(self.$stmts());
              if (!$truthy(body_code['$is_a?']($$('Array')))) {
                body_code = [body_code]
              };
              if ($truthy(self.$compiler()['$eval?']())) {
                if ($truthy(self.define_nesting)) {
                  self.$add_temp("$nesting = self.$$is_a_module ? [self] : [self.$$class]")
                }
              } else {
                
                if ($truthy(self.define_self)) {
                  self.$add_temp("self = Opal.top")
                };
                if ($truthy(self.define_nesting)) {
                  self.$add_temp("$nesting = []")
                };
              };
              if ($truthy(self.define_relative_access)) {
                self.$add_temp("$$ = Opal.$r($nesting)")
              };
              self.$add_temp("nil = Opal.nil");
              if ($truthy(self.define_absolute_const)) {
                self.$add_temp("$$$ = Opal.$$$")
              };
              self.$add_used_helpers();
              self.$line(self.$scope().$to_vars());
              self.$compile_method_stubs();
              self.$compile_irb_vars();
              self.$compile_end_construct();
              return self.$line(body_code);
            }}, {$$arity: 0, $$s: self});
          self.$opening();
          return self.$closing();
        }, 0);
        
        $def(self, '$opening', function $$opening() {
          var self = this, async_prefix = nil;

          
          if ($truthy(self.$await_encountered())) {
            async_prefix = "async "
          };
          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$unshift("Opal.modules[" + ($$$($$('Opal'), 'Compiler').$module_name(self.$compiler().$file()).$inspect()) + "] = " + (async_prefix) + "function(Opal) {")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$unshift("(" + (async_prefix) + "function(Opal, self) {")
          } else if ($truthy(self.$compiler()['$esm?']())) {
            return self.$unshift("export default Opal.queue(" + (async_prefix) + "function(Opal) {")
          } else {
            return self.$unshift("Opal.queue(" + (async_prefix) + "function(Opal) {")
          };
        }, 0);
        
        $def(self, '$closing', function $$closing() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$line("};\n")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("})(Opal, self);")
          } else {
            return self.$line("});\n")
          }
        }, 0);
        
        $def(self, '$stmts', function $$stmts() {
          var self = this;

          return self.$compiler().$returns(self.$body())
        }, 0);
        
        $def(self, '$absolute_const', function $$absolute_const() {
          var self = this;

          
          self.define_absolute_const = true;
          return "$$$";
        }, 0);
        
        $def(self, '$compile_irb_vars', function $$compile_irb_vars() {
          var self = this;

          if ($truthy(self.$compiler()['$irb?']())) {
            return self.$line("if (!Opal.irb_vars) { Opal.irb_vars = {}; }")
          } else {
            return nil
          }
        }, 0);
        
        $def(self, '$add_used_helpers', function $$add_used_helpers() {
          var self = this;

          return $send(self.$compiler().$helpers().$to_a(), 'each', [], function $$2(h){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (h == null) h = nil;;
            return self.$add_temp("$" + (h) + " = Opal." + (h));}, {$$arity: 1, $$s: self})
        }, 0);
        
        $def(self, '$compile_method_stubs', function $$compile_method_stubs() {
          var self = this, calls = nil, stubs = nil;

          if ($truthy(self.$compiler()['$method_missing?']())) {
            
            calls = self.$compiler().$method_calls();
            stubs = $send(calls.$to_a(), 'map', [], "to_s".$to_proc()).$join(",");
            if ($truthy(stubs['$empty?']())) {
              return nil
            } else {
              return self.$line("Opal.add_stubs('" + (stubs) + "');")
            };
          } else {
            return nil
          }
        }, 0);
        
        $def(self, '$compile_end_construct', function $$compile_end_construct() {
          var self = this, content = nil;

          if ($truthy((content = self.$compiler().$eof_content()))) {
            
            self.$line("var $__END__ = Opal.Object.$new();");
            return self.$line("$__END__.$read = function() { return " + (content.$inspect()) + "; };");
          } else {
            return nil
          }
        }, 0);
        return $def(self, '$version_comment', function $$version_comment() {
          
          return "/* Generated by Opal " + ($$$($$('Opal'), 'VERSION')) + " */"
        }, 0);
      })($nesting[0], $$('ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/while"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def;

  Opal.add_stubs('require,handle,children,js_truthy,test,with_temp,in_while,compiler,wrap_in_closure?,[]=,while_loop,-,indent,stmt,body,uses_redo?,compile_with_redo,compile_without_redo,await_encountered,scope,wrap,private,push,compile_while,while_open,while_close,line,[],expr?,recv?');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'WhileNode');

        
        
        self.$handle("while");
        self.$children("test", "body");
        
        $def(self, '$compile', function $$compile() {
          var self = this, test_code = nil;

          
          test_code = self.$js_truthy(self.$test());
          $send(self, 'with_temp', [], function $$1(redo_var){var self = $$1.$$s == null ? this : $$1.$$s;

            
            
            if (redo_var == null) redo_var = nil;;
            return $send(self.$compiler(), 'in_while', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil, body_code = nil;

              
              if ($truthy(self['$wrap_in_closure?']())) {
                
                $writer = ["closure", true];
                $send(self.$while_loop(), '[]=', $to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              
              $writer = ["redo_var", redo_var];
              $send(self.$while_loop(), '[]=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              body_code = $send(self, 'indent', [], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

                return self.$stmt(self.$body())}, {$$arity: 0, $$s: self});
              if ($truthy(self['$uses_redo?']())) {
                return self.$compile_with_redo(test_code, body_code, redo_var)
              } else {
                return self.$compile_without_redo(test_code, body_code)
              };}, {$$arity: 0, $$s: self});}, {$$arity: 1, $$s: self});
          if ($truthy(self['$wrap_in_closure?']())) {
            if ($truthy(self.$scope().$await_encountered())) {
              return self.$wrap("(await (async function() {", "; return nil; })())")
            } else {
              return self.$wrap("(function() {", "; return nil; })()")
            }
          } else {
            return nil
          };
        }, 0);
        self.$private();
        
        $def(self, '$compile_with_redo', function $$compile_with_redo(test_code, body_code, redo_var) {
          var self = this;

          
          self.$push("" + (redo_var) + " = false; ");
          return self.$compile_while([redo_var, " || ", test_code], ["" + (redo_var) + " = false;", body_code]);
        }, 3);
        
        $def(self, '$compile_without_redo', function $$compile_without_redo(test_code, body_code) {
          var self = this;

          return self.$compile_while([test_code], [body_code])
        }, 2);
        
        $def(self, '$compile_while', function $$compile_while(test_code, body_code) {
          var self = this;

          
          $send(self, 'push', [self.$while_open()].concat($to_a(test_code)).concat([self.$while_close()]));
          $send(self, 'indent', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

            return $send(self, 'line', $to_a(body_code))}, {$$arity: 0, $$s: self});
          return self.$line("}");
        }, 2);
        
        $def(self, '$while_open', function $$while_open() {
          
          return "while ("
        }, 0);
        
        $def(self, '$while_close', function $$while_close() {
          
          return ") {"
        }, 0);
        
        $def(self, '$uses_redo?', function $WhileNode_uses_redo$ques$5() {
          var self = this;

          return self.$while_loop()['$[]']("use_redo")
        }, 0);
        return $def(self, '$wrap_in_closure?', function $WhileNode_wrap_in_closure$ques$6() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$expr?']()))) {
            return $ret_or_1
          } else {
            return self['$recv?']()
          }
        }, 0);
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'UntilNode');

        
        
        self.$handle("until");
        self.$private();
        
        $def(self, '$while_open', function $$while_open() {
          
          return "while (!("
        }, 0);
        return $def(self, '$while_close', function $$while_close() {
          
          return ")) {"
        }, 0);
      })($nesting[0], $$('WhileNode'));
      (function($base, $super) {
        var self = $klass($base, $super, 'WhilePostNode');

        
        
        self.$handle("while_post");
        self.$private();
        
        $def(self, '$compile_while', function $$compile_while(test_code, body_code) {
          var self = this;

          
          self.$push("do {");
          $send(self, 'indent', [], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

            return $send(self, 'line', $to_a(body_code))}, {$$arity: 0, $$s: self});
          return $send(self, 'line', ["} ", self.$while_open()].concat($to_a(test_code)).concat([self.$while_close()]));
        }, 2);
        return $def(self, '$while_close', function $$while_close() {
          
          return ");"
        }, 0);
      })($nesting[0], $$('WhileNode'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'UntilPostNode');

        
        
        self.$handle("until_post");
        self.$private();
        
        $def(self, '$while_open', function $$while_open() {
          
          return "while(!("
        }, 0);
        return $def(self, '$while_close', function $$while_close() {
          
          return "));"
        }, 0);
      })($nesting[0], $$('WhilePostNode'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/hash"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $send = Opal.send, $eqeqeq = Opal.eqeqeq, $def = Opal.def, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $hash2 = Opal.hash2, $rb_minus = Opal.rb_minus;

  Opal.add_stubs('require,handle,attr_accessor,each,children,===,type,<<,[],all?,keys,include?,has_kwsplat,compile_merge,simple_keys?,compile_hash2,compile_hash,helper,==,empty?,expr,s,each_with_index,push,wrap,times,size,inspect,to_s,values,[]=,-,join,value');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'HashNode');

        
        
        self.$handle("hash");
        self.$attr_accessor("has_kwsplat", "keys", "values");
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $rest_arg, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          $rest_arg = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($rest_arg), $yield);
          self.has_kwsplat = false;
          self.keys = [];
          self.values = [];
          return $send(self.$children(), 'each', [], function $$1(child){var self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil;
            if (self.keys == null) self.keys = nil;
            if (self.values == null) self.values = nil;

            
            
            if (child == null) child = nil;;
            if ($eqeqeq("kwsplat", ($ret_or_1 = child.$type()))) {
              return (self.has_kwsplat = true)
            } else if ($eqeqeq("pair", $ret_or_1)) {
              
              self.keys['$<<'](child.$children()['$[]'](0));
              return self.values['$<<'](child.$children()['$[]'](1));
            } else {
              return nil
            };}, {$$arity: 1, $$s: self});
        }, -1);
        
        $def(self, '$simple_keys?', function $HashNode_simple_keys$ques$2() {
          var self = this;

          return $send(self.$keys(), 'all?', [], function $$3(key){
            
            
            if (key == null) key = nil;;
            return ["sym", "str"]['$include?'](key.$type());}, 1)
        }, 0);
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self.$has_kwsplat())) {
            return self.$compile_merge()
          } else if ($truthy(self['$simple_keys?']())) {
            return self.$compile_hash2()
          } else {
            return self.$compile_hash()
          }
        }, 0);
        
        $def(self, '$compile_merge', function $$compile_merge() {
          var $a, self = this, result = nil, seq = nil;

          
          self.$helper("hash");
          $a = [[], []], (result = $a[0]), (seq = $a[1]), $a;
          $send(self.$children(), 'each', [], function $$4(child){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (child == null) child = nil;;
            if ($eqeq(child.$type(), "kwsplat")) {
              
              if (!$truthy(seq['$empty?']())) {
                result['$<<'](self.$expr($send(self, 's', ["hash"].concat($to_a(seq)))))
              };
              result['$<<'](self.$expr(child));
              return (seq = []);
            } else {
              return seq['$<<'](child)
            };}, {$$arity: 1, $$s: self});
          if (!$truthy(seq['$empty?']())) {
            result['$<<'](self.$expr($send(self, 's', ["hash"].concat($to_a(seq)))))
          };
          return $send(result, 'each_with_index', [], function $$5(fragment, idx){var self = $$5.$$s == null ? this : $$5.$$s;

            
            
            if (fragment == null) fragment = nil;;
            
            if (idx == null) idx = nil;;
            if ($eqeq(idx, 0)) {
              return self.$push(fragment)
            } else {
              return self.$push(".$merge(", fragment, ")")
            };}, {$$arity: 2, $$s: self});
        }, 0);
        
        $def(self, '$compile_hash', function $$compile_hash() {
          var self = this;

          
          self.$helper("hash");
          $send(self.$children(), 'each_with_index', [], function $$6(pair, idx){var $a, $b, self = $$6.$$s == null ? this : $$6.$$s, key = nil, value = nil;

            
            
            if (pair == null) pair = nil;;
            
            if (idx == null) idx = nil;;
            $b = pair.$children(), $a = $to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
            if (!$eqeq(idx, 0)) {
              self.$push(", ")
            };
            return self.$push(self.$expr(key), ", ", self.$expr(value));}, {$$arity: 2, $$s: self});
          return self.$wrap("$hash(", ")");
        }, 0);
        return $def(self, '$compile_hash2', function $$compile_hash2() {
          var $a, self = this, hash_obj = nil, hash_keys = nil;

          
          $a = [$hash2([], {}), []], (hash_obj = $a[0]), (hash_keys = $a[1]), $a;
          self.$helper("hash2");
          $send(self.$keys().$size(), 'times', [], function $$7(idx){var self = $$7.$$s == null ? this : $$7.$$s, key = nil, $writer = nil;

            
            
            if (idx == null) idx = nil;;
            key = self.$keys()['$[]'](idx).$children()['$[]'](0).$to_s().$inspect();
            if (!$truthy(hash_obj['$include?'](key))) {
              hash_keys['$<<'](key)
            };
            
            $writer = [key, self.$expr(self.$values()['$[]'](idx))];
            $send(hash_obj, '[]=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, {$$arity: 1, $$s: self});
          $send(hash_keys, 'each_with_index', [], function $$8(key, idx){var self = $$8.$$s == null ? this : $$8.$$s;

            
            
            if (key == null) key = nil;;
            
            if (idx == null) idx = nil;;
            if (!$eqeq(idx, 0)) {
              self.$push(", ")
            };
            self.$push("" + (key) + ": ");
            return self.$push(hash_obj['$[]'](key));}, {$$arity: 2, $$s: self});
          return self.$wrap("$hash2([" + (hash_keys.$join(", ")) + "], {", "})");
        }, 0);
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'KwSplatNode');

        
        
        self.$handle("kwsplat");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push("Opal.to_hash(", self.$expr(self.$value()), ")")
        }, 0);
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/array"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def;

  Opal.add_stubs('require,handle,empty?,children,push,each,==,type,expr,<<,fragment');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'ArrayNode');

        
        
        self.$handle("array");
        return $def(self, '$compile', function $$compile() {
          var $a, self = this, code = nil, work = nil, join = nil;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("[]")
          };
          $a = [[], []], (code = $a[0]), (work = $a[1]), $a;
          $send(self.$children(), 'each', [], function $$1(child){var self = $$1.$$s == null ? this : $$1.$$s, splat = nil, part = nil;

            
            
            if (child == null) child = nil;;
            splat = child.$type()['$==']("splat");
            part = self.$expr(child);
            if ($truthy(splat)) {
              
              if ($truthy(work['$empty?']())) {
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("[].concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                }
              } else {
                
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"));
              };
              return (work = []);
            } else {
              
              if (!$truthy(work['$empty?']())) {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](part);
            };}, {$$arity: 1, $$s: self});
          if (!$truthy(work['$empty?']())) {
            
            join = [self.$fragment("["), work, self.$fragment("]")];
            if ($truthy(code['$empty?']())) {
              code = join
            } else {
              code.$push([self.$fragment(".concat("), join, self.$fragment(")")])
            };
          };
          return self.$push(code);
        }, 0);
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/defined"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $eqeqeq = Opal.eqeqeq, $eqeq = Opal.eqeq, $def = Opal.def, $truthy = Opal.truthy, $to_a = Opal.to_a, $slice = Opal.slice, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs('require,handle,children,===,type,value,push,inspect,to_s,==,[],size,compile_defined_send,wrap,compile_defined_ivar,compile_defined_super,compile_defined_yield,compile_defined_xstr,compile_defined_const,compile_defined_cvar,compile_defined_gvar,compile_defined_back_ref,compile_defined_nth_ref,compile_defined_array,respond_to?,__send__,new_temp,scope,expr,wrap_with_try_catch,mid_to_jsid,compile_defined,compile_send_recv_doesnt_raise,self,each,s,uses_block!,block_name,find_parent_def,nil?,relative_access,absolute_const,top_scope,class_variable_owner,helper,include?,each_with_index');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'DefinedNode');

        
        
        self.$handle("defined?");
        self.$children("value");
        
        $def(self, '$compile', function $$compile() {
          var self = this, $ret_or_1 = nil;

          if (($eqeqeq("self", ($ret_or_1 = self.$value().$type())) || (($eqeqeq("nil", $ret_or_1) || (($eqeqeq("false", $ret_or_1) || ($eqeqeq("true", $ret_or_1)))))))) {
            return self.$push(self.$value().$type().$to_s().$inspect())
          } else if (($eqeqeq("lvasgn", $ret_or_1) || (($eqeqeq("ivasgn", $ret_or_1) || (($eqeqeq("gvasgn", $ret_or_1) || (($eqeqeq("cvasgn", $ret_or_1) || (($eqeqeq("casgn", $ret_or_1) || (($eqeqeq("op_asgn", $ret_or_1) || (($eqeqeq("or_asgn", $ret_or_1) || ($eqeqeq("and_asgn", $ret_or_1)))))))))))))))) {
            return self.$push("'assignment'")
          } else if ($eqeqeq("lvar", $ret_or_1)) {
            return self.$push("'local-variable'")
          } else if ($eqeqeq("begin", $ret_or_1)) {
            if (($eqeq(self.$value().$children().$size(), 1) && ($eqeq(self.$value().$children()['$[]'](0).$type(), "masgn")))) {
              return self.$push("'assignment'")
            } else {
              return self.$push("'expression'")
            }
          } else if ($eqeqeq("send", $ret_or_1)) {
            
            self.$compile_defined_send(self.$value());
            return self.$wrap("(", " ? 'method' : nil)");
          } else if ($eqeqeq("ivar", $ret_or_1)) {
            
            self.$compile_defined_ivar(self.$value());
            return self.$wrap("(", " ? 'instance-variable' : nil)");
          } else if (($eqeqeq("zsuper", $ret_or_1) || ($eqeqeq("super", $ret_or_1)))) {
            return self.$compile_defined_super()
          } else if ($eqeqeq("yield", $ret_or_1)) {
            
            self.$compile_defined_yield();
            return self.$wrap("(", " ? 'yield' : nil)");
          } else if ($eqeqeq("xstr", $ret_or_1)) {
            return self.$compile_defined_xstr(self.$value())
          } else if ($eqeqeq("const", $ret_or_1)) {
            
            self.$compile_defined_const(self.$value());
            return self.$wrap("(", " ? 'constant' : nil)");
          } else if ($eqeqeq("cvar", $ret_or_1)) {
            
            self.$compile_defined_cvar(self.$value());
            return self.$wrap("(", " ? 'class variable' : nil)");
          } else if ($eqeqeq("gvar", $ret_or_1)) {
            
            self.$compile_defined_gvar(self.$value());
            return self.$wrap("(", " ? 'global-variable' : nil)");
          } else if ($eqeqeq("back_ref", $ret_or_1)) {
            
            self.$compile_defined_back_ref();
            return self.$wrap("(", " ? 'global-variable' : nil)");
          } else if ($eqeqeq("nth_ref", $ret_or_1)) {
            
            self.$compile_defined_nth_ref();
            return self.$wrap("(", " ? 'global-variable' : nil)");
          } else if ($eqeqeq("array", $ret_or_1)) {
            
            self.$compile_defined_array(self.$value());
            return self.$wrap("(", " ? 'expression' : nil)");
          } else {
            return self.$push("'expression'")
          }
        }, 0);
        
        $def(self, '$compile_defined', function $$compile_defined(node) {
          var self = this, type = nil, node_tmp = nil;

          
          type = node.$type();
          if ($truthy(self['$respond_to?']("compile_defined_" + (type)))) {
            return self.$__send__("compile_defined_" + (type), node)
          } else {
            
            node_tmp = self.$scope().$new_temp();
            self.$push("(" + (node_tmp) + " = ", self.$expr(node), ")");
            return node_tmp;
          };
        }, 1);
        
        $def(self, '$wrap_with_try_catch', function $$wrap_with_try_catch(code) {
          var self = this, returning_tmp = nil;

          
          returning_tmp = self.$scope().$new_temp();
          self.$push("(" + (returning_tmp) + " = (function() { try {");
          self.$push("  return " + (code) + ";");
          self.$push("} catch ($err) {");
          self.$push("  if (Opal.rescue($err, [Opal.Exception])) {");
          self.$push("    try {");
          self.$push("      return false;");
          self.$push("    } finally { Opal.pop_exception() }");
          self.$push("  } else { throw $err; }");
          self.$push("}})())");
          return returning_tmp;
        }, 1);
        
        $def(self, '$compile_send_recv_doesnt_raise', function $$compile_send_recv_doesnt_raise(recv_code) {
          var self = this;

          return self.$wrap_with_try_catch(recv_code)
        }, 1);
        
        $def(self, '$compile_defined_send', function $$compile_defined_send(node) {
          var $a, self = this, recv = nil, method_name = nil, args = nil, mid = nil, recv_code = nil, recv_tmp = nil, recv_value_tmp = nil, meth_tmp = nil;

          
          $a = [].concat($to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          mid = self.$mid_to_jsid(method_name.$to_s());
          if ($truthy(recv)) {
            
            recv_code = self.$compile_defined(recv);
            self.$push(" && ");
            if ($eqeq(recv.$type(), "send")) {
              
              recv_code = self.$compile_send_recv_doesnt_raise(recv_code);
              self.$push(" && ");
            };
            recv_tmp = self.$scope().$new_temp();
            self.$push("(" + (recv_tmp) + " = ", recv_code, ", " + (recv_tmp) + ") && ");
          } else {
            recv_tmp = self.$scope().$self()
          };
          recv_value_tmp = self.$scope().$new_temp();
          self.$push("(" + (recv_value_tmp) + " = " + (recv_tmp) + ") && ");
          meth_tmp = self.$scope().$new_temp();
          self.$push("(((" + (meth_tmp) + " = " + (recv_value_tmp) + (mid) + ") && !" + (meth_tmp) + ".$$stub)");
          self.$push(" || " + (recv_value_tmp) + "['$respond_to_missing?']('" + (method_name) + "'))");
          $send(args, 'each', [], function $$1(arg){var self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil;

            
            
            if (arg == null) arg = nil;;
            if ($eqeqeq("block_pass", ($ret_or_1 = arg.$type()))) {
              return nil
            } else {
              
              self.$push(" && ");
              return self.$compile_defined(arg);
            };}, {$$arity: 1, $$s: self});
          self.$wrap("(", ")");
          return "" + (meth_tmp) + "()";
        }, 1);
        
        $def(self, '$compile_defined_ivar', function $$compile_defined_ivar(node) {
          var self = this, name = nil, tmp = nil;

          
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          tmp = self.$scope().$new_temp();
          self.$push("(" + (tmp) + " = " + (self.$scope().$self()) + "['" + (name) + "'], " + (tmp) + " != null && " + (tmp) + " !== nil)");
          return tmp;
        }, 1);
        
        $def(self, '$compile_defined_super', function $$compile_defined_super() {
          var self = this;

          return self.$push(self.$expr(self.$s("defined_super")))
        }, 0);
        
        $def(self, '$compile_defined_yield', function $$compile_defined_yield() {
          var self = this, block_name = nil, $ret_or_1 = nil;

          
          self.$scope()['$uses_block!']();
          block_name = ($truthy(($ret_or_1 = self.$scope().$block_name())) ? ($ret_or_1) : (self.$scope().$find_parent_def().$block_name()));
          self.$push("(" + (block_name) + " != null && " + (block_name) + " !== nil)");
          return block_name;
        }, 0);
        
        $def(self, '$compile_defined_xstr', function $$compile_defined_xstr(node) {
          var self = this;

          return self.$push("(typeof(", self.$expr(node), ") !== \"undefined\")")
        }, 1);
        
        $def(self, '$compile_defined_const', function $$compile_defined_const(node) {
          var $a, self = this, const_scope = nil, const_name = nil, const_tmp = nil, const_scope_tmp = nil;

          
          $a = [].concat($to_a(node)), (const_scope = ($a[0] == null ? nil : $a[0])), (const_name = ($a[1] == null ? nil : $a[1])), $a;
          const_tmp = self.$scope().$new_temp();
          if ($truthy(const_scope['$nil?']())) {
            self.$push("(" + (const_tmp) + " = " + (self.$scope().$relative_access()) + "('" + (const_name) + "', 'skip_raise'))")
          } else if ($eqeq(const_scope, self.$s("cbase"))) {
            self.$push("(" + (const_tmp) + " = " + (self.$top_scope().$absolute_const()) + "('::', '" + (const_name) + "', 'skip_raise'))")
          } else {
            
            const_scope_tmp = self.$compile_defined(const_scope);
            self.$push(" && (" + (const_tmp) + " = " + (self.$top_scope().$absolute_const()) + "(" + (const_scope_tmp) + ", '" + (const_name) + "', 'skip_raise'))");
          };
          return const_tmp;
        }, 1);
        
        $def(self, '$compile_defined_cvar', function $$compile_defined_cvar(node) {
          var $a, self = this, cvar_name = nil, _ = nil, cvar_tmp = nil;

          
          $a = [].concat($to_a(node)), (cvar_name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          cvar_tmp = self.$scope().$new_temp();
          self.$push("(" + (cvar_tmp) + " = " + (self.$class_variable_owner()) + ".$$cvars['" + (cvar_name) + "'], " + (cvar_tmp) + " != null)");
          return cvar_tmp;
        }, 1);
        
        $def(self, '$compile_defined_gvar', function $$compile_defined_gvar(node) {
          var self = this, name = nil, gvar_temp = nil;

          
          self.$helper("gvars");
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          gvar_temp = self.$scope().$new_temp();
          if ($truthy(["~", "!"]['$include?'](name))) {
            self.$push("(" + (gvar_temp) + " = ", self.$expr(node), " || true)")
          } else {
            self.$push("(" + (gvar_temp) + " = $gvars[" + (name.$inspect()) + "], " + (gvar_temp) + " != null)")
          };
          return gvar_temp;
        }, 1);
        
        $def(self, '$compile_defined_back_ref', function $$compile_defined_back_ref() {
          var self = this, back_ref_temp = nil;

          
          self.$helper("gvars");
          back_ref_temp = self.$scope().$new_temp();
          self.$push("(" + (back_ref_temp) + " = $gvars['~'], " + (back_ref_temp) + " != null && " + (back_ref_temp) + " !== nil)");
          return back_ref_temp;
        }, 0);
        
        $def(self, '$compile_defined_nth_ref', function $$compile_defined_nth_ref() {
          var self = this, nth_ref_tmp = nil;

          
          self.$helper("gvars");
          nth_ref_tmp = self.$scope().$new_temp();
          self.$push("(" + (nth_ref_tmp) + " = $gvars['~'], " + (nth_ref_tmp) + " != null && " + (nth_ref_tmp) + " != nil)");
          return nth_ref_tmp;
        }, 0);
        return $def(self, '$compile_defined_array', function $$compile_defined_array(node) {
          var self = this;

          return $send(node.$children(), 'each_with_index', [], function $$2(child, idx){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (child == null) child = nil;;
            
            if (idx == null) idx = nil;;
            if (!$eqeq(idx, 0)) {
              self.$push(" && ")
            };
            return self.$compile_defined(child);}, {$$arity: 2, $$s: self})
        }, 1);
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/masgn"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $rb_ge = Opal.rb_ge, $not = Opal.not, $rb_plus = Opal.rb_plus;

  Opal.add_stubs('require,freeze,handle,children,new_temp,scope,==,type,rhs,push,expr,any?,size,compile_masgn,lhs,helper,queue_temp,take_while,!=,drop,each_with_index,compile_assignment,empty?,shift,[],<<,dup,s,>=,!,updated,include?,+,last,raise');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MassAssignNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        $const_set($nesting[0], 'SIMPLE_ASSIGNMENT', ["lvasgn", "ivasgn", "lvar", "gvasgn", "cdecl", "casgn"].$freeze());
        self.$handle("masgn");
        self.$children("lhs", "rhs");
        
        $def(self, '$compile', function $$compile() {
          var self = this, array = nil, rhs_len = nil, retval = nil;

          
          array = self.$scope().$new_temp();
          if ($eqeq(self.$rhs().$type(), "array")) {
            
            self.$push("" + (array) + " = ", self.$expr(self.$rhs()));
            rhs_len = ($truthy($send(self.$rhs().$children(), 'any?', [], function $$1(c){
              
              
              if (c == null) c = nil;;
              return c.$type()['$==']("splat");}, 1)) ? (nil) : (self.$rhs().$children().$size()));
            self.$compile_masgn(self.$lhs().$children(), array, rhs_len);
            self.$push(", " + (array));
          } else {
            
            self.$helper("to_ary");
            retval = self.$scope().$new_temp();
            self.$push("" + (retval) + " = ", self.$expr(self.$rhs()));
            self.$push(", " + (array) + " = $to_ary(" + (retval) + ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push(", " + (retval));
            self.$scope().$queue_temp(retval);
          };
          return self.$scope().$queue_temp(array);
        }, 0);
        
        $def(self, '$compile_masgn', function $$compile_masgn(lhs_items, array, len) {
          var self = this, pre_splat = nil, post_splat = nil, splat = nil, part = nil, tmp = nil;

          
          
          if (len == null) len = nil;;
          pre_splat = $send(lhs_items, 'take_while', [], function $$2(child){
            
            
            if (child == null) child = nil;;
            return child.$type()['$!=']("splat");}, 1);
          post_splat = lhs_items.$drop(pre_splat.$size());
          $send(pre_splat, 'each_with_index', [], function $$3(child, idx){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (child == null) child = nil;;
            
            if (idx == null) idx = nil;;
            return self.$compile_assignment(child, array, idx, len);}, {$$arity: 2, $$s: self});
          if ($truthy(post_splat['$empty?']())) {
            return nil
          } else {
            
            splat = post_splat.$shift();
            if ($truthy(post_splat['$empty?']())) {
              if ($truthy((part = splat.$children()['$[]'](0)))) {
                
                self.$helper("slice");
                part = part.$dup()['$<<'](self.$s("js_tmp", "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ")"));
                self.$push(", ");
                return self.$push(self.$expr(part));
              } else {
                return nil
              }
            } else {
              
              tmp = self.$scope().$new_temp();
              self.$push(", " + (tmp) + " = " + (array) + ".length - " + (post_splat.$size()));
              self.$push(", " + (tmp) + " = (" + (tmp) + " < " + (pre_splat.$size()) + ") ? " + (pre_splat.$size()) + " : " + (tmp));
              if ($truthy((part = splat.$children()['$[]'](0)))) {
                
                self.$helper("slice");
                part = part.$dup()['$<<'](self.$s("js_tmp", "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ", " + (tmp) + ")"));
                self.$push(", ");
                self.$push(self.$expr(part));
              };
              $send(post_splat, 'each_with_index', [], function $$4(child, idx){var self = $$4.$$s == null ? this : $$4.$$s;

                
                
                if (child == null) child = nil;;
                
                if (idx == null) idx = nil;;
                if ($eqeq(idx, 0)) {
                  return self.$compile_assignment(child, array, tmp)
                } else {
                  return self.$compile_assignment(child, array, "" + (tmp) + " + " + (idx))
                };}, {$$arity: 2, $$s: self});
              return self.$scope().$queue_temp(tmp);
            };
          };
        }, -3);
        return $def(self, '$compile_assignment', function $$compile_assignment(child, array, idx, len) {
          var self = this, assign = nil, part = nil, tmp = nil;

          
          
          if (len == null) len = nil;;
          assign = (($not(len) || ($truthy($rb_ge(idx, len)))) ? (self.$s("js_tmp", "(" + (array) + "[" + (idx) + "] == null ? nil : " + (array) + "[" + (idx) + "])")) : (self.$s("js_tmp", "" + (array) + "[" + (idx) + "]")));
          part = child.$updated();
          if ($truthy($$('SIMPLE_ASSIGNMENT')['$include?'](child.$type()))) {
            part = part.$updated(nil, $rb_plus(part.$children(), [assign]))
          } else if ($eqeq(child.$type(), "send")) {
            part = part.$updated(nil, $rb_plus(part.$children(), [assign]))
          } else if ($eqeq(child.$type(), "attrasgn")) {
            part.$last()['$<<'](assign)
          } else if ($eqeq(child.$type(), "mlhs")) {
            
            self.$helper("to_ary");
            tmp = self.$scope().$new_temp();
            self.$push(", (" + (tmp) + " = $to_ary(" + (assign.$children()['$[]'](0)) + ")");
            self.$compile_masgn(child.$children(), tmp);
            self.$push(")");
            self.$scope().$queue_temp(tmp);
            return nil;
          } else {
            self.$raise("Bad child node in masgn LHS: " + (child) + ". LHS: " + (self.$lhs()))
          };
          self.$push(", ");
          return self.$push(self.$expr(part));
        }, -4);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/arglist"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $to_a = Opal.to_a, $def = Opal.def;

  Opal.add_stubs('require,handle,each,children,==,type,expr,empty?,<<,fragment,push');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'ArglistNode');

        
        
        self.$handle("arglist");
        return $def(self, '$compile', function $$compile() {
          var $a, self = this, code = nil, work = nil, join = nil;

          
          $a = [[], []], (code = $a[0]), (work = $a[1]), $a;
          $send(self.$children(), 'each', [], function $$1(current){var self = $$1.$$s == null ? this : $$1.$$s, splat = nil, arg = nil;

            
            
            if (current == null) current = nil;;
            splat = current.$type()['$==']("splat");
            arg = self.$expr(current);
            if ($truthy(splat)) {
              
              if ($truthy(work['$empty?']())) {
                if ($truthy(code['$empty?']())) {
                  code['$<<'](arg)
                } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"))
                }
              } else {
                
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"));
              };
              return (work = []);
            } else {
              
              if (!$truthy(work['$empty?']())) {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](arg);
            };}, {$$arity: 1, $$s: self});
          if (!$truthy(work['$empty?']())) {
            
            join = work;
            if ($truthy(code['$empty?']())) {
              code = join
            } else {
              code['$<<'](self.$fragment(".concat(["))['$<<'](join)['$<<'](self.$fragment("])"))
            };
          };
          return $send(self, 'push', $to_a(code));
        }, 0);
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes/x_string"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $defs = Opal.defs, $lambda = Opal.lambda, $eqeqeq = Opal.eqeqeq, $eqeq = Opal.eqeq, $not = Opal.not, $range = Opal.range;

  Opal.add_stubs('handle,unpack_return,children,strip_empty_children,single_line?,compile_single_line,each,compile_child,recv?,wrap,push,==,size,none?,type,end_with?,source,expression,loc,dup,nil?,empty?,rstrip,any?,[],first,shift,last,pop,private,===,include?,self,scope,new,expr,raise,s,strip,=~,!,extract_last_value,expr?,warning,compiler,line');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'XStringNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.should_add_semicolon = $proto.returning = nil;
        
        self.$handle("xstr");
        
        $def(self, '$compile', function $$compile() {
          var self = this, unpacked_children = nil, stripped_children = nil;

          
          self.should_add_semicolon = false;
          unpacked_children = self.$unpack_return(self.$children());
          stripped_children = $$('XStringNode').$strip_empty_children(unpacked_children);
          if ($truthy($$('XStringNode')['$single_line?'](stripped_children))) {
            self.$compile_single_line(stripped_children)
          } else {
            $send(unpacked_children, 'each', [], function $$1(c){var self = $$1.$$s == null ? this : $$1.$$s;

              
              
              if (c == null) c = nil;;
              return self.$compile_child(c);}, {$$arity: 1, $$s: self})
          };
          if ($truthy(self['$recv?']())) {
            self.$wrap("(", ")")
          };
          if ($truthy(self.should_add_semicolon)) {
            return self.$push(";")
          } else {
            return nil
          };
        }, 0);
        $defs(self, '$single_line?', function $XStringNode_single_line$ques$2(children) {
          var $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = children.$size()['$=='](1)))) {
            return $ret_or_1
          } else {
            return $send(children, 'none?', [], function $$3(c){var $ret_or_2 = nil;

              
              
              if (c == null) c = nil;;
              if ($truthy(($ret_or_2 = c.$type()['$==']("str")))) {
                return c.$loc().$expression().$source()['$end_with?']("\n")
              } else {
                return $ret_or_2
              };}, 1)
          }
        }, 1);
        $defs(self, '$strip_empty_children', function $$strip_empty_children(children) {
          var $a, empty_line = nil, $ret_or_1 = nil;

          
          children = children.$dup();
          empty_line = $lambda(function $$4(child){var $ret_or_1 = nil, $ret_or_2 = nil;

            
            
            if (child == null) child = nil;;
            if ($truthy(($ret_or_1 = child['$nil?']()))) {
              return $ret_or_1
            } else {
              
              if ($truthy(($ret_or_2 = child.$type()['$==']("str")))) {
                return child.$loc().$expression().$source().$rstrip()['$empty?']()
              } else {
                return $ret_or_2
              };
            };}, 1);
          while ($truthy(($truthy(($ret_or_1 = children['$any?']())) ? (empty_line['$[]'](children.$first())) : ($ret_or_1)))) {
            children.$shift()
          };
          while ($truthy(($truthy(($ret_or_1 = children['$any?']())) ? (empty_line['$[]'](children.$last())) : ($ret_or_1)))) {
            children.$pop()
          };
          return children;
        }, 1);
        self.$private();
        
        $def(self, '$compile_child', function $$compile_child(child) {
          var self = this, $ret_or_1 = nil, value = nil;

          if ($eqeqeq("str", ($ret_or_1 = child.$type()))) {
            
            value = child.$loc().$expression().$source();
            if ($truthy(value['$include?']("self"))) {
              self.$scope().$self()
            };
            return self.$push($$('Fragment').$new(value, self.$scope(), child));
          } else if (($eqeqeq("begin", $ret_or_1) || (($eqeqeq("gvar", $ret_or_1) || (($eqeqeq("ivar", $ret_or_1) || ($eqeqeq("nil", $ret_or_1)))))))) {
            return self.$push(self.$expr(child))
          } else {
            return self.$raise("Unsupported xstr part: " + (child.$type()))
          }
        }, 1);
        
        $def(self, '$compile_single_line', function $$compile_single_line(children) {
          var self = this, has_embeded_return = nil, first_child = nil, single_child = nil, $ret_or_1 = nil, first_value = nil, last_child = nil, last_value = nil;

          
          has_embeded_return = false;
          first_child = children.$shift();
          single_child = children['$empty?']();
          first_child = ($truthy(($ret_or_1 = first_child)) ? ($ret_or_1) : (self.$s("nil")));
          if ($eqeq(first_child.$type(), "str")) {
            
            first_value = first_child.$loc().$expression().$source().$strip();
            has_embeded_return = first_value['$=~'](/^return\b/);
          };
          if (($truthy(self.returning) && ($not(has_embeded_return)))) {
            self.$push("return ")
          };
          last_child = ($truthy(($ret_or_1 = children.$pop())) ? ($ret_or_1) : (first_child));
          if ($eqeq(last_child.$type(), "str")) {
            last_value = self.$extract_last_value(last_child)
          };
          if (!$truthy(single_child)) {
            
            self.should_add_semicolon = false;
            self.$compile_child(first_child);
            $send(children, 'each', [], function $$5(c){var self = $$5.$$s == null ? this : $$5.$$s;

              
              
              if (c == null) c = nil;;
              return self.$compile_child(c);}, {$$arity: 1, $$s: self});
          };
          if ($eqeq(last_child.$type(), "str")) {
            return self.$push($$('Fragment').$new(last_value, self.$scope(), last_child))
          } else {
            return self.$compile_child(last_child)
          };
        }, 1);
        
        $def(self, '$extract_last_value', function $$extract_last_value(last_child) {
          var self = this, last_value = nil;

          
          last_value = last_child.$loc().$expression().$source().$rstrip();
          if ($truthy(last_value['$include?']("self"))) {
            self.$scope().$self()
          };
          if ((($truthy(self.returning) || ($truthy(self['$expr?']()))) && ($truthy(last_value['$end_with?'](";"))))) {
            
            self.$compiler().$warning("Removed semicolon ending x-string expression, interpreted as unintentional", last_child.$line());
            last_value = last_value['$[]']($range(0, -2, false));
          };
          if ($truthy(self.returning)) {
            self.should_add_semicolon = true
          };
          return last_value;
        }, 1);
        return $def(self, '$unpack_return', function $$unpack_return(children) {
          var self = this, first_child = nil;

          
          first_child = children.$first();
          self.returning = false;
          if ($eqeq(first_child.$type(), "js_return")) {
            
            self.returning = true;
            children = first_child.$children();
          };
          return children;
        }, 1);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["opal/nodes/lambda"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $def = Opal.def;

  Opal.add_stubs('require,handle,children,helper,defines_lambda,scope,push,expr,iter');
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'LambdaNode');

        
        
        self.$handle("lambda");
        self.$children("iter");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$helper("lambda");
          return $send(self.$scope(), 'defines_lambda', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

            return self.$push("$lambda(", self.$expr(self.$iter()), ")")}, {$$arity: 0, $$s: self});
        }, 0);
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/nodes"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/literal");
  self.$require("opal/nodes/variables");
  self.$require("opal/nodes/constants");
  self.$require("opal/nodes/call");
  self.$require("opal/nodes/csend");
  self.$require("opal/nodes/call_special");
  self.$require("opal/nodes/module");
  self.$require("opal/nodes/class");
  self.$require("opal/nodes/singleton_class");
  self.$require("opal/nodes/args");
  self.$require("opal/nodes/args/arity_check");
  self.$require("opal/nodes/iter");
  self.$require("opal/nodes/def");
  self.$require("opal/nodes/defs");
  self.$require("opal/nodes/if");
  self.$require("opal/nodes/logic");
  self.$require("opal/nodes/definitions");
  self.$require("opal/nodes/yield");
  self.$require("opal/nodes/rescue");
  self.$require("opal/nodes/super");
  self.$require("opal/nodes/top");
  self.$require("opal/nodes/while");
  self.$require("opal/nodes/hash");
  self.$require("opal/nodes/array");
  self.$require("opal/nodes/defined");
  self.$require("opal/nodes/masgn");
  self.$require("opal/nodes/arglist");
  self.$require("opal/nodes/x_string");
  return self.$require("opal/nodes/lambda");
};

Opal.modules["opal/eof_content"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $eqeq = Opal.eqeq, $range = Opal.range, $to_ary = Opal.to_ary;

  Opal.add_stubs('empty?,[],last_token_position,drop_while,lines,==,join,private,last,end_pos');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EofContent');

      var $nesting = [self].concat($parent_nesting), $proto = self.$$prototype;

      $proto.tokens = $proto.source = nil;
      
      $const_set($nesting[0], 'DATA_SEPARATOR', "__END__\n");
      
      $def(self, '$initialize', function $$initialize(tokens, source) {
        var self = this;

        
        self.tokens = tokens;
        return (self.source = source);
      }, 2);
      
      $def(self, '$eof', function $$eof() {
        var self = this, eof_content = nil, $ret_or_1 = nil;

        
        if ($truthy(self.tokens['$empty?']())) {
          return nil
        };
        eof_content = self.source['$[]'](Opal.Range.$new(self.$last_token_position(), -1, false));
        if (!$truthy(eof_content)) {
          return nil
        };
        eof_content = $send(eof_content.$lines(), 'drop_while', [], function $$1(line){
          
          
          if (line == null) line = nil;;
          return line['$==']("\n");}, 1);
        if ($eqeq(eof_content['$[]'](0), "__END__\n")) {
          
          eof_content = ($truthy(($ret_or_1 = eof_content['$[]']($range(1, -1, false)))) ? ($ret_or_1) : ([]));
          return eof_content.$join();
        } else if ($eqeq(eof_content, ["__END__"])) {
          return ""
        } else {
          return nil
        };
      }, 0);
      self.$private();
      return $def(self, '$last_token_position', function $$last_token_position() {
        var $a, $b, self = this, _ = nil, last_token_info = nil, last_token_range = nil;

        
        $b = self.tokens.$last(), $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_info = ($a[1] == null ? nil : $a[1])), $b;
        $b = last_token_info, $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_range = ($a[1] == null ? nil : $a[1])), $b;
        return last_token_range.$end_pos();
      }, 0);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["opal/errors"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $defs = Opal.defs, $rb_plus = Opal.rb_plus, $alias = Opal.alias;

  Opal.add_stubs('attr_reader,attr_accessor,new,respond_to?,location,location=,-,diagnostic,diagnostic=,to_a,backtrace,unshift,to_s,set_backtrace,path,lineno,+,label,line,lineno=,source_line,label=,expression');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $klass($nesting[0], $$('StandardError'), 'Error');
    (function($base, $super) {
      var self = $klass($base, $super, 'GemNotFound');

      
      
      self.$attr_reader("gem_name");
      return $def(self, '$initialize', function $$initialize(gem_name) {
        var $yield = $$initialize.$$p || nil, self = this;

        delete $$initialize.$$p;
        
        self.gem_name = gem_name;
        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', ["can't find gem " + (gem_name)], null);
      }, 1);
    })($nesting[0], $$('Error'));
    (function($base, $super) {
      var self = $klass($base, $super, 'CompilationError');

      
      return self.$attr_accessor("location")
    })($nesting[0], $$('Error'));
    $klass($nesting[0], $$('CompilationError'), 'ParsingError');
    $klass($nesting[0], $$('ParsingError'), 'RewritingError');
    (function($base, $super) {
      var self = $klass($base, $super, 'SyntaxError');

      
      return self.$attr_accessor("location")
    })($nesting[0], $$$('SyntaxError'));
    $defs(self, '$opal_location_from_error', function $$opal_location_from_error(error) {
      var opal_location = nil, $writer = nil;

      
      opal_location = $$('OpalBacktraceLocation').$new();
      if ($truthy(error['$respond_to?']("location"))) {
        
        $writer = [error.$location()];
        $send(opal_location, 'location=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      if ($truthy(error['$respond_to?']("diagnostic"))) {
        
        $writer = [error.$diagnostic()];
        $send(opal_location, 'diagnostic=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return opal_location;
    }, 1);
    $defs(self, '$add_opal_location_to_error', function $$add_opal_location_to_error(opal_location, error) {
      var backtrace = nil;

      
      backtrace = error.$backtrace().$to_a();
      backtrace.$unshift(opal_location.$to_s());
      error.$set_backtrace(backtrace);
      return error;
    }, 2);
    return (function($base, $super) {
      var self = $klass($base, $super, 'OpalBacktraceLocation');

      
      
      self.$attr_accessor("path", "lineno", "label");
      
      $def(self, '$initialize', function $$initialize(path, lineno, label) {
        var $a, self = this;

        
        
        if (path == null) path = nil;;
        
        if (lineno == null) lineno = nil;;
        
        if (label == null) label = nil;;
        return $a = [path, lineno, label], (self.path = $a[0]), (self.lineno = $a[1]), (self.label = $a[2]), $a;
      }, -1);
      
      $def(self, '$to_s', function $$to_s() {
        var self = this, string = nil;

        
        string = self.$path();
        if ($truthy(self.$lineno())) {
          string = $rb_plus(string, ":" + (self.$lineno()))
        };
        string = $rb_plus(string, ":in ");
        if ($truthy(self.$label())) {
          string = $rb_plus(string, "`" + (self.$label()) + "'")
        } else {
          string = $rb_plus(string, "unknown")
        };
        return string;
      }, 0);
      $alias(self, "line", "lineno");
      
      $def(self, '$diagnostic=', function $OpalBacktraceLocation_diagnostic$eq$1(diagnostic) {
        var self = this, $writer = nil;

        
        if (!$truthy(diagnostic)) {
          return nil
        };
        
        $writer = [diagnostic.$location()];
        $send(self, 'location=', $to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, 1);
      return $def(self, '$location=', function $OpalBacktraceLocation_location$eq$2(location) {
        var self = this, $writer = nil;

        
        if (!$truthy(location)) {
          return nil
        };
        
        $writer = [location.$line()];
        $send(self, 'lineno=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(location['$respond_to?']("source_line"))) {
          
          $writer = [location.$source_line()];
          $send(self, 'label=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(location['$respond_to?']("expression"))) {
          
          $writer = [location.$expression().$source_line()];
          $send(self, 'label=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        };
      }, 1);
    })($nesting[0], null);
  })($nesting[0], $nesting)
};

Opal.modules["opal/magic_comments"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $module = Opal.module, $const_set = Opal.const_set, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $rb_ge = Opal.rb_ge, $eqeqeq = Opal.eqeqeq, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $defs = Opal.defs;

  Opal.add_stubs('freeze,line,loc,take,each,>=,any?,scan,text,to_sym,===,[]=,-');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'MagicComments');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set($nesting[0], 'MAGIC_COMMENT_RE', /^# *(\w+) *: *(\S+.*?) *$/.$freeze());
    $const_set($nesting[0], 'EMACS_MAGIC_COMMENT_RE', /^# *-\*- *(\w+) *: *(\S+.*?) *-\*- *$/.$freeze());
    return $defs(self, '$parse', function $$parse(sexp, comments) {
      var flags = nil, first_line = nil;

      
      flags = $hash2([], {});
      if ($truthy(sexp)) {
        
        first_line = sexp.$loc().$line();
        comments = comments.$take(first_line);
      };
      $send(comments, 'each', [], function $$1(comment){var parts = nil;

        
        
        if (comment == null) comment = nil;;
        if (($truthy(first_line) && ($truthy($rb_ge(comment.$loc().$line(), first_line))))) {
          return nil;
        };
        if (($truthy((parts = comment.$text().$scan($$('MAGIC_COMMENT_RE')))['$any?']()) || ($truthy((parts = comment.$text().$scan($$('EMACS_MAGIC_COMMENT_RE')))['$any?']())))) {
          return $send(parts, 'each', [], function $$2(key, value){var $writer = nil, $ret_or_1 = nil;

            
            
            if (key == null) key = nil;;
            
            if (value == null) value = nil;;
            $writer = [key.$to_sym(), ($eqeqeq("true", ($ret_or_1 = value)) || (($eqeqeq("false", $ret_or_1) ? (false) : (value))))];
            $send(flags, '[]=', $to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, 2)
        } else {
          return nil
        };}, 1);
      return flags;
    }, 2);
  })($$('Opal'), $nesting)
};

Opal.modules["opal/compiler"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $hash2 = Opal.hash2, $defs = Opal.defs, $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, $truthy = Opal.truthy, $not = Opal.not, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $def = Opal.def, $Opal = Opal.Opal, $to_ary = Opal.to_ary, $alias = Opal.alias, $eqeqeq = Opal.eqeqeq, $regexp = Opal.regexp, $rb_plus = Opal.rb_plus, $slice = Opal.slice, $eqeq = Opal.eqeq;

  Opal.add_stubs('require,compile,new,freeze,join,dirname,first,split,basename,to_s,cleanpath,Pathname,fetch,define_method,option_value,key?,[],!,include?,raise,inspect,[]=,-,compiler_option,attr_reader,attr_accessor,parse,re_raise_with_location,flatten,process,end_with?,code,last,<<,fragment,s,map,to_proc,file,source=,default_parser,tokenize,requirable?,eval?,tap,meta,associate_locations,eof,magic_comments,to_sym,strip,async_await_before_typecasting,===,async_await_set_to_regexp,to_a,gsub,escape,location=,opal_location_from_error,path=,label,lines,to_i,line,label=,message,set_backtrace,backtrace,add_opal_location_to_error,warn,empty?,+,start_with?,helpers,new_temp,queue_temp,push_while,pop_while,in_while?,nil?,scope,handlers,type,compile_to_fragments,error,returns,updated,children,==,uses_block!,block_name,find_parent_def,cache,source_map');
  
  self.$require("set");
  self.$require("opal/parser");
  self.$require("opal/fragment");
  self.$require("opal/nodes");
  self.$require("opal/eof_content");
  self.$require("opal/errors");
  self.$require("opal/magic_comments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$compile', function $$compile(source, options) {
      
      
      
      if (options == null) options = $hash2([], {});;
      return $$('Compiler').$new(source, options).$compile();
    }, -2);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Compiler');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.option_values = $proto.options = $proto.magic_comments = $proto.fragments = $proto.source = $proto.buffer = $proto.source_map = $proto.result = $proto.helpers = $proto.method_calls = $proto.async_await = $proto.indent = $proto.unique = $proto.scope = $proto.case_stmt = $proto.handlers = $proto.requires = $proto.required_trees = $proto.autoloads = nil;
      
      $const_set($nesting[0], 'INDENT', "  ");
      $const_set($nesting[0], 'COMPARE', ["<", ">", "<=", ">="].$freeze());
      $defs(self, '$module_name', function $$module_name(path) {
        var self = this;

        
        path = $$('File').$join($$('File').$dirname(path), $$('File').$basename(path).$split(".").$first());
        return self.$Pathname(path).$cleanpath().$to_s();
      }, 1);
      $defs(self, '$compiler_option', function $$compiler_option(name, config) {
        var self = this, method_name = nil;

        
        
        if (config == null) config = $hash2([], {});;
        method_name = config.$fetch("as", name);
        return $send(self, 'define_method', [method_name], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

          return self.$option_value(name, config)}, {$$arity: 0, $$s: self});
      }, -2);
      
      $def(self, '$option_value', function $$option_value(name, config) {
        var self = this, default_value = nil, valid_values = nil, magic_comment = nil, value = nil, $writer = nil;

        
        if ($truthy(self.option_values['$key?'](name))) {
          return self.option_values['$[]'](name)
        };
        default_value = config['$[]']("default");
        valid_values = config['$[]']("valid_values");
        magic_comment = config['$[]']("magic_comment");
        value = self.options.$fetch(name, default_value);
        if (($truthy(magic_comment) && ($truthy(self.magic_comments['$key?'](name))))) {
          value = self.magic_comments.$fetch(name)
        };
        if (($truthy(valid_values) && ($not(valid_values['$include?'](value))))) {
          self.$raise($$('ArgumentError'), "" + ("invalid value " + (value.$inspect()) + " for option " + (name.$inspect()) + " ") + ("(valid values: " + (valid_values.$inspect()) + ")"))
        };
        
        $writer = [name, value];
        $send(self.option_values, '[]=', $to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, 2);
      self.$compiler_option("file", $hash2(["default"], {"default": "(file)"}));
      self.$compiler_option("method_missing", $hash2(["default", "as"], {"default": true, "as": "method_missing?"}));
      self.$compiler_option("arity_check", $hash2(["default", "as"], {"default": false, "as": "arity_check?"}));
      self.$compiler_option("freezing", $hash2(["default", "as"], {"default": true, "as": "freezing?"}));
      self.$compiler_option("irb", $hash2(["default", "as"], {"default": false, "as": "irb?"}));
      self.$compiler_option("dynamic_require_severity", $hash2(["default", "valid_values"], {"default": "ignore", "valid_values": ["error", "warning", "ignore"]}));
      self.$compiler_option("requirable", $hash2(["default", "as"], {"default": false, "as": "requirable?"}));
      self.$compiler_option("esm", $hash2(["default", "as"], {"default": false, "as": "esm?"}));
      self.$compiler_option("inline_operators", $hash2(["default", "as"], {"default": true, "as": "inline_operators?"}));
      self.$compiler_option("eval", $hash2(["default", "as"], {"default": false, "as": "eval?"}));
      self.$compiler_option("enable_source_location", $hash2(["default", "as"], {"default": false, "as": "enable_source_location?"}));
      self.$compiler_option("use_strict", $hash2(["default", "as", "magic_comment"], {"default": false, "as": "use_strict?", "magic_comment": true}));
      self.$compiler_option("parse_comments", $hash2(["default", "as"], {"default": false, "as": "parse_comments?"}));
      self.$compiler_option("scope_variables", $hash2(["default"], {"default": []}));
      self.$compiler_option("await", $hash2(["default", "as", "magic_comment"], {"default": false, "as": "async_await", "magic_comment": true}));
      self.$attr_reader("result");
      self.$attr_reader("fragments");
      self.$attr_accessor("scope");
      self.$attr_accessor("top_scope");
      self.$attr_reader("case_stmt");
      self.$attr_reader("eof_content");
      self.$attr_reader("comments");
      self.$attr_reader("magic_comments");
      
      $def(self, '$initialize', function $$initialize(source, options) {
        var self = this;

        
        
        if (options == null) options = $hash2([], {});;
        self.source = source;
        self.indent = "";
        self.unique = 0;
        self.options = options;
        self.comments = $$('Hash').$new([]);
        self.case_stmt = nil;
        self.option_values = $hash2([], {});
        return (self.magic_comments = $hash2([], {}));
      }, -2);
      
      $def(self, '$compile', function $$compile() {
        var self = this;

        
        self.$parse();
        self.fragments = $send(self, 're_raise_with_location', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;
          if (self.sexp == null) self.sexp = nil;

          return self.$process(self.sexp).$flatten()}, {$$arity: 0, $$s: self});
        if (!$truthy(self.fragments.$last().$code()['$end_with?']("\n"))) {
          self.fragments['$<<'](self.$fragment("\n", nil, self.$s("newline")))
        };
        return (self.result = $send(self.fragments, 'map', [], "code".$to_proc()).$join(""));
      }, 0);
      
      $def(self, '$parse', function $$parse() {
        var $a, $b, self = this, $writer = nil, sexp = nil, comments = nil, tokens = nil, kind = nil, $ret_or_1 = nil;

        
        self.buffer = $$$($$$($Opal, 'Parser'), 'SourceBuffer').$new(self.$file(), 1);
        
        $writer = [self.source];
        $send(self.buffer, 'source=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.parser = $$$($$('Opal'), 'Parser').$default_parser();
        $b = $send(self, 're_raise_with_location', [], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;
          if (self.parser == null) self.parser = nil;
          if (self.buffer == null) self.buffer = nil;

          return self.parser.$tokenize(self.buffer)}, {$$arity: 0, $$s: self}), $a = $to_ary($b), (sexp = ($a[0] == null ? nil : $a[0])), (comments = ($a[1] == null ? nil : $a[1])), (tokens = ($a[2] == null ? nil : $a[2])), $b;
        kind = ($truthy(self['$requirable?']()) ? ("require") : ($truthy(self['$eval?']()) ? ("eval") : ("main")));
        self.sexp = $send(self.$s("top", ($truthy(($ret_or_1 = sexp)) ? ($ret_or_1) : (self.$s("nil")))), 'tap', [], function $$4(i){
          
          
          if (i == null) i = nil;;
          $writer = ["kind", kind];
          $send(i.$meta(), '[]=', $to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, 1);
        self.comments = $$$($$$($$$('Parser'), 'Source'), 'Comment').$associate_locations(sexp, comments);
        self.magic_comments = $$('MagicComments').$parse(sexp, comments);
        return (self.eof_content = $$('EofContent').$new(tokens, self.source).$eof());
      }, 0);
      
      $def(self, '$source_map', function $$source_map() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.source_map))) {
          return $ret_or_1
        } else {
          return $$$($$$($Opal, 'SourceMap'), 'File').$new(self.fragments, self.$file(), self.source, self.result)
        }
      }, 0);
      
      $def(self, '$helpers', function $$helpers() {
        var self = this, $ret_or_1 = nil;

        return (self.helpers = ($truthy(($ret_or_1 = self.helpers)) ? ($ret_or_1) : ($$('Set').$new($send(self.$magic_comments()['$[]']("helpers").$to_s().$split(","), 'map', [], function $$5(h){
          
          
          if (h == null) h = nil;;
          return h.$strip().$to_sym();}, 1)))))
      }, 0);
      
      $def(self, '$method_calls', function $$method_calls() {
        var self = this, $ret_or_1 = nil;

        return (self.method_calls = ($truthy(($ret_or_1 = self.method_calls)) ? ($ret_or_1) : ($$('Set').$new())))
      }, 0);
      $alias(self, "async_await_before_typecasting", "async_await");
      
      $def(self, '$async_await', function $$async_await() {
        var $a, self = this, original = nil, $ret_or_1 = nil;

        if ($truthy((($a = self['async_await'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
          return self.async_await
        } else {
          
          original = self.$async_await_before_typecasting();
          return (self.async_await = ($eqeqeq($$('String'), ($ret_or_1 = original)) ? (self.$async_await_set_to_regexp($send(original.$split(","), 'map', [], function $$6(h){
            
            
            if (h == null) h = nil;;
            return h.$strip().$to_sym();}, 1))) : (($eqeqeq($$('Array'), $ret_or_1) || ($eqeqeq($$('Set'), $ret_or_1))) ? (self.$async_await_set_to_regexp($send(original.$to_a(), 'map', [], "to_sym".$to_proc()))) : (($eqeqeq($$('Regexp'), $ret_or_1) || (($eqeqeq(true, $ret_or_1) || ($eqeqeq(false, $ret_or_1))))) ? (original) : (self.$raise("A value of await compiler option can be either " + "a Set, an Array, a String or a Boolean."))))));
        }
      }, 0);
      
      $def(self, '$async_await_set_to_regexp', function $$async_await_set_to_regexp(set) {
        
        
        set = $send(set, 'map', [], function $$7(name){
          
          
          if (name == null) name = nil;;
          return $$('Regexp').$escape(name.$to_s()).$gsub("\\*", ".*?");}, 1);
        set = set.$join("|");
        return $regexp(["^(", set, ")$"]);
      }, 1);
      
      $def(self, '$error', function $$error(msg, line) {
        var self = this, error = nil, $writer = nil;

        
        
        if (line == null) line = nil;;
        error = $$$($Opal, 'SyntaxError').$new(msg);
        
        $writer = [$$$($$('Opal'), 'OpalBacktraceLocation').$new(self.$file(), line)];
        $send(error, 'location=', $to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$raise(error);
      }, -2);
      
      $def(self, '$re_raise_with_location', function $$re_raise_with_location() {
        var $yield = $$re_raise_with_location.$$p || nil, self = this, error = nil, opal_location = nil, $writer = nil, $ret_or_1 = nil, new_error = nil;

        delete $$re_raise_with_location.$$p;
        try {
          return Opal.yieldX($yield, []);
        } catch ($err) {
          if (Opal.rescue($err, [$$('StandardError'), $$$($Opal, 'SyntaxError')])) {(error = $err)
            try {
              
              opal_location = $Opal.$opal_location_from_error(error);
              
              $writer = [self.$file()];
              $send(opal_location, 'path=', $to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy(($ret_or_1 = opal_location.$label()))) {
                $ret_or_1
              } else {
                
                $writer = [self.source.$lines()['$[]']($rb_minus(opal_location.$line().$to_i(), 1)).$strip()];
                $send(opal_location, 'label=', $to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              new_error = $$$($Opal, 'SyntaxError').$new(error.$message());
              new_error.$set_backtrace(error.$backtrace());
              $Opal.$add_opal_location_to_error(opal_location, new_error);
              return self.$raise(new_error);
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, 0);
      
      $def(self, '$warning', function $$warning(msg, line) {
        var self = this;

        
        
        if (line == null) line = nil;;
        return self.$warn("warning: " + (msg) + " -- " + (self.$file()) + ":" + (line));
      }, -2);
      
      $def(self, '$parser_indent', function $$parser_indent() {
        var self = this;

        return self.indent
      }, 0);
      
      $def(self, '$s', function $$s(type, $a) {
        var $post_args, children;

        
        
        $post_args = Opal.slice.call(arguments, 1);
        
        children = $post_args;;
        return $$$($$$($Opal, 'AST'), 'Node').$new(type, children);
      }, -2);
      
      $def(self, '$fragment', function $$fragment(str, scope, sexp) {
        
        
        
        if (sexp == null) sexp = nil;;
        return $$('Fragment').$new(str, scope, sexp);
      }, -3);
      
      $def(self, '$unique_temp', function $$unique_temp(name) {
        var self = this, unique = nil;

        
        name = name.$to_s();
        if (($truthy(name) && ($not(name['$empty?']())))) {
          name = name.$to_s().$gsub("<=>", "$lt_eq_gt").$gsub("===", "$eq_eq_eq").$gsub("==", "$eq_eq").$gsub("=~", "$eq_tilde").$gsub("!~", "$excl_tilde").$gsub("!=", "$not_eq").$gsub("<=", "$lt_eq").$gsub(">=", "$gt_eq").$gsub("=", "$eq").$gsub("?", "$ques").$gsub("!", "$excl").$gsub("/", "$slash").$gsub("%", "$percent").$gsub("+", "$plus").$gsub("-", "$minus").$gsub("<", "$lt").$gsub(">", "$gt").$gsub(/[^\w\$]/, "$")
        };
        unique = (self.unique = $rb_plus(self.unique, 1));
        return "" + (($truthy(name['$start_with?']("$")) ? (nil) : ("$"))) + (name) + "$" + (unique);
      }, 1);
      
      $def(self, '$helper', function $$helper(name) {
        var self = this;

        return self.$helpers()['$<<'](name)
      }, 1);
      
      $def(self, '$indent', function $$indent() {
        var $yield = $$indent.$$p || nil, self = this, indent = nil, res = nil;

        delete $$indent.$$p;
        
        indent = self.indent;
        self.indent = $rb_plus(self.indent, $$('INDENT'));
        self.space = "\n" + (self.indent);
        res = Opal.yieldX($yield, []);
        self.indent = indent;
        self.space = "\n" + (self.indent);
        return res;
      }, 0);
      
      $def(self, '$with_temp', function $$with_temp() {
        var $yield = $$with_temp.$$p || nil, self = this, tmp = nil, res = nil;

        delete $$with_temp.$$p;
        
        tmp = self.scope.$new_temp();
        res = Opal.yield1($yield, tmp);
        self.scope.$queue_temp(tmp);
        return res;
      }, 0);
      
      $def(self, '$in_while', function $$in_while() {
        var $yield = $$in_while.$$p || nil, self = this, result = nil;

        delete $$in_while.$$p;
        
        if (!($yield !== nil)) {
          return nil
        };
        self.while_loop = self.scope.$push_while();
        result = Opal.yieldX($yield, []);
        self.scope.$pop_while();
        return result;
      }, 0);
      
      $def(self, '$in_case', function $$in_case() {
        var $yield = $$in_case.$$p || nil, self = this, old = nil;

        delete $$in_case.$$p;
        
        if (!($yield !== nil)) {
          return nil
        };
        old = self.case_stmt;
        self.case_stmt = $hash2([], {});
        Opal.yieldX($yield, []);
        return (self.case_stmt = old);
      }, 0);
      
      $def(self, '$in_while?', function $Compiler_in_while$ques$8() {
        var self = this;

        return self.scope['$in_while?']()
      }, 0);
      
      $def(self, '$process', function $$process(sexp, level) {
        var self = this, handler = nil;

        
        
        if (level == null) level = "expr";;
        if ($truthy(sexp['$nil?']())) {
          return self.$fragment("", self.$scope())
        };
        if ($truthy((handler = self.$handlers()['$[]'](sexp.$type())))) {
          return handler.$new(sexp, level, self).$compile_to_fragments()
        } else {
          return self.$error("Unsupported sexp: " + (sexp.$type()))
        };
      }, -2);
      
      $def(self, '$handlers', function $$handlers() {
        var self = this, $ret_or_1 = nil;

        return (self.handlers = ($truthy(($ret_or_1 = self.handlers)) ? ($ret_or_1) : ($$$($$$($$('Opal'), 'Nodes'), 'Base').$handlers())))
      }, 0);
      
      $def(self, '$requires', function $$requires() {
        var self = this, $ret_or_1 = nil;

        return (self.requires = ($truthy(($ret_or_1 = self.requires)) ? ($ret_or_1) : ([])))
      }, 0);
      
      $def(self, '$required_trees', function $$required_trees() {
        var self = this, $ret_or_1 = nil;

        return (self.required_trees = ($truthy(($ret_or_1 = self.required_trees)) ? ($ret_or_1) : ([])))
      }, 0);
      
      $def(self, '$autoloads', function $$autoloads() {
        var self = this, $ret_or_1 = nil;

        return (self.autoloads = ($truthy(($ret_or_1 = self.autoloads)) ? ($ret_or_1) : ([])))
      }, 0);
      
      $def(self, '$returns', function $$returns(sexp) {
        var $a, $b, self = this, $ret_or_1 = nil, when_sexp = nil, then_sexp = nil, body_sexp = nil, resbodies = nil, else_sexp = nil, klass = nil, lvar = nil, body = nil, rescue_sexp = nil, ensure_body = nil, rest = nil, last = nil, cond = nil, true_body = nil, false_body = nil;

        
        if (!$truthy(sexp)) {
          return self.$returns(self.$s("nil"))
        };
        if ($eqeqeq("undef", ($ret_or_1 = sexp.$type()))) {
          return self.$returns(sexp.$updated("begin", [sexp, self.$s("nil")]))
        } else if (($eqeqeq("break", $ret_or_1) || (($eqeqeq("next", $ret_or_1) || (($eqeqeq("redo", $ret_or_1) || ($eqeqeq("retry", $ret_or_1)))))))) {
          return sexp
        } else if ($eqeqeq("yield", $ret_or_1)) {
          return sexp.$updated("returnable_yield", nil)
        } else if ($eqeqeq("when", $ret_or_1)) {
          
          $a = [].concat($to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_sexp = $slice.call($a, 0, $b)), (then_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
          return sexp.$updated(nil, [].concat($to_a(when_sexp)).concat([self.$returns(then_sexp)]));
        } else if ($eqeqeq("rescue", $ret_or_1)) {
          
          $a = [].concat($to_a(sexp)), (body_sexp = ($a[0] == null ? nil : $a[0])), $b = $a.length - 1, $b = ($b < 1) ? 1 : $b, (resbodies = $slice.call($a, 1, $b)), (else_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
          resbodies = $send(resbodies, 'map', [], function $$9(resbody){var self = $$9.$$s == null ? this : $$9.$$s;

            
            
            if (resbody == null) resbody = nil;;
            return self.$returns(resbody);}, {$$arity: 1, $$s: self});
          if ($truthy(else_sexp)) {
            else_sexp = self.$returns(else_sexp)
          };
          return sexp.$updated(nil, [self.$returns(body_sexp)].concat($to_a(resbodies)).concat([else_sexp]));
        } else if ($eqeqeq("resbody", $ret_or_1)) {
          
          $a = [].concat($to_a(sexp)), (klass = ($a[0] == null ? nil : $a[0])), (lvar = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          return sexp.$updated(nil, [klass, lvar, self.$returns(body)]);
        } else if ($eqeqeq("ensure", $ret_or_1)) {
          
          $a = [].concat($to_a(sexp)), (rescue_sexp = ($a[0] == null ? nil : $a[0])), (ensure_body = ($a[1] == null ? nil : $a[1])), $a;
          sexp = sexp.$updated(nil, [self.$returns(rescue_sexp), ensure_body]);
          return sexp.$updated("js_return", [sexp]);
        } else if (($eqeqeq("begin", $ret_or_1) || ($eqeqeq("kwbegin", $ret_or_1)))) {
          
          $a = [].concat($to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (rest = $slice.call($a, 0, $b)), (last = ($a[$b] == null ? nil : $a[$b])), $a;
          return sexp.$updated(nil, [].concat($to_a(rest)).concat([self.$returns(last)]));
        } else if (($eqeqeq("while", $ret_or_1) || (($eqeqeq("until", $ret_or_1) || (($eqeqeq("while_post", $ret_or_1) || ($eqeqeq("until_post", $ret_or_1)))))))) {
          return sexp
        } else if (($eqeqeq("return", $ret_or_1) || (($eqeqeq("js_return", $ret_or_1) || ($eqeqeq("returnable_yield", $ret_or_1)))))) {
          return sexp
        } else if ($eqeqeq("xstr", $ret_or_1)) {
          return sexp.$updated(nil, [$send(self, 's', ["js_return"].concat($to_a(sexp.$children())))])
        } else if ($eqeqeq("if", $ret_or_1)) {
          
          $a = [].concat($to_a(sexp)), (cond = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
          return sexp.$updated(nil, [cond, self.$returns(true_body), self.$returns(false_body)]);
        } else if (($eqeq(sexp.$type(), "send") && ($eqeq(sexp.$children()['$[]'](1), "debugger")))) {
          return sexp.$updated("begin", [sexp, self.$s("js_return", self.$s("nil"))])
        } else {
          return sexp.$updated("js_return", [sexp])
        };
      }, 1);
      
      $def(self, '$handle_block_given_call', function $$handle_block_given_call(sexp) {
        var self = this, scope = nil;

        
        self.scope['$uses_block!']();
        if ($truthy(self.scope.$block_name())) {
          return self.$fragment("(" + (self.scope.$block_name()) + " !== nil)", self.$scope(), sexp)
        } else if (($truthy((scope = self.scope.$find_parent_def())) && ($truthy(scope.$block_name())))) {
          return self.$fragment("(" + (scope.$block_name()) + " !== nil)", scope, sexp)
        } else {
          return self.$fragment("false", scope, sexp)
        };
      }, 1);
      
      $def(self, '$marshal_dump', function $$marshal_dump() {
        var self = this, $ret_or_1 = nil;

        return [self.options, self.option_values, (self.source_map = ($truthy(($ret_or_1 = self.source_map)) ? ($ret_or_1) : (self.$source_map().$cache()))), self.magic_comments, self.result, self.required_trees, self.requires, self.autoloads]
      }, 0);
      return $def(self, '$marshal_load', function $$marshal_load(src) {
        var $a, $b, self = this;

        return $b = src, $a = $to_ary($b), (self.options = ($a[0] == null ? nil : $a[0])), (self.option_values = ($a[1] == null ? nil : $a[1])), (self.source_map = ($a[2] == null ? nil : $a[2])), (self.magic_comments = ($a[3] == null ? nil : $a[3])), (self.result = ($a[4] == null ? nil : $a[4])), (self.required_trees = ($a[5] == null ? nil : $a[5])), (self.requires = ($a[6] == null ? nil : $a[6])), (self.autoloads = ($a[7] == null ? nil : $a[7])), $b
      }, 1);
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

Opal.modules["opal/erb"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $module = Opal.module, $defs = Opal.defs, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $send = Opal.send, $regexp = Opal.regexp;

  Opal.add_stubs('require,compile,new,freeze,fix_quotes,find_contents,find_code,wrap_compiled,require_erb,prepared_source,gsub,+,last_match,=~,sub');
  
  self.$require("opal/compiler");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'ERB');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      $defs(self, '$compile', function $$compile(source, file_name) {
        
        
        
        if (file_name == null) file_name = "(erb)";;
        return $$('Compiler').$new(source, file_name).$compile();
      }, -2);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Compiler');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.prepared_source = $proto.source = $proto.file_name = nil;
        
        $const_set($nesting[0], 'BLOCK_EXPR', /\s+(do|\{)(\s*\|[^|]*\|)?\s*\Z/.$freeze());
        
        $def(self, '$initialize', function $$initialize(source, file_name) {
          var $a, self = this;

          
          
          if (file_name == null) file_name = "(erb)";;
          return $a = [source, file_name, source], (self.source = $a[0]), (self.file_name = $a[1]), (self.result = $a[2]), $a;
        }, -2);
        
        $def(self, '$prepared_source', function $$prepared_source() {
          var self = this, $ret_or_1 = nil, source = nil;

          return (self.prepared_source = ($truthy(($ret_or_1 = self.prepared_source)) ? ($ret_or_1) : (((source = self.source), (source = self.$fix_quotes(source)), (source = self.$find_contents(source)), (source = self.$find_code(source)), (source = self.$wrap_compiled(source)), (source = self.$require_erb(source)), source))))
        }, 0);
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          return $$('Opal').$compile(self.$prepared_source())
        }, 0);
        
        $def(self, '$fix_quotes', function $$fix_quotes(result) {
          
          return result.$gsub("\"", "\\\"")
        }, 1);
        
        $def(self, '$require_erb', function $$require_erb(result) {
          
          return $rb_plus("require \"erb\";", result)
        }, 1);
        
        $def(self, '$find_contents', function $$find_contents(result) {
          
          return $send(result, 'gsub', [/<%=([\s\S]+?)%>/], function $$1(){var inner = nil;

            
            inner = $$('Regexp').$last_match(1).$gsub(/\\'/, "'").$gsub(/\\"/, "\"");
            if ($truthy(inner['$=~']($$('BLOCK_EXPR')))) {
              return "\")\noutput_buffer.append= " + (inner) + "\noutput_buffer.append(\""
            } else {
              return "\")\noutput_buffer.append=(" + (inner) + ")\noutput_buffer.append(\""
            };}, 0)
        }, 1);
        
        $def(self, '$find_code', function $$find_code(result) {
          
          return $send(result, 'gsub', [/<%([\s\S]+?)%>/], function $$2(){var inner = nil;

            
            inner = $$('Regexp').$last_match(1).$gsub(/\\"/, "\"");
            return "\")\n" + (inner) + "\noutput_buffer.append(\"";}, 0)
        }, 1);
        return $def(self, '$wrap_compiled', function $$wrap_compiled(result) {
          var self = this, path = nil;

          
          path = self.file_name.$sub($regexp(["\\.opalerb", $$('REGEXP_END')]), "");
          return "Template.new('" + (path) + "') do |output_buffer|\noutput_buffer.append(\"" + (result) + "\")\noutput_buffer.join\nend\n";
        }, 1);
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["opal/builder_processors"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $send = Opal.send, $def = Opal.def, $eqeq = Opal.eqeq, $Opal = Opal.Opal, $const_set = Opal.const_set, $send2 = Opal.send2, $find_super = Opal.find_super, $defs = Opal.defs, $to_a = Opal.to_a;

  Opal.add_stubs('require,end_with?,+,dup,delete,cache,attr_reader,to_s,source,join,==,size,new,register_processor,is_a?,match,match_regexp,raise,inspect,handles,map,with_index,each_line,index,filename,mark_as_required,result,compiled,source_map,fetch,cache_key,compiler_for,compile,class,merge,requires,required_trees,autoloads,extname,prepare,private,prepared_source,module_name');
  
  self.$require("opal/compiler");
  self.$require("opal/erb");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'BuilderProcessors');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Processor');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.options = nil;
        
        
        $def(self, '$initialize', function $$initialize(source, filename, options) {
          var $a, self = this;

          
          
          if (options == null) options = $hash2([], {});;
          if (!$truthy(source['$end_with?']("\n"))) {
            source = $rb_plus(source, "\n")
          };
          $a = [source, filename, options.$dup()], (self.source = $a[0]), (self.filename = $a[1]), (self.options = $a[2]), $a;
          self.cache = $send(self.options, 'delete', ["cache"], function $$1(){
            return $$('Opal').$cache()}, 0);
          self.requires = [];
          self.required_trees = [];
          return (self.autoloads = []);
        }, -3);
        self.$attr_reader("source", "filename", "options", "requires", "required_trees", "autoloads");
        
        $def(self, '$to_s', function $$to_s() {
          var self = this;

          return self.$source().$to_s()
        }, 0);
        (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

          
          self.$attr_reader("extensions");
          
          $def(self, '$handles', function $$handles($a) {
            var $post_args, extensions, self = this, matches = nil;

            
            
            $post_args = Opal.slice.call(arguments);
            
            extensions = $post_args;;
            self.extensions = extensions;
            matches = extensions.$join("|");
            if (!$eqeq(extensions.$size(), 1)) {
              matches = "(" + (matches) + ")"
            };
            self.match_regexp = $$('Regexp').$new("\\." + (matches) + ($$('REGEXP_END')));
            $$$($Opal, 'Builder').$register_processor(self, extensions);
            return nil;
          }, -1);
          
          $def(self, '$match?', function $match$ques$2(other) {
            var self = this, $ret_or_1 = nil;

            if ($truthy(($ret_or_1 = other['$is_a?']($$('String'))))) {
              return other.$match(self.$match_regexp())
            } else {
              return $ret_or_1
            }
          }, 1);
          return $def(self, '$match_regexp', function $$match_regexp() {
            var self = this, $ret_or_1 = nil;
            if (self.match_regexp == null) self.match_regexp = nil;

            if ($truthy(($ret_or_1 = self.match_regexp))) {
              return $ret_or_1
            } else {
              return self.$raise($$('NotImplementedError'))
            }
          }, 0);
        })(Opal.get_singleton_class(self), $nesting);
        return $def(self, '$mark_as_required', function $$mark_as_required(filename) {
          
          return "Opal.loaded([" + (filename.$to_s().$inspect()) + "]);"
        }, 1);
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsProcessor');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.source_map = $proto.source = $proto.filename = nil;
        
        self.$handles("js");
        $const_set($nesting[0], 'ManualFragment', $$('Struct').$new("line", "column", "code", "source_map_name"));
        
        $def(self, '$source_map', function $$source_map() {
          var self = this, $ret_or_1 = nil, manual_fragments = nil;

          return (self.source_map = ($truthy(($ret_or_1 = self.source_map)) ? ($ret_or_1) : (((manual_fragments = $send(self.$source().$each_line().$with_index(), 'map', [], function $$3(line_source, index){var column = nil, line = nil;

            
            
            if (line_source == null) line_source = nil;;
            
            if (index == null) index = nil;;
            column = line_source.$index(/\S/);
            line = $rb_plus(index, 1);
            return $$('ManualFragment').$new(line, column, line_source, nil);}, 2)), $$$($$$($Opal, 'SourceMap'), 'File').$new(manual_fragments, self.$filename(), self.$source())))))
        }, 0);
        return $def(self, '$source', function $$source() {
          var self = this;

          return $rb_plus(self.source.$to_s(), self.$mark_as_required(self.filename))
        }, 0);
      })($nesting[0], $$('Processor'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RubyProcessor');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.compiled = $proto.cache = $proto.filename = $proto.source = $proto.options = nil;
        
        self.$handles("rb", "opal");
        
        $def(self, '$source', function $$source() {
          var self = this;

          return self.$compiled().$result()
        }, 0);
        
        $def(self, '$source_map', function $$source_map() {
          var self = this;

          return self.$compiled().$source_map()
        }, 0);
        
        $def(self, '$compiled', function $$compiled() {
          var self = this, $ret_or_1 = nil;

          return (self.compiled = ($truthy(($ret_or_1 = self.compiled)) ? ($ret_or_1) : ($send($$$($$('Opal'), 'Cache'), 'fetch', [self.cache, self.$cache_key()], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s, compiler = nil;
            if (self.source == null) self.source = nil;
            if (self.filename == null) self.filename = nil;

            
            compiler = self.$compiler_for(self.source, $hash2(["file"], {"file": self.filename}));
            compiler.$compile();
            return compiler;}, {$$arity: 0, $$s: self}))))
        }, 0);
        
        $def(self, '$cache_key', function $$cache_key() {
          var self = this;

          return [self.$class(), self.filename, self.source, self.options]
        }, 0);
        
        $def(self, '$compiler_for', function $$compiler_for(source, options) {
          var self = this;

          
          
          if (options == null) options = $hash2([], {});;
          return $$$($Opal, 'Compiler').$new(source, self.options.$merge(options));
        }, -2);
        
        $def(self, '$requires', function $$requires() {
          var self = this;

          return self.$compiled().$requires()
        }, 0);
        
        $def(self, '$required_trees', function $$required_trees() {
          var self = this;

          return self.$compiled().$required_trees()
        }, 0);
        
        $def(self, '$autoloads', function $$autoloads() {
          var self = this;

          return self.$compiled().$autoloads()
        }, 0);
        return $defs(self, '$match?', function $RubyProcessor_match$ques$5(other) {
          var $yield = $RubyProcessor_match$ques$5.$$p || nil, self = this, $ret_or_1 = nil;

          delete $RubyProcessor_match$ques$5.$$p;
          if ($truthy(($ret_or_1 = $send2(self, $find_super(self, 'match?', $RubyProcessor_match$ques$5, false, true), 'match?', [other], $yield)))) {
            return $ret_or_1
          } else {
            return $$('File').$extname(other.$to_s())['$==']("")
          }
        }, 1);
      })($nesting[0], $$('Processor'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'OpalERBProcessor');

        var $proto = self.$$prototype;

        $proto.source = $proto.filename = nil;
        
        self.$handles("opalerb");
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, args, $yield = $$initialize.$$p || nil, self = this;

          delete $$initialize.$$p;
          
          
          $post_args = Opal.slice.call(arguments);
          
          args = $post_args;;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a(args), $yield);
          return (self.source = self.$prepare(self.source, self.filename));
        }, -1);
        
        $def(self, '$requires', function $$requires() {
          var $yield = $$requires.$$p || nil, self = this;

          delete $$requires.$$p;
          return $rb_plus(["erb"], $send2(self, $find_super(self, 'requires', $$requires, false, true), 'requires', [], $yield))
        }, 0);
        self.$private();
        return $def(self, '$prepare', function $$prepare(source, path) {
          
          return $$$($$$($Opal, 'ERB'), 'Compiler').$new(source, path).$prepared_source()
        }, 2);
      })($nesting[0], $$('RubyProcessor'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'ERBProcessor');

        var $proto = self.$$prototype;

        $proto.source = $proto.filename = nil;
        
        self.$handles("erb");
        return $def(self, '$source', function $$source() {
          var self = this, result = nil, module_name = nil;

          
          result = $$$('ERB').$new(self.source.$to_s()).$result();
          module_name = $$$($Opal, 'Compiler').$module_name(self.filename);
          return "Opal.modules[" + (module_name.$inspect()) + "] = function() {" + (result) + "};";
        }, 0);
      })($nesting[0], $$('Processor'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["base64"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $defs = Opal.defs, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs('raise,delete');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Base64');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    var encode, decode;

    // encoder
    // [https://gist.github.com/999166] by [https://github.com/nignag]
    encode = function (input) {
      var str = String(input);
      /* eslint-disable */
      for (
        // initialize result and counter
        var block, charCode, idx = 0, map = chars, output = '';
        // if the next str index does not exist:
        //   change the mapping table to "="
        //   check if d has no fractional digits
        str.charAt(idx | 0) || (map = '=', idx % 1);
        // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
        output += map.charAt(63 & block >> 8 - idx % 1 * 8)
      ) {
        charCode = str.charCodeAt(idx += 3/4);
        if (charCode > 0xFF) {
          self.$raise($$('ArgumentError'), "invalid character (failed: The string to be encoded contains characters outside of the Latin1 range.)");
        }
        block = block << 8 | charCode;
      }
      return output;
      /* eslint-enable */
    };

    // decoder
    // [https://gist.github.com/1020396] by [https://github.com/atk]
    decode = function (input) {
      var str = String(input).replace(/=+$/, '');
      if (str.length % 4 == 1) {
        self.$raise($$('ArgumentError'), "invalid base64 (failed: The string to be decoded is not correctly encoded.)");
      }
      /* eslint-disable */
      for (
        // initialize result and counters
        var bc = 0, bs, buffer, idx = 0, output = '';
        // get next character
        buffer = str.charAt(idx++);
        // character found in table? initialize bit storage and add its ascii value;
        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
          // and if not first of each 4 characters,
          // convert the first 8 bits to one ascii character
          bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
      ) {
        // try to find character in table (0-63, not found => -1)
        buffer = chars.indexOf(buffer);
      }
      return output;
      /* eslint-enable */
    };
  ;
    $defs(self, '$decode64', function $$decode64(string) {
      
      return decode(string.replace(/\r?\n/g, ''));
    }, 1);
    $defs(self, '$encode64', function $$encode64(string) {
      
      return encode(string).replace(/(.{60})/g, "$1\n").replace(/([^\n])$/g, "$1\n");
    }, 1);
    $defs(self, '$strict_decode64', function $$strict_decode64(string) {
      
      return decode(string);
    }, 1);
    $defs(self, '$strict_encode64', function $$strict_encode64(string) {
      
      return encode(string);
    }, 1);
    $defs(self, '$urlsafe_decode64', function $$urlsafe_decode64(string) {
      
      return decode(string.replace(/\-/g, '+').replace(/_/g, '/'));
    }, 1);
    return $defs(self, '$urlsafe_encode64', function $$urlsafe_encode64(string, $kwargs) {
      var padding, str = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      padding = $kwargs.$$smap["padding"];
      if (padding == null) padding = true;
      str = encode(string).replace(/\+/g, '-').replace(/\//g, '_');
      if (!$truthy(padding)) {
        str = str.$delete("=")
      };
      return str;
    }, -2);
  })($nesting[0], $nesting)
};

Opal.modules["corelib/pack_unpack/format_string_parser"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $Kernel = Opal.Kernel;

  Opal.add_stubs('raise');
  return (function($base) {
    var self = $module($base, 'PackUnpack');

    
    
    var directives = [
      // Integer
      'C',
      'S',
      'L',
      'Q',
      'J',

      'c',
      's',
      'l',
      'q',
      'j',

      'n',
      'N',
      'v',
      'V',

      'U',
      'w',

      // Float
      'D',
      'd',
      'F',
      'f',
      'E',
      'e',
      'G',
      'g',

      // String
      'A',
      'a',
      'Z',
      'B',
      'b',
      'H',
      'h',
      'u',
      'M',
      'm',

      'P',
      'p',

      // Misc
      '@',
      'X',
      'x'
    ];

    var modifiers = [
      '!', // ignored
      '_', // ignored
      '>', // big endian
      '<'  // little endian
    ];

    self.eachDirectiveAndCount = function(format, callback) {
      var currentDirective,
          currentCount,
          currentModifiers,
          countSpecified;

      function reset() {
        currentDirective = null;
        currentCount = 0;
        currentModifiers = [];
        countSpecified = false;
      }

      reset();

      function yieldAndReset() {
        if (currentDirective == null) {
          reset();
          return;
        }

        var directiveSupportsModifiers = /[sSiIlLqQjJ]/.test(currentDirective);

        if (!directiveSupportsModifiers && currentModifiers.length > 0) {
          $Kernel.$raise($$$('ArgumentError'), "'" + (currentModifiers[0]) + "' allowed only after types sSiIlLqQjJ")
        }

        if (currentModifiers.indexOf('<') !== -1 && currentModifiers.indexOf('>') !== -1) {
          $Kernel.$raise($$$('RangeError'), "Can't use both '<' and '>'")
        }

        if (!countSpecified) {
          currentCount = 1;
        }

        if (currentModifiers.indexOf('>') !== -1) {
          currentDirective = currentDirective + '>';
        }

        callback(currentDirective, currentCount);

        reset();
      }

      for (var i = 0; i < format.length; i++) {
        var currentChar = format[i];

        if (directives.indexOf(currentChar) !== -1) {
          // Directive char always resets current state
          yieldAndReset();
          currentDirective = currentChar;
        } else if (currentDirective) {
          if (/\d/.test(currentChar)) {
            // Count can be represented as a sequence of digits
            currentCount = currentCount * 10 + parseInt(currentChar, 10);
            countSpecified = true;
          } else if (currentChar === '*' && countSpecified === false) {
            // Count can be represented by a star character
            currentCount = Infinity;
            countSpecified = true;
          } else if (modifiers.indexOf(currentChar) !== -1 && countSpecified === false) {
            // Directives can be specified only after directive and before count
            currentModifiers.push(currentChar);
          } else {
            yieldAndReset();
          }
        }
      }

      yieldAndReset();
    }
  
  })('::')
};

Opal.modules["corelib/string/unpack"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $Kernel = Opal.Kernel, $hash2 = Opal.hash2, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $Opal = Opal.Opal, $rb_gt = Opal.rb_gt, $def = Opal.def;

  Opal.add_stubs('require,flatten,decode64,raise,<,delete,gsub,coerce_to!,>,length,inspect,[],unpack');
  
  self.$require("base64");
  self.$require("corelib/pack_unpack/format_string_parser");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), expected = nil, given = nil;

    
    
    // Format Parser
    var eachDirectiveAndCount = Opal.PackUnpack.eachDirectiveAndCount;

    function flattenArray(callback) {
      return function(data) {
        var array = callback(data);
        return (array).$flatten();
      }
    }

    function mapChunksToWords(callback) {
      return function(data) {
        var chunks = callback(data);

        return chunks.map(function(chunk) {
          return chunk.reverse().reduce(function(result, singleByte) {
            return result * 256 + singleByte;
          }, 0);
        });
      }
    }

    function chunkBy(chunkSize, callback) {
      return function(data) {
        var array = callback(data),
            chunks = [],
            chunksCount = (array.length / chunkSize);

        for (var i = 0; i < chunksCount; i++) {
          var chunk = array.splice(0, chunkSize);
          if (chunk.length === chunkSize) {
            chunks.push(chunk);
          }
        }

        return chunks;
      }
    }

    function toNByteSigned(bytesCount, callback) {
      return function(data) {
        var unsignedBits = callback(data),
            bitsCount = bytesCount * 8,
            limit = Math.pow(2, bitsCount);

        return unsignedBits.map(function(n) {
          if (n >= limit / 2) {
            n -= limit;
          }

          return n;
        });
      }
    }

    function bytesToAsciiChars(callback) {
      return function(data) {
        var bytes = callback(data);

        return bytes.map(function(singleByte) {
          return String.fromCharCode(singleByte);
        });
      }
    }

    function joinChars(callback) {
      return function(data) {
        var chars = callback(data);
        return chars.join('');
      }
    }

    function wrapIntoArray(callback) {
      return function(data) {
        var object = callback(data);
        return [object];
      }
    }

    function filterTrailingChars(chars) {
      var charCodesToFilter = chars.map(function(s) { return s.charCodeAt(0); });

      return function(callback) {
        return function(data) {
          var charCodes = callback(data);

          while (charCodesToFilter.indexOf(charCodes[charCodes.length - 1]) !== -1) {
            charCodes = charCodes.slice(0, charCodes.length - 1);
          }

          return charCodes;
        }
      }
    }

    var filterTrailingZerosAndSpaces = filterTrailingChars(["\u0000", " "]);

    function invertChunks(callback) {
      return function(data) {
        var chunks = callback(data);

        return chunks.map(function(chunk) {
          return chunk.reverse();
        });
      }
    }

    function uudecode(callback) {
      return function(data) {
        var bytes = callback(data);

        var stop = false;
        var i = 0, length = 0;

        var result = [];

        do {
          if (i < bytes.length) {
            var n = bytes[i] - 32 & 0x3F;

            ++i;

            if (bytes[i] === 10) {
              continue;
            }

            if (n > 45) {
              return '';
            }

            length += n;

            while (n > 0) {
              var c1 = bytes[i];
              var c2 = bytes[i + 1];
              var c3 = bytes[i + 2];
              var c4 = bytes[i + 3];

              var b1 = (c1 - 32 & 0x3F) << 2 | (c2 - 32 & 0x3F) >> 4;
              var b2 = (c2 - 32 & 0x3F) << 4 | (c3 - 32 & 0x3F) >> 2;
              var b3 = (c3 - 32 & 0x3F) << 6 | c4 - 32 & 0x3F;

              result.push(b1 & 0xFF);
              result.push(b2 & 0xFF);
              result.push(b3 & 0xFF);

              i += 4;
              n -= 3;
            }

            ++i;
          } else {
            break;
          }
        } while (true);

        return result.slice(0, length);
      }
    }

    function toBits(callback) {
      return function(data) {
        var bytes = callback(data);

        var bits = bytes.map(function(singleByte) {
          return singleByte.toString(2);
        });

        return bits;
      }
    }

    function decodeBERCompressedIntegers(callback) {
      return function(data) {
        var bytes = callback(data), result = [], buffer = '';

        for (var i = 0; i < bytes.length; i++) {
          var singleByte = bytes[i],
              bits = singleByte.toString(2);

          bits = Array(8 - bits.length + 1).join('0').concat(bits);

          var firstBit = bits[0];
          bits = bits.slice(1, bits.length);

          buffer = buffer.concat(bits);

          if (firstBit === '0') {
            var decoded = parseInt(buffer, 2);
            result.push(decoded);
            buffer = ''
          }
        }

        return result;
      }
    }

    function base64Decode(callback) {
      return function(data) {
        return $$('Base64').$decode64(callback(data));
      }
    }

    // quoted-printable decode
    function qpdecode(callback) {
      return function(data) {
        var string = callback(data);

        return string
          .replace(/[\t\x20]$/gm, '')
          .replace(/=(?:\r\n?|\n|$)/g, '')
          .replace(/=([a-fA-F0-9]{2})/g, function($0, $1) {
            var codePoint = parseInt($1, 16);
            return String.fromCharCode(codePoint);
          });
      }
    }

    function identityFunction(value) { return value; }

    var handlers = {
      // Integer
      'C': identityFunction,
      'S': mapChunksToWords(chunkBy(2, identityFunction)),
      'L': mapChunksToWords(chunkBy(4, identityFunction)),
      'Q': mapChunksToWords(chunkBy(8, identityFunction)),
      'J': null,

      'S>': mapChunksToWords(invertChunks(chunkBy(2, identityFunction))),
      'L>': mapChunksToWords(invertChunks(chunkBy(4, identityFunction))),
      'Q>': mapChunksToWords(invertChunks(chunkBy(8, identityFunction))),

      'c': toNByteSigned(1, identityFunction),
      's': toNByteSigned(2, mapChunksToWords(chunkBy(2, identityFunction))),
      'l': toNByteSigned(4, mapChunksToWords(chunkBy(4, identityFunction))),
      'q': toNByteSigned(8, mapChunksToWords(chunkBy(8, identityFunction))),
      'j': null,

      's>': toNByteSigned(2, mapChunksToWords(invertChunks(chunkBy(2, identityFunction)))),
      'l>': toNByteSigned(4, mapChunksToWords(invertChunks(chunkBy(4, identityFunction)))),
      'q>': toNByteSigned(8, mapChunksToWords(invertChunks(chunkBy(8, identityFunction)))),

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': identityFunction,
      'w': decodeBERCompressedIntegers(identityFunction),

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': wrapIntoArray(joinChars(bytesToAsciiChars(filterTrailingZerosAndSpaces(identityFunction)))),
      'a': wrapIntoArray(joinChars(bytesToAsciiChars(identityFunction))),
      'Z': joinChars(bytesToAsciiChars(identityFunction)),
      'B': joinChars(identityFunction),
      'b': joinChars(identityFunction),
      'H': joinChars(identityFunction),
      'h': joinChars(identityFunction),
      'u': joinChars(bytesToAsciiChars(uudecode(identityFunction))),
      'M': qpdecode(joinChars(bytesToAsciiChars(identityFunction))),
      'm': base64Decode(joinChars(bytesToAsciiChars(identityFunction))),

      'P': null,
      'p': null
    };

    function readBytes(n) {
      return function(bytes) {
        var chunk = bytes.slice(0, n);
        bytes = bytes.slice(n, bytes.length);
        return { chunk: chunk, rest: bytes };
      }
    }

    function readUnicodeCharChunk(bytes) {
      var currentByteIndex = 0;
      var bytesLength = bytes.length;
      function readByte() {
        var result = bytes[currentByteIndex++];
        bytesLength = bytes.length - currentByteIndex;
        return result;
      }

      var c = readByte(), extraLength;

      if (c >> 7 == 0) {
        // 0xxx xxxx
        return { chunk: [c], rest: bytes.slice(currentByteIndex) };
      }

      if (c >> 6 == 0x02) {
        $Kernel.$raise($$$('ArgumentError'), "malformed UTF-8 character")
      }

      if (c >> 5 == 0x06) {
        // 110x xxxx (two bytes)
        extraLength = 1;
      } else if (c >> 4 == 0x0e) {
        // 1110 xxxx (three bytes)
        extraLength = 2;
      } else if (c >> 3 == 0x1e) {
        // 1111 0xxx (four bytes)
        extraLength = 3;
      } else if (c >> 2 == 0x3e) {
        // 1111 10xx (five bytes)
        extraLength = 4;
      } else if (c >> 1 == 0x7e) {
        // 1111 110x (six bytes)
        extraLength = 5;
      } else {
        $Kernel.$raise("malformed UTF-8 character")
      }

      if (extraLength > bytesLength) {
        ((expected = extraLength + 1), (given = bytesLength + 1), $Kernel.$raise($$$('ArgumentError'), "malformed UTF-8 character (expected " + (expected) + " bytes, given " + (given) + " bytes)"))
      }

      // Remove the UTF-8 prefix from the char
      var mask = (1 << (8 - extraLength - 1)) - 1,
          result = c & mask;

      for (var i = 0; i < extraLength; i++) {
        c = readByte();

        if (c >> 6 != 0x02) {
          $Kernel.$raise("Invalid multibyte sequence")
        }

        result = (result << 6) | (c & 0x3f);
      }

      if (result <= 0xffff) {
        return { chunk: [result], rest: bytes.slice(currentByteIndex) };
      } else {
        result -= 0x10000;
        var high = ((result >> 10) & 0x3ff) + 0xd800,
            low = (result & 0x3ff) + 0xdc00;
        return { chunk: [high, low], rest: bytes.slice(currentByteIndex) };
      }
    }

    function readUuencodingChunk(buffer) {
      var length = buffer.indexOf(32); // 32 = space

      if (length === -1) {
        return { chunk: buffer, rest: [] };
      } else {
        return { chunk: buffer.slice(0, length), rest: buffer.slice(length, buffer.length) };
      }
    }

    function readNBitsLSBFirst(buffer, count) {
      var result = '';

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            bitsToTake = Math.min(count, 8),
            bytesToTake = Math.ceil(bitsToTake / 8);

        buffer = buffer.slice(1, buffer.length);

        if (singleByte != null) {
          var bits = singleByte.toString(2);
          bits = Array(8 - bits.length + 1).join('0').concat(bits).split('').reverse().join('');

          for (var j = 0; j < bitsToTake; j++) {
            result += bits[j] || '0';
            count--;
          }
        }
      }

      return { chunk: [result], rest: buffer };
    }

    function readNBitsMSBFirst(buffer, count) {
      var result = '';

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            bitsToTake = Math.min(count, 8),
            bytesToTake = Math.ceil(bitsToTake / 8);

        buffer = buffer.slice(1, buffer.length);

        if (singleByte != null) {
          var bits = singleByte.toString(2);
          bits = Array(8 - bits.length + 1).join('0').concat(bits);

          for (var j = 0; j < bitsToTake; j++) {
            result += bits[j] || '0';
            count--;
          }
        }
      }

      return { chunk: [result], rest: buffer };
    }

    function readWhileFirstBitIsOne(buffer) {
      var result = [];

      for (var i = 0; i < buffer.length; i++) {
        var singleByte = buffer[i];

        result.push(singleByte);

        if ((singleByte & 128) === 0) {
          break;
        }
      }

      return { chunk: result, rest: buffer.slice(result.length, buffer.length) };
    }

    function readTillNullCharacter(buffer, count) {
      var result = [];

      for (var i = 0; i < count && i < buffer.length; i++) {
        var singleByte = buffer[i];

        if (singleByte === 0) {
          break;
        } else {
          result.push(singleByte);
        }
      }

      if (count === Infinity) {
        count = result.length;
      }

      if (buffer[count] === 0) {
        count++;
      }

      buffer = buffer.slice(count, buffer.length);

      return { chunk: result, rest: buffer };
    }

    function readHexCharsHighNibbleFirst(buffer, count) {
      var result = [];

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            hex = singleByte.toString(16);

        buffer = buffer.slice(1, buffer.length);
        hex = Array(2 - hex.length + 1).join('0').concat(hex);

        if (count === 1) {
          result.push(hex[0]);
          count--;
        } else {
          result.push(hex[0], hex[1]);
          count -= 2;
        }
      }

      return { chunk: result, rest: buffer };
    }

    function readHexCharsLowNibbleFirst(buffer, count) {
      var result = [];

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            hex = singleByte.toString(16);

        buffer = buffer.slice(1, buffer.length);
        hex = Array(2 - hex.length + 1).join('0').concat(hex);

        if (count === 1) {
          result.push(hex[1]);
          count--;
        } else {
          result.push(hex[1], hex[0]);
          count -= 2;
        }
      }

      return { chunk: result, rest: buffer };
    }

    function readNTimesAndMerge(callback) {
      return function(buffer, count) {
        var chunk = [], chunkData;

        if (count === Infinity) {
          while (buffer.length > 0) {
            chunkData = callback(buffer);
            buffer = chunkData.rest;
            chunk = chunk.concat(chunkData.chunk);
          }
        } else {
          for (var i = 0; i < count; i++) {
            chunkData = callback(buffer);
            buffer = chunkData.rest;
            chunk = chunk.concat(chunkData.chunk);
          }
        }

        return { chunk: chunk, rest: buffer };
      }
    }

    function readAll(buffer, count) {
      return { chunk: buffer, rest: [] };
    }

    var readChunk = {
      // Integer
      'C': readNTimesAndMerge(readBytes(1)),
      'S': readNTimesAndMerge(readBytes(2)),
      'L': readNTimesAndMerge(readBytes(4)),
      'Q': readNTimesAndMerge(readBytes(8)),
      'J': null,

      'S>': readNTimesAndMerge(readBytes(2)),
      'L>': readNTimesAndMerge(readBytes(4)),
      'Q>': readNTimesAndMerge(readBytes(8)),

      'c': readNTimesAndMerge(readBytes(1)),
      's': readNTimesAndMerge(readBytes(2)),
      'l': readNTimesAndMerge(readBytes(4)),
      'q': readNTimesAndMerge(readBytes(8)),
      'j': null,

      's>': readNTimesAndMerge(readBytes(2)),
      'l>': readNTimesAndMerge(readBytes(4)),
      'q>': readNTimesAndMerge(readBytes(8)),

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': readNTimesAndMerge(readUnicodeCharChunk),
      'w': readNTimesAndMerge(readWhileFirstBitIsOne),

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': readNTimesAndMerge(readBytes(1)),
      'a': readNTimesAndMerge(readBytes(1)),
      'Z': readTillNullCharacter,
      'B': readNBitsMSBFirst,
      'b': readNBitsLSBFirst,
      'H': readHexCharsHighNibbleFirst,
      'h': readHexCharsLowNibbleFirst,
      'u': readNTimesAndMerge(readUuencodingChunk),
      'M': readAll,
      'm': readAll,

      'P': null,
      'p': null
    }

    var autocompletion = {
      // Integer
      'C': true,
      'S': true,
      'L': true,
      'Q': true,
      'J': null,

      'S>': true,
      'L>': true,
      'Q>': true,

      'c': true,
      's': true,
      'l': true,
      'q': true,
      'j': null,

      's>': true,
      'l>': true,
      'q>': true,

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': false,
      'w': false,

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': false,
      'a': false,
      'Z': false,
      'B': false,
      'b': false,
      'H': false,
      'h': false,
      'u': false,
      'M': false,
      'm': false,

      'P': null,
      'p': null
    }

    var optimized = {
      'C*': handlers['C'],
      'c*': handlers['c'],
      'A*': handlers['A'],
      'a*': handlers['a'],
      'M*': wrapIntoArray(handlers['M']),
      'm*': wrapIntoArray(handlers['m']),
      'S*': handlers['S'],
      's*': handlers['s'],
      'L*': handlers['L'],
      'l*': handlers['l'],
      'Q*': handlers['Q'],
      'q*': handlers['q'],
      'S>*': handlers['S>'],
      's>*': handlers['s>'],
      'L>*': handlers['L>'],
      'l>*': handlers['l>'],
      'Q>*': handlers['Q>'],
      'q>*': handlers['q>']
    }

    function alias(existingDirective, newDirective) {
      readChunk[newDirective] = readChunk[existingDirective];
      handlers[newDirective] = handlers[existingDirective];
      autocompletion[newDirective] = autocompletion[existingDirective];
    }

    alias('S>', 'n');
    alias('L>', 'N');

    alias('S', 'v');
    alias('L', 'V');
  ;
    
    $def(self, '$unpack', function $$unpack(format, $kwargs) {
      var offset, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      offset = $kwargs.$$smap["offset"];
      if (offset == null) offset = 0;
      if ($truthy($rb_lt(offset, 0))) {
        $Kernel.$raise($$$('ArgumentError'), "offset can't be negative")
      };
      format = $Opal['$coerce_to!'](format, $$$('String'), "to_str").$gsub(/\s/, "").$delete("\u0000");
      
      var output = [];

      // A very optimized handler for U*.
      if (format == "U*" &&
          self.internal_encoding.name === "UTF-8" &&
          typeof self.codePointAt === "function") {

        var cp, j = 0;

        output = new Array(self.length);
        for (var i = offset; i < self.length; i++) {
          cp = output[j++] = self.codePointAt(i);
          if (cp > 0xffff) i++;
        }
        return output.slice(0, j);
      }

      var buffer = self.$bytes();

      ($truthy($rb_gt(offset, (buffer).$length())) ? ($Kernel.$raise($$$('ArgumentError'), "offset outside of string")) : nil)

      buffer = buffer.slice(offset);


      // optimization
      var optimizedHandler = optimized[format];
      if (optimizedHandler) {
        return optimizedHandler(buffer);
      }

      function autocomplete(array, size) {
        while (array.length < size) {
          array.push(nil);
        }

        return array;
      }

      function processChunk(directive, count) {
        var chunk,
            chunkReader = readChunk[directive];

        if (chunkReader == null) {
          $Kernel.$raise("Unsupported unpack directive " + ((directive).$inspect()) + " (no chunk reader defined)")
        }

        var chunkData = chunkReader(buffer, count);
        chunk = chunkData.chunk;
        buffer = chunkData.rest;

        var handler = handlers[directive];

        if (handler == null) {
          $Kernel.$raise("Unsupported unpack directive " + ((directive).$inspect()) + " (no handler defined)")
        }

        return handler(chunk);
      }

      eachDirectiveAndCount(format, function(directive, count) {
        var part = processChunk(directive, count);

        if (count !== Infinity) {
          var shouldAutocomplete = autocompletion[directive];

          if (shouldAutocomplete == null) {
            $Kernel.$raise("Unsupported unpack directive " + ((directive).$inspect()) + " (no autocompletion rule defined)")
          }

          if (shouldAutocomplete) {
            autocomplete(part, count);
          }
        }

        output = output.concat(part);
      });

      return output;
    ;
    }, -2);
    return $def(self, '$unpack1', function $$unpack1(format, $kwargs) {
      var offset, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      offset = $kwargs.$$smap["offset"];
      if (offset == null) offset = 0;
      format = $Opal['$coerce_to!'](format, $$$('String'), "to_str").$gsub(/\s/, "").$delete("\u0000");
      return self.$unpack(format['$[]'](0), $hash2(["offset"], {"offset": offset}))['$[]'](0);
    }, -2);
  })('::', null, $nesting);
};

Opal.modules["opal-builder"] = function(Opal) {/* Generated by Opal 1.4.0 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("opal/builder");
  self.$require("opal/builder_processors");
  return self.$require("corelib/string/unpack");
};
